# -*- coding: latin-1 -*-
import locale
import os
from datetime import datetime, timedelta, date,time
from decimal import Decimal
from django.contrib.auth.models import User, Group
from django.contrib.admin.models import LogEntry
from django.core.exceptions import ObjectDoesNotExist
from sga.funciones import sumar_mes
from django.db import models, connection
from django.db.models import F
from django.db.models.aggregates import Sum, Avg
import time
from django.db.models.query_utils import Q
# from ext.models import *
import unicodedata
import psycopg2
from settings import CLASES_HORARIO_ESTRICTO, CLASES_APERTURA_ANTES, CLASES_APERTURA_DESPUES, ARCHIVO_TIPO_SYLLABUS, ARCHIVO_TIPO_DEBERES, NOTA_TIPO_N1, \
    NOTA_TIPO_N2, NOTA_TIPO_NO, ASIST_PARA_APROBAR, NOTA_PARA_APROBAR, ASIST_PARA_SEGUIR, PORCIENTO_NOTA1, PORCIENTO_NOTA2, PORCIENTO_NOTA3, PORCIENTO_NOTA4, \
    PORCIENTO_NOTA5, SUMA_PARA_APROBAR, UTILIZA_GRUPOS_ALUMNOS, UTILIZA_NIVEL0_PROPEDEUTICO, NOTA_ESTADO_EN_CURSO, MODELO_EVALUACION, EVALUACION_ITB, \
    EVALUACION_IAVQ, SECRETARIA_EMAIL, EVALUACION_ITS, NOTA_ESTADO_APROBADO, VALIDAR_ASISTENCIAS, NOTA_PARA_SUPLET, NOTA_ESTADO_REPROBADO, \
    NOTA_ESTADO_SUPLETORIO, TIPO_PERIODO_PROPEDEUTICO, TIPO_PERIODO_REGULAR, NIVEL_MALLA_CERO, NIVEL_MALLA_UNO, GENERAR_RUBROS_PAGO, FINANCIERO_GROUP_ID, \
    SISTEMAS_GROUP_ID, RECTORADO_GROUP_ID, ALUMNOS_GROUP_ID, TIPO_ESPECIE_RETIRO_MATRICULA, SEXO_FEMENINO, SEXO_MASCULINO, TIPO_AYUDA_FINANCIERA, \
    COEFICIENTE_RETENCION, COEFICIENTE_PORCIENTO_IESS, TIPO_INCIDENCIA_DOBE, TIPO_INCIDENCIA_SECRETARIA, EVALUACION_TES, DEFAULT_PASSWORD, EVALUACION_IGAD, \
    TIPO_CURSOS_RUBRO, TIPO_CONGRESO_RUBRO, CENTRO_EXTERNO, MODULO_FINANZAS_ACTIVO, CREDITOS_NIVEL_TES, DIA_PAGO_PLAN12, INSTRUMENTO_ALUMNO_ID, \
    INSTRUMENTO_PROFESOR_ID, INSTRUMENTO_COORDINADOR_ID, COEFICIENTE_ANTICIPO_QUINCENA, DIAS_TRABAJO, TIPO_OBSERVACION_CRITICA_ID, \
    SECRETARIAGENERAL_GROUP_ID, VICERECTORADO_GROUP_ID, EVALUACION_CASADE, COEFICIENTE_IVA, COEFICIENTE_IMPUESTO_RENTA, TIPO_BECA_SENESCYT, ASIG_VINCULACION, \
    BUCKI_GROUP_ID, INSCRIPCION_CONDUCCION, DIA_MAX_ANULA, ASIGNATURA_PRACTICA_CONDUCCION, TEST_VOCACIONAL, PROFE_PRACT_CONDUCCION, MATERIA_PRACTICA_CONDUCCION, \
    COORDINACION_ACADEMICA_UASS, VALIDA_DEUDA_MATRICULA, VALIDA_PASE_NIVEL, INCIDENCIA_BAJAMEDI, INCIDENCIA_SUSPENSION, ESTADISTICA, \
    CARRERAS_ID_EXCLUIDAS_INEC, MEDIA_ROOT, ARCHIVO_TIPO_PLANCLASE, PORCIENTO_RECUPERACION, VALIDA_PRECEDENCIA, TIPO_INCIDENCIA_VINCULACION, \
    ASISTENTE_VICERECTORADO, INCIDENCIA_SEGUIMIENTO_RUBRO, INCIDENCIA_APERTURA_CLASE, TIPO_INCIDENCIA_INGLES, VALIDA_DEUDA_EVALUACIONES, ASIG_PRATICA, \
    INCIDENCIA_PRAC_VINC, ARCHIVO_TIPO_MATERIALAPOYO, VALIDA_MATERIA_APROBADA, TIPO_INCIDENCIA_MAT_APROBADA, VALIDAR_ASISTENCIAS_EXAMEN, \
    ASIGNATURA_EXAMEN_GRADO_CONDU, TIPO_INCIDENCIA_ABSENTISMO, SITE_ROOT, PROFESORES_GROUP_ID, ASIGNATURA_SEMINARIO, UTILIZA_FICHA_MEDICA, \
    FECHA_CIERRE_SINACTA, TIPOSEGMENTO_PRACT, TIPOSEGMENTO_TEORIA, ID_TIPO_ESPECIE_REG_NOTA, DIAS_ESPECIE, ASUNT_ESTUDIANTILES, NOTA1_RECU, NOTA2_RECU, \
    NOTA3_RECU, NOTA4_RECU, EXAM_RECU, SUMA_PARA_APROBAR_RECU, ASIST_PARA_APROBAR_RECU, COORDINACION_UASSS, MIN_APROBACION, MAX_APROBACION, MIN_RECUPERACION, \
    MAX_RECUPERACION, MIN_EXAMEN, MAX_EXAMEN, MIN_EXAMENRECUPERACION, NOTA_ESTADO_DERECHOEXAMEN, ESPECIE_ASENTAMIENTO_NOTA, ESPECIE_EXAMEN, \
    ESPECIE_RECUPERACION, NOTIFICACION_CIERRE, DIAS_BLOQUEO_NOTAS, NIVEL_SEMINARIO, DIAS_BLOQUEO_EJECUTIVO, DIAS_BLOQUEO_MATERIA, MULTA24H, MULTA48H, \
    MULTA4DIAS, NOTIFICACION_MULTA4DIAS, ESPECIE_MEJORAMIENTO, NOTA_NUEVA_ACTA_MIN_ONLINE, NOTA_NUEVA_ACTA_MIN_PRESEN, INICIO_DIFERIR, PORCENTAJE_DESCUENTO, \
    FIN_DIFERIR, PORCENTAJE_DESC_CUOTAS, HABILITA_APLICA_DESCUE, TIPO_NC_ANULACION, PORCENTAJE_DESCUENTO15, ID_TIPO_ESTADO_BECA, ID_FUNDACION_CRISFE, \
    TICS_GROUP_ID, HABILITA_DESC_MATRI, DESCUENTO_MATRIC_PORCENT, TIPO_INCIDENCIA_PRACPRE, URL_DEL_SISTEMA, NIVELMALLA_INICIO_PRACTICA, \
    ID_REPORTE_CARTA_ASIGNAC, NIVEL_GRADUACION, COSTO_PROFESIONALIZACION, COSTO_COMPLEXIVO, TIPO_OTRO_RUBRO, ID_TIPO_BENEFICICO_BECA, ID_TIPOBECA, \
    ID_MOTIVO_BECA_MUNICIPIO, ID_USUARIO_RUDY, INCIDENCIA_FACT, COSTO_PROFESIONALIZACION_TRANSPORTE, COORDINACION_UACED, TIPO_RUBRO_CREDENCIAL, \
    ID_MOTIVO_BECA_TEC, ID_CONVENIO_BECA_TECT, COSTO_SEGMENTO_PRACTICA, PORCENTAJE_DESCUENTO_CIERREAUTOMATICO, COORDINACION_TRANSPORTE, \
    ESPECIE_ASENTAMIENTOCONVENIO_SINVALOR, ESPECIE_ASENTAMIENTOCONVENIO_CONVALOR, TIPO_RUBRO_MATERIALAPOYO, ESPECIES_ASENTAMIENTO_NOTAS, \
    ID_MOTIVO_BECA_NUEVOECUADOR, TIPO_OTRO_FRAUDE, FORMA_PAGO_EFECTIVO, FORMA_PAGO_CHEQUE, FORMA_PAGO_TARJETA, FORMA_PAGO_DEPOSITO, FORMA_PAGO_TRANSFERENCIA, \
    FORMA_PAGO_NOTA_CREDITO, FORMA_PAGO_RECIBOCAJAINSTITUCION, FORMA_PAGO_TARJETA_DEB, FORMA_PAGO_ELECTRONICO

from sga import number_to_letter
from sga.tasks import send_html_mail, plaintext2html
from xml.etree import ElementTree
from xml.dom import minidom
from suds.client import Client
# OCU 04-07-2014 se agregó validación estudiantes activos
# inscripcion__persona__usuario__is_active=True

def elimina_tildes(cadena):
    s = ''.join((c for c in unicodedata.normalize('NFD',str(cadena)) if unicodedata.category(c) != 'Mn'))
    return s

def cantidad_inscritos(carrera,inicio,fin):
    return IngresoGuarderia.objects.filter( detalle__inscripcionguarderia__inscripcion__carrera=carrera,fechaentrada__gte=inicio, fechaentrada__lte=fin).values('detalle__inscripcionguarderia__inscripcion').distinct('detalle__inscripcionguarderia__inscripcion').count()

def cantidad_adm(inicio,fin):
    return IngresoGuarderia.objects.filter( detalle__inscripcionguarderia__tipopersona__id=1,fechaentrada__gte=inicio, fechaentrada__lte=fin).values('detalle__inscripcionguarderia__persona').distinct('detalle__inscripcionguarderia__persona').count()

def total_beneficiados(inicio,fin):
    return IngresoGuarderia.objects.filter( fechaentrada__gte=inicio, fechaentrada__lte=fin).values('detalle__inscripcionguarderia__inscripcion').distinct('detalle__inscripcionguarderia__inscripcion').count()

def total_beneficiados_adm(inicio,fin):
    return IngresoGuarderia.objects.filter( fechaentrada__gte=inicio, fechaentrada__lte=fin).values('detalle__inscripcionguarderia__persona').distinct('detalle__inscripcionguarderia__persona').count()

#OCU 25-oct-2016 conduccion
def cantidad_condu(inicio,fin):
    return IngresoGuarderia.objects.filter( detalle__inscripcionguarderia__tipopersona__id=5,fechaentrada__gte=inicio, fechaentrada__lte=fin).values('detalle__inscripcionguarderia__personaext').distinct('detalle__inscripcionguarderia__personaext').count()

def total_beneficiados_condu(inicio,fin):
    return IngresoGuarderia.objects.filter( fechaentrada__gte=inicio, fechaentrada__lte=fin,detalle__inscripcionguarderia__tipopersona=5).values('detalle__inscripcionguarderia__personaext').distinct('detalle__inscripcionguarderia__responsable').count()

#OCU 25-oct-2016 conduccion
def cantidad_otros(inicio,fin):
    return IngresoGuarderia.objects.filter( detalle__inscripcionguarderia__tipopersona__id=6,fechaentrada__gte=inicio, fechaentrada__lte=fin).values('detalle__inscripcionguarderia__personaext').distinct('detalle__inscripcionguarderia__personaext').count()

def total_beneficiados_otros(inicio,fin):
    return IngresoGuarderia.objects.filter( fechaentrada__gte=inicio, fechaentrada__lte=fin,detalle__inscripcionguarderia__tipopersona=6).values('detalle__inscripcionguarderia__personaext').distinct('detalle__inscripcionguarderia__responsable').count()

def registro_edades(inicio,fin,num):
    return  [x for x in IngresoGuarderia.objects.filter(fechaentrada__gte=inicio, fechaentrada__lte=fin).values('detalle').distinct('detalle') if  datetime.now().year - DetalleInscGuarderia.objects.get(pk=x['detalle']).fechanacimiento.year  == num ]

def total_matriculados():
    return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True,inscripcion__persona__usuario__is_active=True).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()


def total_matriculadosfil(fechainicio,fechafin):
    return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()


def total_matriculadosfilnullprovin(fechainicio,fechafin):
    return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,inscripcion__persona__provincia= None,fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

def total_matriculadosfilnullcanton(fechainicio,fechafin):
    return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,inscripcion__persona__canton= None,fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()


def total_matriculadosfilcantonporcent(fechainicio,fechafin):
    return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,fecha__gte=fechainicio,fecha__lte=fechafin,inscripcion__persona__canton=None).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()/float(float(total_matriculadosfil(fechainicio,fechafin)))*100

def total_matriculadosprovinporcent():
    return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,inscripcion__persona__provincia=None).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()/float(total_matriculados())*100

def total_matriculadoscantonporcent():
    return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,inscripcion__persona__canton=None).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()/float(total_matriculados())*100


def total_matriculadosfilprovinporcent(fechainicio,fechafin):
    return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,fecha__gte=fechainicio,fecha__lte=fechafin,inscripcion__persona__provincia=None).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()/float(total_matriculadosfil(fechainicio,fechafin))*100

def inscritos_anuncio(fechainicio,fechafin,anuncio,carrera):
    return Inscripcion.objects.filter(fecha__gte=fechainicio,fecha__lte=fechafin,anuncio=anuncio,carrera=carrera).exclude(id__in = CARRERAS_ID_EXCLUIDAS_INEC).count()

def siono(v):
    return "SI" if v else "NO"

def DiaSemana(fechas):
    import datetime
    a = int(str(fechas).split('-')[0])
    m = int(str(fechas).split('-')[1])
    d = int(str(fechas).split('-')[2][0:2])
    dicDias = {'MONDAY': 'Lunes', 'TUESDAY': 'Martes', 'WEDNESDAY': 'Miercoles', 'THURSDAY': 'Jueves', 'FRIDAY': 'Viernes', 'SATURDAY': 'Sabado', 'SUNDAY': 'Domingo'}
    fecha = datetime.date(a, m, d)
    dia = dicDias[fecha.strftime('%A').upper()]
    return dia

class ActiveManager(models.Manager):
    def get_query_set(self):
        return CustomQuerySet(self.model, using=self._db)

class Provincia(models.Model):
    """Listado de Provincias"""
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Provincia"
        verbose_name_plural = "Provincias"
        ordering = ['nombre']

    @staticmethod
    def flexbox_query(q):
        return Provincia.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

    # OCU 04-07-2014 se agregó validación estudiantes activos
    def cantidad_matriculados(self):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True,inscripcion__persona__usuario__is_active=True, inscripcion__persona__provincia=self).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculadosfil(self, fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True,inscripcion__persona__usuario__is_active=True, inscripcion__persona__provincia=self, fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculadosfilnull(self, fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True,inscripcion__persona__usuario__is_active=True, inscripcion__persona__provincia=None, fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def porciento_matriculados(self):
        return self.cantidad_matriculados()/float(total_matriculados())*100

    def porciento_matriculadosfil(self,fechainicio,fechafin):
        return self.cantidad_matriculadosfil(fechainicio,fechafin)/float(total_matriculadosfil(fechainicio,fechafin))*100

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Provincia, self).save(force_insert, force_update, using, update_fields)

class Canton(models.Model):
    """Listado de Cantones"""
    nombre = models.CharField(max_length=100)
    provincia = models.ForeignKey(Provincia, on_delete=models.CASCADE)

    def __str__(self):
        # if self.provincia_id:
        #     return  str(self.provincia) + " - " + self.nombre
        return  self.nombre

    class Meta:
        verbose_name = "Canton"
        verbose_name_plural = "Cantones"
        ordering = ['nombre']

    @staticmethod
    def flexbox_query(q):
        return Canton.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

    def cantidad_matriculados(self):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__canton=self).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculadosfil(self,fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__canton=self,fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def porciento_matriculados(self):
        return self.cantidad_matriculados()/float(total_matriculados())*100

    def porciento_matriculadosfil(self,fechainicio,fechafin):
        return self.cantidad_matriculadosfil(fechainicio,fechafin)/float(total_matriculadosfil(fechainicio,fechafin))*100

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Canton, self).save(force_insert, force_update, using, update_fields)

class Sexo(models.Model):
    """Listado de Generos (sexos)"""
    nombre = models.CharField(max_length=100)
    codigodatabooks=models.IntegerField(null=True, blank=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Sexo"
        verbose_name_plural = "Sexos"
    # OCU 04-07-2014 se agregó validacion
    # inscripcion__persona__usuario__is_active=True
    def cantidad_matriculados(self):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,inscripcion__persona__sexo=self).count()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Sexo, self).save(force_insert, force_update, using, update_fields)

    #Para Estadisticas Graficos Bienestar
    def cantidad_estudiantes_sexo(self,anno,edad):
        inicio=datetime.strptime('01-01-'+str(anno[2:4]), '%d-%m-%y').date()
        fin=datetime.strptime('31-12-'+str(anno[2:4]), '%d-%m-%y').date()
        edad=edad
        hoy = inicio.year
        lista_estd=[]
        estudiantes = Inscripcion.objects.filter(persona__sexo=self,persona__personaextension__estadocivil__id=2,persona__usuario__is_active=True,fecha__gte=inicio, fecha__lte=fin).exclude(carrera__id__in = CARRERAS_ID_EXCLUIDAS_INEC).values('persona__nacimiento')
        for est in estudiantes:
            if hoy - est['persona__nacimiento'].year < int(edad):
                lista_estd.append(est)
        return len(lista_estd)

class TipoSangre(models.Model):
    """Listado de Tipos de Sangre"""
    sangre = models.CharField(max_length=4)

    def __str__(self):
        return self.sangre

    class Meta:
        verbose_name = "Tipo de Sangre"
        verbose_name_plural = "Tipos de Sangre"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.sangre = self.sangre.upper()
        super(TipoSangre, self).save(force_insert, force_update, using, update_fields)

class Parroquia(models.Model):
    nombre = models.CharField(max_length=100)
    canton = models.ForeignKey(Canton, on_delete=models.CASCADE)

    def __str__(self):
        # if self.canton_id:
        #     return str(self.canton) + " - " + self.nombre
        return self.nombre

    class Meta:
        verbose_name = "Parroquia"
        verbose_name_plural = "Parroquias"
        ordering = ['nombre']

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Parroquia, self).save(force_insert, force_update, using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return Parroquia.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

class Pais(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Pais"
        verbose_name_plural = "Paises"
        ordering = ['nombre']

    @staticmethod
    def flexbox_query(q):
        return Pais.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Pais, self).save(force_insert, force_update, using, update_fields)

class Nacionalidad(models.Model):
    nombre = models.CharField(max_length=100)
    emoticon = models.CharField(max_length=10, blank=True, null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Nacionalidad"
        verbose_name_plural = "Nacionalidades"
        ordering = ['nombre']

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Nacionalidad, self).save(force_insert, force_update, using, update_fields)

class Sector(models.Model):
    nombre = models.CharField(max_length=100)
    parroquia = models.ForeignKey(Parroquia, on_delete=models.CASCADE)

    def __str__(self):
        # if self.parroquia:
        #     return str(self.parroquia) + " - " + self.nombre
        return  self.nombre


    @staticmethod
    def flexbox_query(q):
        return Pais.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Sector, self).save(force_insert, force_update, using, update_fields)

class Persona(models.Model):
    """Perfil de Persona, todos los usuarios del sistema tienen un registro"""
    nombres = models.CharField(max_length=100)
    apellido1 = models.CharField(max_length=100, verbose_name="1er Apellido")
    apellido2 = models.CharField(max_length=100, verbose_name="2do Apellido", blank=True, null=True)

    extranjero = models.BooleanField(default=False)

    cedula = models.CharField(max_length=13, verbose_name="Cedula", blank=True, null=True)
    pasaporte = models.CharField(max_length=15, verbose_name=u"Pasaporte", blank=True, null=True)

    # nacionalidad = models.CharField(max_length=100, blank=True, null=True)
    nacionalidad = models.ForeignKey(Nacionalidad, blank=True, null=True, on_delete=models.CASCADE)

    nacimiento = models.DateField(verbose_name=u"Fecha de Nacimiento", blank=True, null=True)
    provincia = models.ForeignKey(Provincia, verbose_name=u"Provincia de Nacimiento", blank=True, null=True, on_delete=models.CASCADE)
    canton = models.ForeignKey(Canton, verbose_name=u"Canton de Nacimiento", blank=True, null=True, on_delete=models.CASCADE)
    sexo = models.ForeignKey(Sexo, blank=True, null=True, on_delete=models.CASCADE)

    madre = models.CharField(max_length=100, blank=True, null=True)
    padre = models.CharField(max_length=100, blank=True, null=True)

    direccion = models.CharField(max_length=100, verbose_name=u"Calle Principal", blank=True, null=True)
    direccion2 = models.CharField(max_length=100, verbose_name=u"Calle Secundaria", blank=True,null=True)
    num_direccion = models.CharField(max_length=15, verbose_name=u"Numero", blank=True,null=True)
    sector = models.CharField(max_length=100, verbose_name=u"Sector de Residencia", blank=True, null=True)
    provinciaresid = models.ForeignKey(Provincia, related_name=u"Provincia de Residencia+", verbose_name=u"Provincia de Residencia", blank=True, null=True, on_delete=models.CASCADE)
    cantonresid = models.ForeignKey(Canton, related_name=u"Canton de Residencia+",verbose_name=u"Canton de Residencia", blank=True, null=True, on_delete=models.CASCADE)
    ciudad = models.CharField(max_length=100, verbose_name=u"Ciudad de Residencia", blank=True, null=True)
    parroquia = models.ForeignKey(Parroquia, verbose_name=u"Parroquia", blank=True, null=True, on_delete=models.CASCADE)
    sectorresid = models.ForeignKey(Sector, verbose_name=u"Sector", blank=True, null=True, on_delete=models.CASCADE)
    telefono = models.CharField(max_length=50, verbose_name=u"Telefonos Moviles", blank=True, null=True)
    telefono_conv = models.CharField(max_length=50, verbose_name=u"Telefonos Fijos", blank=True, null=True)
    email = models.CharField(max_length=200,blank=True, null=True, verbose_name="Correos Electronicos")
    email1 = models.CharField(max_length=200,blank=True, null=True, verbose_name="Correos Electronicos")
    email2 = models.CharField(max_length=200,blank=True, null=True, verbose_name="Correos Electronicos")
    emailinst = models.CharField(max_length=200,blank=True, null=True, verbose_name="Correo Institucional")
    usuario = models.ForeignKey(User,null=True, on_delete=models.CASCADE)
    sangre = models.ForeignKey(TipoSangre, verbose_name="Tipo de Sangre", blank=True, null=True, on_delete=models.CASCADE)
    reestablecer = models.BooleanField(default=False)
    codigo = models.CharField(max_length=50, blank=True, null=True)
    fecha_res = models.DateTimeField(blank=True, null=True)
    activedirectory = models.BooleanField(default=False)
    cambioclavad = models.BooleanField(default=False)
    fechaultimactualizaciondatabook =models.DateField(blank=True,null=True)
    aceptaprotecciondatos = models.BooleanField(default=False)
    fechaceptaprotecciondatos = models.DateTimeField(blank=True,null=True)
    estadocivilid=models.IntegerField(null=True, blank=True)

    def evaluadodecano(self,periodo):
        if EvaluacionCargoPeriodo.objects.filter(personaevaluada=self,finalizado=True, evaluaciondocente=periodo).exists():
            return True

    def calificacion_decano(self, periodo):
        if EvaluacionCargoPeriodo.objects.filter(personaevaluada=self, finalizado=True,
                                                 evaluaciondocente=periodo).exists():
            evaluaciondecano = EvaluacionCargoPeriodo.objects.filter(personaevaluada=self, finalizado=True,evaluaciondocente=periodo)[:1].get()
            calificacion = DetalleEvaluacionCargo.objects.filter(evaluacion=evaluaciondecano).aggregate(total_puntaje=Sum('respuesta__respuesta__puntaje'))['total_puntaje']
            return calificacion


        # if DetalleEvaluacionCargo.objects.filter(evaluacion=evaluaciondecano).exists():
            #     for d in DetalleEvaluacionCargo.objects.filter(evaluacion=evaluaciondecano):





    def prestamo_inst_sin_cancelar(self):
        return self.prestamoinstitucional_set.filter(cancelado=False)

    def es_coordinador(self):
        if CoordinadorCarreraPeriodo.objects.filter(persona=self).exists():
            return True
        return False

    def documentos_sin_entregar(self):
        cantidadsinentregar = 0
        if self.prestamodocumento_set.filter(documento__fisico=True, recibido=False).exists():
            for d in self.prestamodocumento_set.filter(documento__fisico=True, recibido=False):
                if not d.tiempo_restante():
                    cantidadsinentregar+=1
        return cantidadsinentregar

    @staticmethod
    def flexbox_query(q):
        if ' ' in q:
            s = q.split(" ")
            return Persona.objects.filter(Q(apellido1__contains=s[0])&Q(apellido2__contains=s[1])).exclude(usuario__groups__id=ALUMNOS_GROUP_ID).order_by('apellido1','apellido2','nombres')
        else:
            return Persona.objects.filter(Q(nombres__contains=q)|Q(apellido1__contains=q)|Q(apellido2__contains=q)|Q(cedula__contains=q)).exclude(usuario__groups__id=ALUMNOS_GROUP_ID).exclude(usuario__groups__id=SISTEMAS_GROUP_ID).order_by('apellido1','apellido2','nombres')

    @staticmethod
    def flexbox_query_2(q):
        if ' ' in q:
            s = q.split(" ")
            return Persona.objects.filter(Q(apellido1__contains=s[0])&Q(apellido2__contains=s[1])).order_by('apellido1','apellido2','nombres')
        else:
            return Persona.objects.filter(Q(nombres__contains=q)|Q(apellido1__contains=q)|Q(apellido2__contains=q)|Q(cedula__contains=q)).order_by('apellido1','apellido2','nombres')
    @staticmethod
    def flexbox_queryadm(q):
        if ' ' in q:
            s = q.split(" ")
            return Persona.objects.filter(Q(apellido1__contains=s[0])&Q(apellido2__contains=s[1])).exclude(usuario__groups__id=ALUMNOS_GROUP_ID).order_by('apellido1','apellido2','nombres')
        else:
            return Persona.objects.filter(Q(nombres__contains=q)|Q(apellido1__contains=q)|Q(apellido2__contains=q)|Q(cedula__contains=q)).exclude(usuario__groups__id=ALUMNOS_GROUP_ID).exclude(usuario__groups__id=SISTEMAS_GROUP_ID).exclude(usuario__groups__id=PROFESORES_GROUP_ID).order_by('apellido1','apellido2','nombres')

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return 'DOCENTE - ' + str(self) if Profesor.objects.filter(persona=self).exists() else 'ADMIN - ' + str(self)

    def activo(self):
        return self.usuario.is_active

    def puede_recibir_pagos(self):
        """Indica si esta persona puede trabajar en la Caja de Recaudacion"""
        return self.lugarrecaudacion_set.filter(activa=True).exists() and self.lugarrecaudacion_set.filter(activa=True)[:1].get().esta_abierta()

    def datos_incompletos(self):
        """Indica si la Persona aun tiene datos por ingresar"""
        if self.extranjero:
            return not self.nombres or not self.apellido1 or not self.apellido2 or \
                not self.pasaporte or not self.nacimiento or not self.sexo or \
                not self.provincia or not self.canton or not self.nacionalidad or \
                not self.padre or not self.madre or \
                not self.direccion or not self.num_direccion or \
                not self.sectorresid or not self.telefono or not self.email
        else:
            return not self.nombres or not self.apellido1 or not self.apellido2 or \
                not self.cedula or not self.nacimiento or not self.sexo or \
                not self.provincia or not self.canton or not self.nacionalidad or \
                not self.padre or not self.madre or \
                not self.direccion or not self.num_direccion or \
                not self.sectorresid  or not self.telefono or not self.email

    def valoracion_medica_incompleta(self):
        if not self.personaextension_set.all().exists():
            from med.models import PersonaExamenFisico, PersonaFichaMedica, PersonaExtension
            pe = PersonaExtension(persona=self)
            pe.save()
            pfm = PersonaFichaMedica(personaextension=pe)
            pfm.save()
            pef = PersonaExamenFisico(personafichamedica=pfm,usalentes=False)
            pef.save()
        else:
            pe = self.personaextension_set.all()[:1].get()
            pfm = pe.personafichamedica_set.all()[:1].get()
            if pfm.personaexamenfisico_set.all().exists():
                pef = pfm.personaexamenfisico_set.all()[:1].get()
            else:
                from med.models import PersonaExamenFisico
                pef = PersonaExamenFisico(personafichamedica=pfm,usalentes=False)
                pef.save()

        if not pef.inspeccion or not pef.peso or not pef.talla or not pef.pa or not pef.pulso or not pef.rcar or not pef.rresp or not pef.temp or not pef.observaciones: return True
        if pef.usalentes and not pef.motivo: return True
        return False

    def direccion_completa(self):
        return (self.direccion + (" " if self.direccion2 else "") if self.direccion else "") + (self.direccion2 if self.direccion2 else "")

    def existen_datos_medicos(self):
        if self.personaextension_set.exists():
            ficha = self.personaextension_set.all()[:1].get()
            return ficha
        return False

    def datos_medicos_incompletos(self):
        """Indica si la persona ha llenado todos sus datos medicos"""
        por_llenar=[]

        if not self.personaextension_set.all().exists():
            from med.models import PersonaExamenFisico, PersonaFichaMedica, PersonaExtension
            pe = PersonaExtension(persona=self)
            pe.save()
            pfm = PersonaFichaMedica(personaextension=pe)
            pfm.save()
            pef = PersonaExamenFisico(personafichamedica=pfm,usalentes=False)
            pef.save()
        else:
            pe = self.personaextension_set.all()[:1].get()
            pfm = pe.personafichamedica_set.all()[:1].get()
        #OCastillo 09-07-2018 cambia la funcion para presentar que datos faltan de llenar
        if pfm.vacunas and not pfm.nombrevacunas:
            por_llenar.append('Nombre Vacunas')
            # return True
        if pfm.enfermedades and not pfm.nombreenfermedades:
            por_llenar.append('Nombre Enfermedades')
            # return True
        if pfm.alergiamedicina and not pfm.nombremedicinas:
            por_llenar.append('Nombre Medicinas')
            # return True
        if pfm.alergiaalimento and not pfm.nombrealimentos:
            por_llenar.append('Nombre Alergias')
            # return True
        if pfm.cirugias and not pfm.nombrecirugia:
            por_llenar.append('Nombre Cirugias')
            # return True
        if pfm.aparato and not pfm.tipoaparato:
            por_llenar.append('Tipo Aparato Ortopedico')
            # return True
        if pfm.gestacion and (pfm.partos is None or pfm.abortos is None or pfm.cesareas is None or pfm.hijos2 is None):
            por_llenar.append('Informacion de Embarazos')
            # return True
        if pfm.cigarro and not pfm.numerocigarros:
            por_llenar.append('Cantidad Cigarrillos')
            # return True
        if pfm.tomaalcohol and (not pfm.tipoalcohol or pfm.copasalcohol is None):
            por_llenar.append('Tipo Alcohol y/o Numero copas')
            # return True
        if pfm.tomaantidepresivos and not pfm.antidepresivos:
            por_llenar.append('Nombre antidepresivos')
            # return True
        if pfm.tomaotros and not pfm.otros:
            por_llenar.append('Nombre otras Medicinas')
            # return True
        if pfm.horassueno is None:
            por_llenar.append('Horas Sueno')
            # return True
        if por_llenar:
            return por_llenar
        else:
            return False

    def get_apellidos(self):
        return f"{self.apellido1.lower().capitalize()} {self.apellido2.lower().capitalize()}".strip()

    def get_nombres(self):
        s = [x.lower().capitalize() for x in self.nombres.split(" ")]
        return " ".join(s)

    def get_identificacion(self):
        if self.cedula:
            return self.cedula
        elif self.pasaporte:
            return self.pasaporte
        return ''

    def nombre_completo(self):
        return "%s %s %s"%(self.nombres, self.apellido1, self.apellido2)

    def nombre_completo_inverso(self):
        return "%s %s %s"%(self.apellido1, self.apellido2, self.nombres)

    def nombre_completo_simple(self):
        return "%s %c."%(self.nombres, self.apellido1[0])

    def nombre_minus(self):
        try:
            nombreslist = self.nombres.split(' ')
            nombrepersona = self.nombres.capitalize()
            if len(nombreslist) == 2:
                nombrepersona = '{} {}'.format(str(nombreslist[0]).capitalize(), str(nombreslist[1]).capitalize())
                return u'%s' % (nombrepersona)
            elif len(nombreslist) == 3:
                nombrepersona = '{} {} {}'.format(str(nombreslist[0]).capitalize(), str(nombreslist[1]).capitalize(),
                                                  str(nombreslist[2]).capitalize())
                return u'%s' % (nombrepersona)
            else:
                return u'%s' % (nombrepersona)
        except Exception as ex:
            return self.nombres.capitalize()

    def nombre_normal_minus(self):
        try:
            nombreslist = self.nombres.split(' ')
            nombrepersona = '{} {}'.format(str(nombreslist[0]).capitalize(), self.apellido1.capitalize())
            return u'%s' % (nombrepersona)
        except Exception as ex:
            return self.nombres.capitalize()

    def nombre_completo_minus(self):
        apellido1list = self.apellido1.split(' ')
        apellido1 = self.apellido1.capitalize()
        if len(apellido1list) == 2:
            apellido1 = '{} {}'.format(str(apellido1list[0]).capitalize(), str(apellido1list[1]).capitalize())
        elif len(apellido1list) == 3:
            apellido1 = '{} {} {}'.format(str(apellido1list[0]).capitalize(), str(apellido1list[1]).capitalize(),
                                          str(apellido1list[2]).capitalize())
        apellido2list = self.apellido2.split(' ')
        apellido2 = self.apellido2.capitalize()
        if len(apellido2list) == 2:
            apellido2 = '{} {}'.format(str(apellido2list[0]).capitalize(), str(apellido2list[1]).capitalize())
        elif len(apellido2list) == 3:
            apellido2 = '{} {} {}'.format(str(apellido2list[0]).capitalize(), str(apellido2list[1]).capitalize(),
                                          str(apellido2list[2]).capitalize())
        completo = '{} {} {}'.format(str(self.nombre_minus()), str(apellido1), str(apellido2))
        return u'%s' % (completo)

    def documento(self):
        if self.cedula:
            return self.cedula
        elif self.pasaporte:
            return self.pasaporte
        else:
            return ''

    def tipo_documento(self):
        if self.cedula:
            return 'Cédula'
        elif self.pasaporte:
            return 'Pasaporte'
        else:
            return ''

    def edad(self):
        hoy = datetime.now().date()
        try:
            nac = self.nacimiento
            edad = hoy.year - nac.year
            if nac.replace(year=hoy.year)>hoy:
                edad-=1
            return edad
        except:
            return 0

    def datos_matriz(self):
        if self.personadatosmatriz_set.exists():
            pdm = self.personadatosmatriz_set.all()[:1].get()
        else:
            pdm = PersonaDatosMatriz(persona=self)
            pdm.save()
        return pdm

    def __str__(self):
        if self.cedula:
            return self.apellido1 + " "+self.apellido2 + " "+ self.nombres + " (" + self.cedula + ")"
        return str(self.apellido1)+" "+str(self.apellido2)+" "+str(self.nombres)

    class Meta:
        verbose_name = "Persona"
        verbose_name_plural = "Personal"
        ordering = ['apellido1']

    def foto(self):
        if self.fotopersona_set.all().exists():
            return self.fotopersona_set.all()[:1].get()
        return None

    def fotoprof(self):
        if self.fotopersonaprof_set.all().exists():
            return self.fotopersonaprof_set.all()[:1].get()
        return None

    def borrar_foto(self):
        fotos = FotoPersona.objects.filter(persona=self)
        fotos.delete()

    def borrar_fotoprof(self):
        fotos = FotoPersonaProf.objects.filter(persona=self)
        fotos.delete()

    def cv(self):
        if self.cvpersona_set.all().exists():
            return self.cvpersona_set.all()[:1].get()
        return None

    def borrar_cv(self):
        cv = CVPersona.objects.filter(persona=self)
        cv.delete()

    def emails(self):
        return self.email.split(",") if self.email else "@"

    def inscripcion(self):
        inscripcion = Inscripcion.objects.filter(persona=self)
        if inscripcion.exists():
            return inscripcion.filter()[:1].get()
        return None

    def profesor(self):
        return self.profesor_set.all()[:1].get() if self.profesor_set.exists() else None

    def administrativos(self):
        if Persona.objects.filter(id = self.id,usuario__is_active=True).exclude(usuario__groups__id__in=[PROFESORES_GROUP_ID,ALUMNOS_GROUP_ID,SISTEMAS_GROUP_ID]).exists():
            return Persona.objects.filter(id = self.id,usuario__is_active=True).exclude(usuario__groups__id__in=[PROFESORES_GROUP_ID,ALUMNOS_GROUP_ID,SISTEMAS_GROUP_ID])[:1].get()
        else:
            return False

    def es_administrativo(self):
        if Persona.objects.filter(id = self.id,usuario__is_active=True).exclude(usuario__groups__id__in=[PROFESORES_GROUP_ID,ALUMNOS_GROUP_ID]).exists():
            return Persona.objects.filter(id = self.id,usuario__is_active=True).exclude(usuario__groups__id__in=[PROFESORES_GROUP_ID,ALUMNOS_GROUP_ID])[:1].get()
        else:
            return False

    def en_grupo(self, grupo):
        return self.usuario.groups.filter(id=grupo).exists()

    def puede_ver_ingresos(self):
        return self.usuario.groups.filter(id__in=[VICERECTORADO_GROUP_ID, RECTORADO_GROUP_ID, SISTEMAS_GROUP_ID, FINANCIERO_GROUP_ID, SECRETARIAGENERAL_GROUP_ID,COORDINACION_ACADEMICA_UASS,ESTADISTICA,ASISTENTE_VICERECTORADO]).exists()

    def puede_justificar_sinfechas(self):
        return self.usuario.groups.filter(id__in=[VICERECTORADO_GROUP_ID, RECTORADO_GROUP_ID, SISTEMAS_GROUP_ID]).exists()

    def puede_editar_ingles(self):
        return self.usuario.groups.filter(id=BUCKI_GROUP_ID).exists()

    def incidencias_pendientes(self):
        if self.en_grupo(RECTORADO_GROUP_ID) or self.en_grupo(SISTEMAS_GROUP_ID):
            return Incidencia.objects.filter(cerrada=False).count()
        else:
            return Incidencia.objects.filter(tipo__responsable=self, cerrada=False).count()

    def prestamo_persona(self):
        return self.prestamodocumento_set.all().count()

    def mail_subject_reestablecer_clave(self,email,persona,clavenueva,fecha,client_address):
        try:
            tituloinst = TituloInstitucion.objects.filter()[:1].get()

        except :
            tituloinst = None
        send_html_mail("Reestablecer Clave del Sistema Academico",
                       "emails/reestablecer_clave.html",
                       {'t':tituloinst,'p':persona,'c':clavenueva,'f':fecha,'ip':client_address}, [email])

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombres = elimina_tildes(self.nombres.upper().strip())
        self.apellido1 = elimina_tildes(self.apellido1.upper().strip())
        self.apellido2 = elimina_tildes(self.apellido2.upper().strip())
        if self.pasaporte:
            self.pasaporte = self.pasaporte.upper().strip()
        if self.madre:
            self.madre = self.madre.upper().strip()
        if self.padre:
            self.padre = self.padre.upper().strip()
        if self.direccion:
            self.direccion = self.direccion.upper().strip()
        if self.direccion2:
            self.direccion2 = self.direccion2.upper().strip()
        if self.sector:
            self.sector = self.sector.upper().strip()
        if self.ciudad:
            self.ciudad = self.ciudad.upper().strip()
        # if self.nacionalidad:
        #     self.nacionalidad = self.nacionalidad.upper().strip()
        if self.email:
            self.email = self.email.lower()
        if self.email1:
            self.email1 = self.email1.lower()
        if self.email2:
            self.email2 = self.email2.lower()
        if self.emailinst:
            self.emailinst = self.emailinst.lower()
        if self.cedula:
            self.cedula = self.cedula
        super(Persona, self).save(force_insert, force_update, using, update_fields)
        # self.cargar_notificaciones()

    def cargar_notificaciones(self):
        try:
            grupos = self.usuario.groups.all()
            notificaciones = Notificacion.objects.filter()
            for notificacion in notificaciones:
                if not NotificacionPersona.objects.filter(notificacion=notificacion, persona=self).exists():
                    if notificacion.grupos.split(',') in grupos.values_list('id'):
                        NotificacionPersona(notificacion=notificacion, persona=self).save()
        except Exception as e:
            print(e)

    def atencion(self):
        if AtencionCliente.objects.filter(persona=self).exists():
            return AtencionCliente.objects.get(persona=self)

    def edad_actual(self):
        try:
            if (datetime.now().date().month == self.nacimiento.month and datetime.now().date().day < self.nacimiento.day) or (datetime.now().date().month < self.nacimiento.month):
                anios = (datetime.now().year - 1) - self.nacimiento.year
            else:
                anios = datetime.now().year - self.nacimiento.year

            return  anios
        except:
            return 0

    def persona_carreracoordina(self,periodo):
        return CoordinadorCarrera.objects.filter(persona=self,periodo=periodo)

    def puede_editar_asuntos_estudiantiles(self):
        return self.usuario.groups.filter(id__in=ASUNT_ESTUDIANTILES).exists()

    def pendientesfecha(self,fechai,fechaf):
        fechaf = convertir_fecha(fechaf)+timedelta(hours=23,minutes=59)
        total=0
        if GestionTramite.objects.filter(profesor=self,fechaasignacion__gte=fechai,fechaasignacion__lte=fechaf,finalizado=False).exists():
            total =  GestionTramite.objects.filter(profesor=self,fechaasignacion__gte=fechai,fechaasignacion__lte=fechaf,finalizado=False).count()
        return total

    def gestion72Hfecha(self,fechai,fechaf):
        fechaf = convertir_fecha(fechaf)+timedelta(hours=23,minutes=59)
        c=0
        for ges in  GestionTramite.objects.filter(profesor=self,fechaasignacion__gte=fechai,fechaasignacion__lte=fechaf,finalizado=True):
            dias_espera = (datetime.now()-ges.fechaasignacion).days
            h_espera=(dias_espera*24)
            segundos_espera = (datetime.now()-ges.fechaasignacion).seconds
            h_espera2 = int(segundos_espera/3600)
            horas_totales=h_espera+h_espera2
            if horas_totales > 72:
                c = c+1
        return c

    def atendidosfecha(self,fechai,fechaf):
        fechaf = convertir_fecha(fechaf)+timedelta(hours=23,minutes=59)
        total=0
        if GestionTramite.objects.filter(profesor=self,fechaasignacion__gte=fechai,fechaasignacion__lte=fechaf,fecharespuesta__gte=fechai,fecharespuesta__lte=fechaf,finalizado=True).exists():
            total=GestionTramite.objects.filter(profesor=self,fechaasignacion__gte=fechai,fechaasignacion__lte=fechaf,fecharespuesta__gte=fechai,fecharespuesta__lte=fechaf,finalizado=True).count()
        return total

    def hatencionfecha(self,fechai,fechaf):
        fechaf = convertir_fecha(fechaf)+timedelta(hours=23,minutes=59)
        totalhoras=0
        for ges in GestionTramite.objects.filter(profesor=self,fechaasignacion__gte=fechai,fechaasignacion__lte=fechaf,fecharespuesta__gte=fechai,fecharespuesta__lte=fechaf,finalizado=True):
            h_espera=0
            h_espera2=0
            dias_espera = (ges.fecharespuesta-ges.fechaasignacion).days
            h_espera=(dias_espera*24)
            segundos_espera = (ges.fecharespuesta-ges.fechaasignacion).seconds
            h_espera2 = int(segundos_espera/3600)
            if dias_espera<0:
                h_espera=0
                if segundos_espera<3600:
                    minut_espera2 = int(segundos_espera/60)
                    if minut_espera2<10:
                        minutos_termina = str('0'+'.'+'0'+str( minut_espera2))
                        h_espera2=Decimal(minutos_termina).quantize(Decimal(10) ** -2)
                    else:
                        minutos_termina = str('0'+'.'+str( minut_espera2))
                        h_espera2=Decimal(minutos_termina).quantize(Decimal(10) ** -2)
            totalhoras+=(h_espera+h_espera2)
        return totalhoras

    def pertenece_soporte(self):
        return self.usuario.groups.filter(id__in=[57,79]).exists()

    def pertenece_vinculacion(self):
        return self.usuario.groups.filter(id__in=[162, 56]).exists()

    #OCastillo 17-08-2022 asignacion a Joseph requerimientos tipo correo y pagina web
    #OCastillo 10-09-2024 asignacion a Jose Antonio Alvarado requerimientos tipo correo y pagina web
    def pertenece_soporte_bandeja(self):
        # return self.usuario.groups.filter(id__in=[79]).exists()
        return self.usuario.id==103174


    def pertenece_practicas(self):
        return self.usuario.groups.filter(id=153).exists()

    def pertenece_secretaria(self):
        pertenece=False
        if self.usuario.groups.filter(id=4).exists():
            pertenece=True
        if self.usuario.groups.filter(id=15).exists():
            pertenece=True
        if self.usuario.groups.filter(id=34).exists():
            pertenece=True

        #sistemas
        if self.usuario.groups.filter(id=1).exists():
            pertenece=True
        return pertenece

    def pertenece_jefeadmision(self):
        return self.usuario.groups.filter(id=27).exists()

    def pertenece_admision(self):
        return self.usuario.groups.filter(id=8).exists()

    def pertenece_asuntos(self):
        pertenece = False
        if self.usuario.groups.filter(id=65).exists():
            pertenece = True
        if self.usuario.groups.filter(id=64).exists():
            pertenece = True
        return pertenece

    def pertenece_convenioapol(self):
        return self.usuario.groups.filter(id=167).exists()

    def pertenece_administrativos(self):
        return self.usuario.groups.filter(id=28).exists()

    def pertenece_talento(self):
        return self.usuario.groups.filter(id=40).exists()

    def consulta_responsable(self,bodega):
        if ResponsableBodegaConsultorio.objects.filter(medico=self,bodega=bodega,activa=True).exists():
            return True
        return False

    def pertenece_coordinacionuass(self):
        return self.usuario.groups.filter(id=2).exists()

    def pertenece_documentosvinculacion(self):
        return self.usuario.groups.filter(id=135).exists()

    def pertenece_soporte_sistema(self):
        return self.usuario.groups.filter(id=(SISTEMAS_GROUP_ID)).exists()

    def identificacion(self):
        if self.cedula:
            return self.cedula
        elif self.pasaporte:
            return self.pasaporte
        elif self.ruc:
            return self.ruc
        return ''

    def tipo_identificacion(self):
        if self.cedula:
            return 'C'
        elif self.pasaporte:
            return 'P'
        elif self.ruc:
            return 'R'
        return ''

    def tipo_identificacion_completo(self):
        if self.cedula:
            return 'CEDULA'
        elif self.pasaporte:
            return 'PASAPORTE'
        elif self.ruc:
            return 'RUC'
        return ''


class TituloPersona(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    titulo = models.CharField(max_length=100)
    cargo = models.CharField(max_length=100)

    def __str__(self):
        return self.titulo+" "+self.persona.nombre_completo()

    class Meta:
        verbose_name = "Titulo Referencia Persona"
        verbose_name_plural = "Titulos de Referencia de Persona"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.titulo = self.titulo.upper()
        super(TituloPersona, self).save(force_insert, force_update, using, update_fields)

class FotoPersona(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    foto = models.FileField(upload_to='fotos/%Y/%m/%d', max_length=200)

    def __str__(self):
        return "Foto "+str(self.persona)

    class Meta:
        verbose_name = "Foto"
        verbose_name_plural = "Fotos"

    def download_foto(self):
        return self.foto.url

class CVPersona(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    cv = models.FileField(upload_to='cv/%Y/%m/%d', max_length=200)

    def __str__(self):
        return "CV "+str(self.persona)

    class Meta:
        verbose_name = "Curriculum"
        verbose_name_plural = "Curriculums"

    def download_cv(self):
        return self.cv.url

class TipoColegio(models.Model):
    nombre = models.CharField(max_length=300)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "TipoColegio"
        verbose_name_plural = "TipoColegios"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoColegio, self).save(force_insert, force_update, using, update_fields)

class Colegio(models.Model):
    nombre = models.CharField(max_length=300)
    provincia = models.ForeignKey(Provincia, verbose_name=u"Provincia", blank=True, null=True, on_delete=models.CASCADE)
    canton = models.ForeignKey(Canton, verbose_name=u"Canton", blank=True, null=True, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoColegio, verbose_name=u"Tipo Colegio", blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Colegio"
        verbose_name_plural = "Colegios"
        ordering = ['nombre']

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Colegio, self).save(force_insert, force_update, using, update_fields)

    def __str__(self):
        if self.nombre:
            return self.nombre+" - "+self.provincia.nombre+" - "+self.canton.nombre+" - "+self.tipo.nombre
        else:
            return self.nombre

    def tiene_colegio(self):
        return Inscripcion.objects.filter(estcolegio=self).exists()

    @staticmethod
    def flexbox_query(q):
        return Colegio.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

class Especialidad(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Especialidad"
        verbose_name_plural = "Especialidades"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Especialidad, self).save(force_insert, force_update, using, update_fields)

class Alumno(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    colegio = models.ForeignKey(Colegio, on_delete=models.CASCADE)
    especialidad = models.ForeignKey(Especialidad, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.persona) + " ["+str(self.especialidad)+"]"

    def nombre_completo(self):
        return self.persona.nombre_completo()

    class Meta:
        verbose_name = "Alumno"
        verbose_name_plural = "Alumnos"

class Asignatura(models.Model):
    nombre = models.CharField(max_length=100)
    precedencia = models.ManyToManyField('Asignatura', blank=True)
    codigo = models.CharField(max_length=30, null=True, blank=True)
    creditos = models.IntegerField(null=True, blank=True)
    promedia = models.BooleanField()
    asistencia = models.BooleanField(verbose_name="No Abre Clase")
    sin_malla = models.BooleanField(verbose_name="Sin Malla")
    titulacion = models.BooleanField(verbose_name="Titulacion")
    nivelacion = models.BooleanField(verbose_name="Nivelacion")
    testingreso = models.BooleanField(verbose_name="Test Ingreso", default=False)

    def __str__(self):
        return self.nombre + (" ["+self.codigo+"]" if self.codigo else "")

    def cantidad_dependencias(self):
        return self.precedencia.count()

    def disponible_periodo(self, periodo):
        return Materia.objects.filter(asignatura=self, nivel__periodo=periodo).exists()

    def horas(self):
        return self.creditos * 16 if self.creditos else 0

    def tienepreguntas(self,idcar):
        if PreguntaAsignatura.objects.filter(asignatura=self,carrera__id=idcar).exists():
            return True
        else:
            return False

    class Meta:
        verbose_name = "Asignatura"
        verbose_name_plural = "Asignaturas"
        ordering = ["nombre"]

    def numerosiguiente(self,car):
        if PreguntaAsignatura.objects.filter(asignatura=self,carrera__id=car).exists():
            return PreguntaAsignatura.objects.filter(asignatura=self,carrera__id=car).values('numero').distinct('numero').order_by('-numero')[:1].get()['numero']+1
        return 1

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        self.codigo = self.codigo.upper()
        super(Asignatura, self).save(force_insert,force_update,using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return Asignatura.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return self.nombre+ (" ["+self.codigo+"]" if self.codigo else "")


MONTH_NAMES = ["ENERO", "FEBRERO", "MARZO", "ABRIL", "MAYO", "JUNIO",
               "JULIO", "AGOSTO", "SEPTIEMBRE", "OCTUBRE",
               "NOVIEMBRE", "DICIEMBRE"]

MONTH_CHOICES = (
    (1, "ENERO"),
    (2, "FEBRERO"),
    (3, "MARZO"),
    (4, "ABRIL"),
    (5, "MAYO"),
    (6, "JUNIO"),
    (7, "JULIO"),
    (8, "AGOSTO"),
    (9, "SEPTIEMBRE"),
    (10, "OCTUBRE"),
    (11, "NOVIEMBRE"),
    (12, "DICIEMBRE")
)

class TipoPeriodo(models.Model):
    """Tipos de Periodos"""
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Periodo"
        verbose_name_plural = "Tipos de Periodos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoPeriodo, self).save(force_insert=force_insert, force_update=force_update, using=using, update_fields=update_fields)

class Periodo(models.Model):
    """Periodo Lectivo"""
    nombre = models.CharField(max_length=200)
    inicio = models.DateField()
    fin = models.DateField()
    activo = models.BooleanField(blank=True, null=True)
    tipo = models.ForeignKey(TipoPeriodo, on_delete=models.CASCADE)

    def __str__(self):
        if CENTRO_EXTERNO:
            return str(self.tipo)
        else:
            return str(self.tipo)+" "+self.nombre + ": "+self.inicio.strftime('%d-%m-%Y')+" a "+self.fin.strftime('%d-%m-%Y')

    class Meta:
        verbose_name = "Periodo Lectivo"
        verbose_name_plural = "Periodos Lectivos"

    @staticmethod
    def flexbox_query(q):
        return Periodo.objects.filter(Q(nombre__contains=q)).distinct()

    @staticmethod
    def flexbox_query_2(q):
        return Periodo.objects.filter(Q(nombre__contains=q)).distinct()

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return self.nombre

    def periodo_repr(self):
        """Representacion en texto del Periodo"""
        return self.tipo.nombre+" "+MONTH_NAMES[self.inicio.month-1]+" "+str(self.inicio.year)+" a "+MONTH_NAMES[self.fin.month-1]+" "+str(self.fin.year)

    def nombre_moodle(self):
        """Representacion en texto del Periodo"""
        return MONTH_NAMES[self.inicio.month-1]+" "+str(self.inicio.year)+" - "+MONTH_NAMES[self.fin.month-1]+" "+str(self.fin.year)

    def proceso_evaluativo(self):
        if ProcesoEvaluativo.objects.filter(periodo=self).exists():
            return ProcesoEvaluativo.objects.filter(periodo=self)[:1].get()
        else:
            proceso = ProcesoEvaluativo(periodo=self,
                                        desde=self.inicio,
                                        hasta=self.fin,
                                        activado=False,
                                        rangoactivacion=False,
                                        diasactivacion=14)
            proceso.save()

            return proceso

    def puedeclonar(self):
        if CoordinadorCarreraPeriodo.objects.filter(periodo=self).exists():
            return True

    def semanas(self):
        d = self.inicio
        d = d - timedelta(d.weekday())
        semanas = []
        while d < self.fin:
            # SEMANA COMIENZA EN d
            # TERMINA en d + timedelta(4)
            semana = (d, d + timedelta(4))
            semanas.append(semana)
            d = d + timedelta(7)
        return semanas

    def periodo_evaluaciones(self):
        if PeriodoEvaluacionesIAVQ.objects.filter(periodo=self).exists():
            return PeriodoEvaluacionesIAVQ.objects.get(periodo=self)
        else:
            periodo = PeriodoEvaluacionesIAVQ(periodo=self)
            periodo.save()
            return periodo

    def es_propedeutico(self):
        return self.tipo_id!=TIPO_PERIODO_REGULAR

    def id_number_moodle(self):
        start_year = self.inicio.year
        end_year = self.fin.year
        if start_year != end_year:
            year = '%s-%s' % (start_year, end_year)
        else:
            year = '%s' % start_year
        return u'PERIODO_ID:%s(%s)' % (self.id, year)

    def criterios_periodo_tipo(self, itemTipo):
        return self.criterioperiodo_set.filter(tipocriterio=itemTipo).order_by("criterio__nombre")

    def mis_componentes(self):
        return self.evaluacioncomponenteperiodo_set.all().order_by('parcial')

    def num_componentes(self):
        return self.evaluacioncomponenteperiodo_set.all().count()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Periodo, self).save(force_insert, force_update, using, update_fields)


class Carrera(models.Model):
    nombre = models.CharField(max_length=200,verbose_name="Nombre")
    alias = models.CharField(max_length=200, blank=True,verbose_name="Alias")
    titulo = models.CharField(max_length=200, blank=True, null=True,verbose_name="Titulo")
    activo = models.BooleanField(default=False, blank=True,verbose_name="Activo")
    carrera = models.BooleanField(default=False, blank=True,verbose_name="Carrera")
    clase =  models.BooleanField(default=False, blank=True,verbose_name="Clase")
    convalidacion =  models.BooleanField(default=False, blank=True,verbose_name="Convalidacion")
    recuperacion =  models.BooleanField(default=False, blank=True,verbose_name="Recuperacion")
    vigente =  models.BooleanField(default=False, blank=True)
    validacionprofesional =  models.BooleanField(default=False, blank=True,verbose_name="Validacion Profesional")
    practica =  models.BooleanField(default=False, blank=True,verbose_name="Practica")
    codigocarrera = models.CharField(max_length=200,blank=True, null=True,verbose_name="Codigo")
    diasgestion = models.IntegerField(default=8, blank=True, null=True,verbose_name="Dias que se permiten gestion")
    online = models.BooleanField(default=False, blank=True,verbose_name="Online")
    hibrido = models.BooleanField(default=False, blank=True,verbose_name="Hibrido")
    teleclinica = models.BooleanField(default=False, blank=True, verbose_name="Teleclinica")
    def __str__(self):
        return self.nombre

    @staticmethod
    def flexbox_query(q):
        return Carrera.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return str(self)

    def id_number_moodle(self):
        return u'CARRERA_ID:%s' % self.id

    def elimina_carrera(self):
        return Malla.objects.filter(vigente=True,carrera=self).exists()
    #Metodos para Estadisticas Academicas y Financieras
    def cantidad_facturas(self):
        return Factura.objects.filter(pagos__sesion__fecha=datetime.now().today(), pagos__rubro__inscripcion__carrera=self).distinct().count() if Factura.objects.filter(pagos__sesion__fecha=datetime.now().today(), pagos__rubro__inscripcion__carrera=self).exists() else 0

    def total_pagos(self):
        return Pago.objects.filter(sesion__fecha=datetime.now().today(), rubro__inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum'] if Pago.objects.filter(sesion__fecha=datetime.now().today(), rubro__inscripcion__carrera=self).exists() else 0

    def total_pagos_fecha(self, fecha):
        if Pago.objects.filter(sesion__fecha=fecha, rubro__inscripcion__carrera=self).exists():
            pago =  Pago.objects.filter(sesion__fecha=fecha, rubro__inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum']
        else:
            pago = 0
        pagorecibo = self.total_pagosrecibo_fecha(fecha)
        pagonc = self.total_pagosncred_fecha(fecha)
        return  pago- pagorecibo -pagonc

    def total_pagosrecibo_fecha(self, fecha):
        return PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha=fecha, recibocaja__inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum'] if PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha=fecha, recibocaja__inscripcion__carrera=self).exists() else 0

    def total_pagosncred_fecha(self, fecha):
        return PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha=fecha, notacredito__inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum'] if PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha=fecha, notacredito__inscripcion__carrera=self).exists() else 0

    def total_ncpagos_fecha(self, fecha):
        return NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha=fecha, inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum'] if NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha=fecha, inscripcion__carrera=self).exists() else 0

    def total_recibo_fecha(self, fecha):
        return ReciboCajaInstitucion.objects.filter(sesioncaja__fecha=fecha, inscripcion__carrera=self).aggregate(Sum('valorinicial'))['valorinicial__sum'] if ReciboCajaInstitucion.objects.filter(sesioncaja__fecha=fecha, inscripcion__carrera=self).exists() else 0

    # Se agregó validación estudiantes activos
    # inscripcion__persona__usuario__is_active=True
    def mat_carrera(self,inicio,fin):
        #  nivel__cerrado=False, nivel__periodo__activo=True se quita por solicitud de la ing 28/05/2021 SG
        # return Matricula.objects.filter(nivel__carrera=self).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()
        return Matricula.objects.filter(nivel__carrera=self, fecha__gte=inicio, fecha__lte=fin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def mat_carrera2(self):
        return Matricula.objects.filter(nivel__carrera=self, nivel__cerrado=False,inscripcion__persona__usuario__is_active=True, nivel__periodo__activo=True).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def mat_carrera2fil(self,fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self,fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def ins_carrera(self):
        return Inscripcion.objects.filter(carrera=self, persona__usuario__is_active=True).count()

    def cantidad_facturas_fecha(self, fecha):
        return Factura.objects.filter(pagos__sesion__fecha=fecha, pagos__rubro__inscripcion__carrera=self).distinct().count() if Factura.objects.filter(pagos__sesion__fecha=fecha, pagos__rubro__inscripcion__carrera=self).exists() else 0

    def cantidad_facturas_rango_fechas(self, inicio, fin):
        return Factura.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin, pagos__rubro__inscripcion__carrera=self).distinct().count() if Factura.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin, pagos__rubro__inscripcion__carrera=self).exists() else 0

    def total_pagos_rango_fechas(self, inicio, fin):
        if Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin, rubro__inscripcion__carrera=self).exists():
            pago =  Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin, rubro__inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum']
        else :
            pago = 0
        pagorecibo = self.total_pagosrecibo_rango_fechas(inicio, fin)
        pagonc = self.total_pagosncred_rango_fechas(inicio, fin)
        return  pago- pagorecibo -pagonc

    def total_pagos_fecha2(self, fecha):
        if Pago.objects.filter(sesion__fecha=fecha, rubro__inscripcion__carrera=self).exists():
            pago = Pago.objects.filter(sesion__fecha=fecha, rubro__inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum']
        else:
            pago = 0
        return pago

    def total_pagos_rango_fechas2(self, inicio, fin):
        if Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin, rubro__inscripcion__carrera=self).exists():
            pago =  Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin, rubro__inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum']
        else :
            pago = 0
        return  pago

    def coordinadorcarr(self,periodo):
        if CoordinadorCarreraPeriodo.objects.filter(carrera=self, periodo=periodo).exists():
            coord=CoordinadorCarreraPeriodo.objects.filter(carrera=self, periodo=periodo)[:1].get()
            return coord
    # def coordinadorcarrinfo(self,periodo):
    #     if CoordinadorCarreraPeriodo.objects.filter(carrera=self, periodo=periodo).exists():
    #         coord=CoordinadorCarreraPeriodo.objects.filter(carrera=self, periodo=periodo)[:1].get()
    #         return coord.persona.id
    def total_pagosrecibo_rango_fechas(self, inicio, fin):
        return PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin,recibocaja__inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum'] if PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin, recibocaja__inscripcion__carrera=self).exists() else 0

    def total_pagosncred_rango_fechas(self, inicio, fin):
        return PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin,notacredito__inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum'] if PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin, notacredito__inscripcion__carrera=self).exists() else 0


    def total_ncpagos_rango_fechas(self, inicio, fin):
        return NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__carrera=self).aggregate(Sum('valor'))['valor__sum'] if NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__carrera=self).exists() else 0

    def total_recibo_rango_fechas(self, inicio, fin):
        return ReciboCajaInstitucion.objects.filter(sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__carrera=self).aggregate(Sum('valorinicial'))['valorinicial__sum'] if ReciboCajaInstitucion.objects.filter(sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__carrera=self).exists() else 0

    #Datos estadisticos por rango de fechas y porcientos
    def total_pagos_por_fechas(self, inicio, fin):
        return Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin).aggregate(Sum('valor'))['valor__sum'] if Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin).exists() else 0

    def cantidad_facturas_por_fechas(self, inicio, fin):
        return Factura.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin).distinct().count() if Factura.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin).exists() else 0

    def porciento_cantidad_facturas(self, inicio, fin):
        return (self.cantidad_facturas_rango_fechas(inicio,fin)/float(self.cantidad_facturas_por_fechas(inicio,fin)))*100

    def porciento_valor_pagos(self, inicio, fin):
        return (self.total_pagos_rango_fechas(inicio,fin)/self.total_pagos_por_fechas(inicio,fin))*100

    # Cantidad Deudores y valores de deudas (modelo InscripcionEstadistica)
    def valor_deudores(self):
        return  self.valor_deudores_retirados() + self.valor_deudores_inactivos() + self.valor_deudores_activos()
        # return InscripcionEstadistica.objects.filter(deuda__gt=0, inscripcion__carrera=self).aggregate(Sum('deuda'))['deuda__sum'] if InscripcionEstadistica.objects.filter(deuda__gt=0, inscripcion__carrera=self).exists() else 0

    def valor_deudores_retirados(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, retirado=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('deuda'))['deuda__sum'] if InscripcionEstadistica.objects.filter(deuda__gt=0, retirado=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def valor_deudores_inactivos(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('deuda'))['deuda__sum'] if InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def valor_deudores_activos(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=False, retirado=False, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('deuda'))['deuda__sum'] if InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=False, retirado=False, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def cantidad_deudores(self):
        return  self.cantidad_total_deudores_retirados() + self.cantidad_total_deudores_inactivos() + self.cantidad_total_deudores_activos()
        # return InscripcionEstadistica.objects.filter(deuda__gt=0, inscripcion__carrera=self).count()

    def cantidad_total_deudores_retirados(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, retirado=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_deudores_inactivos(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_deudores_activos(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=False, retirado=False, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()


    # Cantidad Creditos y valores de creditos (modelo InscripcionEstadistica)
    def valor_creditos(self):
        return  self.valor_total_creditos_retirados() + self.valor_total_creditos_inactivos() + self.valor_total_creditos_activos()
        # return InscripcionEstadistica.objects.filter(credito__gt=0, inscripcion__carrera=self).aggregate(Sum('credito'))['credito__sum'] if InscripcionEstadistica.objects.filter(credito__gt=0, inscripcion__carrera=self).exists() else 0

    def valor_total_creditos_retirados(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, retirado=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('credito'))['credito__sum'] if InscripcionEstadistica.objects.filter(credito__gt=0, retirado=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def valor_total_creditos_inactivos(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, inactivo=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('credito'))['credito__sum'] if InscripcionEstadistica.objects.filter(credito__gt=0, inactivo=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def valor_total_creditos_activos(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, retirado=False, inactivo=False, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('credito'))['credito__sum'] if InscripcionEstadistica.objects.filter(credito__gt=0, retirado=False, inactivo=False, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def cantidad_creditos(self):
        return self.cantidad_total_creditos_retirados() + self.cantidad_total_creditos_inactivos() + self.cantidad_total_creditos_activos()
        # return InscripcionEstadistica.objects.filter(credito__gt=0, inscripcion__carrera=self).count()

    def cantidad_total_creditos_retirados(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, retirado=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_creditos_inactivos(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, inactivo=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_creditos_activos(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, inactivo=False, retirado=False, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    # Cantidad y Valores Totales de Creditos y Deudas
    def valor_total_porcobrar(self):
        return self.valor_deudores() + self.valor_creditos()

    def valor_total_porcobrar_retirados(self):
        return self.valor_deudores_retirados() + self.valor_total_creditos_retirados()

    def valor_total_porcobrar_inactivos(self):
        return self.valor_deudores_inactivos() + self.valor_total_creditos_inactivos()

    def valor_total_porcobrar_activos(self):
        return self.valor_deudores_activos() + self.valor_total_creditos_activos()

    def cantidad_total_porcobrar(self):
        return  self.cantidad_total_porcobrar_retirados() + self.cantidad_total_porcobrar_inactivos()  + self.cantidad_total_porcobrar_activos()

    def cantidad_total_porcobrar_retirados(self):
        return InscripcionEstadistica.objects.filter(Q(deuda__gt=0)|Q(credito__gt=0), retirado=True,inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_porcobrar_inactivos(self):
        return InscripcionEstadistica.objects.filter(Q(deuda__gt=0)|Q(credito__gt=0), inactivo=True,inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_porcobrar_activos(self):
        return InscripcionEstadistica.objects.filter(Q(deuda__gt=0)|Q(credito__gt=0), inactivo=False, retirado=False,inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    #Datos academicos y admnistrativos
    # OCU 04-07-2014
    # Se agregó validación estudiantes activos
    def cantidad_matriculados_mujeres(self):
        return Matricula.objects.filter(inscripcion__persona__sexo=SEXO_FEMENINO, nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_hombres(self):
        return Matricula.objects.filter(inscripcion__persona__sexo=SEXO_MASCULINO, nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_sexos(self):
        return Matricula.objects.filter(Q(inscripcion__persona__sexo=SEXO_MASCULINO)|Q(inscripcion__persona__sexo=SEXO_FEMENINO), nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_beca(self):
        return Matricula.objects.filter(becado=True,nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_discapacidad(self):
        return Matricula.objects.filter(inscripcion__tienediscapacidad=True,nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_provincia(self, provincia):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__provincia=provincia, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_provincianull(self):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__provincia=None, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_provinciafil(self, provincia,fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__provincia=provincia, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self,fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_provinciafilnull(self, fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__provincia=None, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self,fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_canton(self, canton):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__canton=canton, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_cantonnull(self):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__canton=None, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_cantonfil(self, canton,fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__canton=canton, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self,fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_cantonfilnull(self, fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__canton=None, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self,fecha__gte=fechainicio,fecha__lte=fechafin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    #Matriculados por rango de edades
    def matriculados_menor_30(self):
        return InscripcionEstadistica.objects.filter(edad__gt=0, edad__lte=30, matriculado=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def matriculados_31_40(self):
        return InscripcionEstadistica.objects.filter(edad__gt=30, edad__lte=40, matriculado=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def matriculados_41_50(self):
        return InscripcionEstadistica.objects.filter(edad__gt=40, edad__lte=50, matriculado=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def matriculados_51_60(self):
        return InscripcionEstadistica.objects.filter(edad__gt=50, edad__lte=60, matriculado=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def matriculados_mayor_61(self):
        return InscripcionEstadistica.objects.filter(edad__gt=60, matriculado=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def coordinacion_pertenece(self):
        return self.coordinacion_set.all()[:1].get() if self.coordinacion_set.exists() else None

    def tiene_modalidad(self):
        return  CarreraTipoCulminacion.objects.filter(carrera=self).exists()
    class Meta:
        verbose_name = "Carrera"
        verbose_name_plural = "Carreras"
        ordering = ['nombre']

    def mat_carrera_beca(self,inicio,fin):
        return Matricula.objects.filter(becado=True,nivel__carrera=self, nivel__cerrado=False, nivel__periodo__activo=True).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()
        # return Matricula.objects.filter(nivel__carrera=self, nivel__cerrado=False, nivel__periodo__activo=True,inscripcion__fecha__gte=inicio, inscripcion__fecha__lte=fin).exclude(nivel__carrera__nombre='CONGRESO DE PEDAGOGIA').count()
    def madres_solteras(self,anno):
        inicio=datetime.strptime('01-01-'+str(anno[2:4]), '%d-%m-%y').date()
        fin=datetime.strptime('31-12-'+str(anno[2:4]), '%d-%m-%y').date()
        return Inscripcion.objects.filter(carrera=self,persona__personaextension__estadocivil__id=1,persona__usuario__is_active=True,fecha__gte=inicio, fecha__lte=fin,persona__personaextension__hijos__gt=0).exclude(persona__personaextension__conyuge=True).count()

    def madres_solteras_beca(self,anno):
        inicio=datetime.strptime('01-01-'+str(anno[2:4]), '%d-%m-%y').date()
        fin=datetime.strptime('31-12-'+str(anno[2:4]), '%d-%m-%y').date()
        return Inscripcion.objects.filter(matricula__becado=True,matricula__nivel__periodo__activo=True,carrera=self,persona__personaextension__estadocivil__id=1,persona__usuario__is_active=True,fecha__gte=inicio, fecha__lte=fin,persona__personaextension__hijos__gt=0).exclude(persona__personaextension__conyuge=True).count()

    def congreso_xanio(self,anno):
        inicio=datetime.strptime('01-01-'+str(anno[2:4]), '%d-%m-%y').date()
        fin=datetime.strptime('31-12-'+str(anno[2:4]), '%d-%m-%y').date()

        return RubroOtro.objects.filter(tipo__id=TIPO_CONGRESO_RUBRO,rubro__inscripcion__carrera=self,rubro__fecha__gte=inicio,rubro__fecha__lte=fin,rubro__cancelado=True).distinct('rubro__inscripcion').count()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        if self.carrera:
            self.vigente = True
        if self.codigocarrera:
            self.codigocarrera = self.codigocarrera.upper()
        self.alias = self.alias.upper()
        self.titulo = self.titulo.upper()
        super(Carrera, self).save(force_insert, force_update, using, update_fields)

    def existencias_nivel(self):
        if Matricula.objects.filter(nivel__cerrado=False, inscripcion__carrera=self).exists():
            return True

class Sede(models.Model):
    nombre = models.CharField(max_length=100)
    mapaurl = models.CharField(max_length=200, null=True,blank=True)
    solobodega=models.BooleanField(default=False)

    def __str__(self):
        return self.nombre

    @staticmethod
    def flexbox_query(q):
        return Sede.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return self.nombre

    def aulas(self):
        return self.aula_set.filter(activa=True).exclude(tipo__id=6).order_by('nombre')

    class Meta:
        verbose_name = "Sede"
        verbose_name_plural = "Sedes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Sede, self).save(force_insert, force_update, using, update_fields)

    def num_matriculados(self,periodo):
        p = Periodo.objects.get(pk=periodo)
        # u = User.objects.get(pk=user)
        c = Carrera.objects.filter().exclude(activo=False) #grupocoordinadorcarrera__group__in=u.groups.all()).distinct()
        return Matricula.objects.filter(nivel__sede=self, nivel__periodo=p, nivel__carrera__id__in=c).count()

class Modalidad(models.Model):
    nombre = models.CharField(max_length=200)

    def __str__(self):
        return str(self.nombre)

    @staticmethod
    def flexbox_query(q):
        return Modalidad.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return self.nombre


    class Meta:
        verbose_name = "Modalidad"
        verbose_name_plural = "Modalidades"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Modalidad, self).save(force_insert, force_update, using, update_fields)

class Sesion(models.Model):
    nombre = models.CharField(max_length=100)
    comienza = models.TimeField(null=True, blank=True)
    termina = models.TimeField(null=True, blank=True)
    lunes = models.BooleanField(default=False, blank=True)
    martes = models.BooleanField(default=False, blank=True)
    miercoles = models.BooleanField(default=False, blank=True)
    jueves = models.BooleanField(default=False, blank=True)
    viernes = models.BooleanField(default=False, blank=True)
    sabado = models.BooleanField(default=False, blank=True)
    domingo = models.BooleanField(default=False, blank=True)
    estado = models.BooleanField(default=True, blank=True)

    @staticmethod
    def flexbox_query(q):
        return Sesion.objects.filter(Q(nombre__icontains=q))

    def flexbox_repr(self):
        return self.nombre

    def cantidad_dias_plus_1(self):
        cant = 0
        for i in range(1,8):
            cant += 1 if self.clases_los_(i) else 0
        return cant+1

    def semana(self):
        s = []
        if self.lunes: s.append(("Lunes",1))
        if self.martes: s.append(("Martes",2))
        if self.miercoles: s.append(("Miercoles",3))
        if self.jueves: s.append(("Jueves",4))
        if self.viernes: s.append(("Viernes",5))
        if self.sabado: s.append(("Sabado",6))
        if self.domingo: s.append(("Domingo",7))
        return s

    def clases_los_(self, x):
        if x==1: return self.lunes
        if x==2: return self.martes
        if x==3: return self.miercoles
        if x==4: return self.jueves
        if x==5: return self.viernes
        if x==6: return self.sabado
        if x==7: return self.domingo


    def repr_dias(self):
        if self.lunes and self.martes and self.miercoles and self.jueves and \
                self.viernes and self.sabado and self.domingo:
            return "Toda la Semana"
        elif self.lunes and self.martes and self.miercoles and self.jueves and \
                self.viernes and not self.sabado and not self.domingo:
            return "Dias Laborables"
        elif not self.lunes and not self.martes and not self.miercoles and not self.jueves and \
                not self.viernes and self.sabado and self.domingo:
            return "Fines de Semana"
        else:
            dias = []
            if self.lunes: dias.append("Lunes")
            if self.martes: dias.append("Martes")
            if self.miercoles: dias.append("Miercoles")
            if self.jueves: dias.append("Jueves")
            if self.viernes: dias.append("Viernes")
            if self.sabado: dias.append("Sabado")
            if self.domingo: dias.append("Domingo")
            return ", ".join(dias)

    def cantidad_turnos(self):
        return Turno.objects.filter(sesion=self).count()

    def __str__(self):
        if self.comienza and self.termina:
            return self.nombre+" - "+self.comienza.strftime("%H:%M")+" a "+self.termina.strftime("%H:%M")+" los "+self.repr_dias()
        else:
            return self.nombre+" los "+self.repr_dias()

    def turnos(self):
        return Turno.objects.filter(sesion=self).order_by('turno')

    class Meta:
        verbose_name = "Sesion"
        verbose_name_plural = "Sesiones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Sesion, self).save(force_insert, force_update, using, update_fields)

class NivelMalla(models.Model):
    nombre = models.CharField(max_length=100)
    promediar = models.BooleanField(default=False)
    orden = models.IntegerField(blank=True,null=True)
    nombrematriz = models.CharField(max_length=100,blank=True,null=True)
    ordenestadistica = models.IntegerField(blank=True, null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Nivel de Malla"
        verbose_name_plural = "Niveles de Malla"

    @staticmethod
    def flexbox_query(q):
        return NivelMalla.objects.filter(Q(nombre__contains=q))

    def flexbox_repr(self):
        return self.nombre

    def id_number_moodle(self):
        return u'NIVELMALLA_ID:%s' % self.id

    def total_horas(self, malla):
        v = self.asignaturamalla_set.filter(malla=malla).aggregate(Sum('horas'))
        return v['horas__sum'] if v['horas__sum'] else 0

    def total_horas2(self, malla,inscripcion):

        if not AprobacionVinculacion.objects.filter(inscripcion=inscripcion).exists():
            v = self.asignaturamalla_set.filter(malla=malla).aggregate(Sum('horas'))
        else:
            v= EstudianteVinculacion.objects.filter(inscripcion=inscripcion,nivelmalla__id=self.id).aggregate(Sum('horas'))

        return v['horas__sum'] if v['horas__sum'] else 0

    def total_creditos(self, malla):
        v = self.asignaturamalla_set.filter(malla=malla).aggregate(Sum('creditos'))
        return v['creditos__sum'] if v['creditos__sum'] else 0

    def asignaturamalla(self,eje,malla):
        return  AsignaturaMalla.objects.filter(nivelmalla=self,ejeformativo=eje,malla=malla)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        self.nombrematriz = self.nombrematriz.upper()
        super(NivelMalla, self).save(force_insert, force_update, using, update_fields)


class Malla(models.Model):
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    inicio = models.DateField()
    vigente = models.BooleanField(blank=True)
    nueva_malla = models.BooleanField(blank=True)

    def cantidad_materias(self):
        return AsignaturaMalla.objects.filter(malla=self).count()

    def niveles_vigentes(self):
        return Nivel.objects.filter(cerrado=False, malla=self)

    def niveles_usada(self):
        return Nivel.objects.filter(malla=self)

    def en_uso(self):
        return Nivel.objects.filter(malla=self).exists()

    def inicio_anno(self):
        return self.inicio.year

    @staticmethod
    def flexbox_query(q):
        return Malla.objects.filter(Q(carrera__nombre__contains=q))[:25]

    def flexbox_repr(self):
        return str(self.carrera) + " ("+str(self.inicio.year)+")"


    def __str__(self):
        return str(self.carrera) + " ("+MONTH_NAMES[self.inicio.month-1]+" "+str(self.inicio.year)+") - "+("VIGENTE" if self.vigente else "HISTORICA")

    class Meta:
        verbose_name = "Malla Curricular"
        verbose_name_plural = "Mallas Curriculares"

class EjeFormativo(models.Model):
    nombre = models.CharField(max_length=100)
    orden = models.IntegerField(blank=True,null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Eje Formativo"
        verbose_name_plural = "Ejes Formativos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(EjeFormativo, self).save(force_insert, force_update, using, update_fields)

class AsignaturaMalla(models.Model):
    malla = models.ForeignKey(Malla, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    nivelmalla = models.ForeignKey(NivelMalla, verbose_name=u"Nivel de Malla", on_delete=models.CASCADE)
    ejeformativo = models.ForeignKey(EjeFormativo, verbose_name=u"Eje Formativo", on_delete=models.CASCADE)
    horas = models.FloatField()
    creditos = models.FloatField()
    rectora = models.BooleanField(default=False, blank=True)
    identificacion = models.CharField(max_length=20, null=True, blank=True)
    articulada = models.BooleanField(default=False, blank=True)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.identificacion = self.identificacion.upper() if self.identificacion is not None else ''
        super(AsignaturaMalla, self).save(force_insert, force_update, using, update_fields)

    def __str__(self):
        return str(self.malla) + " "+str(self.asignatura)

    class Meta:
        verbose_name = "Asignatura de Malla"
        verbose_name_plural = "Asignaturas de Mallas"

    def utilizada_materia(self):
        return Materia.objects.filter(asignatura=self.asignatura,nivel__malla=self.malla).exists()

    def costoasignatura(self):
        if CostoAsignatura.objects.filter(asignaturamalla=self).exists():
            return CostoAsignatura.objects.filter(asignaturamalla=self,activo=True)[:1].get()

    def totalhoras(self):
        suma = OrganizacionAsignaturaMalla.objects.filter(asignaturamalla=self).aggregate(Sum('horas'))
        return suma['horas__sum'] if suma['horas__sum'] else 0


    def organizacionaprendizaje(self):
        for o in OrganizacionAprendizaje.objects.all():
            if not OrganizacionAsignaturaMalla.objects.filter(asignaturamalla=self, organizacion=o).exists():
                orga = OrganizacionAsignaturaMalla(asignaturamalla=self, organizacion=o,horas=0)
                orga.save()

    def tieneorgaprendizaje(self):
        if OrganizacionAsignaturaMalla.objects.filter(asignaturamalla=self).exists():
            return True
        else:
            return False

class AsignaturaNivelacionCarrera(models.Model):
    """ Se guardan aquellas asignaturas que sean propias de nivelacion por Carreras """
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.carrera)+" "+str(self.asignatura)

    class Meta:
        verbose_name = "Asignatura de Nivelacion"
        verbose_name_plural = "Asignaturas de Nivelacion"

class GrupoManager(models.Manager):
    def get_query_set(self):
        return super(GrupoManager, self).get_query_set()

class ConvenioAcademico(models.Model):
    descripcion = models.CharField(max_length=300)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return  self.descripcion

    class Meta:
        verbose_name = "Convenio Academico"
        verbose_name_plural = "Convenios Academicos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper() if self.descripcion is not None else ''
        super(ConvenioAcademico, self).save(force_insert, force_update, using, update_fields)

class EmpresaConvenio(models.Model):
    nombre = models.CharField(max_length=300, blank=True, null=True)
    ruc = models.CharField(max_length=17, blank=True, null=True)
    activideconomica = models.CharField(max_length=300, blank=True, null=True)
    direccion = models.CharField(max_length=300, blank=True, null=True)
    ciudad = models.ForeignKey(Canton, blank=True, null=True, on_delete=models.CASCADE)
    estado = models.BooleanField(default=True)
    esempresa = models.BooleanField(default=False)
    activapostulacion=models.BooleanField(default=False)

    def __str__(self):
        return self.nombre

    @staticmethod
    def flexbox_query(q):
        return EmpresaConvenio.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper() if self.nombre is not None else ''
        self.activideconomica = self.activideconomica.upper() if self.activideconomica is not None else ''
        self.direccion = self.direccion.upper() if self.direccion is not None else ''
        super(EmpresaConvenio, self).save(force_insert, force_update, using, update_fields)

class Grupo(models.Model):
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    modalidad = models.ForeignKey(Modalidad, on_delete=models.CASCADE)
    sesion = models.ForeignKey(Sesion, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=40)
    sede = models.ForeignKey(Sede, on_delete=models.CASCADE)
    inicio = models.DateField()
    fin = models.DateField()
    capacidad = models.IntegerField(blank=True, null=True)
    observaciones = models.TextField(blank=True,null=True)
    abierto = models.BooleanField(blank=True,null=True)
    cerrado = models.BooleanField(blank=True,null=True)
    fechacierre = models.DateField(blank=True, null=True)

    objects = GrupoManager()
    convenio = models.ForeignKey(ConvenioAcademico,blank=True,null=True, on_delete=models.CASCADE)
    municipio = models.BooleanField(blank=True,null=True)
    empresaconvenio= models.ForeignKey(EmpresaConvenio,blank=True,null=True, on_delete=models.CASCADE)
    descuento = models.BooleanField(blank=True,null=True)
    online = models.BooleanField(blank=True,null=True)

    def __str__(self):
        return self.nombre + " ("+str(self.miembros().count())+" de "+str(self.capacidad)+") - "+self.inicio.strftime("%d-%m-%Y") +" a "+self.fin.strftime("%d-%m-%Y")

    class Meta:
        verbose_name = "Grupo"
        verbose_name_plural = "Grupos"

    @staticmethod
    def flexbox_query(q):
        return Grupo.objects.filter(Q(nombre__icontains=q))

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return self.nombre

    def id_number_moodle(self):
        return u'GRUPO_ID:%s' % self.id

    def precios(self):
        """Indica los precios de la Carrera para un Grupo"""
        try:
            precios = PrecioCarreraGrupo.objects.get(grupo=self)
        except :
            precios = PrecioCarreraGrupo(grupo=self, precioinscripcion=0, preciomatricula=0, precioperiodo=0, cuotas=0 )
            precios.save()
        return precios

    def miembros(self):
        return Inscripcion.objects.filter(inscripciongrupo__grupo=self, persona__usuario__is_active=True).order_by('persona__apellido1','persona__apellido2','persona__nombres')

    def nivel_grupo(self):
        try:
            return Nivel.objects.get(grupo=self, cerrado=False)
        except :
            return None

    def en_fechas(self):
        d = datetime.now().date()
        td = d - self.inicio
        th = d - self.fin
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)

    def tiene_cupo(self):
        if UTILIZA_GRUPOS_ALUMNOS:
            return InscripcionGrupo.objects.filter(grupo=self).count() <= self.capacidad
        else:
            return False

    def esta_abierto(self):
        if UTILIZA_GRUPOS_ALUMNOS:
            return self.en_fechas() and self.tiene_cupo()
        return False

    def tipo_persona(self,inscripcion):
        datos=''
        if DatosPersonaCongresoIns.objects.filter(inscripcion=inscripcion,grupo=self).exists():
            ids =  DatosPersonaCongresoIns.objects.filter(inscripcion=inscripcion,grupo=self).values('tipopersona')
            for tp in  TipoPersonaCongreso.objects.filter(id__in=ids):
                if datos:
                    datos = datos + " ," + tp.nombre
                else:
                    datos=tp.nombre
        return  datos

    def tipo_discapacidad(self,inscripcion):
        datos=''
        if DatosPersonaCongresoIns.objects.filter(inscripcion=inscripcion,grupo=self).exists():
            ids = DatosPersonaCongresoIns.objects.filter(inscripcion=inscripcion,grupo=self).values('tipodiscapacidad')
            for tp in  Discapacidad.objects.filter(id__in=ids):
                if datos:
                    datos = datos + " ," + tp.nombre
                else:
                    datos=tp.nombre
        return  datos

    def tipo_requerimiento(self,inscripcion):
        datos=''
        if DatosPersonaCongresoIns.objects.filter(inscripcion=inscripcion,grupo=self).exists():
            ids = DatosPersonaCongresoIns.objects.filter(inscripcion=inscripcion,grupo=self).values('requerimiento')
            for tp in   RequerimientoCongreso.objects.filter(id__in=ids):
                if datos:
                    datos = datos + " ," + tp.nombre
                else:
                    datos=tp.nombre
        return  datos

    def tiene_tutor(self):
        if NivelTutor.objects.filter(nivel__grupo=self,activo=True).exists():
            return  NivelTutor.objects.filter(nivel__grupo=self,activo=True)[:1].get()
        else:
            return False

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observaciones: self.observaciones = self.observaciones.upper()
        if self.nombre: self.nombre = self.nombre.upper()
        super(Grupo, self).save(force_insert, force_update, using, update_fields)


class Nivel(models.Model):
    """Indica los niveles con sus respectivos grupos"""
    # from moodle.models import EvaVirtual
    carrera = models.ForeignKey(Carrera, null=True, blank=True, on_delete=models.CASCADE)
    periodo = models.ForeignKey(Periodo, verbose_name=u"Período", on_delete=models.CASCADE)
    sede = models.ForeignKey(Sede, null=True, blank=True, on_delete=models.CASCADE)
    sesion = models.ForeignKey(Sesion, verbose_name=u'Sesión', on_delete=models.CASCADE)
    nivelmalla = models.ForeignKey(NivelMalla, verbose_name="Nivel", null=True, blank=True, on_delete=models.CASCADE)
    malla = models.ForeignKey(Malla, null=True, blank=True, on_delete=models.CASCADE)
    grupo = models.ForeignKey(Grupo, null=True, blank=True, on_delete=models.CASCADE)
    inicio = models.DateField()
    fin = models.DateField()
    paralelo = models.CharField(max_length=30, blank=True, null=True)
    cerrado = models.BooleanField(default=False)
    fechacierre = models.DateField(null=True, blank=True)
    fechatopematricula = models.DateField(verbose_name=u'Fecha Tope Matricula Ordinaria', null=True, blank=True)
    fechatopematriculaex = models.DateField(verbose_name=u'Fecha Tope Matricula Extraordinaria', null=True, blank=True)
    capacidadmatricula = models.IntegerField(verbose_name=u'Capacidad de Matriculas',blank=True, null=True)
    eva = models.ForeignKey('moodle.EvaVirtual', null=True, blank=True, on_delete=models.CASCADE)

    def __str__(self):
        if CENTRO_EXTERNO:
            return str(self.paralelo) + " - " + str(self.carrera)
        else:
            return ((str(self.nivelmalla) + " - ") if self.nivelmalla else "") + str(self.paralelo) + " " + (
                (str(self.carrera) + " ") if self.carrera else "") + str(self.sesion) + (
                " en " + str(self.sede) if self.sede else "")

    class Meta:
        verbose_name = "Nivel"
        verbose_name_plural = "Niveles"
        ordering = ["nivelmalla__nombre", "grupo__nombre"]

    @staticmethod
    def flexbox_query(q):
        parametros = q.split()
        if parametros.__len__() >= 2:
            return Nivel.objects.filter(paralelo__icontains=parametros[0], nivelmalla__nombre__icontains=parametros[1])
        return Nivel.objects.filter(
            Q(carrera__nombre__contains=q) | Q(sesion__nombre__contains=q) | Q(nivelmalla__nombre__contains=q) | Q(
                grupo__nombre__contains=q) | Q(paralelo__contains=q) | Q(periodo__nombre__contains=q))

    def flexbox_repr(self):
        if self.nivelmalla:
            return self.paralelo + " - " + self.nivelmalla.nombre + " - " + self.carrera.alias + " - " + self.periodo.nombre + " (" + self.id.__str__() + ")"
        else:
            coordinacion = self.coordinacion().nombre if self.coordinacion() else ""
            return self.paralelo + " - " + coordinacion + " - " + self.periodo.nombre + " (" + self.id.__str__() + ")"

    @staticmethod
    def flexbox_query_2(q):
        parametros = q.split()
        if parametros.__len__() >= 2:
            return Nivel.objects.filter(paralelo__icontains=parametros[0], nivelmalla__nombre__icontains=parametros[1])
        return Nivel.objects.filter(
            Q(carrera__nombre__contains=q) | Q(sesion__nombre__contains=q) | Q(nivelmalla__nombre__contains=q) | Q(
                grupo__nombre__contains=q) | Q(paralelo__contains=q) | Q(periodo__nombre__contains=q))

    def flexbox_alias(self):
        if self.nivelmalla:
            return self.paralelo + " - " + self.nivelmalla.nombre + " - " + self.carrera.alias
        else:
            coordinacion = self.coordinacion().nombre if self.coordinacion() else ""
            return self.paralelo + " - " + coordinacion

    def utiliza_eva(self):
        return self.eva_id is not None

    def coordinacion(self):
        if self.nivellibrecoordinacion_set.exists():
            return self.nivellibrecoordinacion_set.all()[:1].get().coordinacion
        elif self.carrera:
            if Coordinacion.objects.filter(carrera__in=[self.carrera]).exists():
                return Coordinacion.objects.filter(carrera__in=[self.carrera])[:1].get()
        return None

    def matricula_cerrada(self):
        return self.fechatopematricula<datetime.today().date()

    def matriculaextraordinaria_abierta(self):
        return self.fechatopematriculaex>=datetime.today().date()

    def cerrar_disponible(self):
        return self.materia_set.all().exclude(asignatura__id=ASIGNATURA_PRACTICA_CONDUCCION).count() == self.materia_set.filter(cerrado=True).exclude(asignatura__id=ASIGNATURA_PRACTICA_CONDUCCION).count()

    def cerrar_si_acta_notas(self):
        for m in self.materia_set.all():
            if not m.materiarecepcionactanotas_set.filter(entregada=True):
                return False
        return True

    def mail_matriculas(self, alumnospasan, alumnosnopasan, nivelant,alumnosobs):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_SECRETARIA)
        hoy = datetime.now().today()
        send_html_mail("Matriculas Generadas Automaticamente",
                       "emails/matproxnivel.html", {'d': self, 'nivelant': nivelant, 'fecha': hoy, 'contenido1': alumnospasan, 'contenido2': alumnosnopasan,'contenido3':alumnosobs},tipo.correo.split(","))

    def mail_matricula_discapacidad(self, i):
        if TipoIncidencia.objects.filter(pk=9).exists():
            tipo=TipoIncidencia.objects.get(pk=9)
            hoy = datetime.now().today()
            send_html_mail("Matricula a Discapacitado",
                           "emails/matriculadiscapacitado.html", {'d': self, 'inscripcion': i, 'fecha': hoy},tipo.correo.split(","))

    def mail_abrir(self, usuario):
        if TipoIncidencia.objects.filter(pk=44).exists():
            tipo=TipoIncidencia.objects.get(pk=44)
            hoy = datetime.now().today()
            send_html_mail("Nivel Abierto",
                           "emails/nivel_abierto.html", {'nivel': self, 'usuario': usuario, 'fecha': hoy},tipo.correo.split(","))

    def mail_cierrenivel(self, user, alumnospasan,materias,periodo,abs,abs_estudiantes,carrera,deuda_del_grupo,deuda_total):
        cant_matriculados=0
        porcentaje=0
        if Nivel.mat_nivel(self):
            cant_matriculados=Nivel.mat_nivel(self)
        if TipoIncidencia.objects.filter(pk=17).exists():
            tipo=TipoIncidencia.objects.get(pk=17)
            hoy = datetime.now().today()
            cant_alumnos = alumnospasan
            cant_materias = materias
            if cant_alumnos:
                porcentaje=(cant_alumnos*100)/(cant_matriculados-abs)

            send_html_mail("Nivel Cerrado",
                           "emails/nivelcerrado.html", {'n': self, 'user':user, 'fecha': hoy, 'alumnos': cant_alumnos, 'materias':cant_materias,
                                                        'porcentaje':porcentaje,'periodo':periodo,'absentismo':abs,'estud_absentismo':str(abs_estudiantes),
                                                        'carrera': carrera,'cant_matriculados':cant_matriculados,'grupo':deuda_del_grupo,'totaldeuda':deuda_total},tipo.correo.split(","))

    def mail_cierrenivel_dobe(self,materias,periodo,becados,estudiantes_becados):
        if TipoIncidencia.objects.filter(pk=9).exists():
            tipo=TipoIncidencia.objects.get(pk=9)
            hoy = datetime.now().today()
            cant_materias = materias
            send_html_mail("Nivel Cerrado",
                           "emails/nivelcerrado_dobe.html", {'n': self, 'materias':cant_materias,'periodo':periodo,'becados':becados,'estudiantes_becados':estudiantes_becados},tipo.correo.split(","))

    def mail_aprobacionnivel(self, user,promedio,estudiante,nivelest,grupo,email):
        hoy = datetime.now().today()
        texto="Estimado(a) estudiante, Ud. ha aprobado en su totalidad las materias del nivel. Puede acercarse a secretaria a matricularse al siguiente nivel. "
        nivel=nivelest
        grupo = grupo
        materias=promedio

        send_html_mail("Aprobacion de Nivel",
                       "emails/alum_aprobadosnivel.html", {'n': self, 'user':user, 'fecha': hoy,'mensaje':texto,'alumno':estudiante,'materias':promedio,'nivel':nivel,'grupo':grupo},email.split(","))

    def mail_creacionnivel(self,usuario):
        tipo = TipoIncidencia.objects.get(pk=55)
        hoy = datetime.now().today()
        send_html_mail("Nivel Creado",
                       "emails/creacion_nivel.html", {'n': self,'usuario': usuario,'fecha': hoy},tipo.correo.split(","))

    def mat_nivel(self):
        return self.matricula_set.all().count()

    def total_valores(self):
        if self.pagonivel_set.all().exclude(tipo=0).exists():
            return self.pagonivel_set.all().exclude(tipo=0).aggregate(Sum('valor'))['valor__sum']
        else:
            return 0
    def diferencia_cuotas(self):
        return self.cuotas_grupo() - self.total_cuotas()

    def diferencia_valores(self):
        if self.grupo:
            return self.total_valores() - self.grupo.precios().precioperiodo
        return 0

    def total_cuotas(self):
        return self.pagonivel_set.filter(tipo__gt=0).count()

    def cuotas_grupo(self):
        if self.grupo:
            return self.grupo.precios().cuotas
        return 0

    def compara_valores(self):
        if self.grupo:
            return self.total_valores() <= self.grupo.precios().precioperiodo
        return False

    def inicio_repr(self):
        return self.inicio.strftime('%d-%m-%Y')

    def fin_repr(self):
        return self.fin.strftime('%d-%m-%Y')

    def crea_cronograma_pagos(self):
        if MODELO_EVALUACION==EVALUACION_TES:
            for pc in PagoCalendario.objects.filter(periodo=self.periodo):
                pn = PagoNivel(nivel=self,tipo=pc.tipo,valor=pc.valor,fecha=pc.fecha)
                pn.save()
        else:
            pcg = self.grupo.precios()
            rangodias = (self.fin - self.inicio).days
            diasentrecuotas = rangodias / pcg.cuotas if pcg.cuotas>0 else 0

            # Matricula
            if not self.pagonivel_set.filter(tipo=0).exists():
                pm = PagoNivel(nivel=self,tipo=0,valor=pcg.preciomatricula,fecha=self.inicio)
                if pcg.preciomatricula>0:
                    pm.save()

            # Cuotas
            for i in range(pcg.cuotas):
                if not self.pagonivel_set.filter(tipo=(i+1)).exists():
                    pm = PagoNivel(nivel=self,tipo=(i+1),valor=pcg.valor_cuota(),fecha=self.inicio+timedelta(diasentrecuotas*(i+1)))
                    if pcg.valor_cuota()>0:
                        pm.save()

            # Hacer previsiones para Cuotas del ITB
            if MODELO_EVALUACION==EVALUACION_ITB:
                if self.periodo.tipo.id==TIPO_PERIODO_PROPEDEUTICO and self.nivelmalla.id==NIVEL_MALLA_CERO:
                    cuotas = PagoNivel.objects.filter(nivel=self,tipo__gte=2)
                    cuotas.delete()
                if self.periodo.tipo.id==TIPO_PERIODO_REGULAR and self.nivelmalla.id==NIVEL_MALLA_UNO:
                    cuotaMat = PagoNivel.objects.filter(nivel=self,tipo__lte=1)
                    cuotaMat.delete()
                    cuotaExtra = PagoNivel(nivel=self, tipo=self.grupo.precios().cuotas+1,fecha=self.fin, valor=self.grupo.precios().valor_cuota())
                    cuotaExtra.save()

    def actualizar_materias(self):
        for asignaturaMalla in self.malla.asignaturamalla_set.filter(nivelmalla=self.nivelmalla).exclude(asignatura__id=ASIG_PRATICA).exclude(asignatura__id=ASIG_VINCULACION):
            m = Materia(asignatura=asignaturaMalla.asignatura,
                        nivel=self,
                        horas=asignaturaMalla.horas,
                        creditos=asignaturaMalla.creditos,
                        rectora=asignaturaMalla.rectora,
                        identificacion=asignaturaMalla.identificacion,
                        inicio=self.inicio,
                        fin=self.fin)
            m.save()
            if not VALIDA_MATERIA_APROBADA:
                m.aprobada =True
                m.save()

    def matriculados(self):
        return self.matricula_set.all().order_by('inscripcion__persona__apellido1', 'inscripcion__persona__apellido2', 'inscripcion__persona__nombres') if self.matricula_set.exists() else None

    def materias(self):
        return self.materia_set.all().order_by('asignatura__nombre', 'inicio')

    def tutornivel(self):
        if NivelTutor.objects.filter(nivel=self).exists():
            return NivelTutor.objects.filter(nivel=self)[:1].get()
        return False

    def cantidad_matriculados(self):
        cantidad = 0
        if  Matricula.objects.filter(nivel=self).exists():
            cantidad =  Matricula.objects.filter(nivel=self).count()
        return cantidad

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.paralelo = self.paralelo.upper()
        super(Nivel, self).save(force_insert, force_update, using, update_fields)


TIPOS_PAGO_NIVEL = (
        (0, 'MATRICULA'),
        (1, 'CUOTA 1'),
        (2, 'CUOTA 2'),
        (3, 'CUOTA 3'),
        (4, 'CUOTA 4'),
        (5, 'CUOTA 5'),
        (6, 'CUOTA 6'),
        (7, 'CUOTA 7'),
        (8, 'CUOTA 8'),
        (9, 'CUOTA 9'),
        (10, 'CUOTA 10'),
        (11, 'CUOTA 11'),
        (12, 'CUOTA 12'),
        (13, 'EXAMEN DE ADMISION'),
        (14, 'CURSO DE NIVELACION INTENSIVO'),
        (15, 'INGLES'),
        (16, 'CREDENCIALES'),
        (17, 'CURSO DE NIVELACION INTENSIVO 2'),
        (18, 'MATERIALES DE APOYO'),
        (19, 'ENTREVISTA')
)

class PagoNivel(models.Model):
    nivel = models.ForeignKey(Nivel, on_delete=models.CASCADE)
    tipo = models.IntegerField(choices=TIPOS_PAGO_NIVEL)
    fecha = models.DateField()
    valor = models.FloatField()

    def __str__(self):
        return str(self.nivel)+" "+str(TIPOS_PAGO_NIVEL[int(self.tipo)][1])+ "$"+str(self.valor)+" "+self.fecha.strftime("%d-%m-%Y")

    class Meta:
        verbose_name = "Pago de Nivel"
        verbose_name_plural = "Pagos de Nivel"

    def nombre(self):
        return [y for x,y in TIPOS_PAGO_NIVEL if x==self.tipo][0]

    def tienelog(self):
        if PagoNivelLog.objects.filter(pagonivel=self,nivel=self.nivel).exists():
            return  True
        return False


class AlternativaEvaluacion(models.Model):
    nombre = models.CharField(default='', max_length=200, verbose_name=u'Nombre')
    alias = models.CharField(default='', max_length=50, verbose_name=u'Alias')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Alternativa de evaluación"
        verbose_name_plural = u"Alternativas de evaluación"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def delete(self, *args, **kwargs):
        if self.en_uso():
            raise NameError('Alternativa de evaluación está en uso')
        super(AlternativaEvaluacion, self).delete(*args, **kwargs)

    def en_uso(self):
        return DetalleModeloEvaluativo.objects.values("id").filter(alternative=self).exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip()
        self.alias = self.alias.upper().strip()
        super(AlternativaEvaluacion, self).save(*args, **kwargs)


class ModeloEvaluativo(models.Model):
    nombre = models.CharField(default='', max_length=100, verbose_name=u"Nombre")
    fecha = models.DateField(null=True, blank=True, verbose_name=u"Fecha")
    nota_maxima = models.FloatField(default=0, verbose_name=u'Nota maxima')
    nota_aprobar = models.FloatField(default=0, verbose_name=u'Nota para aprobar')
    nota_recuperacion = models.FloatField(default=0, verbose_name=u'Nota para recuperación')
    asistencia_aprobar = models.FloatField(default=0, verbose_name=u'% asistencia para aprobar')
    asistencia_recuperacion = models.FloatField(default=0, verbose_name=u'% asistencia para recuperación')
    observaciones = models.TextField(default='', null=True, blank=True, max_length=200, verbose_name=u'Observaciones')
    logica = models.TextField(default='', null=True, blank=True, verbose_name=u'logica')
    nota_final_decimales = models.IntegerField(default=0, verbose_name=u'lugares decimales')
    esta_activo = models.BooleanField(default=True, verbose_name=u"¿Está activo?")
    sedes = models.ManyToManyField(Sede)

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Modelo evaluativo"
        verbose_name_plural = u"Modelos evaluativos"
        ordering = ['nombre']
        unique_together = ('nombre',)

    objects = ActiveManager()

    def delete(self, *args, **kwargs):
        if self.en_uso():
            raise NameError('Modelo evaluativo en uso')
        super(ModeloEvaluativo, self).delete(*args, **kwargs)

    def total_campos(self):
        return self.detallemodeloevaluativo_set.values("id").count()

    def campos(self):
        return self.detallemodeloevaluativo_set.all().order_by('orden')

    def campo(self, nombre):
        try:
            return DetalleModeloEvaluativo.objects.get(modelo=self, nombre=nombre)
        except ObjectDoesNotExist:
            return None

    def en_uso(self):
        return Materia.objects.values("id").filter(modelo_evaluativo=self).exists()

    def puede_eliminar(self):
        return not self.en_uso()

    def puede_editar(self):
        return True

    def save(self, *args, **kwargs):
        # self.name = self.name.upper()
        super(ModeloEvaluativo, self).save(*args, **kwargs)


class DetalleModeloEvaluativo(models.Model):
    modelo = models.ForeignKey(ModeloEvaluativo, verbose_name=u"Modelo", on_delete=models.CASCADE)
    nombre = models.CharField(default='', max_length=10, verbose_name=u"Nombre campo")
    alternativa = models.ForeignKey(AlternativaEvaluacion, verbose_name=u"Alternativa de evaluación", on_delete=models.CASCADE)
    nota_minima = models.FloatField(default=0, verbose_name=u'Nota minima')
    nota_maxima = models.FloatField(default=0, verbose_name=u'Nota maxima')
    decimales = models.IntegerField(default=0, verbose_name=u'lugares decimales')
    puede_actualizar_estado = models.BooleanField(default=False, verbose_name=u"¿Puede actualizar el estado?")
    determina_estado_final = models.BooleanField(default=False, verbose_name=u"¿Puede determinar estado final?")
    es_dependiente = models.BooleanField(default=False, verbose_name=u"¿Es campo dependiente?")
    es_dependiente_asistencia = models.BooleanField(default=False, verbose_name=u"¿Es campo dependiente de asistencia?")
    orden = models.IntegerField(default=0, verbose_name=u"Orden en acta")
    puede_migrar_moodle = models.BooleanField(default=False, verbose_name=u"¿Puede migrar moodle?")
    es_recurso = models.BooleanField(default=False, verbose_name=u"¿Es recurso?")

    def __str__(self):
        return u'%s (%s a %s) %s' % (self.nombre, self.nota_minima.__str__(), self.nota_maxima.__str__(), self.alternativa)

    class Meta:
        verbose_name = u"Detalle del Modelo evaluativo "
        verbose_name_plural = u"Detalles de los modelos evaluativos"
        ordering = ['modelo', 'orden']
        unique_together = ('modelo', 'nombre',)

    objects = ActiveManager()

    def delete(self, *args, **kwargs):
        if self.en_uso():
            raise NameError('Detalle del modelo evaluativo en uso')
        super(DetalleModeloEvaluativo, self).delete(*args, **kwargs)

    def en_uso(self):
        return self.evaluaciongenerica_set.values("id").exists()

    def htmlid(self):
        return self.nombre.replace('.', '_')

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip()
        super(DetalleModeloEvaluativo, self).save(*args, **kwargs)


class Materia(models.Model):
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel, on_delete=models.CASCADE)
    horas = models.FloatField()
    creditos = models.FloatField()
    identificacion = models.CharField(max_length=30, null=True, blank=True)
    inicio = models.DateField(verbose_name='Fecha Inicial', blank=True, null=True)
    fin = models.DateField(verbose_name='Fecha Final', blank=True, null=True)
    rectora = models.BooleanField(default=False)
    cerrado = models.BooleanField(default=False)
    fechacierre = models.DateTimeField(null= True, blank =True)
    horacierre = models.TimeField(blank=True, null=True)
    observaciones = models.CharField(max_length=300, blank=True, null=True)
    aprobada = models.BooleanField(default=False)
    exordinario = models.DateField(verbose_name='Examen Ordinario', blank=True, null=True)
    revision = models.DateField(verbose_name='Revision Examen', blank=True, null=True)
    exatrasado = models.DateField(verbose_name='Examen Atrasado', blank=True, null=True)
    grupo = models.CharField(max_length=20, null=True, blank=True)
    culminacion_tit = models.DateField(verbose_name='CulminacionTitulacion', blank=True, null=True)
    sgaonline = models.BooleanField(default=False, blank=True)
    convalida = models.BooleanField(default=False, blank=True)
    numper = models.IntegerField(default=0, blank=True,null=True)
    fechaalcance = models.DateField(null=True, blank=True)
    modelo_evaluativo = models.ForeignKey(ModeloEvaluativo, blank=True, null=True, verbose_name=u'Modelo Evaluativo', on_delete=models.CASCADE)
    id_moodle_course = models.IntegerField(default=0, null=True, blank=True, verbose_name=u'Id curso de moodle')
    nombre_moodle_html = models.CharField(blank=True, null=True, max_length=50, verbose_name=u'Nombre HTML')
    url_moodle_html = models.CharField(blank=True, null=True, max_length=100, verbose_name=u'URL HTML')
    actualizar_moodle_html = models.BooleanField(default=False, verbose_name=u'Actualizar de moodle el html')
    banner = models.FileField(upload_to='materia/docente/banner', blank=True, null=True, verbose_name=u'Banner 1800x500px')

    class Meta:
        verbose_name = "Materia"
        verbose_name_plural = "Materias"
        ordering = ["asignatura"]

    def __str__(self):
        return str(self.nombre_completo())+" "+str(self.nivel)

    @staticmethod
    def flexbox_query(q):
        if UTILIZA_GRUPOS_ALUMNOS:
            # Para traer materias de niveles anteriores
            # return Materia.objects.filter((Q(asignatura__nombre__contains=q)|Q(nivel__grupo__nombre__contains=q))&Q(nivel__cerrado=False))
            return Materia.objects.filter((Q(asignatura__nombre__contains=q) | Q(nivel__grupo__nombre__contains=q))).order_by('-nivel')
        else:
            return Materia.objects.filter(Q(asignatura__nombre__contains=q) & Q(nivel__cerrado=False) | Q(materiaexterna__codigo__contains=q))

    def flexbox_repr(self):
        if not CENTRO_EXTERNO:
            if UTILIZA_GRUPOS_ALUMNOS:
                return self.asignatura.nombre + "-" + self.nivel.paralelo + "-" + self.nivel.nivelmalla.nombre
            else:
                return self.asignatura.nombre + "-" + self.nivel.nivellibrecoordinacion_set.all()[:1].get().coordinacion.nombre
        else:
            return self.asignatura.nombre + (" - " + self.materia_externa().codigo if self.materiaexterna_set.exists() else "")

    def id_number_moodle(self):
        return u'MATERIA_ID:%s' % self.id

    def verifica(self):
        from ext.models import MateriaExterna
        m=0
        if MateriaExterna.objects.filter(materia=self).exists():
            m = MateriaExterna.objects.filter(materia=self)[:1].get()
            if m.entidad.id == 3 :
                return False
            else:
                return True
        else:
            return True

    def puede_entregar_acta(self):
        if self.cerrado:
            if not self.acta_entregada():
                if  MateriaRecepcionActaNotas.objects.filter(materia=self,entregada=False).exists():
                    return MateriaRecepcionActaNotas.objects.filter(materia=self,entregada=False)[:1].get()
                return False
        return False

    def existe_recepcion_acta(self):
        if MateriaRecepcionActaNotas.objects.filter(materia=self).exists():
            return True
        return False

    def puede_entregar_acta_alcance(self):
        if self.acta_entregada():
            if MateriaRecepcionActaNotas.objects.filter(materia=self,entregada = True).exists():
                return MateriaRecepcionActaNotas.objects.filter(materia=self,entregada = True)[:1].get()
            return False
        return False

    def acta_alcance_entregada(self):
        if MateriaRecepcionActaNotas.objects.filter(materia=self,entregada = True) :
            return MateriaRecepcionActaNotas.objects.filter(materia=self,entregada = True)[:1].get()
        return False

    def acta_nivelcerrado_entregada(self):
        if MateriaRecepcionActaNotas.objects.filter(materia=self) :
            return MateriaRecepcionActaNotas.objects.filter(materia=self)[:1].get()
        return False

    def pendiente_aprobar(self):
        if MateriaRecepcionActaNotas.objects.filter(materia=self,entregada=False).exists():
            return MateriaRecepcionActaNotas.objects.filter(materia=self,entregada=False)[:1].get()
        return  False

    def acta_entregada_docente(self):
        if MateriaRecepcionActaNotas.objects.filter(materia=self,entregada=True).exists():
            return MateriaRecepcionActaNotas.objects.filter(materia=self,entregada=True)[:1].get()

    def ultima_malla(self):
        if AsignaturaMalla.objects.filter(malla=self.nivel.malla,asignatura__id__in=ASIGNATURA_SEMINARIO,asignatura=self.asignatura).exists():
            asi = AsignaturaMalla.objects.filter(malla=self.nivel.malla,asignatura__id__in=ASIGNATURA_SEMINARIO,asignatura=self.asignatura).order_by('-nivelmalla__orden')[:1].get()
            if asi.nivelmalla == self.nivel.nivelmalla and asi.asignatura.id in ASIGNATURA_SEMINARIO:
                return True
        return False

    def tiene_capacidad(self):
        aulas = Aula.objects.filter(clase__materia=self).distinct()
        if aulas:
            return self.materiaasignada_set.count()<aulas[0].capacidad
        return False

    def cerrar_disponible(self, periodo):
        # return not self.materiaasignada_set.filter(Q(cerrado=False)|Q(cerrado=None)).exists()
        c=0
        for ma in self.materiaasignada_set.filter(Q(cerrado=False)|Q(cerrado=None)):
            # ret = [x for x in RetiradoMatricula.objects.filter(activo=False, nivel__periodo=periodo, inscripcion=ma.matricula.inscripcion) if
            #        x.inscripcion.matricula_set.filter(pk=ma.matricula.id).exists()]
            if RetiradoMatricula.objects.filter(activo=False, inscripcion=ma.matricula.inscripcion).exists():
                c=c+1
        if self.materiaasignada_set.filter(Q(cerrado=False)|Q(cerrado=None)).count() == c:
            val = True
        else:
            if not  DEFAULT_PASSWORD=='itb':
                val = False
            else:
                val = True
        return val

    def tiene_clases(self):
        return self.lecciones().count() > 0

    def aula_libre(self):
        return ProfesorMateria.objects.filter(materia=self,hasta__gte=datetime.now(),desde__lte=datetime.now()).exists()

    def profesores_materia(self):
        return self.profesormateria_set.all().order_by('id')

    def profesores_materia2(self):
        return ProfesorMateria.objects.filter(materia=self).exclude(profesor_aux__gte=0).order_by('id')

    def prof_aux(self , profesor):
        if  ProfesorMateria.objects.filter(materia=self,profesor_aux=profesor.id ).exists():
            p = ProfesorMateria.objects.get(materia=self,profesor_aux=profesor.id )
            return  p.profesor.id
        else:
            return None

    def tiene_prof_aux(self , profesor):
        if  ProfesorMateria.objects.filter(materia=self,profesor=profesor,profesor_aux__gte=0).exists():
            p = ProfesorMateria.objects.filter(materia=self,profesor=profesor,profesor_aux__gte=0)[:1].get()
            prof=Profesor.objects.filter(pk=p.profesor_aux)[:1].get()
            return  prof
        else:
            return None


    def profesores(self):
        return ", ".join([x.profesor.persona.nombre_completo_inverso() for x in self.profesores_materia()])

    def clases(self):
        clases = self.clase_set.all().order_by('dia','turno__comienza')
        if len(set([x.aula.id for x in clases]))==1 and len(set([x.turno.id for x in clases]))==1:
            return "%s - %s a %s en %s"%(", ".join([x.dia_semana() for x in clases]), clases[0].turno.comienza.strftime('%H:%M'), clases[0].turno.termina.strftime('%H:%M'), clases[0].aula.nombre)

        return "<br/>".join(["%s - %s a %s en %s"%(x.dia_semana(),x.turno.comienza.strftime('%H:%M'),x.turno.termina.strftime('%H:%M'), x.aula.nombre) for x in self.clase_set.all().order_by('dia','turno__comienza')])

    def profesor_actual(self):
        hoy = datetime.today().date()
        return self.profesormateria_set.filter(desde__lte=hoy,hasta__gte=hoy)[:1].get()

    def evaluada_por_alumno(self, per, proc, instrA):
        return self.profesores_materia()[0].profesor.esta_evaluado_por(per, proc, instrA) if self.profesores_materia2() else ""

    def nombre_completo(self):
        return (self.identificacion if self.identificacion is not None else "###")+"-"+str(self.asignatura)

    def nombre_moodle(self):
        if self.identificacion:
            return "%s [%s]" % (self.asignatura.nombre, self.identificacion)
        return self.asignatura.nombre

    def nombre_horario(self):
        return (self.identificacion if self.identificacion is not None else "###")+"-"+str(self.asignatura)+" ("+self.inicio.strftime('%d-%m-%Y')+" al "+self.fin.strftime('%d-%m-%Y')+")"

    def clase_congre(self):
        if Clase.objects.filter(materia=self).exists():
            return Clase.objects.filter(materia=self).order_by('dia')

    def asignado_nivelcerrado(self):
        if ProfesorMateria.objects.filter(materia=self.id,materia__nivel__cerrado=True).order_by('-id').exists():
            materia =  Materia.objects.filter(pk=self.id,nivel__cerrado=True).order_by('-id')[:1].get()
            if ProfesorMateria.objects.filter(materia=self.id,materia__nivel__cerrado=True,desde__gte=materia.nivel.fechacierre).order_by('-id').exists():
                return  True
            else:
                return  False

    def asignados_a_esta_materia(self):
        return self.materiaasignada_set.all().order_by('matricula__inscripcion__persona__apellido1')

    def cantidad_matriculas_materia(self):
        return self.materiaasignada_set.all().count()

    def lecciones(self):
        return LeccionGrupo.objects.filter(lecciones__clase__materia=self).order_by('fecha','horaentrada')

    def mis_lecciones(self, profesor):
        return LeccionGrupo.objects.filter(lecciones__clase__materia=self, profesor = profesor).order_by('fecha','horaentrada')

    def syllabus(self):
        if Archivo.objects.filter(materia=self, tipo=ARCHIVO_TIPO_SYLLABUS).exists():
            return Archivo.objects.filter(materia=self, tipo=ARCHIVO_TIPO_SYLLABUS)[:1].get()
        else :
            return None

    def plan_clase(self):
        if Archivo.objects.filter(materia=self, tipo=ARCHIVO_TIPO_PLANCLASE).exists():
            return Archivo.objects.filter(materia=self, tipo=ARCHIVO_TIPO_PLANCLASE)[:1].get()
        else :
            return None

    def deber(self):
        if Archivo.objects.filter(materia=self, tipo=ARCHIVO_TIPO_DEBERES).exists():
            return Archivo.objects.filter(materia=self,tipo=ARCHIVO_TIPO_DEBERES).distinct('lecciongrupo')
        else:
            return None

    def material_apoyo(self):
        if Archivo.objects.filter(materia=self, tipo=ARCHIVO_TIPO_MATERIALAPOYO).exists():
            return Archivo.objects.filter(materia=self,tipo=ARCHIVO_TIPO_MATERIALAPOYO).distinct('lecciongrupo')
        else:
            return None

    def en_fecha(self):
        hoy = datetime.today().date()
        return self.inicio<=hoy<=self.fin

    def pasada_fecha(self):
        hoy = datetime.today().date()
        return hoy>self.fin

    def exportada(self):
        from ext.models import MateriaExterna, MateriaAsignadaExterna
        if self.materiaexterna_set.exists():
            return self.materiaexterna_set.all()[:1].get().exportada
        return False

    def es_externa(self):
        from ext.models import MateriaExterna, MateriaAsignadaExterna
        return self.materiaexterna_set.exists()

    def materia_externa(self):
        from ext.models import MateriaExterna, MateriaAsignadaExterna
        return self.materiaexterna_set.all()[:1].get() if self.es_externa() else None

    def profesoresxmateria(self):
        return ProfesorMateria.objects.filter(materia=self)
        #def alumnos_eval(self):
    #    self.aignados_a_esta_materia().count()
    #
    #    evaluados = EvaluacionProfesor.objects.filter(proceso=self.nivel.periodo.proceso_evaluativo(), profesor=self, persona__usuario__groups__in=[UTILIZA_GRUPOS_ALUMNOS]).count()
    #    return ((evaluados/total)*100) if total!=0 else 0
    def correo_promedio(self,totalalumnos,totalalumnoabs,totalaprobado,promedioaprobado,promedioreprobado,profesormateria,totalbecados,totalreprobado,totencurso,totrecuperacion,totestudiantes,promediorecuperacion,totalexamen,promedioexamen):
        tipo = TipoIncidencia.objects.get(pk=NOTIFICACION_CIERRE)
        profesor = profesormateria
        correo=tipo.correo+','+str(profesor.profesor.persona.emailinst)
        hoy = datetime.now().today()
        fecha_recuperacion=self.fechacierre+ timedelta(days=7)
        contenido = "PROMEDIO DE MATERIA"
        send_html_mail("PROMEDIO DE MATERIA",
                       "emails/correo_promediomater.html",
                       {'materia': self, 'fecha': hoy,'contenido': contenido,
                        'profesor':profesor,'totalalumnos':totalalumnos,'totalalumnoabs':totalalumnoabs,'totalaprobado':totalaprobado,
                        'promedioaprobado':promedioaprobado,'promedioreprobado':promedioreprobado,'totencurso':totencurso,
                        'totrecuperacion':totrecuperacion,'totestudiantes':totestudiantes,'totalreprobado':totalreprobado,"totalbecados":totalbecados,'promediorecuperacion':promediorecuperacion,'fecha_recuperacion':fecha_recuperacion,'promedioexamen':promedioexamen,'totalexamen':totalexamen},correo.split(","))

    def correo_cierre_sistema(self,totalalumnos,totalalumnoabs,totalaprobado,promedioaprobado,promedioreprobado,profesormateria,totalbecados,totalreprobado,totencurso,totrecuperacion,totestudiantes,promediorecuperacion,totalexamen,promedioexamen):
        tipo = TipoIncidencia.objects.get(pk=NOTIFICACION_CIERRE)
        profesor = profesormateria
        fecha_recuperacion=self.fechacierre+ timedelta(days=7)
        correo=tipo.correo+','+str(profesor.profesor.persona.emailinst)
        hoy = datetime.now().today()
        contenido = "CIERRE DE MATERIA AUTOMATICO"
        send_html_mail("CIERRE DE MATERIA AUTOMATICO Y PROMEDIO",
                       "emails/correo_promediomater.html",
                       {'materia': self, 'fecha': hoy,'contenido': contenido,
                        'profesor':profesor,'totalalumnos':totalalumnos,'totalalumnoabs':totalalumnoabs,'totalaprobado':totalaprobado,
                        'promedioaprobado':promedioaprobado,'promedioreprobado':promedioreprobado,'totencurso':totencurso,
                        'totrecuperacion':totrecuperacion,'totestudiantes':totestudiantes,'totalreprobado':totalreprobado,"totalbecados":totalbecados,'promediorecuperacion':promediorecuperacion,'promedioexamen':promedioexamen,'totalexamen':totalexamen,'fecha_recuperacion':fecha_recuperacion},correo.split(","))

    def acta_entregada(self):
        return  MateriaRecepcionActaNotas.objects.filter(materia=self,entregada=True).exists()

    def tiene_notas_alcance(self):
        return  MateriaAsignada.objects.filter(materia=self,alcance=True).exists()

    def profmateria(self):
        if  ProfesorMateria.objects.filter(materia=self,profesor_aux__gt=0 ).exists():
            return  ProfesorMateria.objects.filter(materia=self,profesor_aux__gt=0 )[:1].get().profesor
        else:
            if ProfesorMateria.objects.filter(materia=self,profesor__id__gt=0 ).exists():
                return ProfesorMateria.objects.filter(materia=self,profesor__id__gt=0 )[:1].get().profesor

    def correo_abrirmateria(self,user,obs):
        if TipoIncidencia.objects.filter(pk=34).exists():
            tipo = TipoIncidencia.objects.get(pk=34)
            hoy = datetime.now().today()
            contenido = "SE ABRIO UNA MATERIA "
            send_html_mail("MATERIA ABIERTA ",
                           "emails/materia_abierta.html", {'d': self, 'fecha': hoy,'contenido': contenido , 'obs' :obs ,'user':user},tipo.correo.split(","))

    def notificacion_exportacion(self,cant):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_INGLES)
        hoy = datetime.now().today()
        contenido = "EXPORTACION DE NOTAS DE INGLES"
        send_html_mail("EXPORTACION DE NOTAS DE INGLES  ",
                       "emails/exportacion_ingles.html", {'d': self, 'fecha': hoy,'contenido': contenido , 'can' :cant },tipo.correo.split(","))

    def horas_materia(self,pm):
        horasclase = 0

        dia2 = 7

        if  Clase.objects.filter(materia=self,materia__profesormateria__profesor=pm.profesor ).exists():
            for d in Clase.objects.filter(materia=self,materia__profesormateria__profesor=pm.profesor).values('dia').distinct('dia'):
                if d['dia'] == 1:
                    dia2 = 0
                elif d['dia'] == 2:
                    dia2 = 1
                elif d['dia'] == 3:
                    dia2 = 2
                elif d['dia'] == 4:
                    dia2 = 3
                elif d['dia'] == 5:
                    dia2 = 4
                elif d['dia'] == 6:
                    dia2 = 5
                elif d['dia'] == 7:
                    dia2 = 6
                dias = 0
                horas = Clase.objects.filter(materia=self,materia__profesormateria__profesor=pm.profesor,dia=d['dia']).aggregate(Sum('turno__horas'))
                ini = pm.desde
                try:
                    contador=0
                    if ini > pm.hasta:
                        print('Fecha desde debe ser menor o igual que hasta')

                    while ini <= pm.hasta:
                        if datetime.weekday(ini) ==dia2:
                            pass
                            contador = contador +1
                        ini = ini + timedelta(days=1)
                except:
                    print('Fecha incorrecta')
                # dias =
                horasclase = horasclase + (contador * horas['turno__horas__sum'])
            return  horasclase

    def horas_materia_rangofecha(self,pm,inicio,fin):
        horasclase=0
        totvalor = 0
        if  Clase.objects.filter(materia=self,materia__profesormateria__profesor=pm.profesor,materia__profesormateria__hasta__gte=inicio ).exists():
            if RolPerfilProfesor.objects.filter(profesor=pm.profesor).exists():
                perfilrol= RolPerfilProfesor.objects.filter(profesor=pm.profesor)[:1].get()
                valorhora = 0

            for d in Clase.objects.filter(materia=self,materia__profesormateria__profesor=pm.profesor,materia__profesormateria__hasta__gte=inicio ).values('dia').distinct('dia'):
                if d['dia'] == 1:
                    dia2 = 0
                    if perfilrol:
                        valorhora = perfilrol.chlunes
                elif d['dia'] == 2:
                    dia2 = 1
                    if perfilrol:
                        valorhora = perfilrol.chmartes
                elif d['dia'] == 3:
                    dia2 = 2
                    if perfilrol:
                        valorhora = perfilrol.chmiercoles
                elif d['dia'] == 4:
                    dia2 = 3
                    if perfilrol:
                        valorhora = perfilrol.chjueves
                elif d['dia'] == 5:
                    dia2 = 4
                    if perfilrol:
                        valorhora = perfilrol.chviernes
                elif d['dia'] == 6:
                    dia2 = 5
                    if perfilrol:
                        valorhora = perfilrol.chsabado
                elif d['dia'] == 7:
                    dia2 = 6
                    if perfilrol:
                        valorhora = perfilrol.chdomingo
                dias = 0
                horas = Clase.objects.filter(materia=self,materia__profesormateria__profesor=pm.profesor,materia__profesormateria__hasta__gte=inicio ,dia=d['dia']).aggregate(Sum('turno__horas'))
                if pm.desde > inicio.date():
                    ini = pm.desde
                else:
                    ini = inicio.date()
                try:
                    contador=0
                    if ini > fin.date() :
                        print('Fecha desde debe ser menor o igual que hasta')

                    while ini <= fin.date() and ini <= pm.hasta:
                        if datetime.weekday(ini) ==dia2:
                            pass
                            contador = contador +1
                        ini = ini + timedelta(days=1)
                except:
                    print('Fecha incorrecta')
                # dias =
                horasclase = horasclase + (contador * horas['turno__horas__sum'])
                # if valorhora >0:
                totvalor = totvalor + ((contador * horas['turno__horas__sum']) * valorhora )

        return  horasclase,totvalor

    def nueva_acta_buck(self):
        return  PagosCursoITB.objects.filter(materia=self).exists()

    def correo_materiaaprobada(self,user):
        # horas =  self.horas_materia()
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_MAT_APROBADA)
        hoy = datetime.now().today()
        contenido = "SE HA APROBADO UNA MATERIA PARA SER VISTA POR UN DOCENTE "
        send_html_mail("MATERIA APROBADA EN CRONOGRAMA  ",
                       "emails/materia_cronograma_aprobado.html", {'materia': self, 'fecha': hoy,'contenido': contenido , 'user' :user },tipo.correo.split(","))

    def correo_materiadesaprobada(self,user):
        # horas =  self.horas_materia()
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_MAT_APROBADA)
        hoy = datetime.now().today()
        contenido = "SE HA INACTIVADO UNA MATERIA "
        send_html_mail("MATERIA INACTIVA EN CRONOGRAMA  ",
                       "emails/materia_cronograma_aprobado.html", {'materia': self, 'fecha': hoy,'contenido': contenido , 'user' :user },tipo.correo.split(","))

    def cierre_sistema(self):
        #OCU 18-07-2019 funcion para el cierre automatico de la materia a 3 dias de la fecha de fin de la materia
        diferencia = 0
        fecha_cierre=self.fin
        diferencia=(datetime.now().date()- fecha_cierre).days
        totencurso=0
        totrecuperacion=0
        totalalumnoabs=0
        totalalumnos=0
        totalexamen=0
        promedioaprobado=0
        promedioreprobado=0
        promediorecuperacion=0
        promedioexamen=0

        if diferencia>=4:
            if not self.nivel.cerrado and not self.cerrado:
                self.cerrado=True
                self.fechacierre = datetime.now()
                self.save()
                self.fechaalcance =self.fechacierre + timedelta(days=14)
                self.save()
                profesormateria=''
                nivel=MateriaAsignada.objects.filter(materia=self)[:1].get().matricula.nivel
                inscrip=Inscripcion.objects.filter(id__in=MateriaAsignada.objects.filter(materia=self).values("matricula__inscripcion")).exclude(retiradomatricula__activo=False,retiradomatricula__nivel=nivel).values('id')
                if ProfesorMateria.objects.filter(materia=self,profesor_aux=None).exists():
                    profesormateria=ProfesorMateria.objects.filter(materia=self,profesor_aux=None)[:1].get()
                else:
                    profesormateria = ProfesorMateria.objects.filter(materia=self)[:1].get()
                if profesormateria.materia.nivel.carrera.online:
                    asistenciaparaaprobar = 0
                else:
                    asistenciaparaaprobar = ASIST_PARA_APROBAR
                if profesormateria.segmento_id == TIPOSEGMENTO_PRACT:

                    promedioreprobado = int(round(round(MateriaAsignada.objects.filter(Q(matricula__inscripcion__id__in=inscrip,materia=self,notafinal__lt=NOTA_PARA_APROBAR),Q(absentismo=None)|Q(absentismo=False)).count()*100)/round(MateriaAsignada.objects.filter(Q(matricula__inscripcion__id__in=inscrip,materia=self),Q(absentismo=None)|Q(absentismo=False)).count())))
                    promedioaprobado = int(round(round(MateriaAsignada.objects.filter(Q(matricula__inscripcion__id__in=inscrip,materia=self,notafinal__gte=NOTA_PARA_APROBAR),Q(absentismo=None)|Q(absentismo=False)).count()*100)/round(MateriaAsignada.objects.filter(Q(matricula__inscripcion__id__in=inscrip,materia=self),Q(absentismo=None)|Q(absentismo=False)).count())))
                    totalreprobado = MateriaAsignada.objects.filter(Q(matricula__inscripcion__id__in=inscrip,materia=self,notafinal__lt=NOTA_PARA_APROBAR,asistenciafinal__lt=asistenciaparaaprobar),Q(absentismo=None)|Q(absentismo=False)).count()
                    totalaprobado = MateriaAsignada.objects.filter(Q(matricula__inscripcion__id__in=inscrip,materia=self,notafinal__gte=NOTA_PARA_APROBAR),Q(absentismo=None)|Q(absentismo=False)).count()
                    resumreprobadoasist = 0
                    resumreprobadonota = MateriaAsignada.objects.filter(Q(matricula__inscripcion__id__in=inscrip,materia=self),Q(notafinal__lt=NOTA_PARA_APROBAR),Q(absentismo=None)|Q(absentismo=False)).count()
                else:
                    # totalaprobado = (MateriaAsignada.objects.filter(Q(matricula__inscripcion__id__in=inscrip,materia=self,notafinal__gte=NOTA_PARA_APROBAR,asistenciafinal__gte=ASIST_PARA_APROBAR),Q(absentismo=None)|Q(absentismo=False)).count())
                    materiaasignada=MateriaAsignada.objects.filter(Q(materia=self),Q(absentismo=None)|Q(absentismo=False)).values('id')
                    totencurso= EvaluacionITB.objects.filter(materiaasignada__id__in=materiaasignada,materiaasignada__matricula__inscripcion__id__in=inscrip,estado=NOTA_ESTADO_EN_CURSO).count()
                    totrecuperacion= EvaluacionITB.objects.filter(materiaasignada__id__in=materiaasignada,materiaasignada__matricula__inscripcion__id__in=inscrip,estado=NOTA_ESTADO_SUPLETORIO).count()
                    totalreprobado= EvaluacionITB.objects.filter(materiaasignada__id__in=materiaasignada,materiaasignada__matricula__inscripcion__id__in=inscrip,estado=NOTA_ESTADO_REPROBADO).count()
                    totalexamen= EvaluacionITB.objects.filter(materiaasignada__id__in=materiaasignada,materiaasignada__matricula__inscripcion__id__in=inscrip,estado=NOTA_ESTADO_DERECHOEXAMEN).count()
                    totalaprobado= (EvaluacionITB.objects.filter(Q(materiaasignada__id__in=materiaasignada,materiaasignada__matricula__inscripcion__id__in=inscrip,estado=NOTA_ESTADO_APROBADO),Q(materiaasignada__absentismo=None)|Q(materiaasignada__absentismo=False)).count())

                #OCastillo 04-06-2019 para pasar nota de materia asignada al record al cierre de la materia
                # for asignado in MateriaAsignada.objects.filter(materia=self).order_by('matricula__inscripcion__persona__apellido1','matricula__inscripcion__persona__apellido2'):
                #     if self.nivel!= asignado.matricula.nivel:
                #         if asignado.materia.asignatura.asistencia and asignado.notafinal >= NOTA_PARA_APROBAR:
                #             asistencia = 100
                #         else:
                #             asistencia = asignado.asistenciafinal
                #
                #             # Record
                #             b = 1
                #             if not asignado.materia.asignatura.sin_malla:
                #                 if (asignado.materia.asignatura.id == ASIGNATURA_PRACTICA_CONDUCCION and INSCRIPCION_CONDUCCION):
                #                      b=0
                #                 if ((asignado.materia.asignatura.id == ASIG_VINCULACION  or asignado.materia.asignatura.id == ASIG_PRATICA)and not INSCRIPCION_CONDUCCION) :
                #                     b = 0
                #             if b == 1:
                #                 if RecordAcademico.objects.filter(inscripcion=asignado.matricula.inscripcion,asignatura=asignado.materia.asignatura,fecha=asignado.matricula.nivel.fin).exists():
                #                     r = RecordAcademico.objects.filter(inscripcion=asignado.matricula.inscripcion,asignatura=asignado.materia.asignatura,fecha=asignado.matricula.nivel.fin)[:1].get()
                #                     r.nota = asignado.notafinal
                #                     r.asistencia = asistencia
                #                     r.fecha = asignado.matricula.nivel.fin
                #                     r.convalidacion = False
                #                     r.aprobada = asignado.esta_aprobado_final()
                #                     r.pendiente = False
                #                     r.save()
                #                 else:
                #                     r = RecordAcademico(inscripcion=asignado.matricula.inscripcion, asignatura=asignado.materia.asignatura,
                #                                         nota=asignado.notafinal, asistencia=asistencia,
                #                                         fecha=asignado.matricula.nivel.fin, convalidacion=False,
                #                                         aprobada=asignado.esta_aprobado_final(), pendiente=False)
                #                     r.save()
                #                 # Historico
                #                 if HistoricoRecordAcademico.objects.filter(inscripcion=asignado.matricula.inscripcion,asignatura=asignado.materia.asignatura,fecha=asignado.matricula.nivel.fin).exists():
                #                     h = HistoricoRecordAcademico.objects.filter(inscripcion=asignado.matricula.inscripcion,asignatura=asignado.materia.asignatura,fecha=asignado.matricula.nivel.fin)[:1].get()
                #                     h.nota = asignado.notafinal
                #                     h.asistencia = asistencia
                #                     h.fecha = asignado.matricula.nivel.fin
                #                     h.convalidacion = False
                #                     h.aprobada = asignado.esta_aprobado_final()
                #                     h.pendiente = False
                #                     h.save()
                #                 else:
                #                     h = HistoricoRecordAcademico(inscripcion=asignado.matricula.inscripcion, asignatura=asignado.materia.asignatura,
                #                                                 nota=asignado.notafinal, asistencia=asistencia,
                #                                                 fecha=asignado.matricula.nivel.fin, convalidacion=False,
                #                                                 aprobada=asignado.esta_aprobado_final(), pendiente=False)
                #                     h.save()

                totalalumnos = MateriaAsignada.objects.filter(matricula__inscripcion__id__in=inscrip,materia=self).count()
                totalalumnoabs = MateriaAsignada.objects.filter(matricula__inscripcion__id__in=inscrip,materia=self,absentismo=True).count()
                totalbecados = MateriaAsignada.objects.filter(Q(matricula__inscripcion__id__in=inscrip,materia=self,matricula__becado=True),Q(absentismo=None)|Q(absentismo=False)).count()
                totestudiantes=totalalumnos-totencurso-totalalumnoabs

                if totestudiantes>0:
                    promedioaprobado = int(round((round(totalaprobado*100)/totestudiantes)))
                    promedioreprobado = int(round((round(totalreprobado*100)/totestudiantes)))
                    promediorecuperacion = int(round((round(totrecuperacion*100)/totestudiantes)))
                    promedioexamen = int(round((round(totalexamen*100)/totestudiantes)))

                if DEFAULT_PASSWORD == 'itb':
                    self.correo_cierre_sistema(totalalumnos,totalalumnoabs,totalaprobado,promedioaprobado,promedioreprobado,profesormateria,totalbecados,totalreprobado,totencurso,totrecuperacion,totestudiantes,promediorecuperacion,totalexamen,promedioexamen)
        else:
            if diferencia>0 and diferencia < 4:
                return fecha_cierre + timedelta(days=4)
            else:
                return False

    def verifica_evaluacionalcance(self):
        estudiantes=0
        evanotas=0
        evaexamen=0
        evarecupera=0
        if EvaluacionAlcance.objects.filter(materiaasignada__materia=self).exists():
            estudiantes=EvaluacionAlcance.objects.filter(materiaasignada__materia=self).exclude(eliminado=True).exclude(eliminado=True).count()
            if EvaluacionAlcance.objects.filter(materiaasignada__materia=self,aprobado=True).exists():
                evanotas=EvaluacionAlcance.objects.filter(materiaasignada__materia=self,aprobado=True).exclude(eliminado=True).count()
            if EvaluacionAlcance.objects.filter(materiaasignada__materia=self,aprobadoex=True).exists():
                evaexamen=EvaluacionAlcance.objects.filter(materiaasignada__materia=self,aprobadoex=True).exclude(eliminado=True).count()
            if EvaluacionAlcance.objects.filter(materiaasignada__materia=self,aprobadorec=True).exists():
                evarecupera=EvaluacionAlcance.objects.filter(materiaasignada__materia=self,aprobadorec=True).exclude(eliminado=True).count()

            if estudiantes==evanotas or estudiantes == evaexamen or estudiantes == evarecupera:
                return True
            else:
                return  False
        else:
            return  False

    def verifica_alcancenivelcerrado(self):
        if EvaluacionAlcance.objects.filter(materiaasignada__materia=self).exclude(nivelmalla=None).exists():
            return True
        else:
            return  False

    def profesor_materia_aprueba(self,profesor):
        if ProfesorMateria.objects.filter(materia=self,profesor__id=profesor.id).exists():
            return True
        else:
            return False

    def cierre_materia(self):
        #OCastillo 14-nov-2019 funcion que evita la modificacion de las fechas de inicio y fin de materia 2 dias antes de los programado
        fecha_cierre=self.fin
        if not fecha_cierre:
            return False
        diferencia=(fecha_cierre-datetime.now().date()).days
        if diferencia<=DIAS_BLOQUEO_MATERIA:
            return True
        else:
            return False

    def correo_multasnotas(self,profesormateria,email,tipo_multa):
        tipo = TipoIncidencia.objects.get(pk=NOTIFICACION_MULTA4DIAS)
        profesor = profesormateria
        correo=tipo.correo+','+email
        hoy = datetime.now().today()
        if not self.cerrado:
            if tipo_multa==MULTA24H:
                contenido='Se ha generado multa. Docente ha solicitado activacion de notas parciales por 24 horas'
                asunto='MULTA A DOCENTE ACTIVACION 24 HORAS'
                send_html_mail("MULTA A DOCENTE ACTIVACION 24 HORAS DE NOTAS PARCIALES",
                               "emails/correo_multadocente.html",
                               {'materia': self, 'fecha': hoy,'contenido': contenido,'asunto':asunto,'profesor':profesor,'op':3},correo.split(","))
            else:
                contenido='Se ha generado multa. Docente ha solicitado activacion de notas parciales por 48 horas'
                asunto='MULTA A DOCENTE ACTIVACION 48 HORAS'
                send_html_mail("MULTA A DOCENTE ACTIVACION 48 HORAS DE NOTAS PARCIALES",
                               "emails/correo_multadocente.html",
                               {'materia': self, 'fecha': hoy,'contenido': contenido,'asunto':asunto,'profesor':profesor,'op':3},correo.split(","))
        else:
            if tipo_multa==MULTA24H:
                contenido='Se ha generado multa en materia cerrada. Docente ha solicitado activacion de ingreso de notas por 24 horas'
                asunto='MULTA A DOCENTE ACTIVACION 24 HORAS'
                send_html_mail("MULTA A DOCENTE ACTIVACION 24 HORAS DE NOTAS",
                               "emails/correo_multadocente.html",
                               {'materia': self, 'fecha': hoy,'contenido': contenido,'asunto':asunto,'profesor':profesor,'op':3},correo.split(","))
            # else:
            #     contenido='Se ha generado multa en materia cerrada. Docente ha solicitado activacion de ingreso de notas de examen por 48 horas'
            #     asunto='MULTA A DOCENTE ACTIVACION 48 HORAS'
            #     send_html_mail("MULTA A DOCENTE ACTIVACION 48 HORAS DE NOTAS DE EXAMEN",
            #         "emails/correo_multadocente.html",
            #         {'materia': self, 'fecha': hoy,'contenido': contenido,'asunto':asunto,'profesor':profesor,'op':3},correo.split(","))

    def activaciondocente(self):
        #OCastillo 20-11-2019 funcion que verifica si las prorrogas generadas por el docente de 24 o 48 horas estan vigentes
        fechahoy=datetime.now()
        activacion=False
        if MultaDocenteMateria.objects.filter(materia=self,tipomulta=MULTA24H,activo=True).exists():
            multa24h=MultaDocenteMateria.objects.filter(materia=self,tipomulta=MULTA24H,activo=True)[:1].get()
            if fechahoy <= multa24h.fechahasta:
                activacion=True
            else:
                multa24h.activo=False
                multa24h.save()

        if MultaDocenteMateria.objects.filter(materia=self,tipomulta=MULTA48H,activo=True).exists():
            multa48h=MultaDocenteMateria.objects.filter(materia=self,tipomulta=MULTA48H,activo=True)[:1].get()
            if fechahoy <= multa48h.fechahasta:
                activacion=True
            else:
                multa48h.activo=False
                multa48h.save()
        return activacion

    def multaactiva(self):
        # OCastillo 07-04-20202 funcion que verifica si hay multa activa
        fechahoy=datetime.now()
        multa = False
        if MultaDocenteMateria.objects.filter(materia=self,activo=True).exists():
            multadocente=MultaDocenteMateria.objects.filter(materia=self,activo=True)[:1].get()
            if fechahoy <= multadocente.fechahasta:
                multa=True
            else:
                multadocente.activo = False
                multadocente.save()
        return multa

    def activacioncierremateria(self):
        #OCastillo 14-02-2020 esta funcion es para la materia cerrada y activar casillero de examen para 24 o 48 horas
        fechahoy=datetime.now()
        activacion=False
        if not self.nivel.cerrado:
            if MultaDocenteMateria.objects.filter(materia=self,tipomulta=4,activo=True).exists():
                multa24h=MultaDocenteMateria.objects.filter(materia=self,tipomulta=4,activo=True)[:1].get()
                if fechahoy <= multa24h.fechahasta:
                    activacion=True
                else:
                    multa24h.activo=False
                    multa24h.save()
                    self.cerrado=True
                    self.save()
        return activacion

    def verificacioncierremateria(self):
        verifica=False
        fecha = datetime.now().date()
        if self.nivel.nivelmalla.id==NIVEL_SEMINARIO:
            verifica=False
        if (self.nivel.sesion.sabado or self.nivel.sesion.domingo) and (self.fin - fecha).days <= DIAS_BLOQUEO_EJECUTIVO:
            verifica=True
        if (not self.nivel.sesion.sabado or not self.nivel.sesion.domingo) and (self.fin - fecha).days <= DIAS_BLOQUEO_NOTAS:
            verifica=True

        return verifica

    def correo_multacuatrodias(self,profesormateria,email):
        tipo = TipoIncidencia.objects.get(pk=NOTIFICACION_MULTA4DIAS)
        profesor = profesormateria
        correo=tipo.correo+','+email
        hoy = datetime.now().today()
        contenido='Se ha generado multa. Han pasado mas de cuatro dias de la fecha de fin de materia'
        asunto='MULTA A DOCENTE MATERIA NO CERRADA'
        send_html_mail("MULTA A DOCENTE MATERIA NO CERRADA",
                       "emails/correo_multadocente.html",
                       {'materia': self, 'fecha': hoy,'contenido': contenido,'asunto':asunto,'profesor':profesor,'op':1},correo.split(","))

    def verificacioncuatrodias(self):
        #OCastillo 27-11-2019 funcion que verifica si han pasado 4 dias desde el fin de la materia y el docente no la ha cerrado generara multa de 20 USD y correo al docente y a la coordinacion
        diferencia = 0
        docente=None
        profmateria=''
        fecha_cierre=self.fin
        diferencia=(datetime.now().date()- fecha_cierre).days
        verifica=False
        carrera=  self.nivel.carrera

        if Coordinacion.objects.filter(carrera=carrera).exists():
            if self.nivel.coordinacion().id!=COORDINACION_UASSS:
                if ProfesorMateria.objects.filter(materia=self,profesor_aux=None).exists():
                    profmateria=ProfesorMateria.objects.filter(materia=self,profesor_aux=None,profesor__activo=True)[:1].get()
                    docente=profmateria.profesor
                else:
                    profmateria = ProfesorMateria.objects.filter(materia=self,profesor__activo=True)[:1].get()
                    docente=profmateria.profesor
            else:
                if ProfesorMateria.objects.filter(materia=self,profesor_aux=None,segmento__id=TIPOSEGMENTO_TEORIA).exists():
                    profmateria=ProfesorMateria.objects.filter(materia=self,profesor_aux=None,segmento__id=TIPOSEGMENTO_TEORIA,profesor__activo=True)[:1].get()
                    docente=profmateria.profesor
                if ProfesorMateria.objects.filter(materia=self,segmento__id=TIPOSEGMENTO_TEORIA,profesor__activo=True).exists():
                    profmateria = ProfesorMateria.objects.filter(materia=self,segmento__id=TIPOSEGMENTO_TEORIA,profesor__activo=True)[:1].get()
                    docente=profmateria.profesor
                # if ProfesorMateria.objects.filter(materia=self,profesor_aux=None,segmento__id=TIPOSEGMENTO_PRACT).exists():
                #     profmateria=ProfesorMateria.objects.filter(materia=self,profesor_aux=None,segmento__id=TIPOSEGMENTO_PRACT,profesor__activo=True)[:1].get()
                #     docente=profmateria.profesor
                #
                # if ProfesorMateria.objects.filter(materia=self,segmento__id=TIPOSEGMENTO_PRACT,profesor__activo=True).exists():
                #     profmateria = ProfesorMateria.objects.filter(materia=self,segmento__id=TIPOSEGMENTO_PRACT,profesor__activo=True)[:1].get()
                #     docente=profmateria.profesor

            if diferencia>=4 and not docente==None:
                if not self.nivel.cerrado and not self.cerrado:
                    if TipoMultaDocente.objects.filter(pk=MULTA4DIAS,estado=True).exists():
                        if not MultaDocenteMateria.objects.filter(materia=self,tipomulta=MULTA4DIAS,activo=True).exists():
                            multadocente= MultaDocenteMateria(materia=self,
                                                              profesor_id=docente.id,
                                                              fechadesde=datetime.now(),
                                                              tipomulta_id=MULTA4DIAS,
                                                              activo=True)
                            multadocente.save()

                            if DEFAULT_PASSWORD == 'itb':
                                carrera=  self.nivel.carrera
                                if Coordinacion.objects.filter(carrera=carrera).exists():
                                    coord = Coordinacion.objects.filter(carrera=carrera)[:1].get()
                                    email=str(coord.correo)+','+str(docente.persona.emailinst)
                                    self.correo_multacuatrodias(docente,email)
                verifica=True
            return verifica

    def asistencias_materia(self):
        lecciones = Leccion.objects.filter(clase__materia=self)
        for leccion in lecciones:
            if not AsistenciaLeccion.objects.filter(leccion=leccion).exists():
                asistencia = AsistenciaLeccion(leccion=leccion,asistio=False)
                asistencia.save()
            elif AsistenciaLeccion.objects.filter(leccion=leccion).count()>1:
                asistencias = AsistenciaLeccion.objects.filter(leccion=leccion)
                if asistencias.filter(asistio=True).exists():
                    asistencia = AsistenciaLeccion.objects.filter(leccion=leccion, asistio=True)[:1].get()
                    for a in asistencias:
                        if a.id!=asistencia.id:
                            a.delete()
                else:
                    for a in asistencias[1:]:
                        a.delete()

        return AsistenciaLeccion.objects.filter(leccion__clase__materia=self).order_by('leccion__fecha','leccion__horaentrada')

    def porciento_asistencia_materia(self):
        try:
            from decimal import Decimal
            sumasi=0
            asistenciafinal=MateriaAsignada.objects.filter(materia=self)
            for a in asistenciafinal:
                sumasi=sumasi+a.asistenciafinal
            cantimatri = self.cantidad_matriculas_materia()
            if not sumasi:
                return 0
            return Decimal((sumasi)/cantimatri).quantize(Decimal(10)**-2)
        except :
            return 0

    def sin_asistencia_materia(self):
        try:
            sumasi=0
            asistenciafinal=MateriaAsignada.objects.filter(materia=self)
            for a in asistenciafinal:
                if a.asistenciafinal<1:
                    sumasi=sumasi+1
            return sumasi
        except :
            return 0

    def porciento_asistencia_materia_reprobados(self):
        try:
            sum=0
            if MateriaAsignada.objects.filter(materia=self).exists():
                matriasig=MateriaAsignada.objects.filter(materia=self)
                for b in matriasig:
                    if b.asistenciafinal<75:
                        sum=sum+1
                return sum
            else:
                return 0
        except :
            return 0

    def reprobados_aprovechamiento(self):
        try:
            sum=0
            if MateriaAsignada.objects.filter(materia=self).exists():
                matriasig=MateriaAsignada.objects.filter(materia=self)
                for b in matriasig:
                    if EvaluacionITB.objects.filter(materiaasignada=b).exists():
                        bev =EvaluacionITB.objects.get(materiaasignada=b)
                        if bev.estado_id==2:
                            sum=sum+1
                return sum
            else:
                return 0
        except :
            return 0

    def promedio_por_materia(self):
        try:
            from decimal import Decimal
            sumasi=0
            asistenciafinal=MateriaAsignada.objects.filter(materia=self)
            for a in asistenciafinal:
                sumasi=sumasi+a.notafinal
            cantimatri = self.cantidad_matriculas_materia()
            if not sumasi:
                return 0
            return Decimal((sumasi)/cantimatri).quantize(Decimal(10)**-2)
        except :
            return 0

    def verturno(self):
        return LeccionGrupo.objects.filter(lecciones__clase__materia=self).order_by('fecha','horaentrada')[:1].get()

    def profmateriaasignacion(self):
        teoria=[]
        practica=[]
        lista=[]
        prof=None
        if  ProfesorMateria.objects.filter(materia=self,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True).exists():
            prof=ProfesorMateria.objects.filter(materia=self,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True )[:1].get()
            teoria.append (prof.hasta.strftime('%d-%m-%Y'))
        if  ProfesorMateria.objects.filter(materia=self,profesor_aux__gt=0,segmento__id=2,aceptacion=True).exists():
            prof = ProfesorMateria.objects.filter(materia=self,profesor_aux__gt=0,segmento__id=2,aceptacion=True )[:1].get()
            practica.append (prof.hasta.strftime('%d-%m-%Y'))
        if ProfesorMateria.objects.filter(materia=self,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True ).exists():
            prof= ProfesorMateria.objects.filter(materia=self,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True )[:1].get()
            teoria.append (prof.hasta.strftime('%d-%m-%Y'))

        if ProfesorMateria.objects.filter(materia=self,profesor__id__gt=0,segmento__id=2,aceptacion=True ).exists():
            prof= ProfesorMateria.objects.filter(materia=self,profesor__id__gt=0,segmento__id=2,aceptacion=True )[:1].get()
            practica.append (prof.hasta.strftime('%d-%m-%Y'))
        return (teoria,practica)

    def profesorfinasignacionteoria(self):
        #OCastillo 14-07-2021 se quita esta validacion
        finasignacion=False
        if ProfesorMateria.objects.filter(materia=self,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True).count()>=2:
            finasignacion=False
        else:
            if  ProfesorMateria.objects.filter(materia=self,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True).exists():
                prof=ProfesorMateria.objects.filter(materia=self,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True )[:1].get()
                finteoria=prof.hasta
                if (finteoria-datetime.now().date()).days<0:
                    # finasignacion=True
                    finasignacion=False

            if ProfesorMateria.objects.filter(materia=self,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True ).exists():
                prof= ProfesorMateria.objects.filter(materia=self,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True )[:1].get()
                finteoria=prof.hasta
                if (finteoria-datetime.now().date()).days<0:
                    # finasignacion=True
                    finasignacion=False

        return (finasignacion)

    def profesor_principal(self):
        return self.profesormateria_set.all().latest("id").profesor

    def tiene_cronograma_academico(self):
        return self.cronograacademicomateria_set.values("id").filter(cronogramaacademico__activo=True).exists()

    def mi_cronograma_academico(self):
        if self.tiene_cronograma_academico():
            return self.cronograacademicomateria_set.all()[0].cronogramaacademico
        return None

    def notas_de_moodle(self, ePersona):
        from moodle.functions import obtener_calificaciones_curso
        return obtener_calificaciones_curso(self, ePersona)

    def nombre_display(self):
        display = "%s" % self.nombre_completo()
        if self.nivel.sede:
            display += " - %s" % self.nivel.sede
        if self.nivel.carrera:
            display += " - %s" % self.nivel.carrera
        if self.nivel.paralelo:
            display += " - %s" % self.nivel.paralelo
        if self.fin:
            display += " - Fin: %s" % self.fin
        profmateriaasignacion = self.profmateriaasignacion()
        if profmateriaasignacion:
            if profmateriaasignacion[0]:
                display += " - Teoria Hasta: %s" % profmateriaasignacion[0]
            if profmateriaasignacion[1]:
                display += " - Practica Hasta: %s" % profmateriaasignacion[1]
        if not self.nivel.carrera:
            coordinacion = self.nivel.coordinacion()
            if coordinacion:
                display += " (%s)" % coordinacion.nombre
        eMateriaExterna = self.materiaexterna_set.first()
        if eMateriaExterna:
            display += " (%s)" % eMateriaExterna.codigo
        if self.cerrado:
            display += " - (CERRADA)"
        return display

    def tiene_plan_analitico(self):
        return PlanAnalitico.objects.values("id").filter(activo=True, asignaturamalla__asignatura_id=self.asignatura_id).exists()

    def tiene_silabo(self):
        return self.silabo_set.values("id").filter(plananalitico__activo=True).exists()

    def mi_silabo(self):
        if self.tiene_silabo():
            return self.silabo_set.filter(plananalitico__activo=True).first()
        return None

    def mi_repositorio_acta_calificacion(self):
        from firmaec.models import RepositorioActaCalificacion
        try:
            eRepositorioActaCalificacion = RepositorioActaCalificacion.objects.get(materia=self)
        except ObjectDoesNotExist:
            eRepositorioActaCalificacion = RepositorioActaCalificacion(materia=self, estado=RepositorioActaCalificacion.Estados.Pendiente)
            eRepositorioActaCalificacion.save()
        return eRepositorioActaCalificacion

    def firma_acta_calificacion(self):
        from firmaec.models import FirmaActaCalificacion
        return FirmaActaCalificacion.objects.filter(materia=self)

    def tiene_firma_acta_calificacion(self):
        return self.firma_acta_calificacion().only("id").exists()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.identificacion = self.identificacion.upper() if self.identificacion is not None else ''
        super(Materia, self).save(force_insert, force_update, using, update_fields)


class TipoAula(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre
    @staticmethod
    def flexbox_query_2(q):
        return TipoAula.objects.filter(nombre__icontains=q).order_by('nombre')

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Aula"
        verbose_name_plural = "Tipos de Aulas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoAula, self).save(force_insert, force_update, using, update_fields)


class Aula(models.Model):
    nombre = models.CharField(max_length=100)
    capacidad = models.IntegerField()
    tipo = models.ForeignKey(TipoAula, on_delete=models.CASCADE)
    sede = models.ForeignKey(Sede, blank=True, null=True, on_delete=models.CASCADE)
    ip = models.CharField(max_length=16, blank=True, null=True)
    activa = models.BooleanField(default=True)

    def libre_hoy(self):
        hoy = datetime.today().date()
        return not Clase.objects.filter(aula=self, materia__nivel__cerrado=False,dia=hoy.weekday()+1,materia__inicio__lte=hoy,materia__fin__gte=hoy).exists()

    def ocupada_fecha(self, fecha,  dia):
        # return Clase.objects.filter(aula=self, turno__sesion=sesion, dia=dia, materia__nivel__cerrado=False, materia__inicio__lte=fecha, materia__fin__gte=fecha).exists()
        return Clase.objects.filter(aula=self,dia=dia, materia__nivel__cerrado=False, materia__profesormateria__desde__lte=fecha, materia__profesormateria__hasta__gte=fecha).exists()
        # return  Clase.objects.filter(aula=self, turno__sesion=sesion, dia=dia, materia__nivel__cerrado=False,profesormateria__desde__lte =fecha,profesormateria__desde__gte =fecha).exists()
        # c = Clase.objects.filter(aula=self, turno__sesion=sesion, dia=dia, materia__nivel__cerrado=False, materia__inicio__lte=fecha, materia__fin__gte=fecha)



    def clases_fecha(self, fecha,  dia):
        if self.ocupada_fecha(fecha,  dia):
            # return Clase.objects.filter(aula=self, turno__sesion=sesion, dia=dia, materia__nivel__cerrado=False, materia__inicio__lte=fecha, materia__fin__gte=fecha)
            return Clase.objects.filter(aula=self, dia=dia, materia__nivel__cerrado=False, materia__inicio__lte=fecha, materia__fin__gte=fecha).distinct().order_by('turno__comienza')
        return ""

    def existeaula(self):
        return Clase.objects.filter(aula=self).exists()
    def __str__(self):
        return self.nombre+" - "+str(self.sede)

    class Meta:
        verbose_name = "Aula"
        verbose_name_plural = "Aulas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Aula, self).save(force_insert, force_update, using, update_fields)


class Discapacidad(models.Model):
    nombre = models.CharField(max_length=100)
    nombrematriz = models.CharField(max_length=100,blank=True,null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Discapacidad"
        verbose_name_plural = "Tipos de Discapacidades"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        self.nombrematriz = self.nombrematriz.upper()
        super(Discapacidad, self).save(force_insert, force_update, using, update_fields)


# Categorizacion y Tiempo de dedicacion del docente
class TiempoDedicacionDocente(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tiempo de dedicacion del Profesor"
        verbose_name_plural = "Tiempo de dedicacion de Profesores"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TiempoDedicacionDocente, self).save(force_insert, force_update, using, update_fields)


class CategorizacionDocente(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Categorizacion del Profesor"
        verbose_name_plural = " Categorizacion de Profesores"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(CategorizacionDocente, self).save(force_insert, force_update, using, update_fields)

class RelacionTrabajo(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Relacion Trabajo - Profesor"
        verbose_name_plural = "Relaciones Trabajo - Profesores"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(RelacionTrabajo, self).save(force_insert, force_update, using, update_fields)

class Profesor(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    activo = models.BooleanField(blank=True, null=True)
    fechaingreso = models.DateField(verbose_name='Fecha Ingreso')
    dedicacion = models.ForeignKey(TiempoDedicacionDocente, on_delete=models.CASCADE)
    categoria = models.ForeignKey(CategorizacionDocente,null=True,blank=True, on_delete=models.CASCADE)
    numerocontrato = models.CharField(max_length=100, blank=True, null=True)
    relaciontrab = models.ForeignKey(RelacionTrabajo, blank=True, null=True, on_delete=models.CASCADE)
    #Datos para si es discapacitado
    tienediscapacidad = models.BooleanField(default=False, verbose_name="Tiene Discapacidad?")
    tipodiscapacidad = models.ForeignKey(Discapacidad, null=True, blank=True, verbose_name="Tipo de Discapacidad", on_delete=models.CASCADE)
    porcientodiscapacidad = models.FloatField(blank=True, null=True, verbose_name='% de Discapacidad')
    carnetdiscapacidad = models.CharField(max_length=100, blank=True, null=True, verbose_name='Carnet Discapacitado')
    identificador = models.CharField(max_length=20, blank=True, null=True)
    reemplazo = models.BooleanField(default=False)
    tutor = models.BooleanField(default=False)
    practicahospital = models.BooleanField(default=False)
    conhorario = models.BooleanField(default=False)
    horainicio = models.TimeField(blank=True, null=True)
    horafin = models.TimeField(blank=True, null=True)

    @staticmethod
    def flexbox_query(q):
        if ' ' in q:
            s = q.split(" ")
            return Profesor.objects.filter(Q(persona__apellido1__contains=s[0])&Q(persona__apellido2__contains=s[1])).order_by('persona__apellido1','persona__apellido2','persona__nombres')
        else:
            return Profesor.objects.filter(Q(persona__nombres__contains=q)|Q(persona__apellido1__contains=q)|Q(persona__apellido2__contains=q)|Q(persona__cedula__contains=q)).order_by('persona__apellido1','persona__apellido2','persona__nombres')[:25]


    def flexbox_repr(self):
        return self.persona.cedula+" - "+self.persona.nombre_completo()

    def __str__(self):
        return str(self.persona)
    def evaluado(self,periodo):
        return EvaluacionDirectivoPeriodo.objects.filter(finalizado=True, activo=True,evaluaciondocenteperiodo__profesor=self,evaluaciondocenteperiodo__periodo__id__in=periodo).exists()


    def materias_pendientes(self):
        materias_pend=[]
        if Materia.objects.filter(profesormateria__profesor=self, fin__lt=datetime.now().date(),cerrado = False,profesormateria__segmento__id=TIPOSEGMENTO_TEORIA).exclude(profesormateria__profesor__persona__apellido1__icontains='BUCKINGHAM').exists() or  Materia.objects.filter(profesormateria__profesor_aux=self.id, fin__lt=datetime.now().date(),cerrado = False,profesormateria__segmento__id=TIPOSEGMENTO_TEORIA).exclude(profesormateria__profesor__persona__apellido1__icontains='BUCKINGHAM').exists() :
            # con profesor titular
            if Materia.objects.filter(profesormateria__profesor=self, fin__lt=datetime.now().date(),cerrado = False,profesormateria__segmento__id=TIPOSEGMENTO_TEORIA ).exists():
                materia=Materia.objects.filter(profesormateria__profesor=self, fin__lt=datetime.now().date(),cerrado = False,profesormateria__segmento__id=TIPOSEGMENTO_TEORIA ).order_by('asignatura__nombre')
                for mat in materia:
                    carrera=  mat.nivel.carrera
                    if Coordinacion.objects.filter(carrera=carrera).exists():
                        if mat.nivel.coordinacion().id!=COORDINACION_UASSS:
                            if ProfesorMateria.objects.filter(profesor=self,profesor_aux=None,materia=mat.id,segmento__id=TIPOSEGMENTO_TEORIA,hasta=mat.fin).exists():
                                materias_pend.append((elimina_tildes(mat.asignatura.nombre),mat.nivel.grupo.nombre,mat.inicio,mat.fin,mat.nivel.periodo.nombre))
                        else:
                            if ProfesorMateria.objects.filter(profesor=self,profesor_aux=None,materia=mat.id,segmento__id=TIPOSEGMENTO_TEORIA).exists():
                                materias_pend.append((elimina_tildes(mat.asignatura.nombre),mat.nivel.grupo.nombre,mat.inicio,mat.fin,mat.nivel.periodo.nombre))
            else:
                #con profesor auxiliar
                materia=Materia.objects.filter(profesormateria__profesor_aux=self.id, fin__lt=datetime.now().date(),cerrado = False,profesormateria__segmento__id=TIPOSEGMENTO_TEORIA ).order_by('asignatura__nombre')
                for mat in materia:
                    carrera=  mat.nivel.carrera
                    if Coordinacion.objects.filter(carrera=carrera).exists():
                        if mat.nivel.coordinacion().id!=COORDINACION_UASSS:
                            if ProfesorMateria.objects.filter(profesor_aux=self.id,materia=mat.id,segmento__id=TIPOSEGMENTO_TEORIA,hasta=mat.fin).exists():
                                materias_pend.append((elimina_tildes(mat.asignatura.nombre),mat.nivel.grupo.nombre,mat.inicio,mat.fin,mat.nivel.periodo.nombre))
                        else:
                            if ProfesorMateria.objects.filter(profesor_aux=self.id,materia=mat.id,segmento__id=TIPOSEGMENTO_TEORIA).exists():
                                materias_pend.append((elimina_tildes(mat.asignatura.nombre),mat.nivel.grupo.nombre,mat.inicio,mat.fin,mat.nivel.periodo.nombre))

        if materias_pend:
            return materias_pend
        else:
            return False

    def tiene_evaluacionalumno(self, periodo):
        return EvaluacionAlumno.objects.filter(materia__nivel__periodo=periodo,profesormateria__profesor=self).exists()

    def tiene_evaluacion(self, periodo):
        return EvaluacionDocentePeriodo.objects.filter(periodo=periodo, profesor=self).exists()
    def resultadosevaluacion(self,periodo):
        calificacionalu=0
        calificacionauto=0
        calificaciondire=0
        califaciondecano=0


        if EvaluacionDocentePeriodo.objects.filter(profesor=self, periodo=periodo, finalizado=True).exists():
            evadoc=EvaluacionDocentePeriodo.objects.filter(profesor=self, periodo=periodo, finalizado=True)[:1].get()
            calificacionalu=evadoc.procentajeestudiante
            calificacionalu=Decimal(calificacionalu).quantize(Decimal(10) ** -0)
            calificacionauto=evadoc.porcentajetotal
            calificacionauto=Decimal(calificacionauto).quantize(Decimal(10) ** -0)

            if evadoc.porcentajedirectivo:
                calificaciondire=evadoc.porcentajedirectivo

                calificaciondire=Decimal(calificaciondire).quantize(Decimal(10) ** -0)
        if EvaluacionCargoPeriodo.objects.filter(personaevaluada=self.persona, evaluaciondocente__periodo=periodo,finalizado=True).exists():
            evaluaciondecano=EvaluacionCargoPeriodo.objects.filter(personaevaluada=self.persona, evaluaciondocente__periodo=periodo,finalizado=True)[:1].get()
            calificacion = DetalleEvaluacionCargo.objects.filter(evaluacion=evaluaciondecano).aggregate(total_puntaje=Sum('respuesta__respuesta__puntaje'))['total_puntaje']
            calificaciondire=calificacion
            calificaciondire = Decimal(calificaciondire).quantize(Decimal(10) ** -0)
        return calificacionalu , calificacionauto, calificaciondire

    def resultadoauto(self,periodo):
        calificacion=0
        if EvaluacionDocentePeriodo.objects.filter(profesor=self, periodo=periodo,finalizado=True).exists():
            evadoc = EvaluacionDocentePeriodo.objects.filter(profesor=self, periodo=periodo,finalizado=True)[:1].get()

            if DetalleEvaluacionDocente.objects.filter(evaluacion=evadoc).exists():
                detaeva = DetalleEvaluacionDocente.objects.filter(evaluacion=evadoc).values('respuesta__eje')
                eje = EjesEvaluacion.objects.filter(id__in=detaeva)

                # totalmaximo=0
                # tote = EvaluacionAlumno.objects.filter(profesormateria__profesor=self,materia__nivel__periodo=periodo, finalizado=True).count()
                #
                totalmmaximoeje=0
                puntajemacimoobtener=0
                acumuladorespuesta=0
                for e in eje:
                    totalp = PreguntasEvaluacion.objects.filter(eje=e).order_by('orden').count()
                    totalr = RespuestasEjesEvaluacion.objects.filter(eje=e).order_by('-respuesta__puntaje')[:1].get()

                    totalmmaximoeje=totalp*totalr.respuesta.puntaje

                    totalmmaximoeje=Decimal(totalmmaximoeje).quantize(Decimal(10) ** -0)

                    puntajemacimoobtener=puntajemacimoobtener+totalmmaximoeje
                    puntajemacimoobtener=Decimal(puntajemacimoobtener).quantize(Decimal(10) ** -0)

                    VRA = 0

                    for det in PreguntasEvaluacion.objects.filter(eje=e).order_by('orden'):

                        for r in DetalleEvaluacionDocente.objects.filter(pregunta=det, evaluacion=evadoc):

                            # c = r.cantidad_respuesta_autoeva(evadoc.evaluaciondocente,det,periodo)
                            puntajerespuesta = r.respuesta.respuesta.puntaje

                            puntajerespuesta=Decimal(puntajerespuesta).quantize(Decimal(10) ** -0)
                            acumuladorespuesta=acumuladorespuesta+puntajerespuesta
                calificacion=(acumuladorespuesta*25)/puntajemacimoobtener
                calificacion=Decimal(calificacion).quantize(Decimal(10) ** -0)
                evadoc.porcentajetotal=calificacion
                evadoc.save()





            return calificacion


    def tiene_evaluaciondirectivo(self, periodo):
        if EvaluacionCargoPeriodo.objects.filter(personaevaluada=self.persona,evaluaciondocente__periodo=periodo, finalizado=True).exists():
            return 1
        else:
            if EvaluacionDirectivoPeriodo.objects.filter(finalizado=True,evaluaciondocenteperiodo__periodo=periodo, evaluaciondocenteperiodo__profesor=self).exists():
                return 2
    def calificaionindivi(self, periodo):
        evaluacionalumno=0
        if EvaluacionDirectivoPeriodo.objects.filter(evaluaciondocenteperiodo__periodo=periodo,evaluaciondocenteperiodo__profesor=self).exists():
            evaluacion=EvaluacionDirectivoPeriodo.objects.filter(evaluaciondocenteperiodo__periodo=periodo,evaluaciondocenteperiodo__profesor=self)[:1].get()
            evaluacionalumno=evaluacion.evaluaciondocenteperiodo.procentajeestudiante *100
            evaluacionalumno = Decimal(evaluacionalumno).quantize(Decimal(10) ** -0)
            return evaluacionalumno
        return evaluacionalumno
    def calificaionauto(self, periodo):
        evaluacionauto=0
        if EvaluacionDirectivoPeriodo.objects.filter(evaluaciondocenteperiodo__periodo=periodo,evaluaciondocenteperiodo__profesor=self).exists():
            evaluacion=EvaluacionDirectivoPeriodo.objects.filter(evaluaciondocenteperiodo__periodo=periodo,evaluaciondocenteperiodo__profesor=self)[:1].get()
            evaluacionauto=evaluacion.evaluaciondocenteperiodo.porcentajetotal *100
            evaluacionauto=Decimal(evaluacionauto).quantize(Decimal(10) ** -0)
            return evaluacionauto
        return evaluacionauto
    def calificaiondirectivo(self, periodo):
        evaluaciondirectivo=0
        if EvaluacionDirectivoPeriodo.objects.filter(evaluaciondocenteperiodo__periodo=periodo,evaluaciondocenteperiodo__profesor=self).exists():
            evaluacion=EvaluacionDirectivoPeriodo.objects.filter(evaluaciondocenteperiodo__periodo=periodo,evaluaciondocenteperiodo__profesor=self)[:1].get()
            evaluaciondirectivo=(evaluacion.valorresultadodirectivo*1000)*Decimal(0.5).quantize(Decimal(10) ** -2)
            evaluaciondirectivo=Decimal(evaluaciondirectivo).quantize(Decimal(10) ** -0)
            return evaluaciondirectivo
        return evaluaciondirectivo
    def tiene_analisis(self,periodo):
        return AnalisisEvaluacion.objects.filter(periodo=periodo,profesor=self).exists()

    def cantidad_documentos(self):
        return self.documentosprofesor_set.count()

    def rol_perfil(self):
        if self.rolperfilprofesor_set.all().exists():
            rolperfilprofesor = self.rolperfilprofesor_set.all()[:1].get()
        else:
            rolperfilprofesor = RolPerfilProfesor(profesor=self,
                                                  chlunes=0.00,
                                                  chmartes=0.00,
                                                  chmiercoles=0.00,
                                                  chjueves=0.00,
                                                  chviernes=0.00,
                                                  chsabado=0.00,
                                                  chdomingo=0.00,
                                                  esfijo=False)
            rolperfilprofesor.save()

        return rolperfilprofesor

    def horasrol(self,inicio,fin):
        suma=0
        if LeccionGrupo.objects.filter(profesor=self, fecha__gte=inicio, fecha__lte=fin).exists():
            for lg in LeccionGrupo.objects.filter(profesor=self, fecha__gte=inicio, fecha__lte=fin):
                suma += lg.costo_profesor_dia(inicio)
        return suma

    def calcula_horas_clase(self, inicio,fin):
        #OCastillo cambio en calculo horas por docentes con horario
        if self.conhorario:
            if LeccionGrupo.objects.filter(profesor=self, fecha__gte=inicio,fecha__lte=fin).exclude(Q(horaentrada__gte=self.horainicio, horaentrada__lte=self.horafin) | Q(horasalida__gte=self.horainicio, horasalida__lte=self.horafin),dia__in=[1, 2, 3, 4, 5]).exists():
                # leccionesGrupo = LeccionGrupo.objects.filter(profesor=self, fecha__gte=inicio, fecha__lte=fin).exclude(horaentrada__gte=self.horainicio,horasalida__lte=self.horafin,dia__in=[1,5])
                # return sum([x.turno.horas for x in leccionesGrupo])
                return LeccionGrupo.objects.filter(profesor=self, fecha__gte=inicio,fecha__lte=fin).exclude(Q(horaentrada__gte=self.horainicio, horaentrada__lte=self.horafin) | Q(horasalida__gte=self.horainicio, horasalida__lte=self.horafin),dia__in=[1, 2, 3, 4, 5]).aggregate(Sum('turno__horas'))['turno__horas__sum']
            else:
                return 0
        else:
            if LeccionGrupo.objects.filter(profesor=self, fecha__gte=inicio, fecha__lte=fin).exists():
                # leccionesGrupo = LeccionGrupo.objects.filter(profesor=self, fecha__gte=inicio, fecha__lte=fin)
                # return sum([x.turno.horas for x in leccionesGrupo])
                return LeccionGrupo.objects.filter(profesor=self, fecha__gte=inicio, fecha__lte=fin).aggregate(Sum('turno__horas'))['turno__horas__sum']
            else:
                return 0

    def gastos_personales_sri(self):
        return self.rol_perfil().gastos_personales_sri()

    def autoevaluado(self, proceso):
        instrumento = proceso.instrumento_profesor()
        return self.evaluacionprofesor_set.filter(proceso=proceso, persona=self.persona, profesor=self, instrumento=instrumento).exists()

    def mi_autoevaluacion(self, periodo):
        proceso = periodo.proceso_evaluativo()
        return self.evaluacionprofesor_set.filter(proceso=proceso, persona=self.persona, profesor=self).exists()

    def porciento_evaluacion_alumnos(self, periodo):
        mismaterias = ProfesorMateria.objects.filter(profesor=self, materia__nivel__periodo=periodo)
        totalalu = 0
        for ma in mismaterias:
            totalalu += ma.materia.asignados_a_esta_materia().count()
        proceso = periodo.proceso_evaluativo()
        instrumento = proceso.instrumento_alumno()
        evaluados = EvaluacionProfesor.objects.filter(proceso=proceso, profesor=self, instrumento=instrumento, persona__usuario__groups__in=[ALUMNOS_GROUP_ID]).count()
        return (float(evaluados) / totalalu) * 100 if evaluados > 0 and totalalu > 0 else 0

    def mis_coordinadores(self, periodo):
        if Persona.objects.filter(coordinadorcarrera__carrera__nivel__materia__profesormateria__profesor=self, coordinadorcarrera__carrera__nivel__periodo=periodo, coordinadorcarrera__periodo=periodo).distinct().exists():
            return Persona.objects.filter(coordinadorcarrera__carrera__nivel__materia__profesormateria__profesor=self, coordinadorcarrera__carrera__nivel__periodo=periodo, coordinadorcarrera__periodo=periodo).distinct()
        return None

    def es_coordinadorperiodo(self, periodo):
        if CoordinadorCarreraPeriodo.objects.filter(persona=self.persona, periodo=periodo).distinct().exists():
            return Persona.objects.filter(id=self.persona.id)[:1].get()
        return None

    def cantidad_coordinadores(self, periodo):
        if Persona.objects.filter(coordinadorcarrera__carrera__nivel__materia__profesormateria__profesor=self, coordinadorcarrera__carrera__nivel__periodo=periodo, coordinadorcarrera__periodo=periodo).distinct().exists():
            return Persona.objects.filter(coordinadorcarrera__carrera__nivel__materia__profesormateria__profesor=self, coordinadorcarrera__carrera__nivel__periodo=periodo, coordinadorcarrera__periodo=periodo).distinct().count()
        return 0

    def porciento_evaluacion_coordinador(self, periodo):
        coordinadores = self.mis_coordinadores(periodo)
        proceso = periodo.proceso_evaluativo()
        instrumento = proceso.instrumento_coordinador()
        if self.mis_coordinadores(periodo):
            evaluados = EvaluacionProfesor.objects.filter(proceso=proceso, profesor=self, instrumento=instrumento, persona__in=coordinadores).count()
            return (float(evaluados) / coordinadores.count()) * 100 if evaluados > 0 and coordinadores.count() > 0 else 0
        return 0

    def cantidad_materias(self, periodo):
        return ProfesorMateria.objects.filter(profesor=self, materia__nivel__periodo=periodo).count()

    def cantidad_materiascabierta(self):
        return Materia.objects.filter(Q(nivel__periodo__activo=True,  cerrado=False)& (Q(profesormateria__profesor=self,profesormateria__profesor_aux=None) | Q(profesormateria__profesor_aux=self.id))).count()

    def mis_materias(self, periodo):
        return ProfesorMateria.objects.filter(profesor=self, materia__nivel__periodo=periodo)

    def esta_evaluado_por(self, persona, proceso, instrumento):
        return EvaluacionProfesor.objects.filter(profesor=self, persona=persona, proceso=proceso, instrumento=instrumento).exists()

    def consulta_esta_evaluado_por(self,  proceso, instrumento):
        return EvaluacionProfesor.objects.filter(profesor=self,proceso=proceso, instrumento=instrumento).exists()

    def calcula_autoevaluacion(self, periodo):
        proceso = periodo.proceso_evaluativo()
        instrumento = proceso.instrumento_profesor()
        eval = DatoInstrumentoEvaluacion.objects.filter(evaluacion__proceso=proceso, evaluacion__profesor=self, evaluacion__instrumento=instrumento, evaluacion__persona=self.persona).aggregate(Avg('valor'))
        return round(eval.get('valor__avg')) if eval.get('valor__avg') is not None else 0

    def calcula_evaluacion_coordinador(self, periodo):
        proceso = periodo.proceso_evaluativo()
        instrumento = proceso.instrumento_coordinador()
        eval = DatoInstrumentoEvaluacion.objects.filter(evaluacion__proceso=proceso, evaluacion__profesor=self, evaluacion__instrumento=instrumento).aggregate(Avg('valor'))
        return int(eval.get('valor__avg')) if eval.get('valor__avg') is not None else 0

    def calcula_evaluacion_coordinadorconsult(self, persona, periodo):
        proceso = periodo.proceso_evaluativo()
        instrumento = proceso.instrumento_coordinador()
        eval = DatoInstrumentoEvaluacion.objects.filter(evaluacion__proceso=proceso, evaluacion__persona=persona, evaluacion__profesor=self, evaluacion__instrumento=instrumento).aggregate(Avg('valor'))
        return int(eval.get('valor__avg')) if eval.get('valor__avg') is not None else 0

    def consulta_evaluacion_coordinadorconsult(self,  periodo):
        proceso = periodo.proceso_evaluativo()
        instrumento = proceso.instrumento_coordinador()
        eval = DatoInstrumentoEvaluacion.objects.filter(evaluacion__proceso=proceso, evaluacion__profesor=self, evaluacion__instrumento=instrumento).aggregate(Avg('valor'))
        return int(eval.get('valor__avg')) if eval.get('valor__avg') is not None else 0

    def calcula_evaluacion_alumno(self, periodo):
        proceso = periodo.proceso_evaluativo()
        instrumento = proceso.instrumento_alumno()
        eval = DatoInstrumentoEvaluacion.objects.filter(evaluacion__proceso=proceso, evaluacion__profesor=self, evaluacion__instrumento=instrumento).aggregate(Avg('valor'))
        return int(eval.get('valor__avg')) if eval.get('valor__avg') is not None else 0

    def calcula_evaluacion_general(self, periodo):
        proceso = periodo.proceso_evaluativo()
        eval = DatoInstrumentoEvaluacion.objects.filter(evaluacion__proceso=proceso, evaluacion__profesor=self).aggregate(Avg('valor'))
        return int(eval.get('valor__avg')) if eval.get('valor__avg') is not None else 0

    def cantidad_alumnos_evaluaron(self):
        try:
            proceso = ProcesoEvaluativo.proceso_vigente()
            return EvaluacionProfesor.objects.filter(proceso=proceso, instrumento = proceso.instrumentoalumno, profesor=self ).count()
        except:
            return 0

    def cantidad_observaciones(self, periodo):
        proceso = periodo.proceso_evaluativo()
        return DatoInstrumentoEvaluacion.objects.filter(evaluacion__proceso=proceso, evaluacion__profesor=self, evaluacion__instrumento=proceso.instrumento_alumno(), observaciones__gt='').count()

    def evaluacion_final(self):
        return round((self.calcula_evaluacion_alumno() + self.calcula_autoevaluacion() + self.calcula_evaluacion_coordinador())/3)

    def materias_imparte(self):
        if Materia.objects.filter(nivel__periodo__activo=True, profesormateria__profesor=self).exists() or  Materia.objects.filter(nivel__periodo__activo=True, profesormateria__profesor_aux=self.id).exists() :
            return Materia.objects.filter(Q(nivel__periodo__activo = True) & (Q(profesormateria__profesor=self,profesormateria__profesor_aux=None) | Q(profesormateria__profesor_aux=self.id)))
        return None

    def materias_imparte_abiertas(self):
        if Materia.objects.filter(nivel__periodo__activo=True, profesormateria__profesor=self).exists() or  Materia.objects.filter(nivel__periodo__activo=True, profesormateria__profesor_aux=self.id).exists():
            return Materia.objects.filter(Q(nivel__periodo__activo=True,  cerrado=False)& (Q(profesormateria__profesor=self,profesormateria__profesor_aux=None) | Q(profesormateria__profesor_aux=self.id)))
        return None

    def materias_imparte_cerradas(self):
        if Materia.objects.filter(nivel__periodo__activo=True, profesormateria__profesor=self).exists() or  Materia.objects.filter(nivel__periodo__activo=True, profesormateria__profesor_aux=self.id).exists():
            # return Materia.objects.filter(nivel__periodo__activo=True, profesormateria__profesor=self, cerrado=True)
            return Materia.objects.filter(Q(nivel__periodo__activo=True,  cerrado=True)& (Q(profesormateria__profesor=self,profesormateria__profesor_aux=None) | Q(profesormateria__profesor_aux=self.id)))
        return None

    def materias_imparte_periodo(self, periodo):
        if INSCRIPCION_CONDUCCION:
            if Materia.objects.filter(nivel__periodo=periodo, profesormateria__profesor=self).exclude(asignatura__id=ASIGNATURA_PRACTICA_CONDUCCION).exists():
                return Materia.objects.filter(nivel__periodo=periodo, profesormateria__profesor=self).exclude(asignatura__id=ASIGNATURA_PRACTICA_CONDUCCION)
        else:
            if Profesor.objects.filter(categoria__id = PROFE_PRACT_CONDUCCION, pk = self.id):
                if Materia.objects.filter(nivel__periodo=periodo, profesormateria__profesor_aux=self.id).exists():
                    return Materia.objects.filter(nivel__periodo=periodo, profesormateria__profesor_aux=self.id)
            else:
                if Materia.objects.filter(nivel__periodo=periodo, profesormateria__profesor=self).exists():
                    return Materia.objects.filter(Q(nivel__periodo=periodo) & (Q(profesormateria__profesor=self,profesormateria__profesor_aux=None) | Q(profesormateria__profesor_aux=self.id)))
        return None

    def materias_imparte_sinperiodo(self):
        if INSCRIPCION_CONDUCCION:
            if Materia.objects.filter( profesormateria__profesor=self,profesormateria__hasta__gte=datetime.now().date()).exclude(asignatura__id=ASIGNATURA_PRACTICA_CONDUCCION).exists():
                return Materia.objects.filter( profesormateria__profesor=self,profesormateria__hasta__gte=datetime.now().date()).exclude(asignatura__id=ASIGNATURA_PRACTICA_CONDUCCION)
        else:
            if DEFAULT_PASSWORD=='itb':
                # if Profesor.objects.filter(categoria__id = PROFE_PRACT_CONDUCCION, pk = self.id):
                #     # if Materia.objects.filter( profesormateria__profesor_aux=self.id,profesormateria__hasta__gte=datetime.now().date()).exclude(profesormateria__fechacorreo=None).exists():
                #     if Materia.objects.filter(id__in=ProfesorMateria.objects.filter(hasta__gte=datetime.now().date(),profesor_aux=self.id).exclude(fechacorreo=None).values('materia')).exists():
                #         return Materia.objects.filter( profesormateria__profesor_aux=self.id,profesormateria__hasta__gte=datetime.now().date()).exclude(profesormateria__fechacorreo=None)
                # else:
                # if Materia.objects.filter(profesormateria__profesor=self,profesormateria__hasta__gte=datetime.now().date()).exclude(profesormateria__fechacorreo=None).exists():
                if Materia.objects.filter((Q(id__in=ProfesorMateria.objects.filter(hasta__gte=datetime.now().date(),profesor=self).exclude(fechacorreo=None).values('materia')) | Q(id__in=ProfesorMateria.objects.filter(hasta__gte=datetime.now().date(),profesor_aux=self.id).exclude(fechacorreo=None).values('materia')))).exists():
                    # return Materia.objects.filter((Q(profesormateria__profesor=self,profesormateria__profesor_aux=None,profesormateria__hasta__gte=datetime.now().date()) | Q(profesormateria__profesor_aux=self.id,profesormateria__hasta__gte=datetime.now().date())))
                    return Materia.objects.filter((Q(id__in=ProfesorMateria.objects.filter(hasta__gte=datetime.now().date(),profesor=self).exclude(fechacorreo=None).values('materia')) | Q(id__in=ProfesorMateria.objects.filter(hasta__gte=datetime.now().date(),profesor_aux=self.id).exclude(fechacorreo=None).values('materia'))))
            else:
                if Profesor.objects.filter(categoria__id = PROFE_PRACT_CONDUCCION, pk = self.id):
                    if Materia.objects.filter( profesormateria__profesor_aux=self.id,profesormateria__hasta__gte=datetime.now().date()).exists():
                        return Materia.objects.filter( profesormateria__profesor_aux=self.id,profesormateria__hasta__gte=datetime.now().date())
                else:
                    if Materia.objects.filter(profesormateria__profesor=self,profesormateria__hasta__gte=datetime.now().date()).exists():
                        return Materia.objects.filter((Q(profesormateria__profesor=self,profesormateria__profesor_aux=None,profesormateria__hasta__gte=datetime.now().date()) | Q(profesormateria__profesor_aux=self.id,profesormateria__hasta__gte=datetime.now().date())))
        return None

    def carreras_imparte(self):
        carreras=[]
        try:
            materias = self.materias_imparte()
            for materia in materias:
                carreras.append(materia.nivel.carrera)
            return set(carreras)
        except:
            return None

    def tiene_lecciongrupo(self, inicio, fin):
        # if LeccionGrupo.objects.filter(profesor_aux=self.id, fecha__gte=inicio, fecha__lte=fin).exists():
        #     return LeccionGrupo.objects.filter(profesor_aux=self.id, fecha__gte=inicio, fecha__lte=fin).exists()
        # else:
        if LeccionGrupo.objects.filter(profesor=self, fecha__gte=inicio, fecha__lte=fin).exists():
            return LeccionGrupo.objects.filter(profesor=self, fecha__gte=inicio, fecha__lte=fin).exists()

    def multa_rolpago(self):
        if self.multa_set.filter(cancelada=False).exists():
            return self.multa_set.filter(cancelada=False)[:1].get()
        return None

    def es_administrativo(self):
        return self.rol_perfil().esadministrativo

    def datos_horas_actividades(self):
        if self.profesorhorasactividades_set.exists():
            pha = self.profesorhorasactividades_set.all()[:1].get()
        else:
            pha = ProfesorHorasActividades(profesor=self)
            pha.save()
        return pha

    def horas_actividades(self):
        return self.profesorhorasactividades_set.all()

    def cantidad_horas_actividades(self):
        return self.profesorhorasactividades_set.all().count()

    def tutoria_exist(self):
        return Tutoria.objects.filter(profesor = self).exists()

    def mail_aperturafallida(self,clase):
        tipo = TipoIncidencia.objects.get(pk=21)
        hoy = datetime.now().today()
        contenido = "NOTIFICACION APERTURA CLASE"
        send_html_mail("NOTIFICACION APERTURA CLASE",
                       "emails/aperturafallida.html", {'d': self, 'fecha': hoy,'contenido': contenido,'clase':clase,'op':'1'},tipo.correo.split(","))

    # OCastillo 07-sep-2017 para presentar clases abiertas
    def clases_abiertas(self):
        if LeccionGrupo.objects.filter(profesor=self,abierta=True).exists():
            return LeccionGrupo.objects.filter(profesor=self, abierta=True,fecha__lt=datetime.now()).order_by('-fecha')
        return False

    def valor_vinculacion(self,inicio,fin):
        suma = 0
        valor = 0
        if DocenteVinculacion.objects.filter(persona=self.persona,fecha__gte=inicio, fecha__lte=fin).exists():
            for dv in DocenteVinculacion.objects.filter(persona=self.persona, fecha__gte=inicio, fecha__lte=fin):
                if RolPerfilProfesor.objects.filter(profesor=self).exists():
                    rp = RolPerfilProfesor.objects.filter(profesor=self)[:1].get()
                    if datetime.weekday(dv.fecha) == 0:
                        valor = dv.horas * rp.chlunes
                    if  datetime.weekday(dv.fecha)== 1:
                        valor = dv.horas * rp.chmartes
                    if  datetime.weekday(dv.fecha) == 2:
                        valor = dv.horas * rp.chmiercoles
                    if  datetime.weekday(dv.fecha) == 3:
                        valor = dv.horas * rp.chjueves
                    if  datetime.weekday(dv.fecha) == 4:
                        valor = dv.horas * rp.chviernes
                    if  datetime.weekday(dv.fecha) ==5:
                        valor = dv.horas * rp.chsabado
                    if datetime.weekday(dv.fecha)== 6:
                        valor = dv.horas * rp.chdomingo
                    suma = suma  + valor
        return suma
    def horas_vinculacion(self,inicio,fin):
        suma = 0
        if DocenteVinculacion.objects.filter(persona=self.persona,fecha__gte=inicio, fecha__lte=fin).exists():
            suma =  DocenteVinculacion.objects.filter(persona=self.persona, fecha__gte=inicio, fecha__lte=fin).aggregate(Sum('horas'))['horas__sum']
        return suma

    def horas_seminario(self,inicio,fin):
        suma = 0
        if PagoSustentacionesDocente.objects.filter(profesor=self,aprobado=True,fechaaprobacion__gte=inicio, fechaaprobacion__lte=fin).exists():
            # suma =  PagoSustentacionesDocente.objects.filter(profesor=self,aprobado=True,fecha__gte=inicio, fecha__lte=fin).aggregate(Sum('valortotal'))['valortotal_sum']
            pago_sustentaciones =  PagoSustentacionesDocente.objects.filter(profesor=self,aprobado=True,fechaaprobacion__gte=inicio, fechaaprobacion__lte=fin)
            for p in pago_sustentaciones:
                suma = suma+p.valortotal
                p.rol=True
                p.save()
        return float(suma)

    def pago_practicas(self,inicio,fin):
        suma= 0
        if PagoPracticasDocente.objects.filter(profesor=self, pagoaprobado=True, fechaaprobacion__gte=inicio, fechaaprobacion__lte=fin).exists():
            pago_practicas = PagoPracticasDocente.objects.filter(profesor=self, pagoaprobado=True, fechaaprobacion__gte=inicio, fechaaprobacion__lte=fin)
            for p in pago_practicas:
                suma = suma + p.valor
                p.rol=True
                p.save()
        return suma

    def otros_ingresos(self,inicio,fin):
        lista = list()
        if IngresoDocente.objects.filter(profesor=self,aprobado=True,fechaaprobacion__gte=inicio, fechaaprobacion__lte=fin).exists():
            # ingresos =  IngresoDocente.objects.filter(profesor=self,aprobado=True,fechaaprobacion__gte=inicio, fechaaprobacion__lte=fin, tipo__id=TPOINGRESO_BONIFICACION_AUDITORIA)
            for t in TipoIngresoDocente.objects.filter().order_by('descripcion'):
                ingresos =  IngresoDocente.objects.filter(profesor=self,aprobado=True,fechaaprobacion__gte=inicio, fechaaprobacion__lte=fin)
                if ingresos.filter(tipo=t).exists():
                    ingresos = ingresos.filter(tipo=t)
                    suma = 0
                    for i in ingresos:
                        suma = suma+i.valor
                        i.rol=True
                        i.save()
                    lista.append([t.id,float(suma)])
        return lista

    def valor_comision_cobranzas(self, inicio, fin):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.persona.usuario, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.persona.usuario, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True)
            suma = rubro_seguimiento.aggregate(Sum('valorgestionado'))['valorgestionado__sum']
            porcentaje_comision = IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma)[:1].get().porcentajecomision
            comision = 0
            total_valorxfactor = 0
            for rs in rubro_seguimiento:
                valorxfactor = float(rs.valorgestionado)*float(rs.categoria.factor)
                total_valorxfactor = total_valorxfactor + valorxfactor
            # print(total_valorxfactor)
            comision = total_valorxfactor*float(porcentaje_comision)/100
            return round(comision,2)
        return 0

    class Meta:
        verbose_name = "Profesor"
        verbose_name_plural = "Profesores"
        ordering = ['persona__apellido1']


    #OC 15-agosto-2018
    def materias_cerradasagosto2018(self):
        if Materia.objects.filter(profesormateria__profesor=self,profesormateria__segmento__id=TIPOSEGMENTO_TEORIA,fechacierre__gte=FECHA_CIERRE_SINACTA,cerrado = True).exists() or  Materia.objects.filter(profesormateria__profesor_aux=self.id,profesormateria__segmento__id=TIPOSEGMENTO_TEORIA, fechacierre__gte=FECHA_CIERRE_SINACTA,cerrado = True).exists() :
            if Materia.objects.filter(profesormateria__profesor=self,profesormateria__segmento__id=TIPOSEGMENTO_TEORIA,fechacierre__gte=FECHA_CIERRE_SINACTA,cerrado = True ).exists():
                return Materia.objects.filter(profesormateria__profesor=self,fechacierre__gte=FECHA_CIERRE_SINACTA,cerrado = True,profesormateria__segmento__id=TIPOSEGMENTO_TEORIA).order_by('fechacierre')
            else:
                return Materia.objects.filter(profesormateria__profesor_aux=self.id,fechacierre__gte=FECHA_CIERRE_SINACTA,cerrado = True,profesormateria__segmento__id=TIPOSEGMENTO_TEORIA).order_by('fechacierre')
        return None

    def mail_materias_cerradassinactanotas(self,clase,materias):
        tipo = TipoIncidencia.objects.get(pk=57)
        hoy = datetime.now().today()
        contenido = "NOTIFICACION  NO APERTURA CLASE"
        send_html_mail("NOTIFICACION NO APERTURA CLASE",
                       "emails/aperturafallida.html", {'d': self, 'fecha': hoy,'contenido': contenido,'clase':clase,'materias':materias,'op':'2'},tipo.correo.split(","))

    def actasnotas_sinentregar(self):
        fecha = datetime.now().date() + timedelta(days=-3)
        arreglo_materias=[]
        #OCastillo 01-02-2023 se excluyen materias rechazadas
        profesor=ProfesorMateria.objects.filter(Q(profesor=self,profesor_aux=None,materia__cerrado=True,segmento__id=TIPOSEGMENTO_TEORIA,materia__fechacierre__gte='2019-05-01',materia__fechacierre__lte=fecha)|Q(profesor_aux=self.id,materia__cerrado=True,segmento__id=TIPOSEGMENTO_TEORIA,materia__fechacierre__gte='2019-05-01',materia__fechacierre__lte=fecha)).exclude(profesor__persona__nombres__icontains='DEFINIR').exclude(profesor__persona__apellido1__icontains='BUCKINGHAM').exclude(aceptacion=False).order_by('materia__asignatura__nombre')
        for prof in profesor:
            #en la UASS el responsable del acta es el docente del segmento teoria
            carrera=  prof.materia.nivel.carrera
            if Coordinacion.objects.filter(carrera=carrera).exists():
                if prof.materia.nivel.coordinacion().id==COORDINACION_UASSS:
                    for  materia in Materia.objects.filter(pk=prof.materia.id,cerrado=True).exclude(asignatura__id__in=[ASIG_VINCULACION,817]):
                        for matsinrecep in MateriaRecepcionActaNotas.objects.filter(materia=materia,entregada=False,materia__cerrado=True,materia__fechacierre__gte='2019-05-01',materia__fechacierre__lte=fecha).exclude(materia__asignatura__id=ASIG_VINCULACION).order_by('materia__asignatura__nombre'):
                            if ProfesorMateria.objects.filter(materia=matsinrecep.materia,segmento__id=TIPOSEGMENTO_TEORIA,materia__cerrado=True).exists():
                                pr = ProfesorMateria.objects.filter(materia=matsinrecep.materia,segmento__id=TIPOSEGMENTO_TEORIA,materia__cerrado=True)[:1].get()
                                if pr.profesor_aux:
                                    profesor=Profesor.objects.get(pk=pr.profesor_aux)
                                else:
                                    profesor = pr.profesor
                                if profesor.activo:
                                    arreglo_materias.append((elimina_tildes(matsinrecep.materia.asignatura.nombre),matsinrecep.materia.nivel.nivelmalla.nombre,matsinrecep.materia.nivel.grupo.nombre,matsinrecep.materia.fechacierre,elimina_tildes(matsinrecep.materia.nivel.carrera.nombre)))
                else:
                    #en la UAECAD el responsable del acta es el docente del segmento teoria que ha terminado la materia
                    for  materia in Materia.objects.filter(pk=prof.materia.id,fin=prof.hasta,cerrado=True).exclude(asignatura__id__in=[ASIG_VINCULACION,817]):
                        for matsinrecep in MateriaRecepcionActaNotas.objects.filter(materia=materia,entregada=False,materia__cerrado=True):
                            if prof.profesor_aux:
                                profesor=Profesor.objects.get(pk=prof.profesor_aux)
                            else:
                                profesor = prof.profesor
                            if prof.profesor.activo:
                                #OCastillo 01-02-2023 se agrega informacion adicional para identificar paralelo y periodo
                                arreglo_materias.append((elimina_tildes(matsinrecep.materia.asignatura.nombre)+' '+elimina_tildes(matsinrecep.materia.nivel.paralelo)+'Periodo: '+elimina_tildes(matsinrecep.materia.nivel.periodo.nombre),matsinrecep.materia.nivel.nivelmalla.nombre,matsinrecep.materia.nivel.grupo.nombre,matsinrecep.materia.fechacierre,elimina_tildes(matsinrecep.materia.nivel.carrera.nombre)))

        if arreglo_materias :
            return arreglo_materias

    def verificaactasnotas_sinentregar(self):
        fecha = datetime.now().date() + timedelta(days=-3)
        entrega=False
        profesor=ProfesorMateria.objects.filter(Q(profesor=self,profesor_aux=None,materia__cerrado=True,segmento__id=TIPOSEGMENTO_TEORIA,materia__fechacierre__gte='2019-05-01',materia__fechacierre__lte=fecha)|Q(profesor_aux=self.id,materia__cerrado=True,segmento__id=TIPOSEGMENTO_TEORIA,materia__fechacierre__gte='2019-05-01',materia__fechacierre__lte=fecha)).exclude(profesor__persona__nombres__icontains='DEFINIR').order_by('materia__asignatura__nombre')
        for prof in profesor:
            #en la UASS el responsable del acta es el docente del segmento teoria
            carrera=  prof.materia.nivel.carrera
            if entrega:
                break
            if Coordinacion.objects.filter(carrera=carrera).exists():
                if prof.materia.nivel.coordinacion().id==COORDINACION_UASSS:
                    for  materia in Materia.objects.filter(pk=prof.materia.id,cerrado=True):
                        if entrega:
                            break
                        for matsinrecep in MateriaRecepcionActaNotas.objects.filter(materia=materia,entregada=False,materia__cerrado=True,materia__fechacierre__gte='2019-05-01',materia__fechacierre__lte=fecha).exclude(materia__asignatura__id=ASIG_VINCULACION).order_by('materia__asignatura__nombre'):
                            if entrega:
                                break
                            if ProfesorMateria.objects.filter(materia=matsinrecep.materia,segmento__id=TIPOSEGMENTO_TEORIA,materia__cerrado=True).exists():
                                pr = ProfesorMateria.objects.filter(materia=matsinrecep.materia,segmento__id=TIPOSEGMENTO_TEORIA,materia__cerrado=True)[:1].get()
                                if pr.profesor_aux:
                                    profesor=Profesor.objects.get(pk=pr.profesor_aux)
                                    entrega=True
                                    break
                                else:
                                    profesor = pr.profesor
                                    entrega=True
                                    break
                else:
                    #en la UAECAD el responsable del acta es el docente del segmento teoria que ha terminado la materia
                    for  materia in Materia.objects.filter(pk=prof.materia.id,fin=prof.hasta,cerrado=True):
                        if entrega:
                            break
                        for matsinrecep in MateriaRecepcionActaNotas.objects.filter(materia=materia,entregada=False,materia__cerrado=True):
                            if entrega:
                                break
                            if prof.profesor_aux:
                                profesor=Profesor.objects.get(pk=prof.profesor_aux)
                                entrega=True
                                break
                            else:
                                profesor = prof.profesor
                                entrega=True
                                break
        return entrega

    def multas_docentes(self,inicio,fin):
        valor = 0
        if MultaDocenteMateria.objects.filter(profesor=self,fechadesde__gte=inicio,fechadesde__lte=fin,aprobado=True).exists():
            valor=MultaDocenteMateria.objects.filter(profesor=self,fechadesde__gte=inicio,fechadesde__lte=fin).aggregate(Sum('tipomulta__valor'))['tipomulta__valor__sum']
        return valor


class TipoSegmento(models.Model):
    descripcion = models.CharField(max_length=200,null=True,blank=False)

    def __str__(self):
        return str(self.descripcion)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(TipoSegmento, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = 'Tipo Segmento'
        verbose_name_plural = 'Tipos de Segmento'

class ProfesorMateria(models.Model):
    segmento = models.ForeignKey(TipoSegmento, on_delete=models.CASCADE)
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    profesor_aux = models.IntegerField(blank=True,null=True)
    desde = models.DateField()
    hasta = models.DateField()
    fechacorreo = models.DateField(blank=True,null=True)
    aceptacion = models.BooleanField(default=False)
    suspendido = models.BooleanField(default=False)
    idzoom = models.CharField(max_length=50,blank=True,null=True)
    valorporhora = models.BooleanField(default=False, blank=True)
    valor = models.FloatField(default=0,blank=True, null=True)
    documentaciondiscapacidad = models.BooleanField(default=False, blank=True)

    def __str__(self):
        return str(self.materia.asignatura.nombre) + " " + str(self.materia.nivel.nivelmalla.nombre) + " " +str(self.segmento)+ " " +str(self.profesor)

    class Meta:
        verbose_name = "Profesor de Materia"
        verbose_name_plural = "Profesores de Materias"

    def tiene_log_profesor(self):
        return  LogAceptacionProfesorMateria.objects.filter(profesormateria=self,tipolog__in=[1,2]).exists()

    def tiene_materialsubido(self):
        return  MaterialDocente.objects.filter(profesormateria=self).exists()

    def log_profesor(self):
        return  LogAceptacionProfesorMateria.objects.filter(profesormateria=self,tipolog__in=[1,2]).order_by('-id')[:1].get()

    def tiene_lecciones(self):
        if self.profesor_aux:
            profesor=Profesor.objects.get(pk=self.profesor_aux)
            if  LeccionGrupo.objects.filter(profesor=profesor, lecciones__clase__materia=self.materia).exists():
                return LeccionGrupo.objects.filter(profesor=profesor, lecciones__clase__materia=self.materia)
        else:
            if LeccionGrupo.objects.filter(profesor=self.profesor, lecciones__clase__materia=self.materia).exists():
                return LeccionGrupo.objects.filter(profesor=self.profesor, lecciones__clase__materia=self.materia)


    def cantidad_lecciones(self):
        if self.profesor_aux:
            profesor=Profesor.objects.get(pk=self.profesor_aux)
            if LeccionGrupo.objects.filter(profesor=profesor, lecciones__clase__materia=self.materia).exists():
                return LeccionGrupo.objects.filter(profesor=profesor, lecciones__clase__materia=self.materia).count()
        else:
            if LeccionGrupo.objects.filter(profesor=self.profesor, lecciones__clase__materia=self.materia).exists():
                return LeccionGrupo.objects.filter(profesor=self.profesor, lecciones__clase__materia=self.materia).count()


    def nivel_materia(self):
        return Materia.objects.get(materia=self).nivel

    def profesor_auxiliar(self):
        if Profesor.objects.filter(pk=self.profesor_aux).exists():
            return Profesor.objects.get(pk=self.profesor_aux)


    def profesor_logaceptacion(self):
        # tipolog 1 .- indica que acepto 2 indica que rechazo
        if LogAceptacionProfesorMateria.objects.filter(profesormateria=self,tipolog__in=[1,2]).exists():
            return True
        else:
            return False


    # def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
    #     # self.segmento = self.segmento.upper()
    #     super(ProfesorMateria, self).save(force_insert, force_update, using, update_fields)


    def mail_materiaasignada(self, correo,usuario):
        hoy = datetime.now().today()
        if self.profesor_aux>0:
            profesor = Profesor.objects.get(pk=self.profesor_aux)
        else:
            profesor= self.profesor

        if Clase.objects.filter(materia__profesormateria__profesor=profesor,materia=self.materia).exists():
            clase = Clase.objects.filter(materia__profesormateria__profesor=profesor,materia=self.materia)[:1].get()
        else:
            clase=''

        contenido = 'Estimado Docente  '+ str(profesor.persona.nombre_completo_inverso()) + ', ' + 'usted ha sido asignado a la siguiente materia:'
        send_html_mail("MATERIA ASIGNADA",
                       "emails/materiaasignada.html", {'d': self, 'fecha': hoy,'usuario':usuario,'contenido': contenido,'clase':clase},correo.split(","))

    def mail_valorhora_coordinacion(self, correo,usuario):
        hoy = datetime.now().today()
        if self.profesor_aux>0:
            profesor = Profesor.objects.get(pk=self.profesor_aux)
        else:
            profesor= self.profesor

        if Clase.objects.filter(materia__profesormateria__profesor=profesor,materia=self.materia).exists():
            clase = Clase.objects.filter(materia__profesormateria__profesor=profesor,materia=self.materia)[:1].get()
        else:
            clase=''

        contenido = 'Se ha asignado el valor de $'+str(self.valor)+' la hora para el docente '+profesor.persona.nombre_completo_inverso()
        print(contenido)
        send_html_mail("VALOR POR HORA ASIGNADO",
                       "emails/materiaasignada_valorhora.html", {'d': self, 'fecha': hoy,'usuario':usuario,'contenido': contenido,'clase':clase, 'valor':self.valor, 'segmento':self.segmento.descripcion},correo.split(","))


    def mail_materianivelcerrado(self,profesor,correo,usuario):
        hoy = datetime.now().today()
        contenido = 'Estimado Docente  '+ str(profesor.persona.nombre_completo_inverso()) + ', ' + 'usted ha sido asignado a la siguiente materia en nivel cerrado:'
        send_html_mail("MATERIA ASIGNADA EN NIVEL CERRADO",
                       "emails/materiaasignadanivelcerrado.html", {'d': self, 'fecha': hoy,'usuario':usuario,'contenido': contenido},correo.split(","))


    def tiene_log_quitar_profesor(self):
        return  LogQuitarAsignacionProfesor.objects.filter(profesormateria=self).exists()

    def aceptar_suspension(self):
        if self.suspendido:
            pm = ProfesorMateria.objects.get(id=self.id)
            if pm.hasta > datetime.now().date():
                return False
            else :
                return True

        else:
            pm = ProfesorMateria.objects.get(id=self.id)
            if pm.hasta > datetime.now().date():
                return False
            else:
                return True

    def tiene_clases_online(self):
        return  ClasesOnline.objects.filter(profesormateria=self).exists()


    def existtituexaparcial(self):
        if TituloExamenParcial.objects.filter(profesormateria=self).count() < 2:
            return True
        return False

    def profeexamenparcial(self):
        if TituloExamenParcial.objects.filter(profesormateria=self).exists():
            return TituloExamenParcial.objects.filter(profesormateria=self)[:1].get()
        return False

    def esasignadoennivelcerrado(self):
        if ProfesorMateria.objects.filter(pk=self.id,materia__nivel__cerrado=True).order_by('-id').exists():
            materia =  Materia.objects.filter(pk=self.materia.id,nivel__cerrado=True).order_by('-id')[:1].get()
            if ProfesorMateria.objects.filter(pk=self.id,materia__nivel__cerrado=True,desde__gte=materia.nivel.fechacierre).order_by('-id').exists():
                return  True
            else:
                return  False


NIVELES_TITULACION = (
    ('TECNICO','TECNICO'),
    ('3er. NIVEL','3er. NIVEL'),
    ('4to. NIVEL','4to. NIVEL')
)

class TipoNivelTitulacion(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Nivel Titulacion"
        verbose_name_plural = "Tipos de Niveles Titulaciones"
        ordering = ['nombre']

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoNivelTitulacion, self).save(force_insert, force_update, using, update_fields)

class AreaConocimiento(models.Model):
    nombre = models.CharField(max_length=200)

    def __str__(self):
        return "Area de Conocimiento: " + self.nombre

    class Meta:
        verbose_name = "Area de Conocimiento"
        verbose_name_plural = "Areas de Conocimiento"
        ordering = ['nombre']

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(AreaConocimiento, self).save(force_insert, force_update, using, update_fields)

class SubAreaConocimiento(models.Model):
    codigo = models.CharField(max_length=50)
    nombre = models.CharField(max_length=200)
    descripcion = models.CharField(max_length=250)
    area = models.ForeignKey(AreaConocimiento, on_delete=models.CASCADE)

    def __str__(self):
        return self.codigo + ' - ' + self.nombre + ' (' + self.area.nombre + ')'

    class Meta:
        verbose_name = "SubArea de Conocimiento"
        verbose_name_plural = "SubAreas de Conocimiento"
        ordering = ['codigo']

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.codigo = self.codigo.upper()
        self.nombre = self.nombre.upper()
        self.descripcion = self.descripcion.upper()
        super(SubAreaConocimiento, self).save(force_insert, force_update, using, update_fields)

class TitulacionProfesor(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    titulo = models.CharField(max_length=200)
    pais = models.ForeignKey(Pais, blank=True, null=True, on_delete=models.CASCADE)
    nivel = models.CharField(max_length=20, choices=NIVELES_TITULACION)
    tiponivel = models.ForeignKey(TipoNivelTitulacion, blank=True, null=True, on_delete=models.CASCADE)
    institucion = models.CharField(max_length=200)
    fecha = models.DateField(verbose_name=u'Fecha Titulo')
    registro = models.CharField(max_length=100, verbose_name=u'Registro SENESCYT', blank=True, null=True)
    codigoprofesional = models.CharField(max_length=100, verbose_name="Codigo Profesional", null=True, blank=True)
    subarea = models.ForeignKey(SubAreaConocimiento, blank=True, null=True, on_delete=models.CASCADE)

    def representacion_api(self):
        return "%s %s %s"%(self.titulo, self.nivel, self.institucion)

    def __str__(self):
        return str(self.profesor)+" "+self.titulo+" "+self.nivel+" "+self.institucion+" "

    class Meta:
        verbose_name = "Titulo de Profesor"
        verbose_name_plural = "Titulos de Profesores"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.titulo = self.titulo.upper()
        self.institucion = self.institucion.upper()
        self.registro = self.registro.upper()
        if self.codigoprofesional:
            self.codigoprofesional = self.codigoprofesional.upper()
        super(TitulacionProfesor, self).save(force_insert, force_update, using, update_fields)

class ProfesorHorasActividades(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    anno = models.IntegerField(blank=True, null=True)
    horasded = models.FloatField(default=0)
    horasinv = models.FloatField(default=0)
    horasadm = models.FloatField(default=0)
    horasvin = models.FloatField(default=0)
    horasotr = models.FloatField(default=0)
    otrasactividades = models.CharField(max_length=250, blank=True, null=True)

    def __str__(self):
        return str(self.profesor)+" Total Horas: " + str(self.total_horas())

    def total_horas(self):
        return self.horasadm + self.horasded + self.horasvin + self.horasinv + self.horasotr

    class Meta:
        verbose_name = "Profesor - Hora Actividad"
        verbose_name_plural = "Profesores - Horas Actividades"
        ordering = ['anno']

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.otrasactividades: self.otrasactividades = self.otrasactividades.upper()
        super(ProfesorHorasActividades, self).save(force_insert, force_update, using, update_fields)


class Turno(models.Model):
    sesion = models.ForeignKey(Sesion, on_delete=models.CASCADE)
    turno = models.IntegerField()
    comienza = models.TimeField()
    termina = models.TimeField()
    horas = models.FloatField(blank=True, null=True)
    practica = models.BooleanField(default=False)


    def duracion(self):
        end = timedelta(hours=self.termina.hour, minutes=self.termina.minute)
        start = timedelta(hours=self.comienza.hour, minutes=self.comienza.minute)
        return end - start

    def __str__(self):
        return "Turno "+str(self.turno)+" ["+str(self.comienza)+" a "+str(self.termina)+"]" + " Practica " if self.practica  else "Turno "+str(self.turno)+" ["+str(self.comienza)+" a "+str(self.termina)+"]" +" Teoria "

    def tiene_clases(self):
        if self.clase_set.all().count()>0:
            return True
        else:
            return False

    class Meta:
        verbose_name = "Turno de Clase"
        verbose_name_plural = "Turnos de Clases"

DIAS_CHOICES=(
    (1, 'Lunes'),
    (2, 'Martes'),
    (3, 'Miercoles'),
    (4, 'Jueves'),
    (5, 'Viernes'),
    (6, 'Sabado'),
    (7, 'Domingo')
)

MESES_CHOICES = (
    (1, 'Enero'),
    (2, 'Febrero'),
    (3, 'Marzo'),
    (4, 'Abril'),
    (5, 'Mayo'),
    (6, 'Junio'),
    (7, 'Julio'),
    (8, 'Agosto'),
    (9, 'Septiembre'),
    (10, 'Octubre'),
    (11, 'Noviembre'),
    (12, 'Diciembre'))


class Clase(models.Model):
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, null=True, blank=True, on_delete=models.CASCADE)
    turno = models.ForeignKey(Turno, on_delete=models.CASCADE)
    aula = models.ForeignKey(Aula, on_delete=models.CASCADE)
    dia = models.IntegerField(choices=DIAS_CHOICES)
    virtual=models.BooleanField(default=False)
    profesormateria = models.ForeignKey(ProfesorMateria, null=True, blank=True, on_delete=models.CASCADE)

    def dia_semana(self):
        return DIAS_CHOICES[self.dia-1][1]

    def __str__(self):
        return str(self.materia)+" "+str(self.profesor)+" "+str(self.turno)+" "+str(self.aula)+" "+str(self.dia)

    class Meta:
        verbose_name = "Clase Horario"
        verbose_name_plural = "Clases Horarios"

    def tiene_lecciones(self):
        return self.materia.lecciongrupo_set.all().count() > 0

    def cantidad_lecciones(self):
        return self.materia.lecciongrupo_set.all().count()

    def disponible(self):
        if self.profesormateria==None:
            if CLASES_HORARIO_ESTRICTO:
                d = datetime.now()
                if (self.dia-1)==d.weekday():
                    # Es hoy
                    d2 = datetime(d.year,d.month,d.day,self.turno.comienza.hour,self.turno.comienza.minute)
                    dt = (time.mktime(time.localtime()) - time.mktime(d2.timetuple()))/60
                    if dt<0:
                        # Antes del comienzo
                        return abs(dt)<=CLASES_APERTURA_ANTES
                    else:
                        return dt<=CLASES_APERTURA_DESPUES
                return False
            return True
        else:
            if self.profesormateria:
                return self.fechavigente()

    def disponible3(self):

        if CLASES_HORARIO_ESTRICTO:
            d = datetime.now()
            da = d.weekday()
            h = self.dia-1
            x = da - 2
            if (((x == -2) and (h == 6  or h == 5 or h == 0 )) or((x == -1) and (h == 6  or h == 0 or h == 1 ))):
                return  True
            if (x <= h and da >= h):
                return True
            return  False

        return False

    def jornadaclases(self):
        jornada=''
        if self.turno.comienza>=datetime.strptime('07:00:00', '%H:%M:%S').time() and self.turno.termina<=datetime.strptime('12:00:00', '%H:%M:%S').time():
            jornada='MATUTINA'
        elif self.turno.comienza>=datetime.strptime('13:00:00', '%H:%M:%S').time() and self.turno.termina<=datetime.strptime('18:00:00', '%H:%M:%S').time():
            jornada='VESPERTINA'
        elif self.turno.comienza>=datetime.strptime('19:00:00', '%H:%M:%S').time() and self.turno.termina<=datetime.strptime('22:00:00', '%H:%M:%S').time():
            jornada='NOCTURNA'
        elif self.turno.comienza>=datetime.strptime('08:00:00', '%H:%M:%S').time() and self.turno.termina<=datetime.strptime('18:00:00', '%H:%M:%S').time():
            jornada='FIN DE SEMANA'
        elif self.turno.comienza>=datetime.strptime('13:30:00', '%H:%M:%S').time() and self.turno.termina<=datetime.strptime('18:00:00', '%H:%M:%S').time():
            jornada='FIN DE SEMANA'
        return jornada

    def disponible4(self):
        if CLASES_HORARIO_ESTRICTO:
            d = datetime.now()
            da = d.weekday()
            h = self.dia-1
            x = da - 3
            if (((x == -3) and (h == 6  or h == 5 or h == 0 or h == 4 )) or((x == -1) and (h == 6  or h == 0 or h == 1 )) or ((x == -2) and (h == 6  or h == 0 or h == 1 or h == 5))):
                return  True
            if (x <= h and da >= h):
                return True
            return  False

        return False

    def disponible2(self):
        finasignacion=False
        hoy=datetime.now().date()
        # if self.profesormateria==None:
        if CLASES_HORARIO_ESTRICTO:
            d = datetime.now()
            if (self.dia-1)==d.weekday():
                # Es hoy
                d2 = datetime(d.year,d.month,d.day,self.turno.comienza.hour,self.turno.comienza.minute)
                d3 = datetime(d.year,d.month,d.day,self.turno.termina.hour,self.turno.termina.minute)
                dt = (time.mktime(time.localtime()) - time.mktime(d2.timetuple()))/60
                dt2 = (time.mktime(d3.timetuple()) - time.mktime(d2.timetuple()))/60
                if ProfesorMateria.objects.filter(materia=self.materia,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True).count()>=2:
                    finasignacion=True
                else:
                    if  ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                        finasignacion=True
                    elif ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                        finasignacion=True
                    elif  ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_PRACT,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                        finasignacion=True

                    elif ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_PRACT,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                        finasignacion=True
                    else:
                        finasignacion=False

                if finasignacion==True:
                    if dt<0:
                        # Antes del comienzo
                        #     return abs(dt)<=dt2
                        pass
                    else:
                        return dt<=dt2
            return False
        return True
        # else:
        #     if self.profesormateria:
        #         return self.fechavigente()

    def disponible5(self):
        if self.profesormateria:
            return self.fechavigente2()


    def verificaprobacionmateria(self):

        if DEFAULT_PASSWORD=='itb':
            if Materia.objects.filter( profesormateria__profesor_aux=self.profesor,profesormateria__hasta__gte=datetime.now().date(),profesormateria__aceptacion=True).exists():
                return True
            else:
                if Materia.objects.filter( profesormateria__profesor=self.profesor,profesormateria__hasta__gte=datetime.now().date(),profesormateria__aceptacion=True).exists():
                    return True
                else:
                    return False
        else:
            return True

    def fechavigente(self):
        finasignacion=True
        hoy=datetime.now().date()
        hoy2=datetime.now()
        if not Leccion.objects.filter(clase=self,fecha=hoy).exists():
            if not self.profesormateria:
                finasignacion=True
            else:
                if (self.dia-1)==hoy2.weekday():
                    d2 = datetime(hoy2.year,hoy2.month,hoy2.day,self.turno.comienza.hour,self.turno.comienza.minute)
                    d3 = datetime(hoy2.year,hoy2.month,hoy2.day,self.turno.termina.hour,self.turno.termina.minute)
                    dt = (time.mktime(time.localtime()) - time.mktime(d2.timetuple()))/60
                    dt2 = (time.mktime(d3.timetuple()) - time.mktime(d2.timetuple()))/60

                    if ProfesorMateria.objects.filter(materia=self.materia,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True).count()>=2:
                        finasignacion=True
                    else:
                        if  ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                            finasignacion=True
                        elif ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                            finasignacion=True
                        elif  ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_PRACT,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                            finasignacion=True

                        elif ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_PRACT,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                            finasignacion=True
                        else:
                            finasignacion=False

                    if finasignacion==True:
                        if dt<0:
                            # Antes del comienzo
                            return abs(dt)<=CLASES_APERTURA_ANTES
                        else:
                            return dt<=CLASES_APERTURA_DESPUES
                else:
                    finasignacion=False
        else:
            finasignacion=False

        return finasignacion

    def fechavigente2(self):
        #OCastillo 04-08-2022 que permita abrir clases los dias de vigencia de la materia
        finasignacion=True
        hoy=datetime.now().date()
        hoy2=datetime.now()
        if not Leccion.objects.filter(clase=self,fecha=hoy).exists():
            if not self.profesormateria:
                finasignacion=True
            else:
                # if (self.dia-1)!=hoy2.weekday():
                d2 = datetime(hoy2.year,hoy2.month,hoy2.day,self.turno.comienza.hour,self.turno.comienza.minute)
                d3 = datetime(hoy2.year,hoy2.month,hoy2.day,self.turno.termina.hour,self.turno.termina.minute)
                dt = (time.mktime(time.localtime()) - time.mktime(d2.timetuple()))/60
                dt2 = (time.mktime(d3.timetuple()) - time.mktime(d2.timetuple()))/60

                if ProfesorMateria.objects.filter(materia=self.materia,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True).count()>=2:
                    finasignacion=True
                else:
                    if  ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                        finasignacion=True
                    elif ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                        finasignacion=True
                    # elif  ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_PRACT,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                    elif  ProfesorMateria.objects.filter(Q(pk=self.profesormateria.id,desde__gte=hoy, desde__lte=hoy,materia=self.materia,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_PRACT,aceptacion=True)|Q(pk=self.profesormateria.id,hasta__gte=hoy,hasta__lte=hoy,materia=self.materia,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_PRACT,aceptacion=True)|Q(pk=self.profesormateria.id,desde__lte=hoy,hasta__gte=hoy),materia=self.materia).exists():
                        finasignacion=True

                    # elif ProfesorMateria.objects.filter(pk=self.profesormateria.id,materia=self.materia,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_PRACT,aceptacion=True,desde__lte=hoy,hasta__gte=hoy).exists():
                    elif ProfesorMateria.objects.filter(Q(pk=self.profesormateria.id,desde__gte=hoy, desde__lte=hoy,materia=self.materia,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_PRACT,aceptacion=True)|Q(pk=self.profesormateria.id,hasta__gte=hoy,hasta__lte=hoy,materia=self.materia,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_PRACT,aceptacion=True)|Q(pk=self.profesormateria.id,desde__lte=hoy,hasta__gte=hoy,profesor__id__gt=0),materia=self.materia).exists():
                        finasignacion=True
                    else:
                        finasignacion=False

                # if finasignacion==True:
                #     if dt<0:
                #         # Antes del comienzo
                #         return abs(dt)<=CLASES_APERTURA_ANTES
                #     else:
                #         return dt<=CLASES_APERTURA_DESPUES
            # else:
            #     finasignacion=False
        else:
            finasignacion=False

        return finasignacion

class Modulo(models.Model):
    url = models.CharField(max_length=100)
    nombre = models.CharField(max_length=100)
    icono = models.CharField(max_length=100)
    descripcion = models.CharField(max_length=200)
    activo = models.BooleanField(blank=True, null=True)
    orden = models.IntegerField(default=0)

    def __str__(self):
        return self.nombre+" (/"+self.url+")"

    class Meta:
        verbose_name = "Modulo"
        verbose_name_plural = "Modulos"


class ModuloGrupo(models.Model):
    nombre = models.CharField(max_length=100)
    descripcion = models.CharField(max_length=200, blank=True)
    modulos = models.ManyToManyField(Modulo)
    grupos = models.ManyToManyField(Group)
    prioridad = models.IntegerField(null=True, blank=True)
    correo = models.CharField(max_length=80,blank=True)

    def __str__(self):
        return self.nombre

    def modulos_activos(self):
        return self.modulos.filter(activo=True)

    class Meta:
        verbose_name = 'Grupo de Modulos'
        verbose_name_plural = "Grupos de Modulos"


class TipoAnuncio(models.Model):
    descripcion = models.CharField(max_length=200,blank=True,null=True)
    activo= models.BooleanField(default=False)

    def __str__(self):
        return self.descripcion


    def cantidad_inscritos_anuncio(self,anno):
        inicio=datetime.strptime('01-01-'+str(anno[2:4]), '%d-%m-%y').date()
        fin=datetime.strptime('31-12-'+str(anno[2:4]), '%d-%m-%y').date()
        return Inscripcion.objects.filter(fecha__gte=inicio,fecha__lte=fin,anuncio=self).exclude(carrera__id__in=CARRERAS_ID_EXCLUIDAS_INEC).count()

    def cantidad_inscritos_anuncio_rango_fechas(self,inicio,fin):

        return Inscripcion.objects.filter(fecha__gte=inicio,fecha__lte=fin,anuncio=self).exclude(carrera__id__in=CARRERAS_ID_EXCLUIDAS_INEC).count()

    class Meta():
        verbose_name = "Tipo de Anuncio"
        verbose_name_plural = "Tipos de Anuncios"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(TipoAnuncio, self).save(force_insert,force_update,using, update_fields)

class Promocion(models.Model):
    descripcion = models.CharField(max_length=300,blank=True, null=True)
    directo = models.BooleanField(default=False)
    todos_niveles = models.BooleanField(default=False)
    val_inscripcion  = models.IntegerField(blank=True,null=True,default=0)
    activo = models.BooleanField(default=True)
    descuentomaterial =  models.BooleanField(default=False)
    valdescuentomaterial  = models.IntegerField(blank=True,null=True)
    valormaterialapoyo= models.FloatField(blank=True,null=True)

    def __str__(self):
        return self.descripcion

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(Promocion, self).save(force_insert,force_update,using, update_fields)

class AsistAsuntoEstudiant(models.Model):
    asistente = models.ForeignKey(Persona, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True,null=True)
    estado = models.BooleanField(default=False)
    telefono = models.CharField(max_length=15, blank=True, null=True)

    def __str__(self):
        return str(self.asistente)

    class Meta():
        verbose_name = "Asistente de Asunto Estudiantil"
        verbose_name_plural = "Asistentes de Asuntos Estudiantiles"

    def asignados(self):
        if Inscripcion.objects.filter(asistente = self).exists():
            return  Inscripcion.objects.filter(asistente = self).count()
        return 0

    def gestionados(self):
        if RegistroSeguimiento.objects.filter(usuario__id__in=AsistAsuntoEstudiant.objects.filter(pk=self.id).values('asistente__usuario__id')).exists():
            return RegistroSeguimiento.objects.filter(usuario__id__in=AsistAsuntoEstudiant.objects.filter(pk=self.id).values('asistente__usuario__id')).count()
        return 0

    def gestionados_xfecha(self, inicio, fin):
        try:
            inicio2 = datetime.combine(inicio, datetime.min.time())
            fin2 = datetime.combine(fin, datetime.min.time()) + timedelta(hours=23, minutes=59, seconds=59)
            if RegistroSeguimiento.objects.filter(usuario__id__in=AsistAsuntoEstudiant.objects.filter(pk=self.id).values('asistente__usuario__id'), fecha__gte=inicio2, fecha__lte=fin2).exists():
                return RegistroSeguimiento.objects.filter(usuario__id__in=AsistAsuntoEstudiant.objects.filter(pk=self.id).values('asistente__usuario__id'), fecha__gte=inicio2, fecha__lte=fin2).count()
        except Exception as e:
            print("ERROR: "+str(e))
        return 0

    def rubros_cancelados(self):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, rubro__cancelado=True, estado=True)
            # rubros = Rubro.objects.filter(cancelado=True, id__in=rubro_seguimiento.values('rubro'))
            return rubro_seguimiento.count()
        return 0

    def rubros_cancelados_xfecha(self, inicio, fin):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, fechapago__gte=inicio, fechapago__lte=fin, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, fechapago__gte=inicio, fechapago__lte=fin, estado=True)
            return rubro_seguimiento.count()
        return 0

    def rubros_cancelados_xcategoria(self, categoria):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria, estado=True)
            return rubro_seguimiento.count()
        return 0

    def rubros_gestionados(self):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario)
            rubros = Rubro.objects.filter(id__in=rubro_seguimiento.values('rubro'))
            return rubros.count()
        return 0

    def rubros_gestionados_xfecha(self, inicio, fin):
        inicio2 = datetime.combine(inicio, datetime.min.time())
        fin2 = datetime.combine(fin, datetime.min.time()) + timedelta(hours=23, minutes=59, seconds=59)
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, seguimiento__fecha__gte=inicio2, seguimiento__fecha__lte=fin2).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, seguimiento__fecha__gte=inicio2, seguimiento__fecha__lte=fin2)
            rubros = Rubro.objects.filter(id__in=rubro_seguimiento.values('rubro'))
            return rubros.count()
        return 0

    def rubros_gestionados_xcategoria(self, categoria):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria)
            rubros = Rubro.objects.filter(id__in=rubro_seguimiento.values('rubro'))
            return rubros.count()
        return 0

    def valor_rubros_cancelados(self):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, rubro__cancelado=True, estado=True)
            suma = rubro_seguimiento.aggregate(Sum('valorgestionado'))['valorgestionado__sum']
            return suma
        return 0

    def valor_rubros_cancelados_xfecha(self, inicio, fin):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True)
            suma = rubro_seguimiento.aggregate(Sum('valorgestionado'))['valorgestionado__sum']
            return suma
        return 0

    def valor_rubros_cancelados_xcategoria(self, categoria):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria, rubro__cancelado=True, estado=True)
            suma = rubro_seguimiento.aggregate(Sum('valorgestionado'))['valorgestionado__sum']
            return suma
        return 0

    def valor_rubros_cobrados(self):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, rubro__cancelado=True, estado=True)
            suma = 0
            for rs in rubro_seguimiento:
                suma = suma + (rs.valorgestionado-rs.valordesc)
            return suma
        return 0

    def valor_rubros_cobrados_xfecha(self, inicio, fin):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True)
            suma = 0
            for rs in rubro_seguimiento:
                suma = suma + (rs.valorgestionado-rs.valordesc)
            return suma
        return 0

    def valor_rubros_cobrados_xcategoria(self, categoria):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria, rubro__cancelado=True, estado=True)
            suma = 0
            for rs in rubro_seguimiento:
                suma = suma + (rs.valorgestionado-rs.valordesc)
            return suma
        return 0

    def valor_comision(self):
        try:
            if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, rubro__cancelado=True, estado=True).exists():
                rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, rubro__cancelado=True, estado=True)
                suma_rub = rubro_seguimiento.aggregate(Sum('valorgestionado'))['valorgestionado__sum']
                suma_desc = rubro_seguimiento.aggregate(Sum('valordesc'))['valordesc__sum']
                suma = suma_rub - suma_desc
                porcentaje_comision = IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma, orden=3).get().porcentajecomision
                comision = 0
                total_valorxfactor = 0
                for rs in rubro_seguimiento:
                    valorxfactor = round(float(rs.valorgestionado-rs.valordesc),2)*round(float(rs.categoria.factor),2)
                    total_valorxfactor = total_valorxfactor + valorxfactor
                comision = total_valorxfactor*float(porcentaje_comision)/100
                return round(comision,2)
            return 0
        except Exception as ex:
            print(ex)

    def valor_comision_xfecha(self, inicio, fin):
        try:
            comision = 0
            if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True).exists():
                rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True)
                suma = rubro_seguimiento.aggregate(Sum('valorgestionado'))['valorgestionado__sum']
                suma_desc = rubro_seguimiento.aggregate(Sum('valordesc'))['valordesc__sum']
                if IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma, fechahasta__gte=fin, fechadesde__lte=inicio, orden=1).exists():
                    indicador = IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma, fechahasta__gte=fin, fechadesde__lte=inicio, orden=1)[:1].get()
                else:
                    suma = suma - suma_desc
                    indicador = IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma, fechahasta__gte=fin, fechadesde__lte=inicio)[:1].get()
                total_valorxfactor = 0
                for rs in rubro_seguimiento:
                    if ((rs.aplicadescuentocategoria or rs.aprobardescuentoadd) and indicador.orden != 1):
                        valorxfactor = round(float(rs.valorgestionado-rs.valordesc),2)*round(float(rs.categoria.factor),2)
                    else:
                        valorxfactor = round(float(rs.valorgestionado),2)*round(float(rs.categoria.factor),2)
                    total_valorxfactor = total_valorxfactor + valorxfactor
                comision = round(total_valorxfactor,2)*round(float(indicador.porcentajecomision),2)/100
            return round(comision,2)
        except Exception as ex:
            return 0

    def valor_comision_xcategoria(self, categoria):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria, rubro__cancelado=True, estado=True)
            suma = rubro_seguimiento.aggregate(Sum('valorgestionado'))['valorgestionado__sum']
            porcentaje_comision = IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma)[:1].get().porcentajecomision
            comision = 0
            total_valorxfactor = 0
            for rs in rubro_seguimiento:
                valorxfactor = float(rs.valorgestionado)*float(rs.categoria.factor)
                total_valorxfactor = total_valorxfactor + valorxfactor
            comision = total_valorxfactor*float(porcentaje_comision)/100
            return round(comision,2)
        return 0

    def valor_rubros_cobrados(self):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, rubro__cancelado=True, estado=True)
            suma = 0
            for rs in rubro_seguimiento:
                suma = suma + (rs.valorgestionado-rs.valordesc)
            return suma
        return 0

    def valor_rubros_cobrados_xfecha(self, inicio, fin):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True)
            suma = 0
            for rs in rubro_seguimiento:
                suma = suma + (rs.valorgestionado-rs.valordesc)
            return suma
        return 0

    def valor_rubros_cobrados_xcategoria(self, categoria):
        if RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(seguimiento__usuario=self.asistente.usuario, categoria__categoria=categoria.categoria, rubro__cancelado=True, estado=True)
            suma = 0
            for rs in rubro_seguimiento:
                suma = suma + (rs.valorgestionado-rs.valordesc)
            return suma
        return 0

    def existe_asisten(self):
        return IncidenciaAsignada.objects.filter(asistenteasignado=self).exists()

    @staticmethod
    def flexbox_query(q):
        return  AsistAsuntoEstudiant.objects.filter(Q(asistente__nombres__contains=q)|Q(asistente__apellido1__contains=q)|Q(asistente__apellido2__contains=q)).exclude(estado=False)

    def flexbox_repr(self):
        return str(self.asistente)

class PersonaAsuntos(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True,null=True)
    estado = models.BooleanField(default=False)

    def asignados(self):
        if Inscripcion.objects.filter(personaasuntos=self).exists():
            return Inscripcion.objects.filter(personaasuntos = self).count()
        return 0

    def gestionados(self):
        if SeguimientoAbsentismo.objects.filter(usuario=self.persona.usuario).exists():
            return SeguimientoAbsentismo.objects.filter(usuario=self.persona.usuario).count()
        return 0

    def __str__(self):
        return self.persona.nombre_completo_inverso()

class TipoPersonaEmpresaConvenio(models.Model):
    descripcion = models.CharField(max_length=200)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = "Tipo de Persona en Convenio"
        verbose_name_plural = "Tipos de Personas en Convenios"

class ParentescoTipoPersonaEmpresaConvenio(models.Model):
    descripcion = models.CharField(max_length=200)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = "Grado de Consaguinidad"
        verbose_name_plural = "Grados de Consaguinidad"

class DescuentosporConvenio(models.Model):
    empresaconvenio= models.ForeignKey(EmpresaConvenio,blank=True,null=True, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=1500,blank=True,null=True)
    descuento = models.IntegerField()
    activo = models.BooleanField(blank=True)

    def __str__(self):
        return str(elimina_tildes(self.empresaconvenio.nombre)) + " " + str(elimina_tildes(self.descripcion)) + " " +str(self.descuento)+ " %"

    @staticmethod
    def flexbox_query(q):
        return EmpresaConvenio.objects.filter(Q(nombre__icontains=q))

    def flexbox_repr(self):
        return self.descripcion+ (" ["+str(self.descuento)+"]" if self.descuento else "")

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper() if self.descripcion else ''
        super(DescuentosporConvenio, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Descuento por Convenio"
        verbose_name_plural = "Descuentos por Convenios"

    def puede_eliminar(self):
        if Inscripcion.objects.filter(empresaconvenio=self.empresaconvenio).exists():
            return False
        return True

class Inscripcion(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    fecha = models.DateField()
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    modalidad = models.ForeignKey(Modalidad, on_delete=models.CASCADE)
    sesion = models.ForeignKey(Sesion, on_delete=models.CASCADE)
    colegio = models.CharField(max_length=200,blank=True)
    especialidad = models.ForeignKey(Especialidad, blank=True, null=True, on_delete=models.CASCADE)
    identificador = models.CharField(max_length=20, blank=True)
    tienediscapacidad = models.BooleanField(default=False)
    numerom = models.IntegerField()
    suspension = models.BooleanField(default=False)
    doblematricula = models.BooleanField(default=False)
    anuncio = models.ForeignKey(TipoAnuncio,null=True,blank=True, on_delete=models.CASCADE)
    titulo_cert= models.CharField(max_length=300,blank=True,null=True)
    estcolegio = models.ForeignKey(Colegio,blank=True,null=True, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=1500,blank=True,null=True)
    promocion = models.ForeignKey(Promocion,blank=True,null=True, on_delete=models.CASCADE)
    descuentoporcent = models.IntegerField()
    user = models.ForeignKey(User,blank=True,null=True, on_delete=models.CASCADE)
    actualiza = models.BooleanField(default=False)
    fechacuml = models.DateField(blank=True,null=True)
    fechatitulo = models.DateField(blank=True,null=True)
    titulo = models.FileField(upload_to='titulos/%Y/%m/%d', max_length=200,blank=True,null=True)
    usuarioentrega = models.ForeignKey(User ,related_name='usuarioentrega',blank=True,null=True, on_delete=models.CASCADE)
    fechaentregatitulo =models.DateField(blank=True,null=True)
    recibetit = models.CharField(max_length=150,blank=True,null=True)
    codigocel = models.CharField(max_length=20,blank=True,null=True)
    asistente = models.ForeignKey(AsistAsuntoEstudiant,blank=True,null=True, on_delete=models.CASCADE)
    sgaonline = models.BooleanField(default=False,blank=True)
    becamunicipio = models.BooleanField(default=False,blank=True)
    entregaruniforme = models.BooleanField(default=False,blank=True)
    aceptatermino = models.BooleanField(default=False)
    fechaceptatermino = models.DateField(blank=True, null=True)
    empresaconvenio = models.ForeignKey(EmpresaConvenio,blank=True,null=True, on_delete=models.CASCADE)
    autorizacionbecadobe = models.BooleanField(default=False)
    autorizacionbecasenecyt = models.BooleanField(default=False)
    benemeritocuerpobombero = models.BooleanField(default=False)
    aprobacionayudadobe= models.BooleanField(default=False)
    entregajuguetecanastas= models.BooleanField(default=False)
    aceptaconstancia = models.BooleanField(default=False)
    fechaceptaconstancia = models.DateField(blank=True, null=True)
    plagiotarjeta = models.BooleanField(default=False)
    observacionplagio = models.CharField(max_length=1500,blank=True,null=True)
    archcedula = models.FileField(upload_to='archcedula/%Y/%m/%d', max_length=200, blank=True, null=True)
    verifarchced = models.BooleanField(default=False)
    archpasaport = models.FileField(upload_to='archpasaport/%Y/%m/%d', max_length=200, blank=True, null=True)
    verifarchpasp = models.BooleanField(default=False)
    votacion = models.FileField(upload_to='votacion/%Y/%m/%d', max_length=200, blank=True, null=True)
    verifvota = models.BooleanField(default=False)
    foto = models.FileField(upload_to='fotos/%Y/%m/%d', max_length=200, blank=True, null=True)
    verifoto = models.BooleanField(default=False)
    veriftit = models.BooleanField(default=False)
    documentoempresaconvenio = models.FileField(upload_to='documento/%Y/%m/%d', max_length=200,null=True,blank=True)
    tipopersonaempresaconvenio = models.ForeignKey(TipoPersonaEmpresaConvenio,blank=True,null=True, on_delete=models.CASCADE)
    parentescotipopersonaec = models.ForeignKey(ParentescoTipoPersonaEmpresaConvenio,blank=True,null=True, on_delete=models.CASCADE)
    descuentoconvenio = models.ForeignKey(DescuentosporConvenio,blank=True,null=True, on_delete=models.CASCADE)
    cab = models.BooleanField(default=False)
    personaasuntos = models.ForeignKey(PersonaAsuntos, blank=True,null=True, on_delete=models.CASCADE)
    carnet=models.BooleanField(default=False)

    def existe_rubro_plagio(self):
        if Rubro.objects.filter(cancelado=False, inscripcion=self).exclude(nc=None).exists():
            rubros = Rubro.objects.filter(cancelado=False, inscripcion=self).exclude(nc=None)
            if NotaCreditoInstitucion.objects.filter(id__in=rubros.values('nc'), motivonc__id=1).exists():
                return True
        if RubroOtro.objects.filter(tipo__id=TIPO_OTRO_FRAUDE, rubro__cancelado=False, rubro__inscripcion=self).exists():
            return True

    def existeuniforme(self):
        return Rubro.objects.filter(inscripcion=self, rubrootro__tipo__id=TIPO_RUBRO_MATERIALAPOYO).exists()

    def facturauniforme(self):

        ##ultimo rubro de material de apoyo cancelado
        if Rubro.objects.filter(rubrootro__tipo__id=TIPO_RUBRO_MATERIALAPOYO,inscripcion=self, cancelado=True).exists():
            rubro=Rubro.objects.filter(rubrootro__tipo__id=TIPO_RUBRO_MATERIALAPOYO,inscripcion=self, cancelado=True)[:1].get()
            if rubro.pago_set.exists():
                pago=rubro.pago_set.filter()[:1].get()
                if pago.factura_set.exists():
                    factura=pago.factura_set.filter()[:1].get()
                    return factura.numero, pago.fecha


            # return factura
    def tiene_video(self):
        if InscripcionProfesionalizacion.objects.filter(inscripcion=self).exists():
            return InscripcionProfesionalizacion.objects.filter(inscripcion=self).order_by('-id')[:1].get()
        return False

    def existe_fraude(self):
        fraude=None
        if RegistroPlagioTarjetas.objects.filter(inscripcion=self,plagioactivo=True).exists():
            fraude = RegistroPlagioTarjetas.objects.filter(inscripcion=self,plagioactivo=True).order_by('-id')[:1].get().observacionplagio
            return fraude
        return fraude

    def soportefraude(self):
        if RegistroPlagioTarjetas.objects.filter(inscripcion=self,plagioactivo=True).exclude(soporte='').exclude(soporte=None).exists():
            return RegistroPlagioTarjetas.objects.filter(inscripcion=self,plagioactivo=True).exclude(soporte='').exclude(soporte=None)[:1].get()
        return False

    def tiene_obs_nombramiento(self):
        return  ObservacionInscripcion.objects.filter(tipo__id=3,inscripcion=self).exists()

    def tiene_descuento(self):
        if DescuentoSeguimiento.objects.filter(pagado=False,seguimiento__inscripcion=self).exists():
            return  DescuentoSeguimiento.objects.filter(pagado=False,seguimiento__inscripcion=self)[:1].get()
        return  False

    def solicitudsecre(self):
        return SolicitudSecretariaDocente.objects.filter(persona=self.persona).exists()

    def entregauniformepagado(self):
        return Pago.objects.filter( rubro__inscripcion=self, rubro__cancelado=False,rubro__rubrootro__tipo__id=TIPO_RUBRO_MATERIALAPOYO)
    def verentregauniforme(self):
        return EntregaUniforme.objects.filter(matricula__inscripcion=self).exists()

    def tiene_nee(self):
        return  PerfilInscripcion.objects.filter(inscripcion=self,tienenee=True).exists()

    def nee(self):
        if  PerfilInscripcion.objects.filter(inscripcion=self).exists():
            return PerfilInscripcion.objects.filter(inscripcion=self)[:1].get()

    def tiene_aprobado_examen(self):
        if ExamenConvalidacionIngreso.objects.filter(inscripcion=self).exists():
            if ExamenConvalidacionIngreso.objects.filter(inscripcion=self, aprobada=True).exists():
                return 'APROBADO EXAMEN DE VALIDACION PROFESIONAL'
            else:
                return 'REPROBADO EXAMEN DE VALIDACION PROFESIONAL'
        return 'NO TIENE EXAMEN DE VALIDACION PROFESIONAL'

    def curso(self):
        return DetallePagos.objects.filter(inscripcion=self)[:1].get().grupocurso

    def existe_titulo(self):
        if os.path.exists(MEDIA_ROOT + '/' + str(self.titulo)):
            return True
        return False

    def tiene_promocion(self):
        return Matricula.objects.filter(inscripcion=self,nivel__nivelmalla__id=NIVEL_MALLA_UNO,nivel__cerrado=False).exists()

    def cancelcuotaactual(self):
        # parametros = ParametrosPromocion.objects.filter()[:1].get()
        # inicio = parametros.iniciodiferir
        # # inicio = date(INICIO_DIFERIR[0], INICIO_DIFERIR[1],INICIO_DIFERIR[2])
        # fin = parametros.findiferir
        # # fin = date(FIN_DIFERIR[0], FIN_DIFERIR[1],FIN_DIFERIR[2])
        # fecha = datetime.now().date()
        # if RubroCuota.objects.filter(rubro__fechavence__month=fecha.month,rubro__fechavence__year=fecha.year,rubro__cancelado=True,rubro__inscripcion=self).exists() or \
        #         RubroOtro.objects.filter(rubro__fechavence__month=fecha.month,rubro__fechavence__year=fecha.year,rubro__cancelado=True,rubro__inscripcion=self,tipo__nombre='CUOTA'):
        #     return True
        return False

    # def total_detalldesc(self):
    #     sum = DetalleRubrosBeca.objects.filter(rubro__inscripcion=self).aggregate(Sum('descuento'))
    #     return sum['descuento__sum'] if sum['descuento__sum'] else 0

    def inscripcion_grupo(self, grupo):
        if UTILIZA_GRUPOS_ALUMNOS:
            if self.inscripciongrupo_set.count() > 1:
                self.inscripciongrupo_set.all().delete()
                ig = InscripcionGrupo(inscripcion=self, grupo=grupo, activo=True)
                ig.save()
                return ig
            else:
                return self.inscripciongrupo_set.all()[:1].get()

    def egresado_val(self):
        val=False
        if RecordAcademico.objects.filter(inscripcion=self).exists():
            if Malla.objects.filter(carrera=self.carrera).order_by('-id')[:1].exists():
                malla = self.malla_inscripcion()
                if malla:
                    # a=AsignaturaMalla.objects.filter(malla__id=malla.malla.id).exclude(Q(nivelmalla__id=9)|Q(nivelmalla__id=10)).values('asignatura')
                    a=AsignaturaMalla.objects.filter(malla__id=malla.malla.id).exclude(nivelmalla__id=9).exclude(asignatura__id__in=ASIGNATURA_EXAMEN_GRADO_CONDU).exclude(asignatura__nivelacion=True).values('asignatura')
                    if a.count()>0:
                        # b=RecordAcademico.objects.filter(asignatura__in=a, nota__gte=NOTA_PARA_APROBAR, asistencia__gte=ASIST_PARA_APROBAR,inscripcion=self)
                        b=RecordAcademico.objects.filter(asignatura__in=a, nota__gte=NOTA_PARA_APROBAR,inscripcion=self)
                        if a.count()== b.count():
                            val=True

        return val
    # OCastillo Graduados Conduccion
    def graduadocondu_prom_val(self):
        # val=False
        promedio=0
        if RecordAcademico.objects.filter(inscripcion=self).exists():
            if Malla.objects.filter(carrera=self.carrera).order_by('-id')[:1].exists():
                malla = Malla.objects.filter(carrera=self.carrera,vigente=True).order_by('-id')[:1].get()
                # a=AsignaturaMalla.objects.filter(malla__id=malla.id).exclude(Q(asignatura__id=14)|Q(asignatura__id=15)|Q(asignatura__id=16)|Q(asignatura__id=17)).values('asignatura')
                a=AsignaturaMalla.objects.filter(malla__id=malla.id).exclude(Q(asignatura__in = ASIGNATURA_EXAMEN_GRADO_CONDU)).values('asignatura')
                # return Persona.objects.filter(Q(apellido1__contains=s[0])&Q(apellido2__contains=s[1])).exclude(usuario__groups__id=6).order_by('apellido1','apellido2','nombres')

                materias = a.count()
                # b=RecordAcademico.objects.filter(asignatura__in=a, nota__gte=NOTA_PARA_APROBAR, asistencia__gte=ASIST_PARA_APROBAR,inscripcion=self)
                # b=RecordAcademico.objects.filter(asignatura__in=a,inscripcion=self).aggregate(Sum('horas'))['horas__sum']
                b = RecordAcademico.objects.filter(asignatura__in=a,inscripcion=self).aggregate(Sum('nota'))['nota__sum']
                if b:
                    promedio= Decimal(b/materias).quantize(Decimal(10)**-2)
                    # if a.count()== b.count():
                    # if b.count()> 1:
                    #     val=True

        return promedio
    # OCastillo promedio examenes teoricos
    def promedio_teorico(self):
        # average = RecordAcademico.objects.filter(inscripcion=self,asignatura__in = (14,15,16)).aggregate(Avg('nota'))
        # return average['nota__avg'] if average['nota__avg'] is not None else 0

        # OCU 25-abril-2017 cambio para promedio teorico por carrera
        if PromedioNotasGrado.objects.filter(carrera=self.carrera,vial=True,activo=True).exists():
            asig=PromedioNotasGrado.objects.filter(carrera=self.carrera,vial=True,activo=True).values('asignatura')
            average = RecordAcademico.objects.filter(inscripcion=self,asignatura__in = (asig)).aggregate(Avg('nota'))
            return average['nota__avg'] if average['nota__avg'] is not None else 0

    def graduadocondu(self):
        return self.graduadoconduccion_set.exists()

    def promedio_egresado(self):
        average = RecordAcademico.objects.filter(inscripcion=self).aggregate(Avg('nota'))
        return round(average['nota__avg']) if average['nota__avg'] is not None else 0

    # OCU 26-09-2017
    def promedioasistencia_egresado(self):
        val=False
        if HistoricoRecordAcademico.objects.filter(inscripcion=self).exists():
            if Malla.objects.filter(carrera=self.carrera).order_by('-id')[:1].exists():
                malla = self.malla_inscripcion()
                if self.carrera.online:
                    asistenciaparaaprobar = 0
                else:
                    asistenciaparaaprobar = ASIST_PARA_APROBAR
                # a=AsignaturaMalla.objects.filter(malla__id=malla.malla.id).exclude(Q(nivelmalla__id=9)|Q(nivelmalla__id=10)).values('asignatura')
                a=AsignaturaMalla.objects.filter(malla__id=malla.malla.id).exclude(nivelmalla__id=9).exclude(asignatura__id__in=ASIGNATURA_EXAMEN_GRADO_CONDU).values('asignatura')
                if a.count()>0:
                    b=HistoricoRecordAcademico.objects.filter(asignatura__in=a, nota__gte=NOTA_PARA_APROBAR, asistencia__gte=asistenciaparaaprobar,inscripcion=self).distinct('asignatura').values('asignatura')
                    if a.count()== b.count():
                        return True
                    if HistoricoRecordAcademico.objects.filter(asignatura__in=a, nota__gte=NOTA_PARA_APROBAR, asistencia__lt=asistenciaparaaprobar,inscripcion=self).exists():
                        return False
                    else:
                        val = True
        return val

    def plan12activo(self):
        return self.plan12materias_set.filter(materiastotales__gt=F('materiascursadas')).exists()

    def esta_retiradoper(self, periodo):
        return RetiradoMatricula.objects.filter(inscripcion=self, activo=False).exists()

    def plan12activo_obj(self):
        if self.plan12activo():
            return self.plan12materias_set.filter(materiastotales__gt=F('materiascursadas'))[:1].get()
        return None

    def beca_senescyt(self):
        if not self.inscripcionsenescyt_set.exists():
            isene = InscripcionSenescyt(inscripcion=self, fecha=datetime.today())
            isene.save()
            return isene
        else:
            return self.inscripcionsenescyt_set.all()[:1].get()

    def beca_asignada(self):
        return self.inscripcionbecario_set.exists()

    def beca_asignada_obj(self):
        return self.inscripcionbecario_set.all()[:1].get()

    def tiene_practicas(self):
        return self.inscripcionpracticas_set.exists()

    def tiene_procesodobe(self):
        return ProcesoDobe.objects.filter(inscripcion=self).exists()

    def tienematricula(self):
        return Matricula.objects.filter(inscripcion=self).exists()

    def tiene_procesodobe_aprobado(self):
        return ProcesoDobe.objects.filter(inscripcion=self, aprobado=True).exists()

    def tiene_inactivacion(self):
        inactiva = InactivaActivaUsr.objects.filter(inscripcion=self)
        if inactiva.exists():
            return inactiva.filter()[:1].get()
        return False

    def horas_practicas(self):
        if self.tiene_practicas():
            return self.inscripcionpracticas_set.all().aggregate(Sum('horas'))['horas__sum']
        return 0


    def tiene_vinculacion(self):
        if self.estudiantevinculacion_set.exists():
            return self.estudiantevinculacion_set.exists()
        else:
            return  False

    def tiene_actvinculacion(self):
        if self.estudiantevinculacion_set.exists():
            return self.estudiantevinculacion_set.all().order_by('-id')

    def h_practicas_vinculacion(self):

        h_pract = self.horas_practicas()

        if self.tiene_vinculacion():
            h_vincula = self.estudiantevinculacion_set.all().aggregate(Sum('horas'))['horas__sum']
        else:
            h_vincula = 0

        total= h_pract + h_vincula
        return total

    def horas_vinculacion(self):
        if self.tiene_vinculacion():
            h_vincula = self.estudiantevinculacion_set.all().aggregate(Sum('horas'))['horas__sum']
        else:
            h_vincula = 0

        return h_vincula

    def h_practicas_vinculacion_segunmalla(self):
        #OCastillo 22-02-2023 funcion para verificar horas de vinculacion y practicas segun la malla
        horaspractvinc=0
        if InscripcionMalla.objects.filter(inscripcion=self,malla__asignaturamalla__ejeformativo__id__in=[8,10,11]).exists():
            asigmalla=InscripcionMalla.objects.filter(inscripcion=self,malla__asignaturamalla__ejeformativo__id__in=[8,10,11]).values('malla__asignaturamalla')
            horaspractvinc = AsignaturaMalla.objects.filter(id__in=asigmalla).aggregate(Sum('horas'))['horas__sum']
        return horaspractvinc


    def historico_pract(self):
        return HistoricoRecordAcademico.objects.filter(inscripcion=self,asignatura=ASIGNATURA_PRACTICA_CONDUCCION).exists()

    def numerom_string(self):
        return str(self.numerom).zfill(7)

    def tiene_procesodoblematricula(self):
        return ProcesoDobleMatricula.objects.filter(inscripcion=self).exists()

    def tiene_procesodoblematricula_aprobado(self):
        return ProcesoDobleMatricula.objects.filter(inscripcion=self, aprobado=True).exists()


    def matricular(self, nivel):
        if not self.matriculado():

            if self.empresaconvenio_id == ID_CONVENIO_BECA_TECT:
                matricula = Matricula(inscripcion=self,
                                      nivel=nivel,
                                      pago=False,
                                      iece=False,
                                      becado=True,
                                      fechabeca=datetime.now(),
                                      tipobeneficio_id=ID_TIPO_BENEFICICO_BECA,
                                      tipobeca_id=ID_TIPOBECA,
                                      motivobeca_id=ID_MOTIVO_BECA_TEC,
                                      porcientobeca=100)
            else:
                matricula = Matricula(inscripcion=self,
                                      nivel=nivel,
                                      pago=False,
                                      iece=False,
                                      becado=False,
                                      porcientobeca=0)


            matricula.save()


            materias = nivel.materia_set.filter(Q(cerrado=False)|Q(cerrado=None))

            #Actualizar el registro de InscripcionMalla con la malla correspondiente
            im = self.malla_inscripcion()
            im.malla = matricula.nivel.malla
            im.save()

            # Materias Asignadas
            if not 'CONGRESO' in nivel.carrera.nombre:
                for materia in materias:
                    asignatura = materia.asignatura
                    if not self.ya_aprobada(asignatura):
                        # Si no la tiene aprobada aun
                        # pendientes = self.recordacademico_set.filter(asignatura__in=asignatura.precedencia.all(),aprobada=False)
                        if VALIDA_PRECEDENCIA:
                            if self.carrera.online:
                                asistenciaparaaprobar = 0
                            else:
                                asistenciaparaaprobar = ASIST_PARA_APROBAR
                            if self.recordacademico_set.filter(asignatura__in=asignatura.precedencia.all().values('id'),nota__gte=NOTA_PARA_APROBAR,asistencia__gte=asistenciaparaaprobar).exists() or not asignatura.precedencia.all():
                                # if pendientes.count()==0:
                                if not MateriaAsignada.objects.filter(matricula=matricula,materia=materia).exists():
                                    asign = MateriaAsignada(matricula=matricula,materia=materia,notafinal=0,asistenciafinal=0,supletorio=0)
                                    asign.save()

                                    # Correccion de Lecciones ya impartidas
                                    leccionesYaDadas = Leccion.objects.filter(clase__materia=asign.materia)
                                    for leccion in leccionesYaDadas:
                                        asistenciaLeccion = AsistenciaLeccion(leccion=leccion,matricula=matricula,asistio=False)
                                        asistenciaLeccion.save()
                        else:
                            pendientes = self.recordacademico_set.filter(asignatura__in=asignatura.precedencia.all(),aprobada=False)
                            if pendientes.count()==0:
                                if  not MateriaAsignada.objects.filter(matricula=matricula,materia=materia).exists():
                                    asign = MateriaAsignada(matricula=matricula,materia=materia,notafinal=0,asistenciafinal=0,supletorio=0)
                                    asign.save()

                                    # Correccion de Lecciones ya impartidas
                                    leccionesYaDadas = Leccion.objects.filter(clase__materia=asign.materia)
                                    for leccion in leccionesYaDadas:
                                        asistenciaLeccion = AsistenciaLeccion(leccion=leccion,matricula=matricula,asistio=False)
                                        asistenciaLeccion.save()
                            else:
                                recordPendiente = RecordAcademico(inscripcion=self,asignatura=asignatura,nota=0,asistencia=0,fecha=datetime.now(),convalidacion=False,aprobada=False,pendiente=True)
                                recordPendiente.save()

            # Crear Rubro
            if GENERAR_RUBROS_PAGO and not self.beca_senescyt().tienebeca:
                if self.empresaconvenio_id == ID_CONVENIO_BECA_TECT:
                    # solo se aplica para los estudiante que estan becado por becas Tec
                    hoy = datetime.today().date()
                    # rubro cuota////////

                    # buscar el rubro del periodo anterior
                    matriculaant = Matricula.objects.filter(inscripcion = self,nivel__cerrado=True).order_by('-fecha')[:1].get()
                    rubroanterior=RubroCuota.objects.filter(matricula=matriculaant).order_by('-id')[:1].get()

                    rubrocuota = Rubro(fecha=datetime.today().date(),
                                       valor=rubroanterior.rubro.valor, inscripcion=matricula.inscripcion,
                                       cancelado=False, fechavence=nivel.fin)

                    rubrocuota.save()

                    rc = RubroCuota(rubro=rubrocuota, matricula=matricula, cuota=1)
                    rc.save()

                else:
                    pp = 1.0 if not matricula.becado else ((100-matricula.porcientobeca)/100.0)
                    for pago in nivel.pagonivel_set.all():
                        if pago.tipo==0 or (pago.tipo>0 and pp>0):
                            rubro = Rubro(fecha=datetime.today().date(),
                                          valor = pago.valor, inscripcion=self,
                                          cancelado = False, fechavence = pago.fecha)

                            rubro.save()

                            # Beca
                            if matricula.becado and pago.tipo!=0:
                                rubro.valor *= pp
                                rubro.save()

                            if matricula.inscripcion.promocion :
                                if pago.tipo!=0 and matricula.inscripcion.promocion.todos_niveles and DEFAULT_PASSWORD == 'itb' and matricula.nivel.nivelmalla.id != NIVEL_MALLA_UNO:

                                    des = ((100-matricula.inscripcion.descuentoporcent)/100.0)
                                    rubro.valor *= des
                                    rubro.save()

                                elif matricula.inscripcion.promocion and pago.tipo!=0 and matricula.nivel.nivelmalla.id == NIVEL_MALLA_CERO and DEFAULT_PASSWORD == 'itb':
                                    des = ((100-matricula.inscripcion.descuentoporcent)/100.0)
                                    rubro.valor *= des
                                    rubro.save()
                            # if matricula.inscripcion.promocion.val_inscripcion> 0

                            if pago.tipo==0:
                                rm = RubroMatricula(rubro=rubro, matricula=matricula)
                                rm.save()
                                if HABILITA_DESC_MATRI:
                                    if not matricula.inscripcion.carrera.validacionprofesional:
                                        descuento = round(((rubro.valor * DESCUENTO_MATRIC_PORCENT) /100),2)
                                        rubro.valor = rubro.valor - round(((rubro.valor * DESCUENTO_MATRIC_PORCENT) /100),2)
                                        rubro.save()
                                        desc = Descuento(inscripcion = matricula.inscripcion,
                                                         motivo ='DESCUENTO EN MATRICULA',
                                                         total = rubro.valor,
                                                         fecha = datetime.today().date())
                                        desc.save()
                                        detalle = DetalleDescuento(descuento =desc,
                                                                   rubro =rubro,
                                                                   valor = descuento,
                                                                   porcentaje = DESCUENTO_MATRIC_PORCENT)
                                        detalle.save()
                            else:
                                # CUOTA MENSUAL
                                rc = RubroCuota(rubro=rubro, matricula=matricula, cuota=pago.tipo)
                                rc.save()

            if self.empresaconvenio_id != ID_CONVENIO_BECA_TECT:
                if matricula.nivel.nivelmalla.id == NIVEL_MALLA_UNO and DEFAULT_PASSWORD == 'itb':
                    if  Matricula.objects.filter(inscripcion=matricula.inscripcion,nivel__nivelmalla__id=NIVEL_MALLA_CERO).exists():
                        mat =  Matricula.objects.filter(inscripcion=matricula.inscripcion,nivel__nivelmalla__id=NIVEL_MALLA_CERO)[:1].get()
                        if  mat.becado:
                            matricula.becado = True
                            matricula.porcientobeca = mat.porcientobeca
                            matricula.tipobeca = mat.tipobeca
                            matricula.motivobeca  = mat.motivobeca
                            matricula.tipobeneficio  = mat.tipobeneficio
                            matricula.fechabeca = datetime.now()
                            matricula.save()

                            if GENERAR_RUBROS_PAGO:
                                pp = (100-matricula.porcientobeca)/100.0

                                # Aplicar el % de Beca por cada Rubro Real q tenga el estudiante matriculado
                                for rubro in matricula.inscripcion.rubro_set.all():
                                    #El tipo Otro es solo para pasar los historicos, luego quitarlo y dejar solo si es cuota
                                    if rubro.es_cuota() and rubro.total_pagado()==0:
                                        if pp==0:
                                            rubro.delete()
                                        else:
                                            rubro.valor *= pp
                                            rubro.save()
                    # for rubro in matricula.inscripcion.rubro_set.all():
                    #El tipo Otro es solo para pasar los historicos, luego quitarlo y dejar solo si es cuota
                    for rubro in  matricula.rubrocuota_set.all():
                        if rubro.rubro.es_cuota() and rubro.rubro.total_pagado()==0:
                            if matricula.inscripcion.promocion:

                                des = ((100-matricula.inscripcion.descuentoporcent)/100.0)
                                rubro.rubro.valor *= des
                                rubro.rubro.save()

            if matricula.inscripcion.carrera.nombre == 'CONGRESO DE PEDAGOGIA':
                p=None
                if PreInscripcion.objects.filter(cedula = matricula.inscripcion.persona.cedula,tipodoc='c').exists():
                    p = PreInscripcion.objects.filter(cedula = matricula.inscripcion.persona.cedula,tipodoc='c')[:1].get()
                if PreInscripcion.objects.filter(cedula = matricula.inscripcion.persona.pasaporte,tipodoc='p').exists():
                    p = PreInscripcion.objects.filter(cedula =  matricula.inscripcion.persona.pasaporte,tipodoc='p')[:1].get()
                if p:
                    grupo = matricula.inscripcion.grupo()
                    matins =matricula
                    if p.valor:
                        if RubroMatricula.objects.filter(matricula=matins).exists():
                            rubromatins = RubroMatricula.objects.filter(matricula=matins)[:1].get()
                            rubromatins.rubro.valor = p.valor
                            rubromatins.rubro.save()
                    if DatosPersonaCongresoIns.objects.filter(preinscripcion=p,grupo=grupo).exists():
                        for dpi in  DatosPersonaCongresoIns.objects.filter(preinscripcion=p,grupo=grupo):
                            dpi.inscripcion = matricula.inscripcion
                            dpi.save()

    def matricularBecaMunicipio(self, nivel,montocubierto,duracion,totalcarrea):

        userrudy=User.objects.get(id=ID_USUARIO_RUDY)

        if not self.matriculado():

            if self.empresaconvenio_id == 1:
                motivobeca = ID_MOTIVO_BECA_MUNICIPIO
            elif self.empresaconvenio_id == 29 :
                motivobeca = ID_MOTIVO_BECA_TEC
            else:
                motivobeca = ID_MOTIVO_BECA_NUEVOECUADOR

            matricula = Matricula(inscripcion=self,
                                  nivel=nivel,
                                  pago=False,
                                  iece=False,
                                  becado=True,
                                  fechabeca=datetime.now(),
                                  tipobeneficio_id=ID_TIPO_BENEFICICO_BECA,
                                  tipobeca_id=ID_TIPOBECA,
                                  motivobeca_id=motivobeca,
                                  porcientobeca=100)
            matricula.save()

            materias = nivel.materia_set.filter(Q(cerrado=False)|Q(cerrado=None))

            #Actualizar el registro de InscripcionMalla con la malla correspondiente
            im = self.malla_inscripcion()
            im.malla = matricula.nivel.malla
            im.save()

            # Materias Asignadas
            if not 'CONGRESO' in nivel.carrera.nombre:
                for materia in materias:
                    asignatura = materia.asignatura
                    if not self.ya_aprobada(asignatura):
                        # Si no la tiene aprobada aun
                        # pendientes = self.recordacademico_set.filter(asignatura__in=asignatura.precedencia.all(),aprobada=False)
                        if self.carrera.online:
                            asistenciaparaaprobar = 0
                        else:
                            asistenciaparaaprobar = ASIST_PARA_APROBAR
                        if VALIDA_PRECEDENCIA:
                            if self.recordacademico_set.filter(asignatura__in=asignatura.precedencia.all().values('id'),nota__gte=NOTA_PARA_APROBAR,asistencia__gte=asistenciaparaaprobar).exists() or not asignatura.precedencia.all():
                                # if pendientes.count()==0:
                                if not MateriaAsignada.objects.filter(matricula=matricula,materia=materia).exists():
                                    asign = MateriaAsignada(matricula=matricula,materia=materia,notafinal=0,asistenciafinal=0,supletorio=0)
                                    asign.save()

                                    # Correccion de Lecciones ya impartidas
                                    leccionesYaDadas = Leccion.objects.filter(clase__materia=asign.materia)
                                    for leccion in leccionesYaDadas:
                                        asistenciaLeccion = AsistenciaLeccion(leccion=leccion,matricula=matricula,asistio=False)
                                        asistenciaLeccion.save()
                        else:
                            pendientes = self.recordacademico_set.filter(asignatura__in=asignatura.precedencia.all(),aprobada=False)
                            if pendientes.count()==0:
                                if  not MateriaAsignada.objects.filter(matricula=matricula,materia=materia).exists():
                                    asign = MateriaAsignada(matricula=matricula,materia=materia,notafinal=0,asistenciafinal=0,supletorio=0)
                                    asign.save()

                                    # Correccion de Lecciones ya impartidas
                                    leccionesYaDadas = Leccion.objects.filter(clase__materia=asign.materia)
                                    for leccion in leccionesYaDadas:
                                        asistenciaLeccion = AsistenciaLeccion(leccion=leccion,matricula=matricula,asistio=False)
                                        asistenciaLeccion.save()
                            else:
                                recordPendiente = RecordAcademico(inscripcion=self,asignatura=asignatura,nota=0,asistencia=0,fecha=datetime.now(),convalidacion=False,aprobada=False,pendiente=True)
                                recordPendiente.save()

            # Crear Rubro
            if GENERAR_RUBROS_PAGO and not self.beca_senescyt().tienebeca:
                # pp = 1.0 if not matricula.becado else ((100 - matricula.porcientobeca) / 100.0)
                if self.empresaconvenio_id == 1:
                    for pago in nivel.pagonivel_set.all():

                        rubro = Rubro(fecha=datetime.today().date(),
                                      valor = pago.valor, inscripcion=self,
                                      cancelado = False, fechavence = pago.fecha)

                        rubro.save()


                        if pago.tipo==0:
                            rm = RubroMatricula(rubro=rubro, matricula=matricula)
                            rm.save()

                        else:
                            # CUOTA MENSUAL
                            rc = RubroCuota(rubro=rubro, matricula=matricula, cuota=pago.tipo)
                            rc.save()
                elif self.empresaconvenio_id == 29:

                    hoy = datetime.today().date()
                    # rubro cuota////////

                    valoreal=totalcarrea-montocubierto
                    valormes=(valoreal/duracion)

                    rubrocuota = Rubro(fecha=datetime.today().date(),
                                       valor=valormes, inscripcion=self,
                                       cancelado=False, fechavence=nivel.fin)

                    rubrocuota.save()

                    rc = RubroCuota(rubro=rubrocuota, matricula=matricula, cuota=1)
                    rc.save()

                else:
                    for pago in PagoNivel.objects.filter(nivel=nivel, tipo__in=[16, 18]).exclude(tipo=0).order_by(
                            'fecha'):

                        rubro = Rubro(fecha=datetime.today().date(),
                            valor = pago.valor, inscripcion=self,
                            cancelado = False, fechavence = pago.fecha)

                        rubro.save()
                        #rubro otro
                        if pago.tipo==18:
                            tipo=TIPO_RUBRO_MATERIALAPOYO
                        else:
                            tipo=TIPO_RUBRO_CREDENCIAL

                        rc = RubroOtro(rubro=rubro, matricula=matricula.id, descripcion=TIPOS_PAGO_NIVEL[int(pago.tipo)][1],tipo_id=tipo)
                        rc.save()



            if GENERAR_RUBROS_PAGO:

                if self.empresaconvenio_id == 1:
                    pp = (100-matricula.porcientobeca)/100.0
                    # Aplicar el % de Beca por cada Rubro Real q tenga el estudiante matriculado
                    for rubro in matricula.inscripcion.rubro_set.all():
                        if rubro.puede_eliminarse():
                            descriprubro=rubro.nombre()
                            rubro_anterior = rubro.valor
                            # indice_rubro = rubro.id
                            indice_rubro = None
                            rubro.valor *= pp
                            # descuento= rubro_anterior - rc.rubro.valor
                            descuento= rubro_anterior
                            rubro.save()

                            # OCU grabo los rubros modificados en la tabla de detalle
                            detalle = DetalleRubrosBeca(matricula=matricula,
                                                        rubro= indice_rubro,
                                                        descripcion=descriprubro,
                                                        descuento = descuento,
                                                        porcientobeca = matricula.porcientobeca,
                                                        valorrubro=rubro_anterior,
                                                        fecha = datetime.now(),
                                                        usuario = userrudy)
                            detalle.save()
                            rubro.delete()



            if matricula.inscripcion.carrera.nombre == 'CONGRESO DE PEDAGOGIA':
                p=None
                if PreInscripcion.objects.filter(cedula = matricula.inscripcion.persona.cedula,tipodoc='c').exists():
                    p = PreInscripcion.objects.filter(cedula = matricula.inscripcion.persona.cedula,tipodoc='c')[:1].get()
                if PreInscripcion.objects.filter(cedula = matricula.inscripcion.persona.pasaporte,tipodoc='p').exists():
                    p = PreInscripcion.objects.filter(cedula =  matricula.inscripcion.persona.pasaporte,tipodoc='p')[:1].get()
                if p:
                    grupo = matricula.inscripcion.grupo()
                    matins =matricula
                    if p.valor:
                        if RubroMatricula.objects.filter(matricula=matins).exists():
                            rubromatins = RubroMatricula.objects.filter(matricula=matins)[:1].get()
                            rubromatins.rubro.valor = p.valor
                            rubromatins.rubro.save()
                    if DatosPersonaCongresoIns.objects.filter(preinscripcion=p,grupo=grupo).exists():
                        for dpi in  DatosPersonaCongresoIns.objects.filter(preinscripcion=p,grupo=grupo):
                            dpi.inscripcion = matricula.inscripcion
                            dpi.save()


    def matricular_pedagogia(self, nivel):
        rm=None
        if not self.matriculado():
            matricula = Matricula(inscripcion=self,
                                  nivel=nivel,
                                  pago=False,
                                  iece=False,
                                  becado=False,
                                  porcientobeca=0)
            matricula.save()

            # Crear Rubro
            if GENERAR_RUBROS_PAGO and not self.beca_senescyt().tienebeca:

                pp = 1.0 if not matricula.becado else ((100-matricula.porcientobeca)/100.0)


                for pago in nivel.pagonivel_set.all():
                    if pago.tipo==0 or (pago.tipo>0 and pp>0):
                        rubro = Rubro(fecha=datetime.today().date(),
                                      valor = pago.valor, inscripcion=self,
                                      cancelado = False, fechavence = pago.fecha)

                        rubro.save()

                        if pago.tipo==0:
                            rm = RubroMatricula(rubro=rubro, matricula=matricula)
                            rm.save()
                        else:
                            # CUOTA MENSUAL
                            rc = RubroCuota(rubro=rubro, matricula=matricula, cuota=pago.tipo)
                            rc.save()
            if matricula.inscripcion.carrera.nombre == 'CONGRESO DE PEDAGOGIA':
                p=None
                if PreInscripcion.objects.filter(cedula = matricula.inscripcion.persona.cedula,tipodoc='c').exists():
                    p = PreInscripcion.objects.filter(cedula = matricula.inscripcion.persona.cedula,tipodoc='c')[:1].get()
                if PreInscripcion.objects.filter(cedula = matricula.inscripcion.persona.pasaporte,tipodoc='p').exists():
                    p = PreInscripcion.objects.filter(cedula =  matricula.inscripcion.persona.pasaporte,tipodoc='p')[:1].get()
                # if p:
                if CuponInscripcion.objects.filter(inscripcion=matricula.inscripcion,grupo=matricula.inscripcion.grupo()).exists():
                    cupon = CuponInscripcion.objects.filter(inscripcion=matricula.inscripcion,grupo=matricula.inscripcion.grupo)[:1].get()
                    grupo = matricula.inscripcion.grupo()
                    matins =matricula
                    # if p.valor:
                    if RubroMatricula.objects.filter(matricula=matins).exists():
                        rubromatins = RubroMatricula.objects.filter(matricula=matins)[:1].get()
                        valdescuento = Decimal(rubromatins.rubro.valor - float(cupon.valor)).quantize(Decimal(10) ** -2)
                        desc = Descuento(inscripcion = matricula.inscripcion,
                                         motivo =cupon.descripcion,
                                         total = valdescuento,
                                         fecha = datetime.today().date())
                        desc.save()
                        porcentaje = Decimal((float(cupon.valor) * 100) / rubromatins.rubro.valor).quantize(Decimal(10) ** -2)
                        detalle = DetalleDescuento(descuento =desc,
                                                   rubro =rubromatins.rubro,
                                                   valor = valdescuento,
                                                   porcentaje = porcentaje)
                        detalle.save()
                        rubromatins.rubro.valor = cupon.valor
                        rubromatins.rubro.save()
                        if rubromatins.rubro.valor == 0:
                            rubromatins.rubro.cancelado=True
                            rubromatins.rubro.save()
                    if DatosPersonaCongresoIns.objects.filter(preinscripcion=p,grupo=grupo).exists():
                        for dpi in  DatosPersonaCongresoIns.objects.filter(preinscripcion=p,grupo=grupo):
                            dpi.inscripcion = matricula.inscripcion
                            dpi.save()
        return  rm

    def tiene_malla_nueva(self):
        if Malla.objects.filter(carrera=self.carrera,nueva_malla=True).exists():
            return True
        else:
            return False

    @staticmethod
    def flexbox_query(q):
        if ' ' in q:
            s = q.split(" ")
            return Inscripcion.objects.filter(Q(persona__apellido1__contains=s[0])&Q(persona__apellido2__contains=s[1])).order_by('persona__apellido1','persona__apellido2','persona__nombres')[:25]
        else:
            return Inscripcion.objects.filter(Q(persona__nombres__contains=q)|Q(persona__apellido1__contains=q)|Q(persona__apellido2__contains=q)|Q(persona__cedula__contains=q)).order_by('persona__apellido1','persona__apellido2','persona__nombres')[:25]

    @staticmethod
    def flexbox_query_2(q):
        if ' ' in q:
            s = q.split(" ")
            return Inscripcion.objects.filter(Q(persona__apellido1__contains=s[0])&Q(persona__apellido2__contains=s[1])).order_by('persona__apellido1','persona__apellido2','persona__nombres')
        else:
            return Inscripcion.objects.filter(Q(persona__nombres__contains=q)|Q(persona__apellido1__contains=q)|Q(persona__apellido2__contains=q)|Q(persona__cedula__contains=q)).order_by('persona__apellido1','persona__apellido2','persona__nombres')

    def flexbox_alias(self):
        return str(self)

    def flexbox_repr(self):
        if UTILIZA_GRUPOS_ALUMNOS:
            # return self.persona.cedula+" - "+self.persona.nombre_completo_inverso()+" ("+self.inscripciongrupo_set.all()[:1].get().grupo.nombre+")"
            if self.persona.cedula:
                return self.persona.cedula+" - "+self.persona.nombre_completo_inverso()+" ("+self.inscripciongrupo_set.all()[:1].get().grupo.nombre+")"
            else:
                return self.persona.pasaporte+" - EXTRANJERO - "+self.persona.nombre_completo_inverso()+" ("+self.inscripciongrupo_set.all()[:1].get().grupo.nombre+")"
        else:
            return self.persona.cedula+" - "+self.persona.nombre_completo_inverso()

    def tiene_cheque_protestado(self):
        if self.inscripcionflags_set.exists():
            # return self.inscripcionflags_set.all()[:1].get().tienechequeprotestado
            # OCU para traer el ultimo protesto de cheques
            return self.inscripcionflags_set.all().order_by('-id')[:1].get().tienechequeprotestado
        return False

    def numero_inscripcion(self):
        return str(self.fecha.year) + "-" + str(DEFAULT_PASSWORD).upper() + "-" + str(self.id).zfill(6)

    def malla_inscripcion(self):
        try:
            return InscripcionMalla.objects.get(inscripcion=self)
        except :
            try:
                malla = Malla.objects.get(carrera=self.carrera, vigente=True)
                im = InscripcionMalla(inscripcion=self, malla=malla)
                im.save()
                return im
            except Exception as ex :
                return None
    #  OCU 04-07-2014 validación estudiantes inactivos
    # inscripcion__persona__usuario__is_active=True
    def matricula_periodo_vigente(self):
        return self.matricula_set.filter(nivel__periodo__activo=True)[:1].get() if self.matricula_set.filter(nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True).exists() else None

    def matriculado(self):
        # return self.matricula_set.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True).exists()
        return self.matricula_set.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,liberada=False).exists()

    def tienesolicitudbeca(self):
        if SolicitudBeca.objects.filter(inscripcion=self,nivel__cerrado=False,nivel__periodo__activo=True,inscripcion__persona__usuario__is_active=True,tiposolicitud=1).exists():
            return SolicitudBeca.objects.filter(inscripcion=self,nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,tiposolicitud=1).order_by ('-id')[:1].get()
        else:
            return SolicitudBeca.objects.filter(inscripcion=self,nivel__cerrado=True, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,tiposolicitud=1).order_by ('-id')[:1].get()

    def matriculado_periodo(self, periodo):
        return self.matricula_set.filter(nivel__periodo=periodo, inscripcion__persona__usuario__is_active=True).exists()

    def matricula(self):
        # return self.matricula_set.filter(nivel__cerrado=False, inscripcion__persona__usuario__is_active=True)[:1].get() if self.matricula_set.filter(nivel__cerrado=False,inscripcion__persona__usuario__is_active=True).exists() else None
        matricula_query = self.matricula_set.filter(nivel__cerrado=False, inscripcion__persona__usuario__is_active=True, liberada=False)
        matricula_exists = matricula_query.exists()
        if matricula_exists:
            matricula_instance = matricula_query.filter()[:1].get()
        else:
            matricula_instance = None
        return matricula_instance

    def matricula_periodo(self, periodo):
        if self.matricula_set.filter(nivel__periodo=periodo, inscripcion__persona__usuario__is_active=True).exists():
            return self.matricula_set.filter(nivel__periodo=periodo, inscripcion__persona__usuario__is_active=True).order_by('-id')[:1].get() if self.matricula_set.filter(nivel__periodo=periodo).exists() else None

    def ultima_matricula_pararetiro(self):
        if Matricula.objects.filter(inscripcion=self).exists():
            return Matricula.objects.filter(inscripcion=self).order_by('-nivel__nivelmalla__orden')[:1].get()
        return False
    def tipo_beneficio(self):
        if self.matriculado() and self.matricula().becado:
            return "A" if self.matricula().tipobeneficio==TipoBeneficio.objects.get(pk=TIPO_AYUDA_FINANCIERA) else "B"
        return None

    def clave_padre(self):
        return PadreClave.objects.filter(inscripcion=self)[:1].get() if PadreClave.objects.filter(inscripcion=self).exists() else None

    def ya_aprobada(self, asignatura):
        if RecordAcademico.objects.filter(inscripcion=self,asignatura=asignatura, aprobada=True).exists():
            return True
        else :
            return False

    def documentos_entregados(self):
        if DocumentosDeInscripcion.objects.filter(inscripcion=self).exists():
            return DocumentosDeInscripcion.objects.filter(inscripcion=self)[:1].get()
        else:
            a = DocumentosDeInscripcion(inscripcion=self, titulo=False, acta=False, cedula=False, votacion=False, fotos=False, actaconv=False, partida_nac=False,actafirmada=False)
            a.save()
            return a

    def documentos_entregados_conduccion(self):
        if InscripcionConduccion.objects.filter(inscripcion=self).exists():
            return InscripcionConduccion.objects.filter(inscripcion=self)[:1].get()
        else:
            a = InscripcionConduccion(inscripcion=self, titulo=False, fotos2=False, copia_cedula=False, votacion=False, licencia=False, carnetsangre=False, ex_psicologico=False,val_psicosometrica=False,val_medica=False)
            a.save()
            return a

    def alumno_estado(self):
        return self.egresado_set.exists()

    def total_rubros(self):
        sum = Rubro.objects.filter(inscripcion=self).aggregate(Sum('valor'))
        return sum['valor__sum'] if sum['valor__sum'] else 0

    def rubros_pendientes(self):
        return self.rubro_set.filter(cancelado=False).order_by('fechavence')

    def rubros_vencidos(self):
        return [x for x in self.rubro_set.filter(cancelado=False, valor__gt=0).exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_RUBRO_CREDENCIAL,TIPO_RUBRO_MATERIALAPOYO]) if x.vencido()]

    def total_pagado(self):
        sum = Pago.objects.filter(rubro__inscripcion=self).aggregate(Sum('valor'))
        return sum['valor__sum'] if sum['valor__sum'] else 0


    def verifica_total_pagado(self):
        suma = 0
        for r in Rubro.objects.filter(inscripcion=self):
            suma = suma + r.verifica_total_pagado()
        return suma

    def verifica_adeudado(self):
        suma = 0
        return self.total_rubros() - self.verifica_total_pagado()


    def total_adeudado(self):
        return self.total_rubros() - self.total_pagado()

    def adeuda_a_la_fecha(self):
        return sum([x.verifica_adeudado() for x in self.rubro_set.filter(cancelado=False).exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO]) if x.vencido()])

    def credito_a_la_fecha(self):
        return sum([x.verifica_adeudado() for x in self.rubro_set.filter(cancelado=False) if not x.vencido()])

    def tiene_deuda(self):
        # if VALIDA_DEUDA_EVALUACIONES:
        return self.rubro_set.filter(cancelado=False, valor__gt=0,fechavence__lt=datetime.now().date()).exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO,TIPO_RUBRO_CREDENCIAL,TIPO_RUBRO_MATERIALAPOYO]).exclude(rubrootro__descripcion__icontains='TALLER').exists()

    def tiene_deuda_certificado_congreso(self):
        # VALIDA_DEUDA_CONGRESO
        if self.rubro_set.filter().exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO]).exists():
            return self.rubro_set.filter(cancelado=False).exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO]).count()
        return  1

    def tiene_deuda_temp(self):
        # OCastillo 19-03-20202 funcion temporal por el momento del codvid-19
        # OCastillo 01-12-2022 se excluye de deuda rubro credencial
        return self.rubro_set.filter(cancelado=False, valor__gt=0,fechavence__lt=datetime.now().date()).exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO,TIPO_RUBRO_CREDENCIAL,TIPO_RUBRO_MATERIALAPOYO]).exclude(rubrootro__descripcion__icontains='TALLER').exists()

    def tiene_deuda_matricula(self):
        # OCastillo 20-12-2022 se excluye de deuda rubro credencial
        return self.rubro_set.filter(cancelado=False, valor__gt=0,fechavence__lt=datetime.now().date()).exclude(rubrootro__tipo__id__in=[TIPO_RUBRO_CREDENCIAL,TIPO_RUBRO_MATERIALAPOYO]).exists()

    def tiene_certificacion_ingles(self):
        # OCastillo 15-02-2023 para verificar certificado de ingles
        certificado_ingles=None
        if ViewCertificacionesIngles.objects.filter(cedula=self.persona.cedula).exclude(cedula=None).exclude(cedula="").exists():
            certificado_ingles = ViewCertificacionesIngles.objects.filter(cedula=self.persona.cedula).exclude(cedula=None).exclude(cedula="").order_by('tipo','certificacion')
        elif ViewCertificacionesIngles.objects.filter(pasaporte=self.persona.pasaporte).exclude(pasaporte=None).exclude(pasaporte="").exists():
            certificado_ingles = ViewCertificacionesIngles.objects.filter(pasaporte=self.persona.pasaporte).exclude(pasaporte=None).exclude(pasaporte='').order_by('tipo','certificacion')
        return certificado_ingles

    def tiene_documentacion(self):
        # OCastillo 15-02-2023 para verificar documentacion de estudiantes en secretaria cedula votacion titulos fotos
        if DocumentoInscripcion.objects.filter(inscripcion=self,archivo__tipo__id__in=[3,5,9,14],aprobado=True).exists():
            documentos=True
        else:
            documentos=False
        return documentos


    def tiene_deuda_evaluacion(self):
        if VALIDA_DEUDA_EVALUACIONES:
            return self.rubro_set.filter(cancelado=False, valor__gt=0,fechavence__lt=datetime.now().date()).exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO,TIPO_RUBRO_CREDENCIAL,TIPO_RUBRO_MATERIALAPOYO]).exists()
        return  False

    def tiene_credito(self):
        return self.rubro_set.filter(cancelado=False,fechavence__gte=datetime.now().date()).exists()

    def tiene_donacion(self):
        return self.donacion_set.filter(aplicada=False).exists()

    def donaciones(self):
        return self.donacion_set.filter(aplicada=False).order_by('fecha')

    def retiradomatricula(self):
        return self.retiradomatricula_set.filter(nivel__cerrado=False).exists()

    def retirado(self):
        return self.retiradomatricula_set.exists()

    def estainactivo(self):
        return not self.persona.usuario.is_active

    def egresado(self):
        return self.egresado_set.exists()

    def graduado(self):
        return self.graduado_set.exists()

    def tiene_nota_credito_inst(self):
        return NotaCreditoInstitucion.objects.filter(beneficiario=self, cancelada=False, anulada=False).exists()

    def cantidad_notas_credito_inst(self):
        return NotaCreditoInstitucion.objects.filter(beneficiario=self, cancelada=False, anulada = False).count()

    #Actualiza y precarga en el modelo InscripcionEstadistica datos financieros y academicos
    def actualiza_estadistica(self):
        deuda_vencida=0
        if Rubro.objects.filter(cancelado=False, fechavence__lt=datetime.today(), valor__gt=0, inscripcion=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO]).exists():
            rubro = Rubro.objects.filter(cancelado=False, fechavence__lt=datetime.today(), valor__gt=0, inscripcion=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO])
            for r in rubro:
                if Pago.objects.filter(rubro=r).exists():
                    saldo = r.valor-r.verifica_total_pagado()
                    deuda_vencida = deuda_vencida+saldo
                else:
                    deuda_vencida = deuda_vencida+r.valor
        deuda_a_la_fecha=0
        if Rubro.objects.filter(cancelado=False, fechavence__gte=datetime.today(), valor__gt=0, inscripcion=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO]).exists():
            rubro = Rubro.objects.filter(cancelado=False, fechavence__gte=datetime.today(), valor__gt=0, inscripcion=self).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exclude(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO])
            for r in rubro:
                if Pago.objects.filter(rubro=r).exists():
                    saldo = r.valor-r.verifica_total_pagado()
                    deuda_a_la_fecha = deuda_a_la_fecha+saldo
                else:
                    deuda_a_la_fecha = deuda_a_la_fecha+r.valor

        if InscripcionEstadistica.objects.filter(inscripcion=self).exists():
            ins = InscripcionEstadistica.objects.filter(inscripcion=self)[:1].get()
            if MODULO_FINANZAS_ACTIVO:
                ins.deuda = deuda_vencida
                ins.credito = deuda_a_la_fecha
                ins.save()
        else:
            if MODULO_FINANZAS_ACTIVO:
                ins = InscripcionEstadistica(inscripcion=self, deuda=deuda_vencida, credito=deuda_a_la_fecha)
                ins.save()

    def tiene_deuda_externa(self):
        if self.inscripcionflags_set.exists():
            return self.inscripcionflags_set.all()[:1].get().tienedeudaexterna
        else:
            return None

    def __str__(self):
        return str(self.persona)

    def grupo(self):
        return self.inscripciongrupo_set.all()[:1].get().grupo if self.inscripciongrupo_set.exists() else None

    def cantidadobservaciones(self):
        return self.observacioninscripcion_set.count()

    def cantidadobservacioncritica(self):
        return self.observacioninscripcion_set.filter(tipo__id=TIPO_OBSERVACION_CRITICA_ID)

    def tiene_obscritica(self):
        if ObservacionInscripcion.objects.filter(inscripcion=self,tipo__id=TIPO_OBSERVACION_CRITICA_ID,activa=True).exists():
            return ObservacionInscripcion.objects.filter(inscripcion=self,tipo__id=TIPO_OBSERVACION_CRITICA_ID,activa=True)[:1].get()

    def datos_socioeconomicos_incompletos(self):
        """Indica si la Inscripcion aun tiene datos por ingresar en la Ficha socioeconomica"""
        if self.inscripcionfichasocioeconomica_set.exists():
            ficha = self.inscripcionfichasocioeconomica_set.all()[:1].get()
            return not ficha.tipohogar or not ficha.personacubregasto or not ficha.sustentahogar.exists() or \
                not ficha.tipovivienda or not ficha.materialpared or not ficha.materialpiso or \
                not ficha.cantbannoducha or not ficha.tiposervhig or not ficha.cantcelulares or \
                not ficha.canttvcolor or not ficha.cantvehiculos or not ficha.niveljefehogar or not ficha.ocupacionjefehogar or \
                not ficha.ocupacionestudiante or \
                not ficha.ingresoestudiante or not ficha.bonofmlaestudiante or not ficha.cantidadmiembros or ficha.num_hijos == '' or ficha.num_hijos == None

        return True

    def correo_congreo(self,grupo):
        hoy = datetime.now().today()
        contenido = grupo.nombre
        send_html_mail(grupo.nombre,
                       "emails/emailcongreso.html", {'d': self, 'fecha': hoy,'contenido': contenido,'grupo':grupo},self.persona.email.split(","))

    def tiene_precongreso(self):
        if self.matricula():
            if InscripcionSeminario.objects.filter(matricula = self.matricula(),gruposeminario__activo=True).exists():
                return InscripcionSeminario.objects.filter(matricula = self.matricula(),gruposeminario__activo=True)[:1].get()
        return  None

    # def retirado(self,usuario):
    #     if TipoIncidencia.objects.filter(pk=30).exists():
    #         tipo = TipoIncidencia.objects.get(pk=30)
    #         grupo = self.inscripciongrupo_set.all()[:1].get()
    #         hoy = datetime.now().today()
    #         contenido = 'ESTUDIANTE RETIRADO '
    #         send_html_mail(contenido,
    #         "emails/email_retirado.html", {'g':grupo,'d': self, 'fecha': hoy,'contenido': contenido,'usuario':usuario},tipo.correo.split(","))

    def notificacion_dobe(self,usuario,tipo_notif,asunto):
        if TipoIncidencia.objects.filter(pk=30).exists():
            tipo = TipoIncidencia.objects.get(pk=30)
            grupo = self.inscripciongrupo_set.all()[:1].get()
            hoy = datetime.now().today()
            contenido = 'NOTIFICACION DOBE '
            send_html_mail(contenido,
                           "emails/notificacion_dobe.html", {'g':grupo,'d': self, 'fecha': hoy,'contenido': contenido,'user':usuario,'tiponotif':tipo_notif,'asunto':asunto },tipo.correo.split(","))

    def correo_entregadocumentos(self,documento,usuario):
        if TipoIncidencia.objects.filter(pk=47).exists():
            tipo = TipoIncidencia.objects.get(pk=47)
            hoy = datetime.now().today()
            contenido = u"Recepcion de Documentos"

            send_html_mail(contenido,
                           "emails/notificacion_documentos.html", {'d': self, 'fecha': hoy,'contenido': contenido,'documentos':documento,'user':usuario,'op':'1'},tipo.correo.split(","))



    def correo_entregadocumentos_edit(self,usuario,acta,cedula,fotos,titulo,votacion,actaconv,partidanacimiento,actafirmada):
        if TipoIncidencia.objects.filter(pk=47).exists():
            tipo = TipoIncidencia.objects.get(pk=47)
            hoy = datetime.now().today()
            contenido = u"Recepcion de Documentos"
            acta = acta
            cedula = cedula
            fotos = fotos
            titulo = titulo
            votacion = votacion
            actaconv = actaconv
            partidanacimiento = partidanacimiento
            actafirmada = actafirmada

            send_html_mail(contenido,
                           "emails/notificacion_documentos.html", {'d': self, 'fecha': hoy,'contenido': contenido,'acta':acta,'cedula':cedula,'fotos':fotos,'titulo':titulo,'votacion':votacion,'actaconv':actaconv,'partidanacimiento':partidanacimiento,'actafirmada':actafirmada,'user':usuario,'op':'2'},tipo.correo.split(","))

    def notiificacion_acta(self,record,user,acta):
        hoy = datetime.now().today()
        if TipoIncidencia.objects.filter(pk=50).exists():
            tipo = TipoIncidencia.objects.get(pk=50)
            contenido = "Se ha Adicionado nota en Historico y Record"
            send_html_mail(u"Adicionada Acta de Sustentacion",
                           "emails/notificacion_acta.html", {'d': self, 'fecha': hoy,'contenido': contenido,'record':record ,'user':user,'acta':acta} ,tipo.correo.split(","))

    def notificacion_pago_online(self,correo,transaccion,autorizacion,valor):

        hoy = datetime.now().today()
        contenido = "SE HA REGISTRADO UN PAGO EN LINEA"
        send_html_mail("NOTIFICACION DE PAGO ONLINE",
                       "emails/pago_online_sga.html", {'f': self, 'fecha': hoy,'transaccion':transaccion,'autorizacion':autorizacion,'valor':valor },correo.split(","))

    def notificacion_pago_online_adm(self,transaccion,autorizacion,valor,detallerubros,tipotarjeta,estadopagoonline,cajapagoonline):
        if TipoIncidencia.objects.filter(pk=1).exists():
            tipo = TipoIncidencia.objects.get(pk=1)
            hoy = datetime.now().today()
            contenido = "SE HA REGISTRADO UN PAGO EN LINEA"
            send_html_mail("NOTIFICACION DE PAGO ONLINE",
                           "emails/pago_online_sga_adm.html", {'f': self, 'fecha': hoy,'transaccion':transaccion,'autorizacion':autorizacion,'valor':valor,
                                                               'detallerubros':detallerubros,'tipotarjeta':tipotarjeta,'estadopagoonline':estadopagoonline,'cajapagoonline':cajapagoonline},tipo.correo.split(","))

    def ficha_cerrada(self):
        return RegistroSeguimiento.objects.filter(inscripcion=self,cerrada=True).exists()

    def tiene_gestion(self):
        return RegistroSeguimiento.objects.filter(inscripcion=self).exists()

    def existe_enCAB(self):
        if InscripcionesCAB.objects.filter(inscripcion=self, inscripcion__cab=True, estado=True).exists():
            return InscripcionesCAB.objects.filter(inscripcion=self, inscripcion__cab=True, estado=True).order_by('-id')[:1].get()

    def tiene_solicitudbeca(self):
        if SolicitudBeca.objects.filter(inscripcion=self,aprobado=True).exists():
            return SolicitudBeca.objects.filter(inscripcion=self,aprobado=True).order_by('-id')[:1].get()


    class Meta:
        verbose_name = "Inscripcion de Alumno"
        verbose_name_plural = "Inscripciones de Alumnos"
        ordering = ["persona__apellido1","persona__apellido2", "persona__nombres"]

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.colegio = self.colegio.upper()
        if self.identificador:
            self.identificador = self.identificador.upper()
        if self.observacion:
            self.observacion = self.observacion.upper()
        if self.recibetit:
            self.recibetit = self.recibetit.upper()
        super(Inscripcion, self).save(force_insert, force_update, using, update_fields)

    def matriculatutori(self):
        return self.matricula_set.filter(inscripcion__persona__usuario__is_active=True)[:1].get() if self.matricula_set.filter().exists() else None


    def suspensioncon(self):
        return InscripcionSuspension.objects.get(inscripcion=self)

    def inscripcionsuspenexis(self):
        if InscripcionSuspension.objects.filter(inscripcion=self).exists():
            return InscripcionSuspension.objects.filter(inscripcion=self)

    def correo_suspension(self,contenido,tabla,opcsus):
        if TipoIncidencia.objects.filter(pk=INCIDENCIA_SUSPENSION).exists():
            tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_SUSPENSION)
            hoy = datetime.now().today()
            contenido = contenido
            send_html_mail(contenido,
                           "emails/suspensioncorreo.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'modelo': tabla, 'opc':opcsus },tipo.correo.split(","))

    def existe_solicitud(self):
        return SolicitudBeca.objects.filter(inscripcion=self,tiposolicitud=1).order_by('-fecha')[:1].get()

    def existe_solicitud_beca(self):
        return SolicitudBeca.objects.filter(inscripcion=self).exists()



    def existe_fichabeca(self):
        if self.inscripcionfichasocioeconomicabeca_set.exists():
            ficha = self.inscripcionfichasocioeconomicabeca_set.all()[:1].get()
            return  ficha
        return  False

    def existe_fichasocioeconomico(self):
        if self.inscripcionfichasocioeconomica_set.exists():
            ficha = self.inscripcionfichasocioeconomica_set.all()[:1].get()
            return ficha
        return False
    def kit_congreso(self):
        if RubroOtro.objects.filter(tipo__id=TIPO_CONGRESO_RUBRO,descripcion__icontains='5TO CONGRESO',rubro__inscripcion=self).exists():
            t = RubroOtro.objects.filter(tipo__id=TIPO_CONGRESO_RUBRO,descripcion__icontains='5TO CONGRESO',rubro__inscripcion=self).count()
            if RubroOtro.objects.filter(tipo__id=TIPO_CONGRESO_RUBRO,rubro__cancelado=True,descripcion__icontains='5TO CONGRESO',rubro__inscripcion=self).count() == t:
                return True
            else:
                return False

    def kit_congreso_valor(self):
        if RubroOtro.objects.filter(tipo__id=TIPO_CONGRESO_RUBRO,rubro__cancelado=True,descripcion__icontains='5TO CONGRESO',rubro__inscripcion=self).exists():
            return RubroOtro.objects.filter(tipo__id=TIPO_CONGRESO_RUBRO,rubro__cancelado=True,descripcion__icontains='5TO CONGRESO',rubro__inscripcion=self).aggregate(Sum('rubro__valor'))['rubro__valor__sum']
        return  0

    def kit_esta_entregado(self):
        return KitCongreso.objects.filter(inscripcion=self,activo=True).exists()

    def kit_entregado(self):
        return KitCongreso.objects.filter(inscripcion=self,activo=True)[:1].get()

    def asistio_cofia(self):
        return AsistenciaCofia.objects.filter(inscripcion=self).exists()

    def asistencia_cofia(self):
        return AsistenciaCofia.objects.filter(inscripcion=self)[:1].get()

    def recibo_generado(self):
        return  ReciboPermisoCondu.objects.filter(inscripcion=self).exists()

    def cantidad_recibo(self):
        return  ReciboPermisoCondu.objects.filter(inscripcion=self).count()


    def absentismo_existe(self):
        return Absentismo.objects.filter(materiaasignada__matricula__inscripcion=self,materiaasignada__absentismo=True).order_by('-id')[:1].get()

    def absentismo_reintegro(self):
        return Absentismo.objects.filter(materiaasignada__matricula__inscripcion=self,reintegro=True).order_by('-id')[:1].get()

    def por_recuperar_nivel(self):
        nivel = self.absentismo_reintegro().materiaasignada.matricula.nivel
        if Rubro.objects.filter(cancelado=False,fechavence__gte=nivel.inicio,fechavence__lte=nivel.fin,inscripcion=self).exists():
            return Rubro.objects.filter(cancelado=False,fechavence__gte=nivel.inicio,fechavence__lte=nivel.fin,inscripcion=self).aggregate(Sum('valor'))['valor__sum']
        return 0

    def falta_reintegrar(self):
        return Absentismo.objects.filter(materiaasignada__matricula__inscripcion=self,materiaasignada__absentismo=True,reintegro=False).exists()

    def recuperado(self,desde,hasta):
        try:
            if  Pago.objects.filter(rubro__inscripcion=self,fecha__gte=desde,fecha__lte=hasta).exists():
                return Pago.objects.filter(rubro__inscripcion=self,fecha__gte=desde,fecha__lte=hasta).aggregate(Sum('valor'))['valor__sum']
        except Exception as e:
            return 0
        return 0



    def ultimo_nivel(self):
        nivel = self.absentismo_reintegro().materiaasignada.matricula.nivel
        if (nivel.paralelo[0:1] == 'E' or nivel.paralelo[0:1] == 'P' or nivel.paralelo[0:1] == 'G'):
            max_nivel=5
        else:
            max_nivel=7
        nivelmalla = NivelMalla.objects.filter(orden=max_nivel)[:1].get()
        return nivelmalla

    def por_recuperar(self):
        proyeccion=0

        nivel = self.absentismo_reintegro().materiaasignada.matricula.nivel
        if nivel.nivelmalla.orden:
            cant_niveles =  self.ultimo_nivel().orden -nivel.nivelmalla.orden
            if nivel.pagonivel_set.all().aggregate(Sum('valor'))['valor__sum']==None:
                proyeccion =0
            else:
                if (nivel.pagonivel_set.all().aggregate(Sum('valor'))['valor__sum'] * cant_niveles ) > 0:
                    proyeccion =  (nivel.pagonivel_set.all().aggregate(Sum('valor'))['valor__sum'] * cant_niveles )
                else:
                    proyeccion =0
        return proyeccion



    def posponer_desc(self):
        return InscripcionDescuentoRef.objects.filter(inscripcion=self,proximo=True,aplicado=False).exists()

    def malla_matricula(self,nivelmalla):
        if Matricula.objects.filter(inscripcion=self,nivel__nivelmalla=nivelmalla).exists():
            return  Matricula.objects.filter(inscripcion=self,nivel__nivelmalla=nivelmalla)[:1].get().nivel.periodo.nombre
        return  False

    def inscripcionexamen(self):
        return InscripcionExamen.objects.filter(inscripcion=self).exists()

    def ultima_matricula(self):
        if Matricula.objects.filter(inscripcion=self,becado=True).exists():
            return Matricula.objects.filter(inscripcion=self,becado=True).order_by('-nivel__nivelmalla__orden')[:1].get()
        return False


    # OCU 01-dic-2016 para alerta de permiso vehicular
    # OCU 05-dic-2016 para presentar la fecha de cobro de permiso vehicular
    def tiene_permisovehicular(self):
        if ReciboPermisoCondu.objects.filter(inscripcion=self).exists():
            return ReciboPermisoCondu.objects.filter(inscripcion=self).order_by('-id')[:1].get()
        else:
            return False
    def download_foto(self):
        if FotoInstEstudiante.objects.filter(inscripcion=self):
            return FotoInstEstudiante.objects.filter(inscripcion=self)[:1].get().foto.url

    def existe_especiebeca(self):
        if  RubroEspecieValorada.objects.filter(rubro__inscripcion=self,tipoespecie__id=9,aplicada=False,disponible=True).exists():
            fespecie= RubroEspecieValorada.objects.filter(rubro__inscripcion=self,tipoespecie__id=9,aplicada=False,disponible=True).order_by('-id')[:1].get().rubro.fecha
            diasvalidez = (datetime.now().date()- fespecie).days
            if diasvalidez <= 45:
                return True
            else:
                return False

    def especiebeca_registrada(self):
        if  RubroEspecieValorada.objects.filter(rubro__inscripcion=self,tipoespecie__id=9,aplicada=True,disponible=False).exists():
            return True
        else:
            return False

    # OCastillo 29-08-2017 malla completa
    def mallacompleta(self):
        valor = False
        #OCastillo 28-10-2021 se excluye asignatura practica para carrera Tricologia
        if self.carrera.id!=33:
            if RecordAcademico.objects.filter(inscripcion=self).exists():
                if Malla.objects.filter(carrera=self.carrera,vigente=True).order_by('-id')[:1].exists():
                    malla = Malla.objects.filter(carrera=self.carrera,vigente=True).order_by('-id')[:1].get()
                    #OCastillo 23-nov-2021 para malla de carrera Enfermeria 2018 excluir practicas
                    #OCastillo 06-04-2023 se excluye de asignatura malla trabajo de titulacion
                    if malla.id==35:
                        total_malla = AsignaturaMalla.objects.filter(malla=malla).exclude(nivelmalla__id=NIVEL_MALLA_CERO).exclude(asignatura__promedia=False).exclude(asignatura__nombre__icontains='TRABAJO DE TITULACI').count()
                        r = RecordAcademico.objects.filter(inscripcion=self,aprobada=True).exclude(asignatura__asignaturamalla__nivelmalla__id=NIVEL_MALLA_CERO).exclude(asignatura__promedia=False)
                    #OCastillo 15-02-2023 para carrera Optometria
                    elif malla.id==46:
                        total_malla = AsignaturaMalla.objects.filter(malla=malla).exclude(nivelmalla__id=NIVEL_MALLA_CERO).exclude(asignatura__promedia=False).exclude(asignatura__asignaturamalla__nivelmalla__promediar=False).count()
                        r = RecordAcademico.objects.filter(inscripcion=self,aprobada=True).exclude(asignatura__asignaturamalla__nivelmalla__id=NIVEL_MALLA_CERO).exclude(asignatura__promedia=False).exclude(asignatura__asignaturamalla__nivelmalla__promediar=False)
                    else:
                        #OCastillo 19-10-2023 se excluye materia Trabajo Integracion Curricular para carrera Mecanica Automotriz indicado por M.Mora via telefono
                        total_malla = AsignaturaMalla.objects.filter(malla=malla).exclude(nivelmalla__id=NIVEL_MALLA_CERO).distinct('asignatura').exclude(asignatura__promedia=False).exclude(asignatura__nombre__icontains='TRABAJO DE INTEGRACI').exclude(asignatura__nombre__icontains='TRABAJO DE TITULACI').values('asignatura_id').count()
                        r = RecordAcademico.objects.filter(inscripcion=self,aprobada=True).exclude(asignatura__asignaturamalla__nivelmalla__id=NIVEL_MALLA_CERO).exclude(asignatura__promedia=False).exclude(asignatura__nombre__icontains='TRABAJO DE INTEGRACI').exclude(asignatura__nombre__icontains='TRABAJO DE TITULACI')
                    materias = r.count()
                    if total_malla == materias:
                        valor = True
        else:
            if RecordAcademico.objects.filter(inscripcion=self).exists():
                if Malla.objects.filter(carrera=self.carrera,vigente=True).order_by('-id')[:1].exists():
                    malla = Malla.objects.filter(carrera=self.carrera,vigente=True).order_by('-id')[:1].get()
                    total_malla = AsignaturaMalla.objects.filter(malla=malla).exclude(nivelmalla__id=NIVEL_MALLA_CERO).exclude(asignatura__id__in=[651]).exclude(asignatura__promedia=False).count()
                    r = RecordAcademico.objects.filter(inscripcion=self,aprobada=True).exclude(asignatura__asignaturamalla__nivelmalla__id=NIVEL_MALLA_CERO).exclude(asignatura__promedia=False)
                    materias = r.count()
                    if total_malla == materias:
                        valor = True
        return valor

    def tiene_deudaotros(self):
        # if VALIDA_DEUDA_EVALUACIONES:
        return self.rubro_set.filter(Q(cancelado=False, valor__gt=0,fechavence__lt=datetime.now().date()),Q(rubrootro__tipo__id__in=[TIPO_CURSOS_RUBRO,TIPO_CONGRESO_RUBRO]) | Q(rubrootro__descripcion__icontains='TALLER')).exists()


    def inscripcionexamenValido(self):
        return InscripcionExamen.objects.filter(inscripcion=self,valida = True)[:1].get()

    def puede_egresar(self):
        if self.carrera.online:
            asistenciaparaaprobar = 0
        else:
            asistenciaparaaprobar = ASIST_PARA_APROBAR
        if HistoricoRecordAcademico.objects.filter( inscripcion=self).exists():
            c = 0
            mallainscripcion = self.malla_inscripcion()
            if not mallainscripcion:
                return  "No tiene una malla asociada"
            if len(AsignaturaMalla.objects.filter(malla=mallainscripcion.malla).exclude(asignatura__sin_malla=True).exclude(nivelmalla=NIVEL_MALLA_CERO).exclude(asignatura__id__in=ASIGNATURA_EXAMEN_GRADO_CONDU).exclude(asignatura__nivelacion=True).exclude(asignatura__promedia=False).exclude(asignatura__titulacion=True).distinct('asignatura').values('asignatura')) > len(HistoricoRecordAcademico.objects.filter( inscripcion=self).exclude(asignatura__sin_malla=True).exclude(asignatura__id__in=ASIGNATURA_EXAMEN_GRADO_CONDU).exclude(asignatura__nivelacion=True).exclude(asignatura__promedia=False).exclude(asignatura__titulacion=True).distinct('asignatura').values('asignatura')):
                return  "Malla Incompleta"
            a=AsignaturaMalla.objects.filter(malla__id=mallainscripcion.malla.id).exclude(nivelmalla__id=NIVEL_MALLA_CERO).exclude(asignatura__sin_malla=True).exclude(asignatura__id__in=ASIGNATURA_EXAMEN_GRADO_CONDU).exclude(asignatura__nivelacion=True).exclude(asignatura__promedia=False).exclude(asignatura__titulacion=True).values('asignatura')
            c = HistoricoRecordAcademico.objects.filter(asignatura__in=a, nota__gte=NOTA_PARA_APROBAR, asistencia__gte=asistenciaparaaprobar,inscripcion=self).exclude(asignatura__id__in=ASIGNATURA_EXAMEN_GRADO_CONDU).exclude(asignatura__nivelacion=True).exclude(asignatura__promedia=False).exclude(asignatura__titulacion=True).distinct('asignatura').values('asignatura')
            if a.count() > c.count():
                # if c < len(AsignaturaMalla.objects.filter(malla=mallainscripcion.malla).exclude(nivelmalla=NIVEL_MALLA_CERO).exclude(asignatura__id__in=ASIGNATURA_EXAMEN_GRADO_CONDU)):
                return  "Tiene Asignaturas Reprobadas"
        else:
            return  "Malla Incompleta"
        return ""
    def vendedor(self):
        if InscripcionVendedor.objects.filter(inscripcion=self).exists():
            return InscripcionVendedor.objects.filter(inscripcion=self)[:1].get()
        False


    # OCastillo 13-09-2018 para verificar promedio de asistencia del historico para Conduccion
    def condu_prom_asistencia(self):

        promedio=0
        if HistoricoRecordAcademico.objects.filter(inscripcion=self).exists():
            if Malla.objects.filter(carrera=self.carrera).order_by('-id')[:1].exists():
                malla = Malla.objects.filter(carrera=self.carrera,vigente=True).order_by('-id')[:1].get()
                a=AsignaturaMalla.objects.filter(malla__id=malla.id).exclude(Q(asignatura__in = ASIGNATURA_EXAMEN_GRADO_CONDU)).values('asignatura')
                materias = a.count()
                b = HistoricoRecordAcademico.objects.filter(inscripcion=self,nota__gte=NOTA_PARA_APROBAR,asignatura__in=a).aggregate(Sum('asistencia'))['asistencia__sum']
                if b:
                    promedio= Decimal(b/materias).quantize(Decimal(10)**-2)
        return promedio

    def tiene_aprobadavinculacion(self,p):
        return AprobacionVinculacion.objects.filter(inscripcion=self,revisionestudiante=True,revisionproyecto=True,revisiondocente=True,estudiantevinculacion=p).exists()

    def existe_vinculacion(self):
        if HistoricoRecordAcademico.objects.filter(inscripcion=self,asignatura=ASIG_VINCULACION).exists() and RecordAcademico.objects.filter(inscripcion=self,asignatura=ASIG_VINCULACION).exists():
            return True
        else:
            return False

    def tiene_test_hecho(self):
        if InscripcionTipoTest.objects.filter(inscripcion=self,estado=True).exists():
            return True
        else:
            return False

    def ver_archivo(self):
        if  ArchivoTestConduccion.objects.filter(inscripcion=self).exists():
            return True
        else:
            return False

    def archivotest(self):
        archivo= ArchivoTestConduccion.objects.get(inscripcion=self)
        return archivo.informe

    def verificararchivotest(self):
        if ArchivoTestConduccion.objects.filter(inscripcion=self).exists():
            return 'Archivo Subido'
        else:
            return 'Archivo no Subido'

    def tiene_test_completo(self):
        if InscripcionTipoTest.objects.filter(inscripcion=self,estado=True).exists():
            if InscripcionTipoTest.objects.filter(inscripcion=self,estado=True).count()== TipoTest.objects.filter(estado=True).count():
                return 'COMPLETO'
            else:
                return 'INCOMPLETO'
        else:
            return 'NO TIEN'

    def tiene_test_completo2(self):
        if InscripcionTipoTest.objects.filter(inscripcion=self,estado=True).exists():
            if InscripcionTipoTest.objects.filter(inscripcion=self,estado=True).count()== TipoTest.objects.filter(estado=True).count():
                return True
            else:
                return False
        else:
            return False

    def ver_entrega_kit_uniforme(self):
        if EntregaUniformeMunicipo.objects.filter(inscripcion=self).exists():
            return EntregaUniformeMunicipo.objects.filter(inscripcion=self)[:1].get()
        else:
            return False

    def ver_entrega_juegute_canasta(self):
        if EntregaJugueteCanasta.objects.filter(inscripcion=self).exists():
            return EntregaJugueteCanasta.objects.filter(inscripcion=self)[:1].get()
        else:
            return False


    def tienesolicitudayudafinanceira(self):
        if SolicitudBeca.objects.filter(inscripcion=self,nivel__cerrado=False,nivel__periodo__activo=True,inscripcion__persona__usuario__is_active=True,tiposolicitud=2).exists():
            return SolicitudBeca.objects.filter(inscripcion=self,nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,tiposolicitud=2).order_by ('-id')[:1].get()
        else:
            return SolicitudBeca.objects.filter(inscripcion=self,nivel__cerrado=True, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True,tiposolicitud=2).order_by ('-id')[:1].get()

    # def matriculadoayudafinanciera(self):
    #     return self.matricula_set.filter(nivel__cerrado=True, inscripcion__persona__usuario__is_active=True).exists()

    def matriculaayudafinanciera(self):
        return self.matricula_set.filter(nivel__cerrado=True, inscripcion__persona__usuario__is_active=True)[:1].get() if self.matricula_set.filter(nivel__cerrado=True,inscripcion__persona__usuario__is_active=True).exists() else None

    def verhistorialayudafinanciera(self,idsolicitud):
        if HistorialGestionAyudaEconomica.objects.filter(inscripcion=self,solicitudbeca__id=idsolicitud).exists():
            return HistorialGestionAyudaEconomica.objects.filter(inscripcion=self,solicitudbeca__id=idsolicitud)
        else:
            return False

    def verhistorialabeca(self,idsolicitud):
        if HistorialGestionBeca.objects.filter(inscripcion=self,solicitudbeca__id=idsolicitud).exists():
            return HistorialGestionBeca.objects.filter(inscripcion=self,solicitudbeca__id=idsolicitud)
        else:
            return False

    def verhistorialabecaeliminasolicitud(self,idsolicitud):
        if HistorialGestionBeca.objects.filter(inscripcion=self,solicitudbeca__id=idsolicitud,estado__id__in=[2,3,8,9,10,11,12,13,14,15,16,17]).exists():
            return False
        else:
            return True

    def verhistorialaayudaeliminasolicitud(self,idsolicitud):
        if HistorialGestionAyudaEconomica.objects.filter(inscripcion=self,solicitudbeca__id=idsolicitud,estado__id__in=[2,3,8,9,10,11,12,13,14,15,16,17]).exists():
            return False
        else:
            return True

    def permitireliminarbeca(self,idsolicitud):
        if HistorialGestionBeca.objects.filter(inscripcion=self,solicitudbeca__id=idsolicitud,estado__id__in=[9]).exists():
            return False
        else:
            return True

    def permitireliminarayuda(self,idsolicitud):
        if HistorialGestionAyudaEconomica.objects.filter(inscripcion=self,solicitudbeca__id=idsolicitud,estado__id__in=[9]).exists():
            return False
        else:
            return True

    def verificarrenovacion(self):
        if SolicitudBeca.objects.filter(inscripcion=self,aprobado=True).order_by('-fecha')[:1].exists():
            return True
        else:
            if Matricula.objects.filter(inscripcion=self,fecha__lte=self.matricula().fecha,becado=True).exists():
                return True
            else:
                return False

    def veraprobacionestudiante(self,idsolicitud):
        if SolicitudBeca.objects.filter(id=idsolicitud,inscripcion=self,aprobado=True,asignaciontarficadescuento=True,aprobacionestudiante=False).order_by('-fecha')[:1].exists():
            return True
        else:
            return False

    def vertabladescuentobeca(self,idsolicitud):
        if TablaDescuentoBeca.objects.filter(solicitudbeca__id=idsolicitud,inscripcion=self).exists():
            return True
        else:
            return False

    def vertabladescuentobecaproado(self,idsolicitud):
        if SolicitudBeca.objects.filter(id=idsolicitud,inscripcion=self).order_by('-fecha')[:1].exists():
            return True
        else:
            return False

    def validaenvionalisis(self,idsolicitud):
        if SolicitudBeca.objects.filter(id=idsolicitud,inscripcion=self,envioanalisis=True).order_by('-fecha')[:1].exists():
            return False
        else:
            return True

    def veraprobacionestudianteayuda(self,idsolicitud):
        if SolicitudBeca.objects.filter(id=idsolicitud,inscripcion=self,aprobado=True,asignaciontarficadescuento=True,aprobacionestudiante=False,tiposolicitud=2).order_by('-fecha')[:1].exists():
            return True
        else:
            return False

    def tiene_cupon(self):
        if CuponInscripcion.objects.filter(inscripcion=self,grupo=self.grupo()).exists():
            return CuponInscripcion.objects.filter(inscripcion=self,grupo=self.grupo())[:1].get()
        return False


    def validarverificacionarchivo(self,idsolicitud):
        if SolicitudBeca.objects.filter(id=idsolicitud,inscripcion=self,estadoverificaciondoc=True).exists():
            return True
        else:
            return False

    def raza(self):
        if PerfilInscripcion.objects.filter(inscripcion=self).exists():
            perfil = PerfilInscripcion.objects.filter(inscripcion=self)[:1].get()
            if perfil.raza:
                return perfil.raza
            else:
                return False
    def tieneprocesosolicitudbeca(self):
        if SolicitudBeca.objects.filter(inscripcion=self,nivel__cerrado=False,nivel__periodo__activo=True,inscripcion__persona__usuario__is_active=True,tiposolicitud=1,estadosolicitud__in=ID_TIPO_ESTADO_BECA).exists():
            return True
        else:
            return False

    def verbecacrisfe(self,idsolicitud):
        if Matricula.objects.filter(inscripcion = self,nivel__cerrado=True).exists():
            matriculaant = Matricula.objects.filter(inscripcion = self,nivel__cerrado=True).order_by('-fecha')[:1].get()
            if Matricula.objects.filter(inscripcion=self,nivel=matriculaant.nivel,motivobeca__id=ID_FUNDACION_CRISFE).exists():
                return True
            else:
                return False
        else:
            return False


    def calculopromedio(self):
        lista=[]
        puntaje = 0
        if Matricula.objects.filter(inscripcion=self,nivel__cerrado=True).order_by('-nivel__nivelmalla__orden').exists():
            matricula = Matricula.objects.filter(inscripcion=self,nivel__cerrado=True).order_by('-nivel__nivelmalla__orden')[:1].get()
            idasigntauramalla = AsignaturaMalla.objects.filter(asignatura__promedia=True,malla=matricula.nivel.malla,nivelmalla=matricula.nivel.nivelmalla).values('asignatura_id')
            lista = RecordAcademico.objects.filter(inscripcion__id=self.id,asignatura__promedia=True,asignatura__id__in=idasigntauramalla,aprobada=True)
            sumanota = 0

            for recordacedmi in lista:
                datarecor= RecordAcademico.objects.get(pk=recordacedmi.id)
                sumanota=sumanota+datarecor.nota

            puntaje = Decimal(sumanota/len(idasigntauramalla)).quantize(Decimal(10)**-2)

        return puntaje

    def existehorarioasisten(self,userid):
        return SolicitudHorarioAsistente.objects.filter(horario__usuario__id=userid)

    def tutor(self):
        if Matricula.objects.filter(inscripcion=self).exists():
            matricula = Matricula.objects.filter(inscripcion=self).order_by('-id')
            if NivelTutor.objects.filter(nivel__id__in=matricula.values('nivel')).exists():
                tut = NivelTutor.objects.filter(nivel__id__in=matricula.values('nivel'))[:1].get()
                return tut

    def escenario_existe(self):
        if EscenarioPractica.objects.filter(matricula__inscripcion=self).exists():
            return EscenarioPractica.objects.filter(matricula__inscripcion=self)[:1].get()
        return False

    def exist_aplazados(self):
        if Matricula.objects.filter(inscripcion=self,aplazamiento=True).exists():
            return Matricula.objects.filter(inscripcion=self,aplazamiento=True).order_by('fechaaplaza')
        return False

    def verarchivossolicitudbeca(self,idsolicitud):
        if ArchivoSoliciBeca.objects.filter(solicitudbeca__id=idsolicitud).exists():
            return True
        else:
            return False

    def verresolucionbeca(self,idsolicitud):
        if Resolucionbeca.objects.filter(solicitudbeca__id=idsolicitud).exists():
            return True
        else:
            return False

    def tiene_horario(self):
        if self.matricula():
            if NivelPeriodoEx.objects.filter(nivel=self.matricula().nivel).exists():
                return True
        return False

    def tiene_obsquitarplagio(self):
        if RegistroPlagioTarjetas.objects.filter(inscripcion=self).exists():
            return RegistroPlagioTarjetas.objects.filter(inscripcion=self).order_by('-fecha')[:1].get()
        return False

    def convenio_esempresa(self):
        if self.empresaconvenio:
            if self.empresaconvenio.esempresa:
                if DescuentosporConvenio.objects.filter(empresaconvenio=self.empresaconvenio,activo=True).exists():
                    return True
        return False

    def rubros_vencidos_nogestionados(self):
        if Rubro.objects.filter(cancelado=False, valor__gt=0, fechavence__lt=datetime.now().date(), inscripcion=self).exists():
            rubros = Rubro.objects.filter(cancelado=False, valor__gt=0, fechavence__lt=datetime.now().date(), inscripcion=self)
            if not RubroSeguimiento.objects.filter(rubro__id__in=rubros, estado=True).exists():
                return rubros.count()

    def gestionar_absentismos(self, usuario):
        if Absentismo.objects.filter(materiaasignada__absentismo=True, finalizado=False, materiaasignada__matricula__inscripcion=self, materiaasignada__matricula__inscripcion__personaasuntos__persona__usuario__username=usuario).exclude(id__in=SeguimientoAbsentismoDetalle.objects.filter(finalizado=False, seguimientoabsentismo__estado=True).values('absentismo')).exists():
            return True

    def existe_seguimientoabsentismo(self, usuario):
        if not PersonaAsuntos.objects.filter(persona__usuario__username=usuario).exists():
            if SeguimientoAbsentismoDetalle.objects.filter(absentismo__materiaasignada__matricula__inscripcion=self).exists():
                return SeguimientoAbsentismoDetalle.objects.filter(absentismo__materiaasignada__matricula__inscripcion=self).order_by('-id')[:1].get()
        else:
            if SeguimientoAbsentismoDetalle.objects.filter(absentismo__materiaasignada__matricula__inscripcion=self,seguimientoabsentismo__usuario__username=usuario).exists():
                return SeguimientoAbsentismoDetalle.objects.filter(absentismo__materiaasignada__matricula__inscripcion=self, seguimientoabsentismo__usuario__username=usuario).order_by('-id')[:1].get()

    def absentos_gestionados(self):
        if SeguimientoAbsentismo.objects.filter(inscripcion=self).exists():
            return SeguimientoAbsentismo.objects.filter(inscripcion=self).count()

class InscripcionMalla(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    malla = models.ForeignKey(Malla, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcion)+" - "+str(self.malla)

    class Meta:
        verbose_name = "Malla de Inscripcion"
        verbose_name_plural = "Mallas de Inscripciones"

class Graduado(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    tematesis = models.CharField(verbose_name=u"Tema de Tesis", max_length=300)
    notatesis = models.FloatField(verbose_name=u"Nota de Tesis")
    notafinal = models.FloatField(verbose_name=u"Nota de Grado")
    fechagraduado = models.DateField(verbose_name=u"Fecha de Graduacion")
    registro = models.CharField(verbose_name=u'Registro Senescyt', max_length=100, blank=True, null=True)
    archivo = models.FileField(upload_to='tesis/%Y/%m/%d', max_length=200)


    def __str__(self):
        return str(self.inscripcion)+" [graduado]"

    class Meta:
        verbose_name = "Alumno Graduado"
        verbose_name_plural = "Alumnos Graduados"

    def seguimientos(self):
        if self.seguimientograduado_set.exists():
            return self.seguimientograduado_set.all()
        return None


    def documentoexiste(self):
        from bib.models import DocuemntoGraduado
        if DocuemntoGraduado.objects.filter(graduado=self):
            return DocuemntoGraduado.objects.get(graduado=self)
        return None

    def cantidadobservaciones(self):
        return self.observaciongraduado_set.count()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.tematesis = self.tematesis.upper()
        self.registro = self.registro.upper()
        super(Graduado, self).save(force_insert, force_update, using, update_fields)

class SeguimientoGraduado(models.Model):
    graduado = models.ForeignKey(Graduado, on_delete=models.CASCADE)
    empresa = models.CharField(verbose_name=u"Empresa", max_length=200, blank=True, null=True)
    cargo = models.CharField(verbose_name=u"Cargo", max_length=100, blank=True, null=True)
    ocupacion = models.CharField(verbose_name=u"Ocupacion", max_length=100, blank=True, null=True)
    telefono = models.CharField(max_length=50, verbose_name=u"Telefonos", blank=True, null=True)
    email = models.CharField(max_length=100, blank=True, null=True)
    sueldo = models.FloatField(verbose_name=u"Salario", blank=True, null=True)
    ejerce = models.BooleanField(verbose_name=u'Ejerce la Profesion',default=False)
    observaciones = models.CharField(max_length=300, blank=True, null=True)
    usuario = models.ForeignKey(User,blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)
    hora = models.TimeField(blank=True, null=True)

    def __str__(self):
        return str(self.graduado.inscripcion)+" [seguimientograduado]"

    class Meta:
        verbose_name = "Seguimiento laboral del Graduado"
        verbose_name_plural = "Seguimientos laborales de Graduados"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.empresa: self.empresa = self.empresa.upper()
        if self.cargo: self.cargo = self.cargo.upper()
        if self.ocupacion: self.ocupacion = self.ocupacion.upper()
        if self.observaciones: self.observaciones = self.observaciones.upper()
        super(SeguimientoGraduado, self).save(force_insert, force_update, using, update_fields)


class Egresado(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    notaegreso = models.FloatField(verbose_name=u"Nota de Egreso")
    fechaegreso = models.DateField(verbose_name=u"Fecha de Egreso")

    def __str__(self):
        return str(self.inscripcion)+" [egresado]"

    class Meta:
        verbose_name = "Alumno Egresado"
        verbose_name_plural = "Alumnos Egresados"

    def egresado_gradua(self):
        return Graduado.objects.filter(inscripcion=self.inscripcion).exists()

    def existe_examenpract(self):
        return ExamenPractica.objects.filter(inscripcion= self.inscripcion)[:1].get()

    def existe_examenpractvalid(self):
        return ExamenPractica.objects.filter(inscripcion= self.inscripcion,valida=True)[:1].get()

    def existe_titulacion(self):
        return RecordAcademico.objects.filter(inscripcion=self.inscripcion,asignatura__nombre__icontains='TRABAJO')[:1].get()

    def existe_notascomplexivo(self): #FATV
        return NotasComplexivo.objects.filter(egresado= self).exists()

    @staticmethod
    def flexbox_query(q):
        if ' ' in q:
            s = q.split(" ")
            return Egresado.objects.filter(Q(inscripcion__persona__apellido1__contains=s[0])&Q(inscripcion__persona__apellido2__contains=s[1])).order_by('inscripcion__persona__apellido1','inscripcion__persona__apellido2','inscripcion__persona__nombres')[:25]
        else:
            return Egresado.objects.filter(Q(inscripcion__persona__nombres__contains=q)|Q(inscripcion__persona__apellido1__contains=q)|Q(inscripcion__persona__apellido2__contains=q)|Q(inscripcion__persona__cedula__contains=q)).order_by('inscripcion__persona__apellido1','inscripcion__persona__apellido2','inscripcion__persona__nombres')[:25]

    def flexbox_repr(self):
        if UTILIZA_GRUPOS_ALUMNOS:
            if self.inscripcion.persona.cedula:
                return self.inscripcion.persona.cedula+" - "+self.inscripcion.persona.nombre_completo_inverso()+" ("+self.inscripcion.inscripciongrupo_set.all()[:1].get().grupo.nombre+")"
            else:
                return self.inscripcion.persona.pasaporte+" - EXTRANJERO - "+self.inscripcion.persona.nombre_completo_inverso()+" ("+self.inscripcion.inscripciongrupo_set.all()[:1].get().grupo.nombre+")"
        else:
            return self.inscripcion.persona.cedula+" - "+self.inscripcion.persona.nombre_completo_inverso()

def label(s):
    return s


class HistoriaNivelesDeInscripcion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    fechaperiodo = models.DateField(verbose_name=u"Fecha del periodo")
    nivel = models.IntegerField(verbose_name=u"Nivel que cursaba")
    observaciones = models.TextField(max_length=200, blank=True)

    def __str__(self):
        return str(self.inscripcion)

    class Meta:
        verbose_name = "Historico de Inscripcion y Nivel"
        verbose_name_plural = "Historicos de Inscripciones y Niveles"



class DocumentosDeInscripcion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    titulo = models.BooleanField(blank=True, null=True)
    acta = models.BooleanField(blank=True, null=True)
    cedula = models.BooleanField(blank=True, null=True)
    votacion = models.BooleanField(blank=True, null=True)
    fotos = models.BooleanField(blank=True, null=True)
    actaconv=models.BooleanField(blank=True, null=True)
    partida_nac=models.BooleanField(blank=True, null=True)
    actafirmada=models.BooleanField(blank=True, null=True)


    def representacion(self):
        a = ""
        if self.titulo:
            a += label("Titulo")
        if self.acta:
            a += " " if a else ""
            a += label("ActaG")
        if self.cedula:
            a += " " if a else ""
            a += label("Cedula")
        if self.votacion:
            a += " " if a else ""
            a += label("Votacion")
        if self.actaconv:
            a += " " if a else ""
            a += label("DConv")
        if self.partida_nac:
            a += " " if a else ""
            a += label("P.Nac")
        if self.fotos:
            a += " " if a else ""
            a += label("Fotos")
        if self.actafirmada:
            a += " " if a else ""
            a += label("ActaInscFirmada")
        return a


    def __str__(self):
        return str(self.inscripcion)+" Titulo: "+siono(self.titulo)+" " \
                                                                    "ActaG: "+siono(self.acta)+" " \
                                                                                               "Cedula: "+siono(self.cedula)+" " \
                                                                                                                             "Votacion: "+siono(self.votacion)+" " \
                                                                                                                                                               "DConv: "+siono(self.actaconv)+" " \
                                                                                                                                                                                              "P.Nac: "+siono(self.partida_nac)+" " \
                                                                                                                                                                                                                                "Fotos: "+siono(self.fotos)+" " \
                                                                                                                                                                                                                                                            "ActaInscFirmada: "+siono(self.actafirmada)

    class Meta:
        verbose_name = "Documentos de Inscripcion"
        verbose_name_plural = "Documentos de Inscripcion"



class RecordAcademico(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    nota = models.FloatField()
    asistencia = models.FloatField()
    fecha = models.DateField()
    convalidacion = models.BooleanField(blank=True,null=True)
    aprobada = models.BooleanField(blank=True,null=True)
    pendiente = models.BooleanField(blank=True,null=True)

    def __str__(self):
        return str(self.inscripcion.persona)+" "+str(self.asignatura)+" [Nota:"+str(self.nota)+", Asist:"+str(self.asistencia)+"] "+("aprob." if self.aprobada else ("pendiente." if self.pendiente else "suspenso."))

    def esta_suspensa(self):
        return not self.aprobada and not self.pendiente

    def esta_pendiente(self):
        return not self.aprobada and self.pendiente

    def estado(self):
        return ("APROBADA" if self.aprobada else ("PENDIENTE" if self.pendiente else "REPROBADA"))

    def suspensa_asistencia(self):
        if VALIDAR_ASISTENCIAS and not self.inscripcion.carrera.online:
            return "A" if self.asistencia < ASIST_PARA_APROBAR else ""
        return ""

    def suspensa_nota(self):
        return "N" if self.nota < NOTA_PARA_APROBAR else ""

    def fecha_repetida(self):
        if RecordAcademico.objects.filter(inscripcion=self.inscripcion,asignatura=self.asignatura,fecha=self.fecha).all().count()>1:
            return True
        else:
            return False

    def aprobada_repetida(self):
        if self.aprobada:
            if RecordAcademico.objects.filter(inscripcion=self.inscripcion,asignatura=self.asignatura,aprobada=True,id__lt=self.id).all().count()>=1:
                return True
            else:
                return False
        else:
            return False

    def esta_repetida(self):
        if RecordAcademico.objects.filter(inscripcion=self.inscripcion,asignatura=self.asignatura,fecha=self.fecha,nota=self.nota,id__lt=self.id).all().count()>=1:
            return True
        else:
            return False

    def tiene_malla(self):
        if self.inscripcion.inscripcionmalla_set.exists():
            return True
        return False

    def existe_en_malla(self):
        if self.tiene_malla():
            im =  self.inscripcion.inscripcionmalla_set.all()[:1].get()
            if AsignaturaMalla.objects.filter(asignatura=self.asignatura,malla=im.malla).exists():
                return True
        return False

    def nivel_asignatura(self):
        #Hallar el nivel de cada asignatura
        if self.existe_en_malla():
            ma = self.inscripcion.inscripcionmalla_set.all()[:1].get().malla
            return AsignaturaMalla.objects.filter(malla=ma,asignatura=self.asignatura)[0].nivelmalla.nombre
        else:
            return ""

    def nivel_asignatura_malla(self):
        #Hallar el nivel malla de cada asignatura pero segun malla
        if self.existe_en_malla():
            ma = self.inscripcion.inscripcionmalla_set.all()[:1].get().malla
            return AsignaturaMalla.objects.filter(malla=ma,asignatura=self.asignatura)[0].nivelmalla
        else:
            return False

    def comprobar_aprobado(self):
        if VALIDAR_ASISTENCIAS and not self.inscripcion.carrera.online:
            return self.nota >= NOTA_PARA_APROBAR and self.asistencia >= ASIST_PARA_APROBAR
        else:
            return self.nota >= NOTA_PARA_APROBAR

    def materiaasigna_existe(self):
        return MateriaAsignada.objects.filter(matricula__inscripcion=self.inscripcion, materia__asignatura=self.asignatura)

    class Meta:
        verbose_name = 'Registro Academico'
        verbose_name_plural = "Registros Academicos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if not DEFAULT_PASSWORD == 'itb':
            self.aprobada = self.comprobar_aprobado()
        super(RecordAcademico, self).save(force_insert, force_update, using, update_fields)


class MotivoBeca(models.Model):
    nombre = models.CharField(max_length=100)
    nombrematriz = models.CharField(max_length=200,blank=True,null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Motivo de Beca"
        verbose_name_plural = "Motivos de Beca"


    @staticmethod
    def flexbox_query(q):
        return MotivoBeca.objects.filter(nombre__icontains=q)

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return self.nombre


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(MotivoBeca, self).save(force_insert, force_update, using, update_fields)

    def existe_motivobeca(self):
        #Verifica si el motivo de beca ha sido aplicado
        if Matricula.objects.filter(motivobeca=self).exists():
            return True
        else:
            return False

class TipoBeca(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Beca"
        verbose_name_plural = "Tipos de Beca"

    @staticmethod
    def flexbox_query(q):
        return TipoBeca.objects.filter(nombre__icontains=q)

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return self.nombre

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoBeca, self).save(force_insert, force_update, using, update_fields)

    def existe_tipobeca(self):
        #Verifica si el tipo de beca ha sido aplicado
        if Matricula.objects.filter(tipobeca=self).exists():
            return True
        else:
            return False

class TipoBeneficio(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Beneficio"
        verbose_name_plural = "Tipos de Beneficios"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoBeneficio, self).save(force_insert, force_update, using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return TipoBeneficio.objects.filter(nombre__contains=q).order_by('nombre')

    def flexbox_repr(self):
        return self.nombre



class Raza(models.Model):
    nombre = models.CharField(max_length=100)
    nombrematriz = models.CharField(max_length=100,blank=True, null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Raza"
        verbose_name_plural = "Razas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        self.nombrematriz = self.nombrematriz.upper()
        super(Raza, self).save(force_insert, force_update, using, update_fields)


class EstratoSociocultural(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Estrato Sociocultural"
        verbose_name_plural = "Estratos Socioculturales"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(EstratoSociocultural, self).save(force_insert, force_update, using, update_fields)


class PerfilInscripcion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    raza = models.ForeignKey(Raza, verbose_name=u'Raza', blank=True, null=True, on_delete=models.CASCADE)
    estrato = models.ForeignKey(EstratoSociocultural, verbose_name=u'Estrato Sociocultural', null=True, blank=True, on_delete=models.CASCADE)
    tienediscapacidad = models.BooleanField(default=False, verbose_name="Tiene Discapacidad?")
    tipodiscapacidad = models.ForeignKey(Discapacidad, null=True, blank=True, verbose_name="Tipo de Discapacidad", on_delete=models.CASCADE)
    porcientodiscapacidad = models.FloatField(blank=True, null=True, verbose_name='% de Discapacidad')
    carnetdiscapacidad = models.CharField(max_length=100, blank=True, null=True, verbose_name='Carnet Discapacitado')
    tienenee = models.BooleanField(default=False, verbose_name="Tiene NEE?")

    def __str__(self):
        return str(self.inscripcion)

    class Meta:
        verbose_name = "Perfil de Inscripcion"
        verbose_name_plural = "Perfiles de Inscripciones"

    def mail_cargadata(self, user,mensaje):
        if TipoIncidencia.objects.filter(pk=23).exists():
            tipo = TipoIncidencia.objects.get(pk=23)
            hoy = datetime.now().today()
            contenido = mensaje
            send_html_mail("DOBE",
                           "emails/procesodobe.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user},tipo.correo.split(","))


class Matricula(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel, on_delete=models.CASCADE)
    pago = models.BooleanField(verbose_name="Pago")
    iece = models.BooleanField(verbose_name="IECE")
    becado = models.BooleanField(verbose_name="Becado")
    tipobeneficio = models.ForeignKey(TipoBeneficio, verbose_name="Tipo de Beneficio", null=True, blank=True, on_delete=models.CASCADE)
    porcientobeca = models.FloatField(verbose_name="% de Beca", blank=True, null=True)
    motivobeca = models.ForeignKey(MotivoBeca, verbose_name="Motivo de la Beca", null=True, blank=True, on_delete=models.CASCADE)
    tipobeca = models.ForeignKey(TipoBeca, verbose_name="Tipo de Beca", null=True, blank=True, on_delete=models.CASCADE)
    observaciones = models.TextField(max_length=1000, verbose_name="Observaciones",blank=True,null=True)
    fecha = models.DateField(blank=True, null=True)
    fechabeca = models.DateField(blank=True, null=True)
    becaparcial = models.BooleanField(verbose_name="Beca Parcial")
    # ////////practica aplazamiento
    aplazamiento = models.BooleanField(default=False) #aplazamieno de practica
    fechaaplaza = models.DateField(blank=True, null=True)
    observacionaplaza = models.CharField(max_length=700, blank=True, null=True)
    liberada =  models.BooleanField(verbose_name="Matricula Liberada",default=False)
    motivoliberada = models.TextField(max_length=2500, verbose_name="Motivo Matricula Liberada",blank=True,null=True)

    def __str__(self):
        return str(self.inscripcion)+" en "+str(self.nivel)+" "+("SI" if self.pago else "NO")+" "+("SI" if self.iece else "NO")+" "+("SI" if self.iece else "NO")+str(self.observaciones)

    class Meta:
        verbose_name = "Matricula"
        verbose_name_plural = "Matriculas"

    def asistencia_real(self):
        return self.asistencialeccion_set.filter(asistio=True).count()

    def asistencia_plan(self):
        return self.asistencialeccion_set.all().count()

    def porciento_asistencia(self):
        if self.asistencia_plan()==0:
            return 0
        return (self.asistencia_real()*100)/(self.asistencia_plan())

    def cantidad_creditos(self):
        return sum([x.materia.creditos for x in self.materiaasignada_set.all()])

    def ya_cobrada(self):
        return RubroMatricula.objects.filter(matricula=self).count()>0

    # def especie_materia(self):
    #     return self.rubroespecievalorada_set.filter(disponible=True).order_by('inscripcion__persona__apellido1')

    def correo_retirado(self,correo,usuario, motivo):
        hoy = datetime.now().today()
        contenido = "ALUMNO RETIRADO"
        send_html_mail("ALUMNO RETIRADO",
                       "emails/email_retirado.html", {'d': self, 'fecha': hoy,'contenido': contenido,'usuario':usuario ,'motivo' :motivo},correo.split(","))

    def precio_sugerido(self):
        try:
            precio = PrecioMatricula.objects.get(periodo=self.nivel.periodo,sede=self.nivel.sede,carrera=self.nivel.carrera)
            return precio.precio
        except :
            return 0


    def no_matricula(self):
        return (self.pago==False) and (self.becado==False) and (self.iece==False)

    def tiene_evaluacion(self):
        if self.materiaasignada_set.all().aggregate(Sum('notafinal'))['notafinal__sum']:
            return self.materiaasignada_set.all().aggregate(Sum('notafinal'))['notafinal__sum']>0
        return 0

    def nivel_cerrado(self):
        return self.nivel.cerrado

    def tiene_pago(self):
        return self.inscripcion.rubro_set.filter(pago__in=Pago.objects.all()).exists()

    def tiene_especie_retirada(self):
        return self.inscripcion.rubro_set.filter(rubroespecievalorada__tipoespecie__id=TIPO_ESPECIE_RETIRO_MATRICULA, cancelado=True).exists()

    def todas_materias_aprobadas(self):
        op = True
        if self.materiaasignada_set.count() == self.materiaasignada_set.filter(notafinal__gte=NOTA_PARA_APROBAR).count() :
            if VALIDA_DEUDA_MATRICULA:
                op = not self.inscripcion.tiene_deuda()
            if op:
                b=0
                if UTILIZA_FICHA_MEDICA:
                    if self.inscripcion.persona.datos_medicos_incompletos():
                        return 'Ficha Medica Incompleta'
                if VALIDA_PASE_NIVEL:
                    if self.inscripcion.carrera.online:
                        asistenciaparaaprobar = 0
                    else:
                        asistenciaparaaprobar = ASIST_PARA_APROBAR
                    if Malla.objects.filter(carrera=self.inscripcion.carrera).order_by('-id')[:1].exists():
                        malla = Malla.objects.filter(carrera=self.inscripcion.carrera,vigente=True).order_by('-id')[:1].get()
                        a=AsignaturaMalla.objects.filter(malla__id=malla.id,nivelmalla__orden__lte=self.nivel.nivelmalla.orden).values('asignatura')
                        if a.count() > 0:
                            # CONSULTAR SI SOLO SON LAS APROBADAS O TODAS
                            b=RecordAcademico.objects.filter(asignatura__in=a, nota__gte=NOTA_PARA_APROBAR, asistencia__gte=asistenciaparaaprobar,inscripcion=self.inscripcion)
                        if a.count()== b.count():
                            return True
                        else:
                            return 'Tiene Materias Reprobadas'
                        # else:
                        #     return 'Tiene Materias Pendientes en el Nivel Actual'
                return  True
            else:
                return 'Tiene Deuda'

        return 'Tiene Materias Asignadas Reprobadas '

    def todas_materias_aprobadas_nivelactual(self):
        if self.materiaasignada_set.count() == self.materiaasignada_set.filter(notafinal__gte=NOTA_PARA_APROBAR).count() :
            return  True
        return  False


    # 26-oct-2015 OCU
    def materias_aprobadas_nivel(self):
        c=0
        if self.materiaasignada_set.count() == self.materiaasignada_set.filter(notafinal__gte=NOTA_PARA_APROBAR).count() :
            if Malla.objects.filter(carrera=self.inscripcion.carrera).order_by('-id')[:1].exists():
                malla = Malla.objects.filter(carrera=self.inscripcion.carrera,vigente=True).order_by('-id')[:1].get()
                a=AsignaturaMalla.objects.filter(malla__id=malla.id,nivelmalla__orden=self.nivel.nivelmalla.orden).values('asignatura')
                if a.count()>0:
                    # m =  MateriaAsignada.objects.filter(materia__asignatura__in=a,matricula__inscripcion=self.inscripcion,notafinal__gte=NOTA_PARA_APROBAR)
                    #OCU 30-nov-2015 para obtener las materias asignadas en ese periodo y nivel
                    # m =  MateriaAsignada.objects.filter(materia__asignatura__in=a,matricula__inscripcion=self.inscripcion,notafinal__gte=NOTA_PARA_APROBAR,materia__nivel__periodo=self.nivel.periodo)
                    # OCU 02-dic-2015 para casos de estudiantes matriculados en diferentes grupos se agrego nivel cerrado = False
                    # OCU 27-ene-2016 para obtener estudiantes sin absentismo
                    m =  MateriaAsignada.objects.filter(materia__asignatura__in=a,matricula__inscripcion=self.inscripcion,notafinal__gte=NOTA_PARA_APROBAR,materia__nivel__periodo=self.nivel.periodo,materia__nivel__cerrado=False,absentismo=False)
                    c = m.count()
                if a.count() == c:
                    return True
        return  False

    # 21-oct-2015 OCU
    def materias_aprobadas_notas(self):
        materias = []
        if self.materiaasignada_set.count() == self.materiaasignada_set.filter(notafinal__gte=NOTA_PARA_APROBAR).count() :
            if Malla.objects.filter(carrera=self.inscripcion.carrera).order_by('-id')[:1].exists():
                malla = Malla.objects.filter(carrera=self.inscripcion.carrera,vigente=True).order_by('-id')[:1].get()

            for materia in AsignaturaMalla.objects.filter(malla__id=malla.id,nivelmalla__orden=self.nivel.nivelmalla.orden).values('asignatura'):
                # OCU 02-dic-2015 para casos de estudiantes matriculados en diferentes grupos se agregó nivel cerrado = False
                # OCU 27-ene-2016 se agrega filtro de absentismo para sacar promedio excluyendo estudiantes con esa condicion
                if MateriaAsignada.objects.filter(materia__asignatura__id=materia['asignatura'],matricula__inscripcion=self.inscripcion,materia__nivel__periodo=self.nivel.periodo,materia__nivel__cerrado=False,absentismo=False,matricula__liberada=False).exists():
                    # OCastillo 20-sep-2021 se agrega filtro porque al existir mas de 1 registro da error al cerrar el nivel
                    if MateriaAsignada.objects.filter(materia__asignatura__id=materia['asignatura'],matricula__inscripcion=self.inscripcion,materia__nivel__periodo=self.nivel.periodo,materia__nivel__cerrado=False,absentismo=False,matricula__liberada=False).count()>1:
                        nota=MateriaAsignada.objects.filter(materia__asignatura__id=materia['asignatura'],matricula__inscripcion=self.inscripcion,materia__nivel__periodo=self.nivel.periodo,materia__nivel__cerrado=False,absentismo=False,matricula__liberada=False)[:1].get()
                    else:
                        nota=MateriaAsignada.objects.get(materia__asignatura__id=materia['asignatura'],matricula__inscripcion=self.inscripcion,materia__nivel__periodo=self.nivel.periodo,materia__nivel__cerrado=False,absentismo=False,matricula__liberada=False)
                    pasemat = nota
                    materias.append(pasemat)

            return materias

    # OCU 27-ene-2016 absentismo en materia asignada
    def absentismo(self):
        if Malla.objects.filter(carrera=self.inscripcion.carrera).order_by('-id')[:1].exists():
            malla = Malla.objects.filter(carrera=self.inscripcion.carrera,vigente=True).order_by('-id')[:1].get()
            a=AsignaturaMalla.objects.filter(malla__id=malla.id,nivelmalla__orden=self.nivel.nivelmalla.orden).values('asignatura')
            if a.count()>0:
                abs =  MateriaAsignada.objects.filter(matricula__inscripcion=self.inscripcion,materia__nivel__periodo=self.nivel.periodo,materia__nivel__cerrado=False,absentismo=True)
                if abs:
                    return True

    def cantidad_materias_aprobadas(self):
        return self.materiaasignada_set.filter(notafinal__gte=NOTA_PARA_APROBAR).count()

    def cantidad_materias_reprobadas(self):
        return self.materiaasignada_set.filter(notafinal__lte=NOTA_PARA_APROBAR).count()

    def esta_retirado(self):
        return RetiradoMatricula.objects.filter(nivel=self.nivel,inscripcion=self.inscripcion, activo=False).exists()

    def esta_retirado_inscripcion(self):
        return RetiradoMatricula.objects.filter(inscripcion=self.inscripcion, activo=False).exists()

    def mail_beca(self, user ,rubros,tipo_beca):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_DOBE)
        hoy = datetime.now().today()
        contenido = "BECA OTORGADA"

        # OCastillo 20-01-2017 envio de rubros
        rubros=rubros
        tipo_beca=tipo_beca

        send_html_mail("Beca Otorgada",
                       # "emails/incidenciabeca.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user},tipo.correo.split(","))
                       "emails/incidenciabeca.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user, 'rubros':rubros,'tipo_beca':tipo_beca},tipo.correo.split(","))

    def correo_matricula(self,rubros):
        if TipoIncidencia.objects.filter(pk=66).exists():
            tipo = TipoIncidencia.objects.get(pk=66)
            hoy = datetime.now().today()
            contenido = "MATRICULA REALIZADA"
            send_html_mail("MATRICULA REALIZADA",
                           # "emails/incidenciaayudafin.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user},tipo.correo.split(","))
                           "emails/matriculaonline.html", {'d': self, 'fecha': hoy,'contenido': contenido,'rubros':rubros},tipo.correo.split(","))

    def correo_matricula_online(self,rubros,usuario):
        persona = Persona.objects.filter(usuario=usuario)[:1].get()
        if persona.email:
            lista = str(persona.emailinst+','+persona.email)
        else:
            lista = str(persona.emailinst)
        hoy = datetime.now().today()
        contenido = "MATRICULA REALIZADA"
        send_html_mail("MATRICULA REALIZADA",
                       # "emails/incidenciaayudafin.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user},tipo.correo.split(","))
                       "emails/matriculaonline_alu.html", {'d': self, 'fecha': hoy,'contenido': contenido,'rubros':rubros},lista.split(","))
    def correo_nocronograma(self):
        if TipoIncidencia.objects.filter(pk=66).exists():
            tipo = TipoIncidencia.objects.get(pk=66)
            hoy = datetime.now().today()
            contenido = "MATRICULA REALIZADA SIN CRONOGRAMA DE PAGOS"
            send_html_mail("MATRICULA REALIZADA SIN CRONOGRAMA DE PAGOS",
                           # "emails/incidenciaayudafin.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user},tipo.correo.split(","))
                           "emails/matriculasincronograma.html", {'d': self, 'fecha': hoy,'contenido': contenido},tipo.correo.split(","))

    def mail_ayuda_financiera(self, user,rubros,tipo_beca):
        if TipoIncidencia.objects.filter(pk=TIPO_INCIDENCIA_DOBE).exists():
            tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_DOBE)
            hoy = datetime.now().today()
            contenido = "AYUDA FINANCIERA OTORGADA"
            # OCastillo 19-01-2017 envio de rubros
            rubros=rubros
            tipo_beca=tipo_beca

            send_html_mail("Ayuda Financiera Otorgada",
                           # "emails/incidenciaayudafin.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user},tipo.correo.split(","))
                           "emails/incidenciaayudafin.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user, 'rubros':rubros,'tipo_beca':tipo_beca},tipo.correo.split(","))

    def mail_beca_senescyt(self, user):
        if TipoIncidencia.objects.filter(pk=TIPO_BECA_SENESCYT).exists():
            tipo = TipoIncidencia.objects.get(pk=TIPO_BECA_SENESCYT)
            hoy = datetime.now().today()
            contenido = "BECA SENESCYT OTORGADA"
            send_html_mail("Beca Senescyt Otorgada",
                           "emails/incidenciabecasenescyt.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user},tipo.correo.split(","))

    def correo_semimario(self):
        if TipoIncidencia.objects.filter(pk=40).exists():
            tipo = TipoIncidencia.objects.get(pk=40)
            correo=  tipo.correo + ',' + str(self.inscripcion.persona.email) + ',' + str(self.inscripcion.persona.emailinst)
            hoy = datetime.now().today()
            contenido = "SEMINARIO DE TITULACION"
            send_html_mail("SEMINARIO DE TITULACION",
                           "emails/correo_seminario.html", {'m': self, 'fecha': hoy,'contenido': contenido },correo.split(","))

    def fecha_matricula(self):
        return self.nivel.pagonivel_set.filter(tipo=0)[:1].get().fecha

    def deuda_matriculaseminario(self):
        if self.fecha_matricula() < datetime.now().date():
            return self.rubromatricula_set.filter(rubro__cancelado=False).exists()
        return  False


    @staticmethod
    def flexbox_query(q):
        if ' ' in q:
            s = q.split(" ")
            return Matricula.objects.filter(Q(inscripcion__persona__apellido1__contains=s[0])&Q(inscripcion__persona__apellido2__contains=s[1])).order_by('inscripcion__persona__apellido1','inscripcion__persona__apellido2','inscripcion__persona__nombres')[:25]
        else:
            return Matricula.objects.filter(Q(inscripcion__persona__nombres__contains=q)|Q(inscripcion__persona__apellido1__contains=q)|Q(inscripcion__persona__apellido2__contains=q)|Q(inscripcion__persona__cedula__contains=q)).order_by('inscripcion__persona__apellido1','inscripcion__persona__apellido2','inscripcion__persona__nombres')[:25]

    def flexbox_repr(self):
        return self.inscripcion.persona.cedula+" - "+self.nivel.inicio.__str__()+" - "+self.inscripcion.persona.nombre_completo_inverso()+" ("+self.inscripcion.inscripciongrupo_set.all()[:1].get().grupo.nombre+")"

    def recalcular_rubros_segun_creditos(self):
        if self.inscripcion.plan12activo():
            plan = self.inscripcion.plan12activo_obj()
            if self.materiaasignada_set.filter(materiaenplan12__isnull=True).exists():
                ma = self.materiaasignada_set.filter(materiaenplan12__isnull=True)[0]
                mp = MateriaEnPlan12(materia=ma,plan=plan)
                mp.save()
                plan.materiascursadas = plan.materiascursadas + 1
                plan.save()
                self.recalcular_rubros_segun_creditos()


        else:


            #Borrar todos los rubros que tenga sin pagos asociados
            for r in self.rubromatricula_set.all():
                if r.rubro.puede_eliminarse():
                    r.rubro.delete()
            for r in self.rubrocuota_set.all():
                if r.rubro.puede_eliminarse():
                    r.rubro.delete()
            bs = False
            if self.inscripcion.inscripcionsenescyt_set.exists():
                bs = self.inscripcion.beca_senescyt().tienebeca


            if not bs:
                #Calcular total de creditos segun cantidad de materias del nivel
                if MODELO_EVALUACION==EVALUACION_ITS:
                    totalcreditosnivel = sum([x.creditos for x in self.nivel.materias()])
                else:
                    totalcreditosnivel = CREDITOS_NIVEL_TES

                #Calcular total de creditos de las materias asignadas del alumno matriculado
                totalcreditosmateriasasignadas = sum([x.materia.creditos for x in self.materiaasignada_set.filter(materiaenplan12__isnull=True)])

                #Calcular suma total de valores de cuotas del nivel
                valortotalcuotasnivel = sum([x.valor for x in self.nivel.pagonivel_set.filter(tipo__gt=0)])

                # Crear Rubro Matricula si no tiene Rubro Matricula
                if not self.rubromatricula_set.exists():
                    if self.nivel.pagonivel_set.filter(tipo=0).exists():
                        pagomatricula = self.nivel.pagonivel_set.filter(tipo=0)[:1].get()

                        #Calcular Valor del Rubro Matricula en funcion de creditos calculados
                        valor = round((totalcreditosmateriasasignadas/totalcreditosnivel) * pagomatricula.valor,2)

                        # Beca Asignada
                        if self.inscripcion.beca_asignada():
                            beca = self.inscripcion.beca_asignada_obj()
                            valor = valor * (1-(beca.porciento/100.0))

                        rubro = Rubro(fecha=datetime.today().date(),valor=valor, inscripcion=self.inscripcion,
                                      cancelado = False, fechavence = pagomatricula.fecha,tiponivelpago=0)
                        rubro.save()

                        #Creo un Rubro Matricula
                        rm = RubroMatricula(rubro=rubro, matricula=self)
                        rm.save()
                        if HABILITA_DESC_MATRI:
                            if not self.inscripcion.carrera.validacionprofesional:
                                descuento = round(((rubro.valor * DESCUENTO_MATRIC_PORCENT) /100),2)
                                rubro.valor = rubro.valor - round(((rubro.valor * DESCUENTO_MATRIC_PORCENT) /100),2)
                                rubro.save()
                                desc = Descuento(inscripcion = self.inscripcion,
                                                 motivo ='DESCUENTO EN MATRICULA',
                                                 total = rubro.valor,
                                                 fecha = datetime.today().date())
                                desc.save()
                                detalle = DetalleDescuento(descuento =desc,
                                                           rubro =rubro,
                                                           valor = descuento,
                                                           porcentaje = DESCUENTO_MATRIC_PORCENT)
                                detalle.save()

                if self.nivel.pagonivel_set.filter(tipo__gt=0).exists():
                    cantidadcuotasnivel = self.nivel.pagonivel_set.filter(tipo__gt=0).exclude(tipo__in=[13,14]).count()

                    #Calcular Valor de Rubro Cuota Mensual en funcion de creditos calculados
                    sumatotalcuotas = round((totalcreditosmateriasasignadas/totalcreditosnivel) * valortotalcuotasnivel,2)
                    VALORCUOTA = valortotalcuotasnivel/cantidadcuotasnivel

                    if sumatotalcuotas%VALORCUOTA == 0:
                        if sumatotalcuotas//VALORCUOTA <= cantidadcuotasnivel:
                            cantidadcuotas = round(sumatotalcuotas//VALORCUOTA,2)
                            valorcuotas = VALORCUOTA
                        else:
                            cantidadcuotas = cantidadcuotasnivel
                            valorcuotas = round(sumatotalcuotas/cantidadcuotas,2)
                    else:
                        if sumatotalcuotas//VALORCUOTA >= cantidadcuotasnivel:
                            cantidadcuotas = cantidadcuotasnivel
                            valorcuotas = round(sumatotalcuotas/cantidadcuotas,2)
                        else:
                            cantidadcuotas = sumatotalcuotas//VALORCUOTA + 1
                            valorcuotas = round(sumatotalcuotas/cantidadcuotas,2)


                    # Beca Asignada
                    if self.inscripcion.beca_asignada():
                        beca = self.inscripcion.beca_asignada_obj()
                        valorcuotas = valorcuotas * (1-(beca.porciento/100.0))

                    for cuota in range(1,int(cantidadcuotas)+1):
                        # Crear Rubro Cuota por cada cuota si no tiene Rubro Cuota
                        if not self.rubrocuota_set.filter(cuota=cuota).exists():
                            pago = self.nivel.pagonivel_set.filter(tipo=cuota)[:1].get()

                            rubro = Rubro(fecha=datetime.today().date(),valor=valorcuotas, inscripcion=self.inscripcion,
                                          cancelado=False, fechavence=pago.fecha,tiponivelpago=cuota)
                            rubro.save()

                            rc = RubroCuota(rubro=rubro, matricula=self, cuota=cuota)
                            rc.save()

                    #buscar en pago nivel si tiene pago con tipo 13 y 14
                    cantidadcoutaotra= self.nivel.pagonivel_set.filter(tipo__in=[13,14]).count()


                    if cantidadcoutaotra>0:
                        auxcuota=13
                        for i in range(cantidadcoutaotra):
                            auxcuota=auxcuota+i
                            pago = self.nivel.pagonivel_set.filter(tipo=auxcuota)[:1].get()
                            if not Rubro.objects.filter(inscripcion=self.inscripcion,tiponivelpago=auxcuota).exists():
                                rubro = Rubro(fecha=datetime.today().date(),valor=pago.valor, inscripcion=self.inscripcion,
                                              cancelado=False, fechavence=pago.fecha,tiponivelpago=auxcuota)
                                rubro.save()
                                if auxcuota==13:
                                    tipootro= TipoOtroRubro.objects.get(pk=20)
                                else:
                                    tipootro= TipoOtroRubro.objects.get(pk=21)
                                ruotro=RubroOtro(rubro = rubro,tipo =tipootro, descripcion =str(TIPOS_PAGO_NIVEL[int(auxcuota)][1]))
                                ruotro.save()


    def materia_asignada(self):
        return MateriaAsignada.objects.filter(matricula=self)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if not self.fecha:
            self.fecha = datetime.today()
        if self.motivoliberada: self.motivoliberada = self.motivoliberada.upper()
        super(Matricula, self).save(force_insert, force_update, using, update_fields)

    def numero_matricula(self,lecciongrupo):
        matricula = MateriaAsignada.objects.filter(matricula__inscripcion=self.inscripcion,materia__asignatura=lecciongrupo.materia.asignatura,matricula__nivel__carrera=self.nivel.carrera,matricula__nivel__nivelmalla=self.nivel.nivelmalla).count()
        if matricula > 1:
            return matricula

    def existe_solicitud(self):
        return SolicitudBeca.objects.filter(inscripcion=self.inscripcion,nivel=self.nivel).exists()

    def materiaasignada_existe(self,materia):
        if MateriaAsignada.objects.filter(matricula=self,materia__asignatura=materia.asignatura).exists():
            return MateriaAsignada.objects.filter(matricula=self,materia__asignatura=materia.asignatura).order_by('-id')[:1].get()

    def tieneobs(self):
        return ObservacionMatricula.objects.filter(matricula=self).exists()

    # OCU 22-abril-2016 para verificar si ha pagado alguna cuota en el nivel
    def cantidad_cuotas(self):
        if RubroCuota.objects.filter(matricula=self).exists():
            cant_cuotas=RubroCuota.objects.filter(matricula=self).count()
            cuotas=Rubro.objects.filter(inscripcion=self.inscripcion,cancelado=False).count()
            if cant_cuotas==cuotas:
                return True
        return False

    # OCU 14-sep-2016 para determinar ti tiene detalle rubros beca
    def detalle_rubros(self):
        return DetalleRubrosBeca.objects.filter(matricula=self).count()>0

    # OCU 31-05-2017 para indicar que tiene beca aplicada con especie
    def tiene_especiebeca(self):
        serie=''
        codigo=''
        fechae=''
        if not self.becado:
            if SolicitudBeca.objects.filter(inscripcion=self.inscripcion, nivel=self.nivel,aprobado=True).order_by('-id').exists():
                especie= SolicitudBeca.objects.filter(inscripcion=self.inscripcion, nivel=self.nivel,aprobado=True).order_by('-id')[:1].get()
                if especie.serieespecie:
                    serie=especie.serieespecie
                if especie.codigoespecie:
                    codigo=especie.codigoespecie
                if especie.fechaproces:
                    fechae=str(especie.fechaproces.date())
                return "Aprobada Beca con Especie: " + str(serie) + " Codigo: " + str(codigo)+ " Fecha: " + fechae

    def tiene_talleres(self):
        return InscripcionSeminario.objects.filter(matricula=self,activo=True).exists()

    def tiene_ponencia(self):
        return InscripcionGrupoPonencia.objects.filter(matricula=self).exists()

    def taller_aprobado(self):
        return InscripcionSeminario.objects.filter(matricula=self,activo=True,aprobado=True).exists()

    def examennormalact(self,idtituexa):
        tituloex = TituloExamenParcial.objects.get(id=idtituexa)
        if ExamenParcial.objects.filter(matricula=self,valida=True,tituloexamenparcial__profesormateria=tituloex.profesormateria,tituloexamenparcial__supletorio=False).exists():
            return ExamenParcial.objects.filter(matricula=self,tituloexamenparcial__profesormateria=tituloex.profesormateria,valida=True,tituloexamenparcial__supletorio=False)[:1].get()
        return False
    def examensupletact(self,idtituexa):
        tituloex = TituloExamenParcial.objects.get(id=idtituexa)
        if ExamenParcial.objects.filter(matricula=self,valida=True,tituloexamenparcial__profesormateria=tituloex.profesormateria,tituloexamenparcial__supletorio=True).exists():
            return ExamenParcial.objects.filter(matricula=self,valida=True,tituloexamenparcial__profesormateria=tituloex.profesormateria,tituloexamenparcial__supletorio=True)[:1].get()
        return False
    def examentodnormal(self,idtituexa):
        tituloex = TituloExamenParcial.objects.get(id=idtituexa)
        if ExamenParcial.objects.filter(matricula=self,tituloexamenparcial__profesormateria=tituloex.profesormateria,tituloexamenparcial__supletorio=False).exists():
            return ExamenParcial.objects.filter(matricula=self,tituloexamenparcial__profesormateria=tituloex.profesormateria,tituloexamenparcial__supletorio=False)[:1].get()
        return False
    def examentodsuple(self,idtituexa):
        tituloex = TituloExamenParcial.objects.get(id=idtituexa)
        if ExamenParcial.objects.filter(matricula=self,tituloexamenparcial__profesormateria=tituloex.profesormateria,tituloexamenparcial__supletorio=True).exists():
            return ExamenParcial.objects.filter(matricula=self,tituloexamenparcial__profesormateria=tituloex.profesormateria,tituloexamenparcial__supletorio=True)[:1].get()
        return False
    def existe_escenariomatri(self):
        if EscenarioPractica.objects.filter(matricula=self).exists():
            return EscenarioPractica.objects.get(matricula=self)
        return False

    def tiene_uniforme(self):
        return EntregaUniforme.objects.filter(matricula=self).exists()

    def primernivel(self):
        return Matricula.objects.filter(pk=self.id,nivel__nivelmalla__id=NIVEL_MALLA_UNO,nivel__cerrado=False).exists()

    def segundonivel(self):
        return Matricula.objects.filter(pk=self.id,nivel__nivelmalla__id=2,nivel__cerrado=False).exists()

    def tercernivel(self):
        return Matricula.objects.filter(pk=self.id,nivel__nivelmalla__id=3,nivel__cerrado=False).exists()

    def cuartonivel(self):
        return Matricula.objects.filter(pk=self.id,nivel__nivelmalla__id=4,nivel__cerrado=False).exists()

    def tiene_tutor(self):
        if MatriculaTutor.objects.filter(matricula=self,activo=True).exists():
            return MatriculaTutor.objects.filter(matricula=self,activo=True)[:1].get()
        return False

    def existe_descuentonivel(self):
        descuento=False
        lista2=[]
        for pn in TIPOS_PAGO_NIVEL:
            if 'CUOTA' in pn[1]:
                lista2.append(pn[0])
        for pago in self.nivel.pagonivel_set.filter(tipo__in=lista2):
            if RubroCuota.objects.filter(matricula=self,rubro__cancelado=False,cuota=pago.tipo).exists():
                r = RubroCuota.objects.get(matricula=self,rubro__cancelado=False,cuota=pago.tipo)
                if DetalleDescuento.objects.filter(rubro=r.rubro).exists():
                    descuento=True
                else:
                    if r.rubro.valor<pago.valor:
                        descuento=True
                    else:
                        descuento=False
            else:
                if RubroOtro.objects.filter((Q(rubro__inscripcion=self.inscripcion,rubro__cancelado=False)|Q(rubro__inscripcion=self.inscripcion,rubro__cancelado=False,rubro__tiponivelpago=pago.tipo)),tipo=2).exists():
                    for r in RubroOtro.objects.filter(Q(rubro__inscripcion=self.inscripcion,rubro__cancelado=False)|Q(rubro__inscripcion=self.inscripcion,rubro__cancelado=False,rubro__tiponivelpago=pago.tipo),tipo=2):
                        if r.rubro.valor<pago.valor:
                            descuento=True
                        else:
                            descuento=False
                # else:
                #     descuento=True

        return descuento

    def rubrocanceladouniforme(self):
        if RubroOtro.objects.filter(matricula= self.id,tipo__id=TIPO_RUBRO_MATERIALAPOYO,rubro__inscripcion=self.inscripcion, rubro__cancelado=True).exists():
            return RubroOtro.objects.filter(matricula= self.id,tipo__id=TIPO_RUBRO_MATERIALAPOYO,rubro__inscripcion=self.inscripcion, rubro__cancelado=True)

    def checkentregauniforme(self):
        if EntregaUniforme.objects.filter(matricula= self.id, entregado=False).exists():
            return EntregaUniforme.objects.filter(matricula= self.id, entregado= False)

    def entregadocorrectamente(self):
        if EntregaUniforme.objects.filter(matricula= self, entregado=True).exists():
            return EntregaUniforme.objects.filter(matricula= self, entregado= True)
    def materia_asignada_testingreso(self, fecha):
        return MateriaAsignada.objects.filter(matricula=self, materia__asignatura__testingreso=True,materia__inicio__lte=fecha, materia__cerrado=False)
class Leccion(models.Model):
    clase = models.ForeignKey(Clase, on_delete=models.CASCADE)
    fecha = models.DateField()
    horaentrada = models.TimeField()
    horasalida = models.TimeField(blank=True,null=True)
    abierta = models.BooleanField(blank=True, null=True)
    contenido = models.TextField()
    observaciones = models.TextField()

    def asistencia_de_leccion(self):
        # chequear repetidos
        materia = self.clase.materia
        asignados = materia.materiaasignada_set.all()
        for asignado in asignados:
            matricula = asignado.matricula
            try:
                if self.asistencialeccion_set.filter(matricula=matricula).exists():
                    if self.asistencialeccion_set.filter(matricula=matricula).count()>1:
                        # dejar una sola
                        otras = self.asistencialeccion_set.filter(matricula=matricula)[1:]
                        for o in otras:
                            o.delete()
                else:
                    asis = AsistenciaLeccion(matricula=matricula, leccion=self, asistio=False)
                    asis.save()
            except:
                pass
        return self.asistencialeccion_set.all().order_by('matricula__inscripcion__persona__apellido1')

    def asistencia_real(self):
        return self.asistencialeccion_set.filter(asistio=True).count()

    def inasistencia_real(self):

        return self.asistencialeccion_set.filter(asistio=False).count()+ self.asistencialeccion_set.filter(asistio=None).count()

    def total_absentos(self):
        return MateriaAsignada.objects.filter(absentismo=True, materia=self.clase.materia).count()



    def asistencia_plan(self):
        return self.asistencialeccion_set.all().count()

    def porciento_asistencia(self):
        if self.asistencia_plan()==0:
            return 0
        return (self.asistencia_real()*100)/(self.asistencia_plan())

    def leccion_grupo(self):
        return LeccionGrupo.objects.filter(lecciones=self)[:1].get()

    def deber(self):
        if Archivo.objects.filter(lecciongrupo__lecciones=self, materia=self.clase.materia, tipo=ARCHIVO_TIPO_DEBERES).exists():
            return Archivo.objects.filter(lecciongrupo__lecciones=self, materia=self.clase.materia, tipo=ARCHIVO_TIPO_DEBERES)[:1].get()
        else:
            return None
    def material_apoyo(self):
        if Archivo.objects.filter(lecciongrupo__lecciones=self, materia=self.clase.materia, tipo=ARCHIVO_TIPO_MATERIALAPOYO).exists():
            return Archivo.objects.filter(lecciongrupo__lecciones=self, materia=self.clase.materia, tipo=ARCHIVO_TIPO_MATERIALAPOYO)[:1].get()
        else:
            return None

    class Meta:
        verbose_name = "Leccion"
        verbose_name_plural = "Lecciones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.contenido = self.contenido.upper()
        self.observaciones = self.observaciones.upper()
        super(Leccion, self).save(force_insert, force_update, using, update_fields)

class TipoMotivoCierreClases(models.Model):
    descripcion = models.CharField(max_length=200)
    porcentajedescuento = models.IntegerField()

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = "Tipo de Motivo Cierre Clase"
        verbose_name_plural = "Tipos de Motivos de Cierre de Clases"

class LeccionGrupo(models.Model):
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    turno = models.ForeignKey(Turno, on_delete=models.CASCADE)
    aula = models.ForeignKey(Aula, on_delete=models.CASCADE)
    dia = models.IntegerField(choices=DIAS_CHOICES)
    fecha = models.DateField()
    horaentrada = models.TimeField()
    fechasalida = models.DateField(null=True,blank=True)
    horasalida = models.TimeField(blank=True,null=True)
    abierta = models.BooleanField(blank=True, null=True)
    contenido = models.TextField()
    observaciones = models.TextField()
    lecciones = models.ManyToManyField(Leccion)
    ubicacion = models.CharField(max_length=300,null=True,blank=True)
    minutosleccion = models.FloatField(blank=True,null=True)
    minutoscierre = models.FloatField(blank=True,null=True)
    cierresistema = models.BooleanField(default=False)
    motivocierre = models.ForeignKey(TipoMotivoCierreClases,null=True,blank=True, on_delete=models.CASCADE)
    usuariocierre = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)
    fechacierre = models.DateTimeField(blank=True,null=True)
    descuentoporatraso = models.BooleanField(default=True)

    def asistencia_matricula(self, matricula):
        if AsistenciaLeccion.objects.filter(leccion=self.le, matricula=matricula, asistio=True).exists():
            return

    def tienemotivojustificacion(self):
        if MotivoJustificarAperturaTardiaClases.objects.filter(lecciongrupo=self).exists():
            return MotivoJustificarAperturaTardiaClases.objects.get(lecciongrupo=self)

    def en_fechacorterol(self):
        hoy = datetime.today().date()
        rol=RolPago.objects.filter().order_by('-id')[:1].get()
        if self.fecha>=rol.inicio and self.fecha<=rol.fechamax and hoy<=rol.fechamax:
            return True
        else:
            return False


    def descripcionclase(self):
        return 'Docente: '+self.profesor.persona.nombre_completo_inverso()+' Asignatura: '+self.materia.asignatura.nombre+' Fecha: '+ str(self.fecha) +' Grupo: '+ self.materia.nivel.grupo.nombre

    def tienelogatraso(self):
        if LogEntry.objects.filter(change_message__icontains='Abierta Clase Docente',object_id=str(self.id)).exists():
            return LogEntry.objects.get(change_message__icontains='Abierta Clase Docente',object_id=str(self.id))

    def costo_profesor_dia(self,fecha):
        if self.profesor.rolperfilprofesor_set.exists():
            rolperfilprofesor = self.profesor.rolperfilprofesor_set.all()[:1].get()
        else:
            rolperfilprofesor = RolPerfilProfesor(profesor=self.profesor,chlunes=0,chmartes=0,
                                                  chmiercoles=0,chjueves=0,chviernes=0,chsabado=0,
                                                  chdomingo=0,esfijo=False, salario=0, horassalario=0,
                                                  descuentos=0,salariopercibir=0)
            rolperfilprofesor.save()

        profmateria=None
        profmateriapractica=None
        paralelo=None
        #OCastillo 28-07-2021 desde el rol de agosto se aplica cambio
        desde='2021-07-22'
        #OCastillo 13-09-2023 segmento practica tiene costo de 10 el resto de materias el costo asignado en el perfil del profesor y el valor por hora materia ya no se aplica se toma el valor del perfil del docente
        if str(fecha)>=desde:
            profesoresmaterias = ProfesorMateria.objects.filter((Q(desde__lte=self.fecha) & Q(hasta__gte=self.fecha))|(Q(desde__lte=self.fecha) & Q(hasta__gte=self.fecha))|(Q(desde__lte=self.fecha) & Q(hasta__lte=self.fecha)),materia=self.materia)
            if profesoresmaterias.filter(profesor=self.profesor,segmento=TIPOSEGMENTO_TEORIA).exists():
                profmateria=profesoresmaterias.filter(profesor=self.profesor,segmento=TIPOSEGMENTO_TEORIA)[:1].get()
            if profesoresmaterias.filter(profesor=self.profesor,segmento=TIPOSEGMENTO_PRACT).exists():
                profmateriapractica=profesoresmaterias.filter(profesor=self.profesor,segmento=TIPOSEGMENTO_PRACT)[:1].get()

            if profesoresmaterias.filter(profesor_aux=self.profesor.id,segmento=TIPOSEGMENTO_TEORIA).exists():
                profmateria=profesoresmaterias.filter(profesor_aux=self.profesor.id,segmento=TIPOSEGMENTO_TEORIA)[:1].get()

            if profesoresmaterias.filter(profesor_aux=self.profesor.id,segmento=TIPOSEGMENTO_PRACT).exists():
                profmateriapractica=profesoresmaterias.filter(profesor_aux=self.profesor.id,segmento=TIPOSEGMENTO_PRACT)[:1].get()

        horas = self.turno.horas
        #OCastillo 05-11-2021 para costos por asignatura en malla
        costomateria = CostoAsignatura.objects.filter(asignaturamalla__asignatura=self.materia.asignatura,asignaturamalla__malla__carrera=self.materia.nivel.carrera,activo=True).first()
        if costomateria:
            valor=costomateria.valor
            if horas:
                return horas * valor
            return 0

        #OCastillo 26-10-2021 para examen complexivo
        paralelo = Materia.objects.filter(pk=self.materia.id,nivel__paralelo__icontains='COMPLEXIVO').first()
        if paralelo:
            if horas:
                return horas * COSTO_COMPLEXIVO
            return 0

        #OCastillo 25-10-2021 para carrera de profesionalizacion
        #OCastillo 23-09-2022 se excluye profesionalizacion de transporte tiene valor de 15
        carreranivel = self.materia.nivel.carrera
        coordinacion_pertenece = carreranivel.coordinacion_pertenece()
        if carreranivel.validacionprofesional and carreranivel.id!=58 and not coordinacion_pertenece.id==COORDINACION_UACED:
            if horas:
                return horas * COSTO_PROFESIONALIZACION
            return 0
        #OCastillo 23-09-2022 se incluyen carreras de profesionalizacion transporte 10 anio
        elif carreranivel.validacionprofesional and carreranivel.id==58:
            if horas:
                return horas * COSTO_PROFESIONALIZACION_TRANSPORTE
            return 0
        #OCastillo 26-09-2022 se incluyen carreras de profesionalizacion de 5 y 10 anio de la FACES solicitado por correo
        elif carreranivel.validacionprofesional and coordinacion_pertenece.id==COORDINACION_UACED:
            if horas:
                return horas * COSTO_PROFESIONALIZACION_TRANSPORTE
            return 0
        else:
            if self.motivocierre == None:
                if profmateria and profmateriapractica==None:
                    if self.dia==1:
                        return horas * rolperfilprofesor.chlunes
                    if self.dia==2:
                        return horas * rolperfilprofesor.chmartes
                    if self.dia==3:
                        return horas * rolperfilprofesor.chmiercoles
                    if self.dia==4:
                        return horas * rolperfilprofesor.chjueves
                    if self.dia==5:
                        return horas * rolperfilprofesor.chviernes
                    if self.dia==6:
                        return horas * rolperfilprofesor.chsabado
                    if self.dia==7:
                        return horas * rolperfilprofesor.chdomingo
                    return 0
                else:
                    if profmateriapractica and horas:
                        return horas * COSTO_SEGMENTO_PRACTICA
                    return 0
            else:
                costomateriapormotivo = TipoMotivoCierreClases.objects.filter(pk=self.motivocierre.id).first()
                if costomateriapormotivo:
                    if costomateriapormotivo.porcentajedescuento==0:
                        if profmateria and profmateriapractica==None:
                            if self.dia==1:
                                return horas * rolperfilprofesor.chlunes
                            if self.dia==2:
                                return horas * rolperfilprofesor.chmartes
                            if self.dia==3:
                                return horas * rolperfilprofesor.chmiercoles
                            if self.dia==4:
                                return horas * rolperfilprofesor.chjueves
                            if self.dia==5:
                                return horas * rolperfilprofesor.chviernes
                            if self.dia==6:
                                return horas * rolperfilprofesor.chsabado
                            if self.dia==7:
                                return horas * rolperfilprofesor.chdomingo
                            return 0
                        else:
                            if profmateriapractica and horas:
                                return horas * COSTO_SEGMENTO_PRACTICA
                            return 0
                    else:
                        if profmateria and profmateriapractica==None:
                            #OCastillo este descuento ya no va
                            # return float((self.turno.horas * rolperfilprofesor.chlunes)*costomateriapormotivo.porcentajedescuento/100)
                            if self.dia==1:
                                return float(horas * rolperfilprofesor.chlunes)
                            if self.dia==2:
                                return float(horas * rolperfilprofesor.chmartes)
                            if self.dia==3:
                                return float(horas * rolperfilprofesor.chmiercoles)
                            if self.dia==4:
                                return float(horas * rolperfilprofesor.chjueves)
                            if self.dia==5:
                                return float(horas * rolperfilprofesor.chviernes)
                            if self.dia==6:
                                return float(horas * rolperfilprofesor.chsabado)
                            if self.dia==7:
                                return float(horas * rolperfilprofesor.chdomingo)
                            return 0
                        else:
                            if profmateriapractica and self.turno.horas:
                                return float(horas * COSTO_SEGMENTO_PRACTICA)
                            return 0

    def resumen_clase(self,absentismoclas,asistenciato,faltas,totalasis):
        if Coordinacion.objects.filter(carrera=self.materia.nivel.carrera).exists():
            coor = Coordinacion.objects.filter(carrera=self.materia.nivel.carrera)[:1].get()
            correo=  str(coor.correo)
            hoy = datetime.now().today()
            contenido = "Resumen de Clase:"
            send_html_mail("Resumen de Clase",
                           "emails/resumenclase.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'absentismoclas':absentismoclas, 'asistenciato':asistenciato, 'faltas': faltas, 'totalasis': totalasis},correo.split(","))


    def tiene_deberes(self,ins):
        return  DeberAlumno.objects.filter(lecciongrupo=self , inscripcion=ins)[:1].get() if DeberAlumno.objects.filter(lecciongrupo=self , inscripcion=ins).exists() else None

    def descargar_deberes(self,ins):
        return  DeberAlumno.objects.filter(lecciongrupo=self , inscripcion=ins)[:1].get()

    def cantidad_clases(self):
        return LeccionGrupo.objects.filter(materia=self.materia).count()

    def plan_clase(self):
        return Archivo.objects.filter(lecciongrupo=self,tipo__id=ARCHIVO_TIPO_PLANCLASE).exists()

    def asistencia_real(self):
        sumatoria = 0
        for leccion in self.lecciones.all():
            sumatoria += leccion.asistencia_real()
        return sumatoria

    def inasistencia_real(self):
        sumatoria = 0
        for leccion in self.lecciones.all():
            sumatoria += leccion.inasistencia_real()
        return sumatoria

    def totales_estudiantes(self):
        return self.asistencia_real()+self.inasistencia_real()


    def asistencia_plan(self):
        sumatoria = 0
        for leccion in self.lecciones.all():
            sumatoria += leccion.asistencia_plan()
        return sumatoria

    def porciento_asistencia(self):
        if self.asistencia_plan()==0:
            return 0
        return (self.asistencia_real()*100)/(self.asistencia_plan())

    # def cerrar(self):
    #     d = datetime.now()
    #     hora = datetime.now().time()
    #     if (self.dia-1)!=d.weekday() or hora >=  self.turno.termina :
    #         # hora = datetime.now().time()
    #         # if  hora >=  self.turno.termina :
    #         if self.abierta:
    #             self.abierta=False
    #             self.horasalida = self.turno.termina
    #             self.save()




    def mail_apertura(self,usuario,motivo,client_address):
        tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_APERTURA_CLASE)
        hoy = datetime.now().today()
        send_html_mail("Clase Abierta desde Modulo Clases y Evaluaciones",
                       "emails/aperturaclase.html", {'lg': self, 'usuario': usuario, 'fecha': hoy,'motivo':motivo,'client_address':client_address },tipo.correo.split(","))
    def mail_apertura_docente(self,usuario,motivo,client_address):
        tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_APERTURA_CLASE)
        hoy = datetime.now()
        send_html_mail("Clase Abierta Docente",
                       "emails/aperturaclasedocente.html", {'lg': self, 'usuario': usuario,'fecha': hoy,'motivo':motivo,'client_address':client_address },tipo.correo.split(","))

    class Meta:
        verbose_name = "Grupo de Lecciones"
        verbose_name_plural = "Grupos de Lecciones"

    def __str__(self):
        return str(self.profesor) + ' - ' + str(self.materia.asignatura) + ' [Turno: ' + str(self.turno.turno) + ' (' + str(self.turno.comienza) +' - ' + str(self.turno.termina) + ') Aula: ' + elimina_tildes(self.aula.nombre) + ']'

    def deber(self):
        if Archivo.objects.filter(lecciongrupo=self, tipo=ARCHIVO_TIPO_DEBERES).exists():
            return Archivo.objects.filter(lecciongrupo=self, tipo=ARCHIVO_TIPO_DEBERES)[:1].get()
        else:
            return None

    def material_apoyo(self):
        if Archivo.objects.filter(lecciongrupo=self, tipo=ARCHIVO_TIPO_MATERIALAPOYO).exists():
            return Archivo.objects.filter(lecciongrupo=self, tipo=ARCHIVO_TIPO_MATERIALAPOYO)[:1].get()
        else:
            return None

    def practica_clase(self,periodo):
        if ProfesorMateria.objects.filter(materia=self.materia,profesor=self.profesor,segmento__id=2,materia__nivel__periodo=periodo).exists():
            return ProfesorMateria.objects.get(materia=self.materia,profesor=self.profesor,segmento__id=2)

    def pm(self):
        if  ProfesorMateria.objects.filter(materia=self.materia,profesor_aux=self.profesor.id ).exists():
            return   ProfesorMateria.objects.filter(materia=self.materia,profesor_aux=self.profesor.id )[:1].get().id
        else:
            if ProfesorMateria.objects.filter(materia=self.materia,profesor=self.profesor ).exists():
                return ProfesorMateria.objects.filter(materia=self.materia,profesor=self.profesor )[:1].get().id

    def calcula_horas_materia_practica(self,profesor,desde,hasta):
        if LeccionGrupo.objects.filter(profesor=profesor, materia=self.materia, fecha__gte=desde, fecha__lte=hasta,turno__practica=True).exists():
            leccionesGrupo = LeccionGrupo.objects.filter(profesor=profesor, materia=self.materia, fecha__gte=desde, fecha__lte=hasta,turno__practica=True)
            return sum([x.turno.horas for x in leccionesGrupo])
        else:
            return 0


class TipoIncidencia(models.Model):
    nombre = models.CharField(max_length=200)
    correo = models.CharField(max_length=200)
    responsable = models.ForeignKey(Persona, null=True, on_delete=models.CASCADE)
    tipocorreo = models.BooleanField(default=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Incidencia"
        verbose_name_plural = "Tipos de Incidencias"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        super(TipoIncidencia, self).save(force_insert, force_update, using, update_fields)


class Incidencia(models.Model):
    lecciongrupo = models.ForeignKey(LeccionGrupo, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoIncidencia, on_delete=models.CASCADE)
    contenido = models.TextField()
    solucion = models.TextField()
    cerrada = models.BooleanField(blank=True, null=True)
    fechaingreso = models.DateTimeField(blank=True,null=True)
    fechacontest = models.DateTimeField(blank=True,null=True)
    personacont = models.ForeignKey(Persona,blank=True,null=True, on_delete=models.CASCADE)

    def respondida(self):
        if len(self.solucion)==0:
            return False
        else:
            return True

    def __str__(self):
        return str(self.lecciongrupo)+" - "+str(self.tipo)

    class Meta:
        verbose_name = "Incidencia en Clase"
        verbose_name_plural = "Incidencias en Clases"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.contenido = self.contenido.upper()
        super(Incidencia, self).save(force_insert, force_update, using, update_fields)

    def mail_nuevo(self):
        send_html_mail("Nueva Incidencia de Clases",
                       "emails/incidencia.html", {'d': self, 'contenido': plaintext2html(self.contenido)},
                       self.tipo.correo.split(","))

    def mail_respuesta(self):
        try:
            tituloinst = TituloInstitucion.objects.filter()[:1].get()
        except :
            tituloinst = None
        send_html_mail("Su incidencia ya fue atendida, disculpas por las molestias",
                       "emails/respuestaincidencia.html",
                       {'d':self, 'contenido': plaintext2html(self.contenido),'t':tituloinst},
                       self.lecciongrupo.profesor.persona.emails())

class AsistenciaLeccion(models.Model):
    leccion = models.ForeignKey(Leccion, on_delete=models.CASCADE)
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    asistio = models.BooleanField(blank=True, null=True)
    aprobado = models.BooleanField(blank=True, null=True)
    fechaaprobacion = models.DateField()

    class Meta:
        verbose_name = "Asistencia de Leccion"
        verbose_name_plural = "Asistencia de Lecciones"

    def evaluaciones(self):
        return EvaluacionLeccion.objects.filter(leccion=self.leccion,matricula=self.matricula)



    def porciento_asistencia_actual(self):
        total = AsistenciaLeccion.objects.filter(leccion__clase__materia=self.leccion.clase.materia, matricula=self.matricula).count()
        real = AsistenciaLeccion.objects.filter(leccion__clase__materia=self.leccion.clase.materia, matricula=self.matricula, asistio=True).count()
        if not total:
            return 0
        return (real * 100) / total

    def horas_asistencia_actual(self):
        if AsistenciaLeccion.objects.filter(leccion__clase__materia=self.leccion.clase.materia, matricula=self.matricula, asistio=True).exists():
            return AsistenciaLeccion.objects.filter(leccion__clase__materia=self.leccion.clase.materia, matricula=self.matricula, asistio=True).aggregate(Sum('leccion__clase__turno__horas'))['leccion__clase__turno__horas__sum']
        return 0

    def promedio_evaluacion(self):
        average = EvaluacionLeccion.objects.filter(leccion=self.leccion,matricula=self.matricula).aggregate(Avg('evaluacion'))
        return round(average['evaluacion__avg']) if average['evaluacion__avg'] is not None else 0

    def promedio_evaluacion_clase_nota(self):
        v = self.promedio_evaluacion()
        if 0 <= v < 5:
            return "badge-error"
        elif 5 <= v < 8:
            return "badge-warning"
        else:
            return "badge-success"

class EvaluacionLeccion(models.Model):
    leccion = models.ForeignKey(Leccion, on_delete=models.CASCADE)
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    evaluacion = models.FloatField()

    def clase_nota(self):
        if 0 <= self.evaluacion < 5:
            return "badge-error"
        elif 5 <= self.evaluacion < 8:
            return "badge-warning"
        else:
            return "badge-success"


    class Meta:
        verbose_name = "Evaluacion de Leccion"
        verbose_name_plural = "Evaluaciones de Lecciones"


class TipoSolicitudSecretariaDocente(models.Model):
    nombre = models.CharField(max_length=200)
    sistema = models.BooleanField(blank=True, null=True)
    coordinacion = models.BooleanField(blank=True, null=True)
    activa = models.BooleanField(blank=True, null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Solicitud a Secretaria Docente"
        verbose_name_plural = "Tipos de Solicitudes a Secretaria Docente"
        ordering = ['nombre']

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoSolicitudSecretariaDocente, self).save(force_insert, force_update, using, update_fields)

class RetiradoMatricula(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel, blank=True, null=True, on_delete=models.CASCADE)
    activo = models.BooleanField(blank=True, null=True)
    # fecha = models.DateField()
    # motivo = models.CharField(max_length=200, blank=True, null=True)

    def __str__(self):
        return str(self.inscripcion)+str(self.nivel)

    def tienedetallematricula(self):
        if DetalleRetiradoMatricula.objects.filter(retirado=self).exists():
            return DetalleRetiradoMatricula.objects.filter(retirado=self)[:1].get()
    class Meta:
        verbose_name = "Retiro de Matricula"
        verbose_name_plural = "Retiros de Matriculas"


class HistoricoRecordAcademico(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    nota = models.FloatField()
    asistencia = models.FloatField()
    fecha = models.DateField()
    aprobada = models.BooleanField(blank=True,null=True)
    convalidacion = models.BooleanField(blank=True,null=True)
    pendiente = models.BooleanField(blank=True,null=True)

    def __str__(self):
        return str(self.inscripcion.persona)+" "+str(self.asignatura)+" [Nota:"+str(self.nota)+", Asist:"+str(self.asistencia)+"] "+("aprob." if self.aprobada else "suspenso.")

    def esta_suspensa(self):
        return not self.aprobada

    def estado(self):
        return "APROBADA" if self.aprobada else "REPROBADA"

    def suspensa_asistencia(self):
        if VALIDAR_ASISTENCIAS and not self.inscripcion.carrera.online:
            return "A" if self.asistencia < ASIST_PARA_APROBAR else ""
        return ""

    def suspensa_nota(self):
        return "N" if self.nota < NOTA_PARA_APROBAR else ""

    def matricula(self):
        numeromatriculas = HistoricoRecordAcademico.objects.filter(inscripcion=self.inscripcion,asignatura=self.asignatura,fecha__lt=self.fecha).all().count()+1
        if numeromatriculas>1:
            return numeromatriculas
        return False

    def fecha_repetida(self):
        if HistoricoRecordAcademico.objects.filter(inscripcion=self.inscripcion,asignatura=self.asignatura,fecha=self.fecha).all().count()>1:
            return True
        else:
            return False

    def aprobada_repetida(self):
        if self.aprobada:
            if HistoricoRecordAcademico.objects.filter(inscripcion=self.inscripcion,asignatura=self.asignatura,aprobada=True,id__lt=self.id).all().count()>=1:
                return True
            else:
                return False
        else:
            return False

    def tiene_malla(self):
        if self.inscripcion.inscripcionmalla_set.exists():
            return True
        return False

    def existe_en_malla(self):
        if self.tiene_malla():
            im =  self.inscripcion.inscripcionmalla_set.all()[:1].get()
            if AsignaturaMalla.objects.filter(asignatura=self.asignatura,malla=im.malla).exists():
                return True
        return False

    def nivel_asignatura(self):
        #Hallar el nivel de cada asignatura
        if self.existe_en_malla():
            ma = self.inscripcion.inscripcionmalla_set.all()[:1].get().malla
            return AsignaturaMalla.objects.filter(malla=ma,asignatura=self.asignatura)[0].nivelmalla.nombre
        else:
            return ""

    def nivel_asignatura_malla(self):
        #Hallar el nivel malla de cada asignatura pero segun malla
        if self.existe_en_malla():
            ma = self.inscripcion.inscripcionmalla_set.all()[:1].get().malla
            return AsignaturaMalla.objects.filter(malla=ma,asignatura=self.asignatura)[0].nivelmalla
        else:
            return False

    def comprobar_aprobado(self):
        if VALIDAR_ASISTENCIAS and not self.inscripcion.carrera.online:
            return self.nota >= NOTA_PARA_APROBAR and self.asistencia >= ASIST_PARA_APROBAR
        else:
            return self.nota >= NOTA_PARA_APROBAR

    def comprobar_aprobadoexamen(self):
        if VALIDAR_ASISTENCIAS_EXAMEN and not self.inscripcion.carrera.online:
            return self.nota >= NOTA_PARA_APROBAR and self.asistencia >= ASIST_PARA_APROBAR
        else:
            return self.nota >= NOTA_PARA_APROBAR

    def notificacion_ingles(self, user,nota,asistencia):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_INGLES)
        hoy = datetime.now().today()
        contenido = "NOTIFICACION - EDICION DE NOTA "
        send_html_mail("EDITADA NOTA O ASISTENCIA DE INGLES ",
                       "emails/notificacion_ingles.html", {'d': self, 'fecha': hoy,'contenido': contenido,'nota':nota,'asistencia':asistencia,'user': user },tipo.correo.split(","))

    class Meta:
        verbose_name = 'Historico del Registro Academico'
        verbose_name_plural = "Historia de Registros Academicos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if not DEFAULT_PASSWORD == 'itb':
            self.aprobada = self.comprobar_aprobado()
        super(HistoricoRecordAcademico, self).save(force_insert, force_update, using, update_fields)


class Licencia(models.Model):
    nombre = models.CharField(max_length=200)
    ruc = models.CharField(max_length=13)
    email = models.EmailField()
    telefono = models.CharField(max_length=50)
    direccion = models.TextField()
    expira = models.DateField()
    idautorizacion = models.CharField(max_length=32)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Licencia"
        verbose_name_plural = "Licencias"


class TipoArchivo(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Archivo"
        verbose_name_plural = "Tipos de Archivo"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoArchivo, self).save(force_insert, force_update, using, update_fields)

class Archivo(models.Model):
    nombre = models.CharField(max_length=200)
    materia = models.ForeignKey(Materia, blank=True, null=True, on_delete=models.CASCADE)
    lecciongrupo = models.ForeignKey(LeccionGrupo, blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateField()
    archivo = models.FileField(upload_to='documentos/%Y/%m/%d', max_length=200)
    tipo = models.ForeignKey(TipoArchivo, on_delete=models.CASCADE)
    fechaentrega = models.DateField(blank=True,null=True)
    puntaje = models.FloatField(blank=True, null=True)

    def nombre_archivo(self):
        return os.path.split(self.archivo.name)[1]

    def tipo_archivo(self):
        a = self.nombre_archivo()
        n = a[a.rindex(".")+1:]
        if n=='pdf' or n=='doc' or n=='docx':
            return n
        return 'other'

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Archivo"
        verbose_name_plural = "Archivos"

    def download_link(self):
        return self.archivo.url

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Archivo, self).save(force_insert, force_update, using, update_fields)

class MateriaAsignada(models.Model):
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    notafinal = models.FloatField()
    asistenciafinal = models.FloatField()
    supletorio = models.FloatField()
    cerrado = models.BooleanField(default=False)
    fechacierre = models.DateField(null=True,blank=True)
    absentismo = models.BooleanField(default=False)
    alcance = models.BooleanField(default=False)
    notaparcial = models.FloatField(null=True,blank=True)
    estado = models.ForeignKey('sga.TipoEstado', blank=True, null=True, verbose_name=u'Estado', on_delete=models.CASCADE)

    def __str__(self):
        return str(self.matricula)+" "+str(self.materia) +"[Nota:"+str(self.notafinal)+",Asis:"+str(self.asistenciafinal)+",SUPLETORIO:"+str(self.supletorio)+"]"

    def nuevo_estado(self):
        if self.materia.sgaonline:
            notamin = NOTA_NUEVA_ACTA_MIN_ONLINE
        else:
            notamin = NOTA_NUEVA_ACTA_MIN_PRESEN
        if self.evaluacion_itb().n1 >= notamin and self.evaluacion_itb().n2 >= notamin and self.evaluacion_itb().n3 >= notamin and self.evaluacion_itb().n4 >= notamin:
            self.evaluacion_itb().estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
            # return "APROBADO"
        else:
            if self.evaluacion_itb().n1 == 0 and self.evaluacion_itb().n2 == 0 and self.evaluacion_itb().n3 == 00 and self.evaluacion_itb().n4 == 00:
                self.evaluacion_itb().estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)
            else:
                self.evaluacion_itb().estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
        self.evaluacion_itb().save()
        # return  self.evaluacion_itb().estado
        # return "REPROBADO"

    def ya_cobrada(self):
        return RubroMateria.objects.filter(materiaasignada=self).count()>0

    def precio_sugerido(self):
        if PrecioMateria.objects.filter(periodo=self.matricula.nivel.periodo, asignatura=self.asignatura).exists():
            precio = PrecioMateria.objects.filter(periodo=self.matricula.nivel.periodo,asignatura=self.materia.asignatura)[:1].get()
            return precio.precio
        else:
            return 0

    def profesor_auxiliar(self):
        if ProfesorMateria.objects.filter(materia=self.materia, profesor_aux__gt=0).exists():
            p= ProfesorMateria.objects.get(materia=self.materia, profesor_aux__gt=0)
            return  p.profesor_auxiliar()

    class Meta:
        verbose_name = "Materia Asignada a Alumno para un Nivel"
        verbose_name_plural = 'Materias Asignadas a Alumno por Nivel'

    def asistencias(self):
        lecciones = Leccion.objects.filter(clase__materia=self.materia)
        for leccion in lecciones:
            if not AsistenciaLeccion.objects.filter(leccion=leccion,matricula=self.matricula).exists():
                asistencia = AsistenciaLeccion(leccion=leccion, matricula=self.matricula, asistio=False)
                asistencia.save()
            elif AsistenciaLeccion.objects.filter(leccion=leccion,matricula=self.matricula).count()>1:
                asistencias = AsistenciaLeccion.objects.filter(leccion=leccion,matricula=self.matricula)
                if asistencias.filter(asistio=True).exists():
                    asistencia = AsistenciaLeccion.objects.filter(leccion=leccion,matricula=self.matricula, asistio=True)[:1].get()
                    for a in asistencias:
                        if a.id!=asistencia.id:
                            a.delete()
                else:
                    for a in asistencias[1:]:
                        a.delete()

        return AsistenciaLeccion.objects.filter(matricula=self.matricula, leccion__clase__materia=self.materia).order_by('leccion__fecha','leccion__horaentrada')

    def porciento_asistencia(self):
        try:
            real = AsistenciaLeccion.objects.filter(matricula=self.matricula, leccion__clase__materia=self.materia,asistio=True).count()
            plan = self.asistencias().count()
            if not plan:
                return 0
            return (real*100)/plan
        except :
            return 0

    def horas_asistencia(self):
        if AsistenciaLeccion.objects.filter(matricula=self.matricula, leccion__clase__materia=self.materia,asistio=True).exists():
            return AsistenciaLeccion.objects.filter(matricula=self.matricula, leccion__clase__materia=self.materia,asistio=True).aggregate(Sum('leccion__clase__turno__horas'))['leccion__clase__turno__horas__sum']
        return 0

    def cantidad_evaluaciones_clase(self):
        return EvaluacionLeccion.objects.filter(matricula=self.matricula, leccion__clase__materia=self.materia).count()

    def promedio_evaluacion_clase(self):
        average = EvaluacionLeccion.objects.filter(matricula=self.matricula, leccion__clase__materia=self.materia).aggregate(Avg('evaluacion'))
        return round(average['evaluacion__avg']) if average['evaluacion__avg'] is not None else 0

    def profesores(self):
        #return list(set([x.profesor for x in self.materia.clase_set.filter(materia__nivel__periodo__activo=True)]))
        profesores=[]
        for x in self.materia.profesormateria_set.all():
            if x.profesor_aux:
                p = Profesor.objects.get(pk=x.profesor_aux)
            else:
                p=x.profesor
            profesores.append(p)
        return profesores

    def profesores2(self):
        #return list(set([x.profesor for x in self.materia.clase_set.filter(materia__nivel__periodo__activo=True)]))
        return [x.profesor for x in self.materia.profesormateria_set.all()]
        # return [x.profesor for x in self.materia.profesormateria_set.all()]

    def evaluacion_its(self):
        if not self.evaluacionits_set.exists():
            evaluacion = EvaluacionITS(materiaasignada=self,tc1=0,te1=0,p1=0,momento1=0, tc2=0,te2=0,p2=0, momento2=0, pfinal=0, proy=0, su=0, estado=TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO))
            evaluacion.save()
        return self.evaluacionits_set.all()[:1].get()

    def evaluacion_itb(self):
        if not EvaluacionITB.objects.filter(materiaasignada=self).exists():
            # if not self.evaluacionitb_set.exists():
            evaluacion = EvaluacionITB(materiaasignada=self,n1=0,n2=0,n3=0,n4=0,examen=0,recuperacion=0, estado=TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO))
            evaluacion.save()
        return self.evaluacionitb_set.all()[:1].get()

    def evaluacion_igad(self):
        if not self.evaluacionitb_set.exists():
            evaluacion = EvaluacionITB(materiaasignada=self,n1=0,n2=0,n3=0,n4=0,examen=0,recuperacion=0, estado=TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO))
            evaluacion.save()
        return self.evaluacionitb_set.all()[:1].get()

    def evaluacion_tes(self):
        if not self.evaluaciontes_set.exists():
            evaluacion = EvaluacionTES(materiaasignada=self,n1=0,n2=0,n3=0,examen=0, recuperacion=0, estado=TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO))
            evaluacion.save()
        return self.evaluaciontes_set.all()[:1].get()

    def evaluacion_iavq(self):
        if not self.evaluacioniavq2_set.exists():
            evaluacion = EvaluacionIAVQ2(materiaasignada=self, n1=NotaIAVQ.nueva(),n2=NotaIAVQ.nueva(),n3=0,pi=0,su=0,estado=TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO))
            evaluacion.save()
        return self.evaluacioniavq2_set.all()[:1].get()

    def evaluacion_casade(self):
        if not self.evaluacioncasade_set.exists():
            evaluacion = EvaluacionCASADE(materiaasignada=self,n1=0,n2=0,n3=0,examen=0, recuperacion=0, estado=TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO))
            evaluacion.save()
        return self.evaluacioncasade_set.all()[:1].get()

    def evaluacion(self):
        switch = {
            EVALUACION_IAVQ: MateriaAsignada.evaluacion_iavq,
            EVALUACION_ITB: MateriaAsignada.evaluacion_itb,
            EVALUACION_ITS: MateriaAsignada.evaluacion_its,
            EVALUACION_IGAD: MateriaAsignada.evaluacion_igad,
            EVALUACION_TES: MateriaAsignada.evaluacion_tes,
            EVALUACION_CASADE: MateriaAsignada.evaluacion_casade
        }
        return switch[MODELO_EVALUACION](self)

    def evaluacion_generica(self):
        if not self.evaluaciongenerica_set.values("id").exists():
            modelo = self.materia.modelo_evaluativo
            for campo in modelo.detallemodeloevaluativo_set.all():
                evaluacion = EvaluacionGenerica(materiaasignada=self,
                                                detallemodeloevaluativo=campo,
                                                valor=0)
                evaluacion.save()
        return self.evaluaciongenerica_set.all()

    def esta_aprobado(self):
        self.evaluacion().actualiza_estado()
        return self.evaluacion().estado_id==NOTA_ESTADO_APROBADO

    def esta_aprobado_final(self):
        if VALIDAR_ASISTENCIAS:
            if DEFAULT_PASSWORD == 'itb':
                return self.evaluacion().nota_final_nueva() >= NOTA_PARA_APROBAR
            else:
                return self.evaluacion().nota_final() >= NOTA_PARA_APROBAR

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if MODELO_EVALUACION==EVALUACION_CASADE:
            self.asistenciafinal = self.horas_asistencia()
        else:
            self.asistenciafinal = self.porciento_asistencia()
            #OCastillo 12-02-2020 para las materias practicas
            #OCU 14-02-2020 revisar
            # if DEFAULT_PASSWORD == 'itb':
            #     if self.materia.asignatura.asistencia:
            #         self.asistenciafinal = 100

        super(MateriaAsignada,self).save(force_insert,force_update,using, update_fields)

    def existe_absentismo(self):
        return Absentismo.objects.filter(materiaasignada=self).order_by('-id')[:1].get()

    def abierta(self):
        return self.objects.filter(cerrado=False).order_by('-id')

    def correo_alumnocierremate(self, profesormateria, reprobado, observacion):

        profesor = profesormateria
        hoy = datetime.now().today()
        contenido = "NOTIFICACION CALIFICACION"
        send_html_mail("NOTIFICACION CALIFICACION",
                       "emails/correo_calificacionalumno.html", {'materiaasignada': self, 'fecha': hoy,'contenido': contenido,
                                                                 'profesor':profesor,'reprobado':reprobado,'observacion':observacion},self.matricula.inscripcion.persona.emailinst.split(","))

    def correo_alcance(self,profesor):
        if TipoIncidencia.objects.filter(pk=39).exists():
            tipo = TipoIncidencia.objects.get(pk=39)
            hoy = datetime.now().today()
            contenido = "NOTA DE ALCANCE"
            send_html_mail("NOTIFICACION - NOTA DE ALCANCE",
                           "emails/alcance.html", {'d': self, 'fecha': hoy,'contenido': contenido ,'profesor':profesor},tipo.correo.split(","))

    def existe_evaluacionalcance(self):
        if EvaluacionAlcance.objects.filter(materiaasignada=self).exists():
            return True
        else:
            return False

    def tiene_evaluacionalcance(self):
        if EvaluacionAlcance.objects.filter(materiaasignada=self, rubroespecie=self.obtener_rubroespecie_asentamientonotas()).exists():
            return EvaluacionAlcance.objects.filter(materiaasignada=self, rubroespecie=self.obtener_rubroespecie_asentamientonotas())[:1].get()

    def obtener_evaluacion_itb(self):
        if EvaluacionITB.objects.filter(materiaasignada=self).exists():
            return EvaluacionITB.objects.filter(materiaasignada=self)[:1].get()

    def tiene_especie(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        especie =  RubroEspecieValorada.objects.filter(materia=self, disponible=True,rubro__fecha__gte=fechamax,rubro__cancelado=True)[:1].get()
        return "Especie: " + str(especie.serie) + " Codigo: " + str(especie.codigoe)+ " Tipo: " + str(elimina_tildes(especie.tipoespecie.nombre))

    def tiene_especie_regnota(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        return  RubroEspecieValorada.objects.filter(materia=self, disponible=True, tipoespecie__id=ID_TIPO_ESPECIE_REG_NOTA,aplicada = False,fecha__gte=fechamax,rubro__cancelado=True).exists()

    def tiene_asentamiento(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        if RubroEspecieValorada.objects.filter(materia=self,autorizado=True,tipoespecie__id=ESPECIE_ASENTAMIENTO_NOTA,fecha__gte=fechamax).exists():
            return True
        else:
            return False

    def tiene_examen(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        return RubroEspecieValorada.objects.filter(materia=self,disponible=True, tipoespecie__id=ESPECIE_EXAMEN,fecha__gte=fechamax)[:1].get()

    def tiene_recuperacion(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        return RubroEspecieValorada.objects.filter(materia=self,disponible=True, tipoespecie__id=ESPECIE_RECUPERACION,fecha__gte=fechamax)[:1].get()

    def ver_especie(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        especie =  RubroEspecieValorada.objects.filter(materia=self, autorizado=True,rubro__fecha__gte=fechamax,rubro__cancelado=True)[:1].get()
        return "Especie: " + str(especie.serie) + " Codigo: " + str(especie.codigoe)+ " Tipo: " + str(elimina_tildes(especie.tipoespecie.nombre))

    def ver_asentamiento(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        if RubroEspecieValorada.objects.filter(Q(materia=self, tipoespecie__id__in=ESPECIES_ASENTAMIENTO_NOTAS, autorizado=True, fechaasigna__gte=fechamax, disponible=True, rubro__cancelado=True)|
                                               Q(materia=self, tipoespecie__id__in=ESPECIES_ASENTAMIENTO_NOTAS, autorizado=True, habilita=True, disponible=True, rubro__cancelado=True)).order_by('rubro__fecha').exists():
            especie = RubroEspecieValorada.objects.filter(Q(materia=self, tipoespecie__id__in=ESPECIES_ASENTAMIENTO_NOTAS, autorizado=True, fechaasigna__gte=fechamax, disponible=True, rubro__cancelado=True)|
                                               Q(materia=self, tipoespecie__id__in=ESPECIES_ASENTAMIENTO_NOTAS, autorizado=True, habilita=True, disponible=True, rubro__cancelado=True))[:1].get()
            return "Especie: " + str(especie.serie) + " Codigo: " + str(especie.codigoe)+ " Tipo: " + str(elimina_tildes(especie.tipoespecie.nombre))
        return False

    def obtener_rubroespecie_asentamientonotas(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        if RubroEspecieValorada.objects.filter(materia=self, tipoespecie__relaciodocente=True, disponible=True, rubro__cancelado=True, tipoespecie__id__in=ESPECIES_ASENTAMIENTO_NOTAS).exclude(aplicada=True).exists():
            return RubroEspecieValorada.objects.filter(materia=self,tipoespecie__relaciodocente=True, disponible=True, rubro__cancelado=True, tipoespecie__id__in=ESPECIES_ASENTAMIENTO_NOTAS).exclude(aplicada=True).order_by('-id')[:1].get()

    def obtener_evaluacion_alcance(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        rubro_especie = self.obtener_rubroespecie_asentamientonotas()
        # if EvaluacionAlcance.objects.filter(materiaasignada=self, rubroespecie=rubro_especie, rubroespecie__autorizado=True, rubroespecie__fechaasigna__gte=fechamax).exists():
        if EvaluacionAlcance.objects.filter(materiaasignada=self, rubroespecie=rubro_especie, rubroespecie__autorizado=True).exists():
            return EvaluacionAlcance.objects.filter(materiaasignada=self, rubroespecie=rubro_especie, rubroespecie__autorizado=True).order_by('-id')[:1].get()

    def ver_especienotas(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        if RubroEspecieValorada.objects.filter(materia=self, disponible=False, tipoespecie__id=ID_TIPO_ESPECIE_REG_NOTA,aplicada = True,rubro__fecha__gte=fechamax,rubro__cancelado=True).exists():
            return  RubroEspecieValorada.objects.filter(materia=self, disponible=False, tipoespecie__id=ID_TIPO_ESPECIE_REG_NOTA,aplicada = True,rubro__fecha__gte=fechamax,rubro__cancelado=True)[:1].get()
        return False

    def verifica_asentamiento(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        if not RubroEspecieValorada.objects.filter(materia=self,tipoespecie__id=ID_TIPO_ESPECIE_REG_NOTA,autorizado=True,rubro__fecha__gte=fechamax,disponible=True,rubro__cancelado=True,aplicada=True).order_by('rubro__fecha').exists():
            return True
        return False

    def ver_examen(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        if RubroEspecieValorada.objects.filter(materia=self,tipoespecie__id=ESPECIE_EXAMEN,autorizado=True,fechaasigna__gte=fechamax,disponible=True,rubro__cancelado=True).order_by('rubro__fecha').exists():
            especie =  RubroEspecieValorada.objects.filter(materia=self,tipoespecie__id=ESPECIE_EXAMEN,autorizado=True,fechaasigna__gte=fechamax,disponible=True,rubro__cancelado=True).order_by('rubro__fecha')[:1].get()
            return "Especie: " + str(especie.serie) + " Codigo: " + str(especie.codigoe)+ " Tipo: " + str(elimina_tildes(especie.tipoespecie.nombre))
        return False

    def ver_recuperacion(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        if RubroEspecieValorada.objects.filter(materia=self,tipoespecie__id=ESPECIE_RECUPERACION,autorizado=True,fechaasigna__gte=fechamax,disponible=True,rubro__cancelado=True).order_by('rubro__fecha').exists():
            especie =  RubroEspecieValorada.objects.filter(materia=self,tipoespecie__id=ESPECIE_RECUPERACION,autorizado=True,fechaasigna__gte=fechamax,disponible=True,rubro__cancelado=True).order_by('rubro__fecha')[:1].get()
            return "Especie: " + str(especie.serie) + " Codigo: " + str(especie.codigoe)+ " Tipo: " + str(elimina_tildes(especie.tipoespecie.nombre))
        return False

    def ver_mejoramiento(self):
        fechamax = datetime.now() - timedelta(days=DIAS_ESPECIE)
        if RubroEspecieValorada.objects.filter(materia=self,tipoespecie__id=ESPECIE_MEJORAMIENTO,autorizado=True,fechaasigna__gte=fechamax,disponible=True,rubro__cancelado=True).order_by('rubro__fecha').exists():
            especie =  RubroEspecieValorada.objects.filter(materia=self,tipoespecie__id=ESPECIE_MEJORAMIENTO,autorizado=True,fechaasigna__gte=fechamax,disponible=True,rubro__cancelado=True)[:1].get()
            return "Especie: " + str(especie.serie) + " Codigo: " + str(especie.codigoe)+ " Tipo: " + str(elimina_tildes(especie.tipoespecie.nombre))
        return False

    def asignacion(self):
        return "%s %s %s"%(self.materia.asignatura.nombre,self.materia.nivel.grupo.nombre,self.materia.nivel.nivelmalla.nombre)

    def ver_recordmateria(self):
        if RecordAcademico.objects.filter(inscripcion=self.matricula.inscripcion, asignatura=self.materia.asignatura).exists():
            registro=RecordAcademico.objects.filter(inscripcion=self.matricula.inscripcion, asignatura=self.materia.asignatura)[:1].get()
            return registro

    def ver_historiconotas(self):
        if HistoricoRecordAcademico.objects.filter(inscripcion=self.matricula.inscripcion, asignatura=self.materia.asignatura).exists():
            h = HistoricoRecordAcademico.objects.filter(inscripcion=self.matricula.inscripcion, asignatura=self.materia.asignatura).order_by('-id')[:1].get()
            if HistoricoNotasITB.objects.filter(historico=h).exists() :
                hn = HistoricoNotasITB.objects.filter(historico=h)[:1].get()
                return hn

    def verifica_ultimas_tres_asistencias(self):
        if AsistenciaLeccion.objects.filter(leccion__clase__materia=self.materia, matricula=self.matricula).exists():
            asistencias = AsistenciaLeccion.objects.filter(leccion__clase__materia=self.materia, matricula=self.matricula).order_by('-leccion__fecha')[:3]
            contador=0
            for a in asistencias:
                if a.asistio==False:
                    contador=contador+1
            if contador == 3:
                return True
            else:
                return False

    def campo(self, campo):
        return self.evaluacion_generica().filter(detallemodeloevaluativo__nombre=campo).first()

    def verifica_evaluacion_generica(self):
        if not self.evaluaciongenerica_set.exists():
            modelo = self.materia.modelo_evaluativo
            for campo in modelo.detallemodeloevaluativo_set.all():
                evaluacion = EvaluacionGenerica(materiaasignada=self,
                                                detallemodeloevaluativo=campo,
                                                valor=0)
                evaluacion.save()
        return True

    def valor_nombre_campo(self, campo):
        if self.verifica_evaluacion_generica():
            if self.evaluaciongenerica_set.values("valor").filter(detallemodeloevaluativo__nombre=campo):
                return self.evaluaciongenerica_set.values("valor").filter(detallemodeloevaluativo__nombre=campo)[0].get("valor")
            return 0
        return 0

    def actualiza_estado(self):
        from sga.funciones import null_to_numeric
        modelo = self.materia.modelo_evaluativo
        self.estado_id = NOTA_ESTADO_EN_CURSO
        actualizar = False
        determinar_estado_final = False
        for campo in modelo.campos().filter(puede_actualizar_estado=True):
            if null_to_numeric(self.valor_nombre_campo(campo.nombre)) > 0:
                actualizar = True
                break
        for campo in modelo.campos().filter(determina_estado_final=True):
            if null_to_numeric(self.valor_nombre_campo(campo.nombre)) > 0:
                determinar_estado_final = True
                break
        if actualizar:
            if not self.materia.nivel.carrera.online or self.materia.asignatura.asistencia:
                if self.asistenciafinal >= modelo.asistencia_aprobar and self.notafinal >= modelo.nota_aprobar:
                    self.estado_id = NOTA_ESTADO_APROBADO
                elif modelo.asistencia_aprobar > self.asistenciafinal >= modelo.asistencia_recuperacion:
                    self.estado_id = NOTA_ESTADO_SUPLETORIO
            else:
                self.estado_id = NOTA_ESTADO_APROBADO if self.notafinal >= modelo.nota_aprobar else NOTA_ESTADO_SUPLETORIO

        if determinar_estado_final or self.cerrado:
            if not self.estado_id == NOTA_ESTADO_APROBADO:
                self.estado_id = NOTA_ESTADO_REPROBADO
        self.save()

    def tiene_porciento_requerido(self):
        modelo = self.materia.modelo_evaluativo
        return self.asistenciafinal >= modelo.asistencia_aprobar

    # def contar_estudiantes_activos (self):
    #     return MateriaAsignada()

class EvaluacionGenerica(models.Model):
    materiaasignada = models.ForeignKey(MateriaAsignada, verbose_name=u"Materia asignada", on_delete=models.CASCADE)
    detallemodeloevaluativo = models.ForeignKey(DetalleModeloEvaluativo, verbose_name=u'Detalle modelo evaluación', on_delete=models.CASCADE)
    valor = models.FloatField(default=0, verbose_name=u'Valor evaluación')
    fecha = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha modificación')

    def __str__(self):
        return u'%s - %s' % (self.materiaasignada, self.detallemodeloevaluativo)


    class Meta:
        unique_together = ('materiaasignada', 'detallemodeloevaluativo',)

    def save(self, *args, **kwargs):
        from sga.funciones import null_to_decimal
        if self.valor >= self.detallemodeloevaluativo.nota_maxima:
            self.valor = self.detallemodeloevaluativo.nota_maxima
        elif self.valor <= self.detallemodeloevaluativo.nota_minima:
            self.valor = self.detallemodeloevaluativo.nota_minima
        self.valor = null_to_decimal(self.valor, self.detallemodeloevaluativo.decimales)
        super(EvaluacionGenerica, self).save(*args, **kwargs)


class EvaluacionIAVQ(models.Model):
    materiaasignada = models.ForeignKey(MateriaAsignada, on_delete=models.CASCADE)
    n1 = models.FloatField()
    n2 = models.FloatField()
    pi = models.FloatField()
    n3 = models.FloatField()
    supletorio = models.FloatField()

    def calcula_n3(self):
        self.n3 = ((self.n1 + self.n2)/4) + (self.pi/2)

    def calcula_notafinal(self):
        self.materiaasignada.notafinal = self.nota_final()

    def nota_final(self):
        return round((self.n1 + self.n2 + self.n3)/3.0)

    def __str__(self):
        return str(self.materiaasignada) + " [N1:"+str(self.n1)+", N2:"+str(self.n2)+", PI:"+str(self.pi)+", N3:"+str(self.n3)+" SUPL:"+str(self.supletorio)+"]"

    class Meta:
        verbose_name = 'Evaluacion'
        verbose_name_plural = 'Evaluaciones'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.calcula_n3()
        super(EvaluacionIAVQ,self).save(force_insert,force_update,using, update_fields)

class NotaIAVQ(models.Model):
    p1 = models.FloatField()
    p2 = models.FloatField()
    p3 = models.FloatField()
    p4 = models.FloatField()
    p5 = models.FloatField()
    nota = models.FloatField()

    @staticmethod
    def nueva():
        nota = NotaIAVQ(p1=0, p2=0, p3=0, p4=0, p5=0)
        nota.save()
        return nota

    def calcula_nota(self):
        self.nota = self.porciento_p1() + self.porciento_p2() + self.porciento_p3() + self.porciento_p4() + self.porciento_p5()

    def total_puntos(self):
        return self.p1 + self.p2 + self.p3 + self.p4 + self.p5

    def porciento_p1(self):
        return self.p1*PORCIENTO_NOTA1

    def porciento_p2(self):
        return self.p2*PORCIENTO_NOTA2

    def porciento_p3(self):
        return self.p3*PORCIENTO_NOTA3

    def porciento_p4(self):
        return self.p4*PORCIENTO_NOTA4

    def porciento_p5(self):
        return self.p5*PORCIENTO_NOTA5

    def porciento_total(self):
        return self.porciento_p1() + self.porciento_p2() + self.porciento_p3() + self.porciento_p4() + self.porciento_p5()

    def p1_esperado(self):
        return PORCIENTO_NOTA1 * 10

    def p2_esperado(self):
        return PORCIENTO_NOTA2 * 10

    def p3_esperado(self):
        return PORCIENTO_NOTA3 * 10

    def p4_esperado(self):
        return PORCIENTO_NOTA4 * 10

    def p5_esperado(self):
        return PORCIENTO_NOTA5 * 10

    def p1_diferencia(self):
        return self.p1 - self.p1_esperado()

    def p2_diferencia(self):
        return self.p2 - self.p2_esperado()

    def p3_diferencia(self):
        return self.p3 - self.p3_esperado()

    def p4_diferencia(self):
        return self.p4 - self.p4_esperado()

    def p5_diferencia(self):
        return self.p5 - self.p5_esperado()

    def diferencia_total(self):
        return self.p1_diferencia() + self.p2_diferencia() + self.p3_diferencia() + self.p4_diferencia() + self.p5_diferencia()

    def __str__(self):
        return "[P1:"+str(self.p1)+", P2:"+str(self.p2)+", P3:"+str(self.p3)+", P4:"+str(self.p4)+" P5:"+str(self.p5)+", NOTA:"+str(self.nota)+"]"

    class Meta:
        verbose_name = 'Nota de IAVQ'
        verbose_name_plural = 'Notas del IAVQ'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.calcula_nota()
        super(NotaIAVQ,self).save(force_insert,force_update,using, update_fields)

class TipoEstado(models.Model):
    nombre = models.CharField(max_length=50)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Estado"
        verbose_name_plural = "Tipos de Estados"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoEstado, self).save(force_insert, force_update, using, update_fields)

class EvaluacionTES(models.Model):
    materiaasignada = models.ForeignKey(MateriaAsignada, on_delete=models.CASCADE)
    n1 = models.FloatField()
    n2 = models.FloatField()
    n3 = models.FloatField()
    examen = models.FloatField()
    recuperacion = models.FloatField()
    observaciones = models.TextField(max_length=1000, blank=True, null=True)
    estado = models.ForeignKey(TipoEstado, on_delete=models.CASCADE)

    def nota_parcial(self):
        return round((self.n1+self.n2+self.n3)/3.0, 2)

    def actualiza_estado(self):
        if self.n1 and self.n2 and self.n3 and self.examen:
            if self.materiaasignada.notafinal >= NOTA_PARA_APROBAR:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
            else:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)

            if not self.recuperacion:
                if NOTA_PARA_SUPLET <= self.materiaasignada.notafinal < NOTA_PARA_APROBAR :
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)

        else:
            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)
        self.save()

    def nota_final(self):
        # Si hay nota en recuperacion, entonces la formula seria con la recuperacion y no con el total
        if self.recuperacion:
            return round((self.nota_parcial() + self.recuperacion)/2.0,2)
        return self.nota_total()

    def nota_total(self):
        return round(((self.n1+self.n2+self.n3)/3.0+self.examen)/2.0,2)

    def __str__(self):
        return str(self.materiaasignada)+" "+str(self.estado) + " [N1:"+str(self.n1)+", N2:"+str(self.n2)+", N3:"+str(self.n3)+", Ex:"+str(self.examen)+"]"

    class Meta:
        verbose_name = 'Evaluacion TES'
        verbose_name_plural = 'Evaluaciones TES'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observaciones: self.observaciones = self.observaciones.upper()

        if not 0<=self.n1<=100: self.n1=0
        if not 0<=self.n2<=100: self.n2=0
        if not 0<=self.n3<=100: self.n3=0
        if not 0<=self.examen<=100: self.examen=0
        if not 0<=self.recuperacion<=100: self.recuperacion=0

        ma = self.materiaasignada
        ma.notafinal = self.nota_final()

        if self.recuperacion:
            ma.supletorio=self.recuperacion

        ma.save()
        super(EvaluacionTES, self).save(force_insert, force_update, using, update_fields)

class EvaluacionCASADE(models.Model):
    materiaasignada = models.ForeignKey(MateriaAsignada, on_delete=models.CASCADE)
    n1 = models.FloatField()
    n2 = models.FloatField()
    n3 = models.FloatField()
    examen = models.FloatField()
    recuperacion = models.FloatField()
    observaciones = models.TextField(max_length=1000, blank=True, null=True)
    estado = models.ForeignKey(TipoEstado, on_delete=models.CASCADE)

    def nota_parcial(self):
        return round(((self.n1+self.n2+self.n3)/3.0)*0.60 , 2)

    def actualiza_estado(self):
        if self.n1 and self.n2 and self.n3 and self.examen:
            if self.materiaasignada.notafinal >= NOTA_PARA_APROBAR:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
            else:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)

            # if not self.recuperacion:
            #     if NOTA_PARA_SUPLET <= self.materiaasignada.notafinal < NOTA_PARA_APROBAR :
            #        self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
        else:
            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)
        self.save()

    def nota_final(self):
        # Si hay nota en recuperacion, entonces la formula es con la recuperacion y no con el total
        if self.recuperacion:
            return round((self.nota_parcial() + self.recuperacion)/2.0,2)
        return self.nota_total()

    def nota_total(self):
        return round(self.nota_parcial()+(self.examen*0.40), 2)

    def __str__(self):
        return str(self.materiaasignada)+" "+str(self.estado) + " [N1:"+str(self.n1)+", N2:"+str(self.n2)+", N3:"+str(self.n3)+", Ex:"+str(self.examen)+"]"

    class Meta:
        verbose_name = 'Evaluacion CASADE'
        verbose_name_plural = 'Evaluaciones CASADE'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observaciones: self.observaciones = self.observaciones.upper()

        if not 0<=self.n1<=100: self.n1=0
        if not 0<=self.n2<=100: self.n2=0
        if not 0<=self.n3<=100: self.n3=0
        if not 0<=self.examen<=100: self.examen=0
        if not 0<=self.recuperacion<=100: self.recuperacion=0

        ma = self.materiaasignada
        ma.notafinal = self.nota_final()

        if self.recuperacion:
            ma.supletorio=self.recuperacion

        ma.save()
        super(EvaluacionCASADE, self).save(force_insert, force_update, using, update_fields)

class EvaluacionIAVQ2(models.Model):
    materiaasignada = models.ForeignKey(MateriaAsignada, on_delete=models.CASCADE)
    n1 = models.ForeignKey(NotaIAVQ, related_name='n1', on_delete=models.CASCADE)
    n2 = models.ForeignKey(NotaIAVQ, related_name='n2', on_delete=models.CASCADE)
    n3 = models.FloatField()
    pi = models.FloatField()
    su = models.FloatField()
    estado = models.ForeignKey(TipoEstado, on_delete=models.CASCADE)


    def nota_n3(self):
        self.n3 = self.calcula_n3()

    def calcula_n3(self):
        return ((self.n1.nota + self.n2.nota)/4) + (self.pi/2)

    def nota_final(self):
        # Si hay nota en supletorio entonces la formula es con el supletorio y no con n3
        if not self.su==0:
            return (self.n1.nota + self.n2.nota + self.su)/3.0
        return (self.n1.nota + self.n2.nota + self.calcula_n3())/3.0

    def suma_n(self):
        return self.calcula_n3()+self.n1.nota+self.n2.nota

    def margen_aprobado(self):
        return self.suma_n() - SUMA_PARA_APROBAR

    def __str__(self):
        return str(self.materiaasignada)+" "+str(self.estado) + " [N3:"+str(self.n3)+", PI:"+str(self.pi)+", SU:"+str(self.su)+"]"

    class Meta:
        verbose_name = 'Evaluacion IAVQ2'
        verbose_name_plural = 'Evaluaciones IAVQ2'

    def actualiza_estado(self):
        #Este codigo actualiza el ESTADO del estudiante
        if self.n1.nota and self.n2.nota and self.pi:
            nf = self.nota_final()
            af = self.materiaasignada.porciento_asistencia()
            self.materiaasignada.notafinal = nf
            self.materiaasignada.asistenciafinal = af
            if self.materiaasignada.materia.nivel.carrera.online  :
                asistenciaparaaprobar=0
            else:
                asistenciaparaaprobar=ASIST_PARA_APROBAR
            if nf>=NOTA_PARA_APROBAR:
                if af>=asistenciaparaaprobar :
                    self.estado_id = NOTA_ESTADO_APROBADO
                elif ASIST_PARA_SEGUIR<=af<asistenciaparaaprobar:
                    self.estado_id = NOTA_ESTADO_SUPLETORIO
                else:
                    self.estado_id = NOTA_ESTADO_REPROBADO
            elif NOTA_PARA_SUPLET<=nf<NOTA_PARA_APROBAR:
                if ASIST_PARA_SEGUIR<=af :
                    self.estado_id = NOTA_ESTADO_SUPLETORIO
                else:
                    self.estado_id = NOTA_ESTADO_REPROBADO
            else:
                self.estado_id = NOTA_ESTADO_REPROBADO
        else:
            self.estado_id = NOTA_ESTADO_EN_CURSO

        self.save()
        self.materiaasignada.save()

#    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
#        super(EvaluacionIAVQ2,self).save(force_insert,force_update,using, update_fields)


class PeriodoEvaluacionesIAVQ(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    n1desde = models.DateField(verbose_name=u'N1 - Desde:', blank=True,null=True)
    n1hasta = models.DateField(verbose_name=u'N1 - Hasta:', blank=True,null=True)
    n2desde = models.DateField(verbose_name=u'N2 - Desde:',blank=True,null=True)
    n2hasta = models.DateField(verbose_name=u'N2 - Hasta:',blank=True,null=True)
    pidesde = models.DateField(verbose_name=u'PI - Desde:',blank=True,null=True)
    pihasta = models.DateField(verbose_name=u'PI - Hasta:',blank=True,null=True)
    sudesde = models.DateField(verbose_name=u'SU - Desde:',blank=True,null=True)
    suhasta = models.DateField(verbose_name=u'SU - Hasta:',blank=True,null=True)

    def __str__(self):
        return "Periodo Evaluaciones "+str(self.periodo)

    class Meta:
        verbose_name = "Periodo de Evaluaciones IAVQ"
        verbose_name_plural = "Periodos de Evaluaciones IAVQ"

    def n1_activo(self):
        d = datetime.now().date()
        td = d - self.n1desde
        th = d - self.n1hasta
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)

    def n2_activo(self):
        d = datetime.now().date()
        td = d - self.n2desde
        th = d - self.n2hasta
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)

    def pi_activo(self):
        d = datetime.now().date()
        td = d - self.pidesde
        th = d - self.pihasta
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)

    def su_activo(self):
        d = datetime.now().date()
        td = d - self.sudesde
        th = d - self.suhasta
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)


class PeriodoEvaluacionesITS(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    mom1desde = models.DateField(verbose_name=u'1er Momento - Desde:', blank=True,null=True)
    mom1hasta = models.DateField(verbose_name=u'1er Momento - Hasta:', blank=True,null=True)
    mom2desde = models.DateField(verbose_name=u'2do Momento - Desde:',blank=True,null=True)
    mom2hasta = models.DateField(verbose_name=u'2do Momento - Hasta:',blank=True,null=True)
    pfinaldesde = models.DateField(verbose_name=u'PFinal - Desde:',blank=True,null=True)
    pfinalhasta = models.DateField(verbose_name=u'PFinal - Hasta:',blank=True,null=True)
    proydesde = models.DateField(verbose_name=u'Proyecto - Desde:',blank=True,null=True)
    proyhasta = models.DateField(verbose_name=u'Proyecto - Hasta:',blank=True,null=True)
    sudesde = models.DateField(verbose_name=u'Supletorio - Desde:',blank=True,null=True)
    suhasta = models.DateField(verbose_name=u'Supletorio - Hasta:',blank=True,null=True)

    def __str__(self):
        return "Periodo Evaluaciones ITS"+str(self.periodo)

    class Meta:
        verbose_name = "Periodo de Evaluaciones ITS"
        verbose_name_plural = "Periodos de Evaluaciones ITS"

    def momento1_activo(self):
        d = datetime.now().date()
        td = d - self.mom1desde
        th = d - self.mom1hasta
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)

    def momento2_activo(self):
        d = datetime.now().date()
        td = d - self.mom2desde
        th = d - self.mom2hasta
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)

    def pfinal_activo(self):
        d = datetime.now().date()
        td = d - self.pfinaldesde
        th = d - self.pfinalhasta
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)

    def proy_activo(self):
        d = datetime.now().date()
        td = d - self.proydesde
        th = d - self.proyhasta
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)

    def su_activo(self):
        d = datetime.now().date()
        td = d - self.sudesde
        th = d - self.suhasta
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)


#Otros Modelos de Evaluacion, mediante Codigos Evaluativos y Suma de valores

class CodigoEvaluacion(models.Model):
    nombre = models.CharField(max_length=200)
    alias = models.CharField(max_length=50, blank=True, null=True)
    recuperacion =  models.BooleanField(default=False, blank=True,verbose_name="Recuperacion")

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Codigo de Evaluacion"
        verbose_name_plural = "Codigos de Evaluacion"

# MODEL EVALUACION ITB
class EvaluacionITB(models.Model):
    materiaasignada = models.ForeignKey(MateriaAsignada, on_delete=models.CASCADE)
    n1 = models.IntegerField()
    cod1 = models.ForeignKey(CodigoEvaluacion, related_name='codn1', null=True, blank=True, on_delete=models.CASCADE)
    fecha1 = models.DateField(null=True, blank=True)
    n2 = models.IntegerField()
    cod2 = models.ForeignKey(CodigoEvaluacion, related_name='codn2', null=True, blank=True, on_delete=models.CASCADE)
    fecha2 = models.DateField(null=True, blank=True)
    n3 = models.IntegerField()
    cod3 = models.ForeignKey(CodigoEvaluacion, related_name='codn3', null=True, blank=True, on_delete=models.CASCADE)
    fecha3 = models.DateField(null=True, blank=True)
    n4 = models.IntegerField()
    cod4 = models.ForeignKey(CodigoEvaluacion, related_name='codn4', null=True, blank=True, on_delete=models.CASCADE)
    fecha4 = models.DateField(null=True, blank=True)
    examen = models.IntegerField()
    fechaexamen = models.DateField(null=True, blank=True)
    observaciones = models.TextField(max_length=1000, blank=True, null=True)
    recuperacion = models.IntegerField()
    fecharecuperacion = models.DateField(null=True, blank=True)
    estado = models.ForeignKey(TipoEstado, on_delete=models.CASCADE)
    archiexamen = models.FileField(upload_to='examen/%Y/%m/%d', max_length=250, blank=True, null=True)

    def actualiza_estado(self):
        if self.materiaasignada.materia.nueva_acta_buck():
            if self.materiaasignada.materia.sgaonline:
                notamin = NOTA_NUEVA_ACTA_MIN_ONLINE
            else:
                notamin = NOTA_NUEVA_ACTA_MIN_PRESEN
                # self.materiaasignada.nuevo_estado()
            if self.n1 >= notamin and self.n2 >= notamin and self.n3 >= notamin and self.n4 >= notamin:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
            # return "APROBADO"
            else:
                if self.n1 == 0 and self.n2 == 0 and self.n3 == 0 and self.n4 == 0:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)
                else:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)

        else:
            #aqui ITB
            if self.materiaasignada.materia.nivel.carrera.online:
                asistenciaparaaprobar = 0
            else:
                asistenciaparaaprobar = ASIST_PARA_APROBAR
            if not self.materiaasignada.materia.nivel.carrera.recuperacion:
                if self.n1 and self.n2 and self.n3 and self.n4 and self.examen:
                    if VALIDAR_ASISTENCIAS:
                        if self.materiaasignada.notafinal >= NOTA_PARA_APROBAR and self.materiaasignada.asistenciafinal >= asistenciaparaaprobar:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                        if self.materiaasignada.notafinal < NOTA_PARA_SUPLET or self.materiaasignada.asistenciafinal < asistenciaparaaprobar:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
                    else:
                        if self.materiaasignada.notafinal >= NOTA_PARA_APROBAR:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                        else:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)

                    if not self.recuperacion:
                        if NOTA_PARA_SUPLET <= self.materiaasignada.notafinal < NOTA_PARA_APROBAR :
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
                    else:
                        if self.materiaasignada.notafinal < NOTA_PARA_APROBAR or self.materiaasignada.asistenciafinal < asistenciaparaaprobar:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
                else:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)
            else:
                if self.materiaasignada.materia.nivel.carrera.recuperacion:
                    if not self.recuperacion:
                        if self.n1 == 0 and self.n2 == 0 and self.n3 == 0 and self.n4 == 0:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)
                        else:
                            if (self.n1 + self.n2 + self.n3 + self.n4) >= SUMA_PARA_APROBAR_RECU and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR_RECU:
                                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                            # else:
                            #     if self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR_RECU:
                            #         self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
                            else:
                                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
                    else:
                        if self.recuperacion >= SUMA_PARA_APROBAR_RECU and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR_RECU:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                        else:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)

                else:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
        self.save()

    #OCastillo 22-07-2019 nueva funcion actualiza estado para ITB
    def actualiza_estado_nueva(self):
        if not self.examen and not self.recuperacion:
            if self.n1 and self.n2 and self.n3 and self.n4:
                # if VALIDAR_ASISTENCIAS and not self.materiaasignada.materia.nivel.carrera.online :
                if self.nota_parcial_nueva()== 'examen':
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                elif self.nota_parcial_nueva()== 'reprobado' or self.nota_parcial_nueva()== 'noexamen':
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
                elif self.nota_parcial_nueva()== 'recuperacion':
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
                elif self.nota_parcial_nueva()== 'apto':
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                elif self.nota_parcial_nueva()== 'curso':
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)
            else:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)

        elif self.n1 and self.n2 and self.n3 and self.n4 and self.examen and not self.recuperacion:
            if VALIDAR_ASISTENCIAS and not self.materiaasignada.materia.nivel.carrera.online:
                if self.nota_examen_nueva()== 'aprobado' and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.nota_examen_nueva()== 'recupera' and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
                elif self.nota_examen_nueva() == 'examen' and self.materiaasignada.asistenciafinal < ASIST_PARA_APROBAR and not self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                elif self.nota_examen_nueva()== 'examen' and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR and self.materiaasignada.notafinal >= NOTA_PARA_APROBAR and not self.materiaasignada.materia.asignatura.asistencia :
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.nota_examen_nueva() == 'examen' and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR and self.materiaasignada.notafinal >= MIN_RECUPERACION and self.materiaasignada.notafinal >= NOTA_PARA_APROBAR and not self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.nota_examen_nueva()== 'examen' and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR and self.materiaasignada.notafinal >= MIN_RECUPERACION and self.materiaasignada.notafinal <= NOTA_PARA_APROBAR and not self.materiaasignada.materia.asignatura.asistencia :
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
                else:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
            else:
                if self.nota_examen_nueva() == 'aprobado':
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.nota_examen_nueva() == 'recupera':
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
                elif self.nota_examen_nueva() == 'examen':
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                elif self.nota_examen_nueva() == 'examen' and self.materiaasignada.notafinal >= NOTA_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.nota_examen_nueva() == 'examen' and self.materiaasignada.notafinal >= MIN_RECUPERACION and self.materiaasignada.notafinal >= NOTA_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.nota_examen_nueva() == 'examen' and self.materiaasignada.notafinal >= MIN_RECUPERACION and self.materiaasignada.notafinal <= NOTA_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
                else:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)

        elif self.n1 and self.n2 and self.n3 and self.n4 and not self.examen and self.recuperacion:
            if self.recuperacion >= NOTA_PARA_APROBAR and self.recuperacion >= (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR and not self.materiaasignada.materia.asignatura.asistencia:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
            else:
                if (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) >= NOTA_PARA_APROBAR and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                else:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)

        elif self.n1 and self.n2 and self.n3 and self.n4 or self.examen and self.recuperacion:
            if VALIDAR_ASISTENCIAS and not self.materiaasignada.materia.nivel.carrera.online:
                if self.recuperacion >= NOTA_PARA_APROBAR and self.recuperacion >= (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR and not self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.recuperacion >= NOTA_PARA_APROBAR and self.recuperacion <= (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR and not self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                #OCastillo 30-abril-2020 cambio indicado la nota mayor queda
                elif self.recuperacion < NOTA_PARA_APROBAR and self.recuperacion < (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) and (self.n1 + self.n2 + self.n3 + self.n4 + self.examen)>=NOTA_PARA_APROBAR and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR and not self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.recuperacion >= NOTA_PARA_APROBAR and self.recuperacion <= (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) and self.materiaasignada.asistenciafinal < ASIST_PARA_APROBAR and self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                elif self.recuperacion >= NOTA_PARA_APROBAR and self.recuperacion >= (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) and self.materiaasignada.asistenciafinal < ASIST_PARA_APROBAR and self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                #OCastillo 30-abril-2020 cambio indicado la nota mayor queda
                elif self.recuperacion < NOTA_PARA_APROBAR and self.recuperacion < (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) and self.materiaasignada.asistenciafinal < ASIST_PARA_APROBAR and self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                elif (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) >= NOTA_PARA_APROBAR and self.materiaasignada.asistenciafinal < ASIST_PARA_APROBAR and not self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                    # #OCastillo 08-nov-2019 cuando estudiante va a recuperacion y saca menos para aprobar reprueba la materia y va la nota de recuperacion
                    if self.estado == TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO):
                        if self.recuperacion >= NOTA_PARA_APROBAR:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                        else:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
                else:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
            else:
                if self.recuperacion >= NOTA_PARA_APROBAR and self.recuperacion >= (self.n1 + self.n2 + self.n3 + self.n4 + self.examen):
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.recuperacion >= NOTA_PARA_APROBAR and self.recuperacion <= (self.n1 + self.n2 + self.n3 + self.n4 + self.examen):
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                #OCastillo 30-abril-2020 cambio indicado la nota mayor queda
                elif self.recuperacion < NOTA_PARA_APROBAR and self.recuperacion < (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) and (self.n1 + self.n2 + self.n3 + self.n4 + self.examen)>=NOTA_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.recuperacion >= NOTA_PARA_APROBAR and self.recuperacion <= (self.n1 + self.n2 + self.n3 + self.n4 + self.examen):
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                elif self.recuperacion >= NOTA_PARA_APROBAR and self.recuperacion >= (self.n1 + self.n2 + self.n3 + self.n4 + self.examen):
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                #OCastillo 30-abril-2020 cambio indicado la nota mayor queda
                elif self.recuperacion < NOTA_PARA_APROBAR and self.recuperacion < (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) and self.materiaasignada.asistenciafinal < ASIST_PARA_APROBAR and self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                elif (self.n1 + self.n2 + self.n3 + self.n4 + self.examen) >= NOTA_PARA_APROBAR and self.materiaasignada.asistenciafinal < ASIST_PARA_APROBAR and not self.materiaasignada.materia.asignatura.asistencia:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                    # #OCastillo 08-nov-2019 cuando estudiante va a recuperacion y saca menos para aprobar reprueba la materia y va la nota de recuperacion
                    if self.estado == TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO):
                        if self.recuperacion >= NOTA_PARA_APROBAR:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                        else:
                            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
                else:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
        else:
            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)

        self.save()
    #hasta aqui

    def nota_final(self):
        # Si hay nota en recuperacion, entonces la formula seria con la recuperacion y no con el total
        if self.recuperacion:
            if not self.materiaasignada.matricula.inscripcion.carrera.recuperacion:
                if DEFAULT_PASSWORD == 'itb':
                    if self.recuperacion > NOTA_PARA_APROBAR and self.recuperacion > (self.n1+self.n2+self.n3+self.n4+self.examen):
                        self.materiaasignada.notafinal= self.recuperacion
                    else:
                        self.materiaasignada.notafinal=(self.n1+self.n2+self.n3+self.n4+self.examen)
                else:
                    return round((self.nota_total() + self.recuperacion)/2.0)
            else:
                return self.recuperacion
        return self.nota_total()

    def nota_parcial(self):
        # Se suman todas las notas sin la nota de recuperacion
        notaparcial=(self.n1+self.n2+self.n3+self.n4+self.examen)
        self.materiaasignada.notaparcial = notaparcial
        self.materiaasignada.save()
        return notaparcial

    def nota_total(self):
        if MODELO_EVALUACION==EVALUACION_IGAD:
            return round((self.n1+self.n2+self.n3+self.n4+self.examen)/6.0)
        else:
            if not self.materiaasignada.matricula.inscripcion.carrera.recuperacion:
                return self.n1+self.n2+self.n3+self.n4+self.examen
            else:
                return self.n1+self.n2+self.n3+self.n4

    def nota_total_nueva(self):
        if not self.recuperacion:
            return self.n1+self.n2+self.n3+self.n4+self.examen
        else:
            if self.estado.id==NOTA_ESTADO_SUPLETORIO or self.estado.id==NOTA_ESTADO_APROBADO:
                if self.examen>=MIN_EXAMEN:
                    if self.n1+self.n2+self.n3+self.n4+self.examen>=NOTA_PARA_APROBAR and self.n1+self.n2+self.n3+self.n4+self.examen>=self.recuperacion:
                        return self.n1+self.n2+self.n3+self.n4+self.examen
                    else:
                        return self.recuperacion
                else:
                    return self.recuperacion
            else:
                # #OCastillo 08-nov-2019 cuando estudiante va a recuperacion y saca menos para aprobar reprueba la materia y va la nota de recuperacion
                if self.recuperacion >= NOTA_PARA_APROBAR and  self.recuperacion > (self.n1+self.n2+self.n3+self.n4+self.examen)and self.estado.id==NOTA_ESTADO_REPROBADO:
                    return self.recuperacion
                else:
                    if self.estado.id==NOTA_ESTADO_REPROBADO or self.estado.id==NOTA_ESTADO_APROBADO :
                        return self.recuperacion
                    else:
                        return self.n1+self.n2+self.n3+self.n4+self.examen

    def nota_final_nueva(self):
        if self.recuperacion > self.nota_total_nueva():
            return self.recuperacion
        else:
            return self.nota_total_nueva()

    def nota_parcial_nueva(self):
        #OCastillo 02-07-2019 nuevo modelo evaluacion
        if not self.n1 and not self.n2 and not self.n3 and not self.n4 and not self.examen and not self.recuperacion:
            return 'curso'
        #OCastillo 29-10-2019 si falta alguna de las notas parciales el estado es en curso
        if not self.n1 or not self.n2 or not self.n3 or not self.n4:
            return 'curso'
        elif self.n1+self.n2+self.n3+self.n4>=MIN_APROBACION and self.n1+self.n2+self.n3+self.n4<=MAX_APROBACION:
            return 'examen'
        elif self.n1+self.n2+self.n3+self.n4>=MIN_RECUPERACION and self.n1 + self.n2 + self.n3 + self.n4 <= MAX_RECUPERACION:
            return 'recuperacion'
        elif self.n1+self.n2+self.n3+self.n4<MIN_RECUPERACION:
            return 'noexamen'
        else:
            return 'apto'

    def nota_examen_nueva(self):
        #OCastillo 03-07-2019 nuevo modelo evaluacion
        if self.examen>=MIN_EXAMEN and self.examen<=MAX_EXAMEN :
            if self.n1+self.n2+self.n3+self.n4 +self.examen>=NOTA_PARA_APROBAR:

                return 'aprobado'
            else:
                if self.n1+self.n2+self.n3+self.n4+self.examen>=MIN_APROBACION and self.n1+self.n2+self.n3+self.n4<=MAX_APROBACION:
                    return 'recupera'
                else:
                    return 'noapto'
        else:
            return 'examen'

    def proximo_cierre(self):
        fecha = datetime.now().date()
        estado='1'
        # OCastillo 01-jul-2021  a materias practicas darles 2 dias luego del cierre de materia para ingresar notas
        if ProfesorMateria.objects.filter(materia=self.materiaasignada.materia,segmento__id=2,aceptacion=True).exists():
            diasgracia=2
            prof=ProfesorMateria.objects.filter(materia=self.materiaasignada.materia,segmento__id=2,aceptacion=True)[:1].get()
            finpractica=prof.hasta+timedelta(days=diasgracia)
            if (finpractica-datetime.now().date()).days>=0:
                estado='1'
            else:
                estado='0'
        else:
            #OCastillo 14-nov-2019 validacion 1 dia antes de fin de materia se deben bloquear las 4 primeras notas para Ejecutivo y 2 dias antes para Presenciales
            #OCastillo 05-nov-2019 para excluir nivel Seminario
            if self.materiaasignada.materia.nivel.nivelmalla.id==NIVEL_SEMINARIO:
                estado='1'
            elif (self.materiaasignada.materia.fin-fecha).days >= DIAS_BLOQUEO_EJECUTIVO:
                estado='1'
            else:
                estado='0'

        return estado

    def finasignacionteoria(self):
        #OCastillo 14-07-2021 se quita esta validacion
        finasignacion=False
        if ProfesorMateria.objects.filter(materia=self.materiaasignada.materia,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True ).count()>=2:
            finasignacion=False
        else:
            if  ProfesorMateria.objects.filter(materia=self.materiaasignada.materia,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True).exists():
                prof=ProfesorMateria.objects.filter(materia=self.materiaasignada.materia,profesor_aux__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True )[:1].get()
                finteoria=prof.hasta
                if (finteoria-datetime.now().date()).days<0:
                    # finasignacion=True
                    finasignacion=False

            if ProfesorMateria.objects.filter(materia=self.materiaasignada.materia,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True ).exists():
                prof= ProfesorMateria.objects.filter(materia=self.materiaasignada.materia,profesor__id__gt=0,segmento__id=TIPOSEGMENTO_TEORIA,aceptacion=True )[:1].get()
                finteoria=prof.hasta
                if (finteoria-datetime.now().date()).days<0:
                    #finasignacion=True
                    finasignacion=False

        return (finasignacion)


    def email_notaalcance(self,profesor,posicion,nota,correo_coord,op,cod):
        if TipoIncidencia.objects.filter(pk=61).exists():
            tipo = TipoIncidencia.objects.get(pk=61)
            hoy = datetime.now().today()
            if op=='01':
                correodocente=str(profesor.persona.emailinst)+','+tipo.correo+','+correo_coord
                contenido = 'SE HA INGRESADO NOTA'
                send_html_mail("NOTA DE ALCANCE",
                               "emails/email_notaalcance.html", {'contenido': "SE HA INGRESADO NOTA DE ALCANCE", 'self': self, 'fecha': hoy,'docente':profesor,'nota':nota,'posicion':posicion,'op':op,'cod':cod},correodocente.split(","))
            else:
                contenido = 'SE HA APROBADO NOTA'
                correodocente=tipo.correo+','+correo_coord
                codigo=op
                send_html_mail("APROBACION NOTA DE ALCANCE",
                               "emails/email_notaalcance.html", {'contenido': "SE HA APROBADO NOTA DE ALCANCE", 'self': self, 'fecha': hoy,'personarespon': profesor,'nota':nota,'alcance':posicion,'op':op,'cod':cod},correodocente.split(","))


    def __str__(self):
        return str(self.materiaasignada)+" "+str(self.estado) + " [N1:"+str(self.n1)+", N2:"+str(self.n2)+", N3:"+str(self.n3)+", N4:"+str(self.n4)+", Ex:"+str(self.examen)+"]"

    class Meta:
        if MODELO_EVALUACION==EVALUACION_IGAD:
            verbose_name = 'Evaluacion IGAD'
            verbose_name_plural = 'Evaluaciones IGAD'
        else:
            verbose_name = 'Evaluacion ITB'
            verbose_name_plural = 'Evaluaciones ITB'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observaciones: self.observaciones = self.observaciones.upper()
        if MODELO_EVALUACION==EVALUACION_ITB:
            if self.materiaasignada.materia.nueva_acta_buck():
                if not 0<=self.n1<=100: self.n1=0
                if not 0<=self.n2<=100: self.n2=0
                if not 0<=self.n3<=100: self.n3=0
                if not 0<=self.n4<=100: self.n4=0
            else:
                # aqui
                if not self.materiaasignada.materia.nivel.carrera.recuperacion:
                    if not 0<=self.n1<=PORCIENTO_NOTA1: self.n1=0
                    if not 0<=self.n2<=PORCIENTO_NOTA2: self.n2=0
                    if not 0<=self.n3<=PORCIENTO_NOTA3: self.n3=0
                    if not 0<=self.n4<=PORCIENTO_NOTA4: self.n4=0
                    if not 0<=self.examen<=PORCIENTO_NOTA5: self.examen=0
                    if not 0<=self.recuperacion<=PORCIENTO_RECUPERACION: self.recuperacion=0
                else:
                    if not 0<=self.n1<=NOTA1_RECU: self.n1=0
                    if not 0<=self.n2<=NOTA2_RECU: self.n2=0
                    if not 0<=self.n3<=NOTA3_RECU: self.n3=0
                    if not 0<=self.n4<=NOTA4_RECU: self.n4=0
                    if not 0<=self.recuperacion<=EXAM_RECU: self.recuperacion=0
        if MODELO_EVALUACION==EVALUACION_IGAD:
            if not 0<=self.n1<=20: self.n1=0
            if not 0<=self.n2<=20: self.n2=0
            if not 0<=self.n3<=20: self.n3=0
            if not 0<=self.n4<=20: self.n4=0
            if not 0<=self.examen<=40: self.examen=0
            if not 0<=self.recuperacion<=20: self.recuperacion=0

        ma = self.materiaasignada
        if not DEFAULT_PASSWORD=='itb':
            ma.notafinal = self.nota_final()
        else:
            if INSCRIPCION_CONDUCCION:
                ma.notafinal = self.nota_final()
            else:
                if ma.materia.fin < convertir_fecha('01-10-2019').date():
                    ma.notafinal = self.nota_final()
                else:
                    ma.notafinal =  self.nota_final_nueva()


        if self.recuperacion:
            ma.supletorio=self.recuperacion

        ma.save()
        super(EvaluacionITB, self).save(force_insert, force_update, using, update_fields)


class CategoriaReporte(models.Model):
    nombre = models.CharField(max_length=50)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Categoria de Reporte"
        verbose_name_plural = "Categorias de Reportes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(CategoriaReporte, self).save(force_insert, force_update, using, update_fields)


class Reporte(models.Model):
    nombre = models.CharField(max_length=100)
    descripcion = models.CharField(max_length=200)
    archivo = models.FileField(upload_to='reportes', max_length=200)
    categoria = models.ForeignKey(CategoriaReporte, on_delete=models.CASCADE)
    grupos = models.ManyToManyField(Group)

    def __str__(self):
        return self.nombre

    @staticmethod
    def flexbox_query(q):
        return Reporte.objects.filter(Q(descripcion__icontains=q))

    def flexbox_repr(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = "Reporte"
        verbose_name_plural = "Reportes"

    def download_link(self):
        return self.archivo.url

    def parametros(self):
        return ParametroReporte.objects.filter(reporte=self).order_by('id')

TIPOS_PARAMETRO_REPORTE = (
    (1, 'Texto'),
    (2, 'Numero Entero'),
    (3, 'Numero Decimal'),
    (4, 'Verdadero o Falso'),
    (5, 'Registro de Datos'),
    (6, 'Fecha'),
    (7, 'Cuadro de Texto'),
)

class ParametroReporte(models.Model):
    reporte = models.ForeignKey(Reporte, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=100)
    descripcion = models.CharField(max_length=200)
    tipo = models.IntegerField(choices=TIPOS_PARAMETRO_REPORTE)
    extra = models.CharField(max_length=200, blank=True, null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Parametro de Reporte"
        verbose_name_plural = "Parametros de Reportes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        super(ParametroReporte, self).save(force_insert, force_update, using, update_fields)


#----------------------------------------------------------------
#
#   FINANZAS Y FACTURACION
#
#----------------------------------------------------------------

class Banco(models.Model):
    nombre = models.CharField(max_length=100)
    tasaprotesto = models.FloatField(blank=True, null=True)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Banco"
        verbose_name_plural = "Bancos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Banco, self).save(force_insert, force_update,using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return Banco.objects.filter(Q(nombre__contains=q))

    def flexbox_repr(self):
        return str(self.nombre)

    def puede_eliminarse(self):
        if CuentaBanco.objects.filter(banco=self).exists() or PagoCheque.objects.filter(banco=self).exists() or PagoTarjeta.objects.filter(banco=self).exists() or ReciboPermisoCondu.objects.filter(banco=self).exists():
            return False
        else:
            return True

class CuentaBanco(models.Model):
    banco = models.ForeignKey(Banco, on_delete=models.CASCADE)
    numero = models.CharField(max_length=50)
    tipocuenta = models.CharField(max_length=50)
    representante = models.CharField(max_length=100)
    activo = models.BooleanField(default=True)


    def __str__(self):
        return str(self.banco)+" "+str(self.tipocuenta) + " ("+self.numero+")"

    class Meta:
        verbose_name = "Cuenta de Banco"
        verbose_name_plural = "Cuentas Bancarias"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.tipocuenta = self.tipocuenta.upper()
        self.representante = self.representante.upper()
        super(CuentaBanco, self).save(force_insert, force_update, using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return CuentaBanco.objects.filter(Q(banco__nombre__contains=q))

    def flexbox_repr(self):
        return str(self.banco)+" "+str(self.tipocuenta) + " ("+self.numero+")"

    def puede_eliminarse(self):
        if PagoTransferenciaDeposito.objects.filter(cuentabanco=self).exists() or ReciboPermisoCondu.objects.filter(cuentabanco=self).exists() or RegistroExterno.objects.filter(cuenta=self).exists():
            return False
        else:
            return True

class ClienteFactura(models.Model):
    ruc = models.CharField(max_length=20)
    nombre = models.CharField(max_length=100)
    direccion = models.TextField()
    telefono = models.CharField(max_length=50)
    correo = models.CharField(max_length=100, blank=True, null=True)
    contrasena = models.CharField(max_length=100,blank=True, null=True)
    numcambio = models.IntegerField(blank=True, null=True)

    def __str__(self):
        return "Cliente No. "+self.ruc+" - "+self.nombre

    class Meta:
        verbose_name = "Cliente Facturacion"
        verbose_name_plural = "Clientes de Facturacion"

    def contar_facturas(self):
        return Factura.objects.filter(cliente=self).count()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper() if self.nombre else ''
        self.direccion = self.direccion.upper() if self.direccion else ''
        super(ClienteFactura, self).save(force_insert,force_update,using, update_fields)

class LugarRecaudacion(models.Model):
    """Indica Lugar de Recaudacion"""
    nombre = models.CharField(max_length=100)
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    puntoventa = models.CharField(max_length=50, blank=True, null=True)
    numerofact = models.IntegerField(blank=True,null = True)
    numeronotacre = models.IntegerField(blank=True,null = True)
    direccion = models.CharField(max_length=300, blank=True, null=True)
    activa = models.BooleanField(blank=True, null=True)
    nuevomodeloreporte = models.BooleanField(default=False)

    def __str__(self):
        return self.nombre+" - "+str(self.persona)

    def esta_abierta(self):
        """Indica si esta caja esta abierta en este momento"""
        return SesionCaja.objects.filter(caja=self, abierta=True).exists()

    def sesion_caja(self):
        """Retorna la sesion caja abierta en este momento"""
        return SesionCaja.objects.filter(caja=self, abierta=True).get() if SesionCaja.objects.filter(caja=self, abierta=True).exists() else None

    class Meta:
        verbose_name = "Lugar de Recaudacion"
        verbose_name_plural = "Lugares de Recaudacion"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(LugarRecaudacion, self).save(force_insert, force_update,using, update_fields)

    def sesion_fecha(self, fecha):
        if self.sesioncaja_set.filter(fecha=fecha).exists():
            return self.sesioncaja_set.filter(fecha=fecha)
        return None

    def sesiones_fechas(self, inicio, fin):
        if self.sesioncaja_set.filter(fecha__gte=inicio, fecha__lte=fin).exists():
            return self.sesioncaja_set.filter(fecha__gte=inicio, fecha__lte=fin).order_by('fecha')
        return None

    @staticmethod
    def flexbox_query(q):
        return LugarRecaudacion.objects.filter(Q(nombre__contains=q))

    def flexbox_repr(self):
        return str(self.nombre)+" "+str(self.persona)

    def iprecaudacion(self):
        return IpRecaudLugar.objects.filter(lugarrecaudacion=self)

    def iprecaudexist(self,ipcliente):
        return IpRecaudLugar.objects.filter(lugarrecaudacion=self,ip__ip=ipcliente)

class ProcesadorPagoTarjeta(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Procesador Pago Tarjeta"
        verbose_name_plural = "Procesadores de Pago por Tarjeta"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(ProcesadorPagoTarjeta, self).save(force_insert, force_update,using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return ProcesadorPagoTarjeta.objects.filter(Q(nombre__contains=q))

    def flexbox_repr(self):
        return str(self.nombre)

class PrecioMatricula(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    sede = models.ForeignKey(Sede, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    precio = models.FloatField()

    def __str__(self):
        return "Precio Matricula: "+str(self.periodo)+" - "+str(self.carrera)

    class Meta:
        verbose_name = "Precio Matricula"
        verbose_name_plural = "Precios de Matriculas"

    @staticmethod
    def buscar_precio(periodo, carrera):
        try:
            return PrecioMatricula.objects.get(periodo=periodo, carrera=carrera).precio
        except :
            return 0

class Rubro(models.Model):
    fecha = models.DateField()
    valor = models.FloatField()
    inscripcion = models.ForeignKey(Inscripcion,blank=True, null=True, on_delete=models.CASCADE)
    fichamedica = models.ForeignKey('clinicaestetica.FichaMedica',blank=True, null=True, on_delete=models.CASCADE)
    cancelado = models.BooleanField(blank=True, null=True)
    fechavence = models.DateField()
    aplicadod = models.BooleanField(blank=True, null=True)
    tiponivelpago = models.IntegerField(blank=True, null=True)
    editable = models.BooleanField(default=True)
    nc = models.IntegerField(blank=True, null=True)

    @staticmethod
    def flexbox_query(q):
        return Rubro.objects.filter(Q(inscripcion__contains=q))

    def generado_desde_NCA_sin_nc(self):
        return self.nombre()[:3] == "NCA" #and not self.nc

    def obtener_tipo_rubro(self):
        tipoRubro = TipoOtroRubro.objects.all()
        if RubroInscripcion.objects.filter(rubro=self).exists():
            tipoRubro = tipoRubro.filter(inscripcion=True)[:1].get()
        elif RubroMatricula.objects.filter(rubro=self).exists():
            tipoRubro = tipoRubro.filter(matricula=True)[:1].get()
        elif RubroEspecieValorada.objects.filter(rubro=self).exists():
            tipoRubro = tipoRubro.filter(especie=True)[:1].get()
        elif RubroCuota.objects.filter(rubro=self).exists():
            tipoRubro = tipoRubro.filter(cuota=True)[:1].get()
        elif RubroMateria.objects.filter(rubro=self).exists():
            tipoRubro = tipoRubro.filter(materia=True)[:1].get()
        elif RubroNotaDebito.objects.filter(rubro=self).exists():
            tipoRubro = tipoRubro.filter(notadebito=True)[:1].get()
        elif RubroActividadExtraCurricular.objects.filter(rubro=self).exists():
            tipoRubro = tipoRubro.filter(notadebito=True)[:1].get()
        else:
            if RubroOtro.objects.filter(rubro=self).exists():
                tipoRubro = RubroOtro.objects.filter(rubro=self)[:1].get().tipo
            else:
                rOtro = RubroOtro(rubro=self, descripcion='OTROS RUBROS', tipo_id=TIPO_OTRO_RUBRO)
                rOtro.save()
                tipoRubro = rOtro.tipo
        return tipoRubro

    def fraude_pendiente(self):
        if self.nc and not self.cancelado:
            nc = NotaCreditoInstitucion.objects.get(pk=self.nc)
            if nc.motivonc:
                if nc.motivonc.id == 1:
                    return True
        if RubroOtro.objects.filter(rubro=self, rubro__cancelado=False, tipo__id=TIPO_OTRO_FRAUDE).exists():
            return True

    def flexbox_repr(self):
        return self.inscripcion.persona

    def es_especie(self):
        return self.rubroespecievalorada_set.exists()

    def es_notadebito(self):
        return self.rubronotadebito_set.exists()

    def es_cuota(self):

        return self.rubrocuota_set.exists()

    def es_matricula(self):
        return self.rubromatricula_set.exists()

    def tienelog(self):
        if RubroLog.objects.filter(rubro=self).exists():
            return  RubroLog.objects.filter(rubro=self).order_by('-id')[:1].get()
        return False
    def es_materia(self):
        return self.rubromateria_set.exists()

    def es_inscripcion(self):
        return self.rubroinscripcion_set.exists()

    def es_otro(self):
        return self.rubrootro_set.exists()

    def reporte_especie(self):
        try:
            return self.rubroespecievalorada_set.all()[:1].get().tipoespecie.reporte.id
        except:
            return None

    def seguimiento(self):
        if RubroSeguimiento.objects.filter(rubro=self, estado=True).exists():
            return RubroSeguimiento.objects.filter(rubro=self, estado=True)[:1].get()
        return  False

    def aplicadescuento(self,fecha):
        valor = self.valor - self.total_pagado()
        if RubroSeguimiento.objects.filter(rubro=self, estado=True).exists() and not DetalleDescuento.objects.filter(rubro=self).exists():
            rs = RubroSeguimiento.objects.filter(rubro=self, estado=True)[:1].get()
            valordescuent = rs.valordesc
            desc_categoria = 0
            desc_add = 0
            if rs.aplicadescuentocategoria:
                desc_categoria = rs.categoria.porcentaje
            if rs.aprobardescuentoadd:
                desc_add = rs.porcentajedescuentoadd
            valor2 = float(rs.valorgestionado) - float(valordescuent)
            if valordescuent>0 and valor2>0:
                return valor2, True, False, float(valordescuent), desc_categoria+desc_add
        if fecha == None or fecha == 'None':
            fecha = datetime.today().date()
        if self.inscripcion.carrera.validacionprofesional:
            return [valor,False,False,0,0]
        # OCastillo 03-12-2021 excluir descuento en inscripcion y matricula las cuotas ya tienen descuento
        if self.inscripcion.descuentoconvenio:
            return [valor,False,False,0,0]
        else:
            #OCastillo 04-10-2021 no aplica descuento por grupo que no este marcado
            if not self.inscripcion.grupo().descuento:
                return [valor,False,False,0,0]
            else:
                if self.es_matricula():
                    print((1))
                    if Matricula.objects.filter(inscripcion=self.inscripcion).order_by('-id'):
                        matricula = Matricula.objects.filter(inscripcion=self.inscripcion).order_by('-id')[:1].get()
                        if matricula.nivel.pagonivel_set.filter(tipo=0):
                            pagonivel = matricula.nivel.pagonivel_set.filter(tipo=0)[:1].get()
                            if pagonivel.valor == self.valor:
                                print(2)
                                if not self.vencido_fecha(fecha):
                                    paramdescuent = None
                                    if matricula.nivel.nivelmalla.id == NIVEL_SEMINARIO or matricula.nivel.nivelmalla.id == NIVEL_GRADUACION:
                                        print(3)
                                        if ParametroDescuento.objects.filter(matricula=True, activo=True, seminario=True).exists():
                                            paramdescuent = ParametroDescuento.objects.filter(matricula=True, activo=True, seminario=True)[:1].get()
                                            print(paramdescuent.id)
                                    else:
                                        # 28-04-2023 OCastillo aquiii funcion si afiliados estan al dia
                                        if ParametroDescuento.objects.filter(nivel=True, activo=True, seminario=False, cab=True).exists() and self.inscripcion.cab :
                                            paramdescuento = ParametroDescuento.objects.filter(nivel=True, activo=True, seminario=False, cab=True)[:1].get()
                                        elif ParametroDescuento.objects.filter(nivel=True, activo=True, seminario=False, cab=False).exists():
                                            paramdescuento = ParametroDescuento.objects.filter(nivel=True, activo=True, seminario=False, cab=False)[:1].get()
                                    #OCastillo 04-10-2021 no aplica descuento por grupo que no este marcado
                                    if  paramdescuent and matricula.nivel.grupo.descuento:
                                        valordecuent = round(((self.valor * paramdescuent.porcentaje) / 100),2)
                                        valor = valor - round(((self.valor * paramdescuent.porcentaje) / 100),2)
                                        novencido = True
                                        return [valor, True,novencido,valordecuent,paramdescuent.porcentaje]
                if self.es_cuota() or self.tipo() == 'CUOTA':
                    parametros = ParametrosPromocion.objects.filter()[:1].get()
                    if not DetalleDescuento.objects.filter(rubro=self).exists():
                        inicio = parametros.iniciodiferir
                        fin = parametros.findiferir
                        if Matricula.objects.filter(inscripcion=self.inscripcion).order_by('-id'):
                            matricula = Matricula.objects.filter(inscripcion=self.inscripcion).order_by('-id')[:1].get()
                            if matricula.nivel.pagonivel_set.all().exclude(tipo=0):
                                pagonivel = matricula.nivel.pagonivel_set.all().order_by('-id').exclude(tipo=0)[:1].get()
                                if pagonivel.valor == self.valor:
                                    if DirferidoRubro.objects.filter(inscripcion=self.inscripcion).exists():
                                        for d in DirferidoRubro.objects.filter(inscripcion=self.inscripcion):
                                            for ra in (d.rubrosactuales.replace('L', '').replace(']', '').replace('[', '')).split(','):
                                                if self.id == int(ra):
                                                    return [valor,False,False,0,0]
                                    # if self.fechavence >= inicio:

                                    if not self.vencido_fecha(fecha):
                                        paramdescuent = None
                                        if matricula.nivel.nivelmalla.id == NIVEL_SEMINARIO or matricula.nivel.nivelmalla.id == NIVEL_GRADUACION:
                                            if ParametroDescuento.objects.filter(diactual=True, activo=True, seminario=True).exists():
                                                paramdescuent = ParametroDescuento.objects.filter(diactual=True, activo=True, seminario=True)[:1].get()
                                        else:
                                            if ParametroDescuento.objects.filter(diactual=True, activo=True,seminario=False).exists():
                                                paramdescuent = ParametroDescuento.objects.filter(diactual=True,activo=True,seminario=False)[:1].get()
                                        #OCastillo 04-10-2021 no aplica descuento por grupo que no este marcado
                                        if  paramdescuent and matricula.nivel.grupo.descuento:
                                            valordecuent = round(((self.valor * paramdescuent.porcentaje) / 100),2)
                                            valor = valor - round(((self.valor * paramdescuent.porcentaje) / 100),2)
                                            novencido = True
                                            return [valor, True,novencido,valordecuent,paramdescuent.porcentaje]

                                    else:
                                        diasatra = (fecha - self.fechavence).days
                                        paramdescuent = None
                                        if matricula.nivel.nivelmalla.id == NIVEL_SEMINARIO or matricula.nivel.nivelmalla.id == NIVEL_GRADUACION:
                                            if ParametroDescuento.objects.filter(diaretras__gte=diasatra,activo=True, seminario=True).exclude(diaretras=0).exists():
                                                paramdescuent = ParametroDescuento.objects.filter(diaretras__gte=diasatra,activo=True, seminario=True).exclude(diaretras=0).order_by('diaretras')[:1].get()
                                        else:
                                            if ParametroDescuento.objects.filter(diaretras__gte=diasatra,activo=True, seminario=False).exclude(diaretras=0).exists():
                                                paramdescuent = ParametroDescuento.objects.filter(diaretras__gte=diasatra,activo=True, seminario=False).exclude(diaretras=0).order_by('diaretras')[:1].get()
                                        #OCastillo 04-10-2021 no aplica descuento por grupo que no este marcado
                                        if paramdescuent and matricula.nivel.grupo.descuento:
                                            valordecuent = round(((self.valor * paramdescuent.porcentaje) / 100),2)
                                            valor = valor - round(((self.valor * paramdescuent.porcentaje) / 100),2)
                                            return [valor, True, False,valordecuent,paramdescuent.porcentaje ]



            return [valor,False,False,0,0]
    def tiene_diferido_rubro(self):
        if DirferidoRubro.objects.filter(inscripcion=self.inscripcion).exists():
            for d in DirferidoRubro.objects.filter(inscripcion=self.inscripcion):
                for ra in d.rubrosactuales.split(","):
                    rub = ra.replace('L','').replace(']','').replace('[','')
                    if self.id == int(rub):
                        return True
        if 'DIFERIDO' in self.nombre():
            return True
        return False
    # def detalldesc(self):
    #     if DetalleRubrosBeca.objects.filter(rubro=self).exists():
    #         return DetalleRubrosBeca.objects.filter(rubro=self).aggregate(Sum('descuento'))['descuento__sum']
    #     else:
    #         return 0.00

    def tiene_descuento(self):
        if DetalleDescuento.objects.filter(rubro=self).exists():
            val = 0
            for d in DetalleDescuento.objects.filter(rubro=self):
                val = val + d.valor
            return val

        return False

    def notadebito(self):
        try:
            return self.rubronotadebito_set.all()[:1].get()
        except:
            return None
    def ultimo_pago(self):
        return  Pago.objects.filter(rubro=self).order_by('fecha')[:1].get()

    def vencido(self):
        return not self.cancelado and self.fechavence<datetime.today().date() and self.valor > 0

    def puede_eliminarse(self):
        return (not self.cancelado) and self.total_pagado()==0 and not self.rubronotadebito_set.exists()

    def verificafechaactual(self):
        #23-06-2022 OCastillo verifica la fecha del dia si es diferente estudiante podra eliminar la solicitud generada
        hoy = datetime.now().today().date()
        if self.fecha!=hoy:
            return True
        else:
            return False

    def rubrosderecho(self):
        #OCastillo 13-05-2022 si hay especie de modalidad o complexivo pagada no se puede eliminar el rubro de 50
        respuesta=False
        if RubroOtro.objects.filter(Q(rubro=self,tipo__id=TIPO_OTRO_RUBRO,descripcion='DERECHO')|Q(rubro=self,tipo__id=TIPO_OTRO_RUBRO,descripcion='DERECHO A COMPLEXIVO'),rubro__cancelado=False).exists():
            if RubroEspecieValorada.objects.filter(rubro__inscripcion=self.inscripcion,tipoespecie__id__in=[84,85],rubro__cancelado=True).exists():
                respuesta = True
                pass
            else:
                respuesta = False
        else:
            respuesta = False
        return respuesta

    def tipo_especie(self):
        return self.rubroespecievalorada_set.all()[:1].get().tipoespecie_id if self.es_especie() else None

    def especie_valorada(self):
        return self.rubroespecievalorada_set.all()[:1].get() if self.es_especie() else None

    def tienesolicitud(self):
        #OCastillo 18-10-2022 no permitir eliminar si el rubro existe en solicitud estudiante
        respuesta=False
        if SolicitudEstudiante.objects.filter(rubro=self).exists():
            respuesta = True
        return respuesta

    def adeudado(self):
        return self.valor - self.total_pagado()

    def verifica_adeudado(self):
        return self.valor - self.verifica_total_pagado()

    def tiene_dctodobe(self):
        dcto_dobe = 0
        if DescuentoDOBE.objects.filter(rubro=self).exists():
            dcto_dobe=DescuentoDOBE.objects.get(rubro=self)
        return dcto_dobe

    def vencido_fecha(self,fecha):
        if fecha == None or fecha == 'None':
            fecha = datetime.now().date()
        return not self.cancelado and self.fechavence<fecha and self.valor > 0

    def total_adeudacuoatadesc(self):
        total = 0
        for r in Rubro.objects.filter(inscripcion=self):
            valor = r.valor - r.total_pagado()
            if r.es_matricula():
                if not r.vencido():
                    paramdescuent = None
                    if Matricula.objects.filter(inscripcion=r.inscripcion).order_by('-id').filter():
                        matricula = Matricula.objects.filter(inscripcion=r.inscripcion).order_by('-id')[:1].get()
                        if matricula.nivel.pagonivel_set.filter(tipo=0):
                            pagonivel = matricula.nivel.pagonivel_set.filter(tipo=0)[:1].get()
                            if pagonivel.valor == r.valor:
                                if matricula.nivel.nivelmalla.id == NIVEL_SEMINARIO or matricula.nivel.nivelmalla.id == NIVEL_GRADUACION:
                                    if ParametroDescuento.objects.filter(matricula=True, activo=True, seminario=True).exists():
                                        paramdescuent = ParametroDescuento.objects.filter(matricula=True, activo=True,
                                                                                          seminario=True)[:1].get()
                                else:
                                    if ParametroDescuento.objects.filter(matricula=True, activo=True, seminario=False).exists():
                                        paramdescuent = ParametroDescuento.objects.filter(matricula=True, activo=True,
                                                                                          seminario=False)[:1].get()
                                if paramdescuent:
                                    valor = valor - round(((r.valor * paramdescuent.porcentaje) / 100),2)
            if r.es_cuota() or r.tipo() == 'CUOTA':
                print(6)
                parametros = ParametrosPromocion.objects.filter()[:1].get()
                if not r.inscripcion.tiene_promocion() and r.inscripcion.promocion or not r.inscripcion.promocion:
                    if not DetalleDescuento.objects.filter(rubro=r).exists():
                        # inicio = datetime(int(INICIO_DIFERIR.split('-')[0]), int(INICIO_DIFERIR.split('-')[1]),
                        #                   int(INICIO_DIFERIR.split('-')[2]))
                        inicio = parametros.iniciodiferir
                        fin =  parametros.findiferir
                        # fin = datetime(int(FIN_DIFERIR.split('-')[0]), int(FIN_DIFERIR.split('-')[1]),
                        #                int(FIN_DIFERIR.split('-')[2]))
                        if Matricula.objects.filter(inscripcion=r.inscripcion).order_by('-id').filter():
                            matricula = Matricula.objects.filter(inscripcion=r.inscripcion).order_by('-id')[:1].get()
                            if matricula.nivel.pagonivel_set.all().exclude(tipo=0):
                                # pagonivel = matricula.nivel.pagonivel_set.all().exclude(tipo=0)[:1].get()
                                if matricula.nivel.pagonivel_set.filter(valor=r.valor).exclude(tipo=0).exists():
                                    diferido = False
                                    print(7)
                                    if DirferidoRubro.objects.filter(inscripcion=self).exists():
                                        for d in DirferidoRubro.objects.filter(inscripcion=self):
                                            for ra in (d.rubrosactuales.replace('L', '').replace(']', '').replace('[', '')).split(','):
                                                if self.id == int(ra):
                                                    diferido = True
                                    if not diferido:
                                        if not r.vencido():
                                            paramdescuent = None
                                            if matricula.nivel.nivelmalla.id == NIVEL_SEMINARIO or matricula.nivel.nivelmalla.id == NIVEL_GRADUACION:
                                                if ParametroDescuento.objects.filter(diactual=True, activo=True,seminario=True).exists():
                                                    paramdescuent = ParametroDescuento.objects.filter(diactual=True,activo=True,seminario=True)[:1].get()
                                            else:
                                                if ParametroDescuento.objects.filter(diactual=True, activo=True, seminario=False).exists():
                                                    paramdescuent = ParametroDescuento.objects.filter(diactual=True,activo=True, seminario=False)[:1].get()
                                            if paramdescuent:
                                                valor = valor - round(((r.valor * paramdescuent.porcentaje) / 100)),2
                                        else:
                                            diasatra = (datetime.today().date() - r.fechavence).days
                                            paramdescuent = None
                                            if matricula.nivel.nivelmalla.id == NIVEL_SEMINARIO or matricula.nivel.nivelmalla.id == NIVEL_GRADUACION:
                                                if ParametroDescuento.objects.filter(diaretras__gte=diasatra,activo=True,seminario=True).exclude(diaretras=0).exists():
                                                    paramdescuent = ParametroDescuento.objects.filter(diaretras__gte=diasatra,activo=True, seminario=True).exclude(diaretras=0)[:1].get()
                                            else:
                                                if ParametroDescuento.objects.filter(diaretras__gte=diasatra,activo=True,seminario=False).exclude(diaretras=0).exists():
                                                    paramdescuent = ParametroDescuento.objects.filter(diaretras__gte=diasatra,activo=True, seminario=False).exclude(diaretras=0)[:1].get()
                                            if paramdescuent:
                                                valor = valor - round(((r.valor * paramdescuent.porcentaje) / 100),2)
            total = total + valor
        return total
    def calculadescuento(self,idrubros,fecha):
        # print('0entro')
        rubselec = self
        if RubroSeguimiento.objects.filter(rubro=self, estado=True).exists() and not DetalleDescuento.objects.filter(rubro=self, valor__gt=0).exists():
            rs = RubroSeguimiento.objects.filter(rubro=self, estado=True)[:1].get()
            valordescuent = rs.valordesc
            desc_categoria = 0
            desc_add = 0
            if rs.aplicadescuentocategoria:
                desc_categoria = rs.categoria.porcentaje
            if rs.aprobardescuentoadd:
                desc_add = rs.porcentajedescuentoadd
            valor2 = float(rs.valorgestionado) - float(valordescuent)
            # valor2 = float(self.valor - self.total_pagado()) - float(valordescuent)
            if valordescuent>0 and valor2>0:
                return valor2, True, float(valordescuent), desc_categoria+desc_add
        if fecha == None or fecha == 'None':
            fecha = datetime.now().date()
        idnivel = RubroCuota.objects.filter(rubro__id__in=idrubros).values('matricula__nivel').distinct(
            'matricula__nivel')
        valor = rubselec.valor - rubselec.total_pagado()
        idrub = ''
        for n in Nivel.objects.filter(id__in=idnivel):
            nivcuota = PagoNivel.objects.filter(nivel=n).exclude(tipo=0).exclude(valor=0)
            print(nivcuota.count())
            rubrocuot = RubroCuota.objects.filter(rubro__id__in=idrubros, matricula__nivel=n, rubro__fechavence__gte=fecha)
            print(rubrocuot.count())
            if nivcuota.count() == rubrocuot.count():
                paramdescuento = ''
                print(5)
                if n.nivelmalla.id == NIVEL_SEMINARIO or n.nivelmalla.id == NIVEL_GRADUACION:
                    if ParametroDescuento.objects.filter(nivel=True, activo=True,seminario=True).exists():
                        paramdescuento = ParametroDescuento.objects.filter(nivel=True, activo=True,seminario=True)[:1].get()
                else:
                    if ParametroDescuento.objects.filter(nivel=True, activo=True, seminario=False, cab=True).exists() and self.inscripcion.cab:
                        paramdescuento = ParametroDescuento.objects.filter(nivel=True, activo=True, seminario=False, cab=True)[:1].get()
                    elif ParametroDescuento.objects.filter(nivel=True, activo=True, seminario=False, cab=False).exists():
                        paramdescuento = ParametroDescuento.objects.filter(nivel=True, activo=True, seminario=False, cab=False)[:1].get()
                if paramdescuento:
                    if rubrocuot.filter(rubro=rubselec).exists() or paramdescuento.incluyematricula and rubselec.es_matricula():
                        valordescuent = round(((rubselec.valor * paramdescuento.porcentaje) / 100),2)
                        valor = valor - round(((rubselec.valor * paramdescuento.porcentaje) / 100),2)
                        return valor, True, valordescuent, paramdescuento.porcentaje
                    else:
                        sustit = str(list((rubrocuot.values_list('rubro__id')))).replace('[(', '').replace(',), (',',').replace(',)]', '')
                        idrub += sustit
        if idrub:
            idrub = idrub.split(',')
        else:
            idrub = []

        rubrosmatr = RubroMatricula.objects.filter(id__in=idrubros, rubro__fechavence__gte=fecha).exclude(id__in=idrub).values('rubro')
        rubrosnoven = Rubro.objects.filter(id__in=idrubros, fechavence__gte=fecha).exclude(id__in=idrub).exclude(id__in=rubrosmatr)
        if ParametroDescuento.objects.filter(cuotas__lte=rubrosnoven.count(), activo=True).exclude(cuotas=0).exists():
            paramdescuento = ParametroDescuento.objects.filter(cuotas__lte=rubrosnoven.count(), activo=True).exclude(
                cuotas=0).order_by('-cuotas')[:1].get()
            if rubrosnoven.filter(id=rubselec.id).exists():
                valordescuent = round(((rubselec.valor * paramdescuento.porcentaje) / 100),2)
                valor = valor - round(((rubselec.valor * paramdescuento.porcentaje) / 100),2)
                return valor, True, valordescuent, paramdescuento.porcentaje
        return rubselec.aplicadescuento(fecha)[0], False, rubselec.aplicadescuento(fecha)[3], rubselec.aplicadescuento(fecha)[4]

    # def aplicadescuento(self):
    #     des = self.valor
    #     valor = self.valor - self.total_pagado()
    #     if not self.inscripcion.carrera.validacionprofesional:
    #         if self.puede_aplicar_desc() :
    #             return valor - ((des * PORCENTAJE_DESCUENTO)/100)
    #
    #         if self.aplica_descuento15() :
    #             return valor - ((des * PORCENTAJE_DESCUENTO15)/100)
    #     return valor

    def aplica20descuento(self):
        des = self.valor
        valor = self.valor - self.total_pagado()
        if  not self.inscripcion.carrera.validacionprofesional:
            if self.puedeaplica20descuento():
                return valor - ((des * PORCENTAJE_DESC_CUOTAS)/100)

            if self.puede_aplicar_desc():
                return valor - ((des * PORCENTAJE_DESCUENTO)/100)

            if self.aplica_descuento15():
                return valor - ((des * PORCENTAJE_DESCUENTO15)/100)

        return valor

    def puedeaplica20descuento(self):
        if self.inscripcion.matricula_set.filter().exists() and not self.inscripcion.carrera.validacionprofesional and HABILITA_APLICA_DESCUE :
            matricula = self.inscripcion.matricula_set.filter().order_by('-id')[:1].get()
            if matricula.nivel.pagonivel_set.all().exclude(tipo=0):
                if not self.vencido():
                    # rubrocro = matricula.nivel.pagonivel_set.all().exclude(tipo=0)[:1].get()
                    if (self.es_cuota() or self.tipo() == 'CUOTA') and matricula.nivel.pagonivel_set.filter(valor=self.valor).exclude(tipo=0).exists() :
                        if not self.inscripcion.tiene_promocion() and  self.inscripcion.promocion or not  self.inscripcion.promocion :
                            if DirferidoRubro.objects.filter(inscripcion=self.inscripcion).exists():
                                for d in DirferidoRubro.objects.filter(inscripcion=self.inscripcion):
                                    for ra in d.rubrosactuales.split(","):
                                        rub = ra.replace('L','').replace(']','').replace('[','')
                                        if self.id == int(rub):
                                            return False
                            if 'DIFERIDO' in self.nombre():
                                return False
                            return True
        return False



    def puede_aplicar_desc(self):
        pro = 0
        parametros = ParametrosPromocion.objects.filter()[:1].get()
        if HABILITA_APLICA_DESCUE and not self.inscripcion.carrera.validacionprofesional:
            inicio = parametros.iniciodiferir
            # inicio = date(INICIO_DIFERIR[0],INICIO_DIFERIR[1],INICIO_DIFERIR[2])
            fin = parametros.findiferir
            # fin = date(FIN_DIFERIR[0],FIN_DIFERIR[1],FIN_DIFERIR[2])
            if self.fechavence >= inicio and self.fechavence <= fin:
                if (self.es_cuota() or self.tipo() == 'CUOTA') :
                    if not self.inscripcion.tiene_promocion() and  self.inscripcion.promocion or not  self.inscripcion.promocion :
                        if DirferidoRubro.objects.filter(inscripcion=self.inscripcion).exists():
                            for d in  DirferidoRubro.objects.filter(inscripcion=self.inscripcion):
                                for ra in d.rubrosactuales.split(","):
                                    rub = ra.replace('L','').replace(']','').replace('[','')
                                    if self.id == int(rub):
                                        return False
                        if 'DIFERIDO' in self.nombre():
                            return False
                        if self.inscripcion.matricula_set.filter().exists():
                            matricula = self.inscripcion.matricula_set.filter().order_by('-id')[:1].get()
                            if matricula.nivel.pagonivel_set.all().exclude(tipo=0):
                                # rubro = matricula.nivel.pagonivel_set.all().exclude(tipo=0)[:1].get()
                                if matricula.nivel.pagonivel_set.filter(valor=self.valor).exclude(tipo=0).exists():
                                    return  True
                                else:
                                    return  False

                # else:
                #     if self.es_matricula():
                #         inicio = date(INICIO_DIFERIR[0],INICIO_DIFERIR[1],INICIO_DIFERIR[2])
                #         finmatricula = date(datetime.now().date().year,datetime.now().date().month,1)  - timedelta(1)
                #         if self.fechavence >= inicio and self.fechavence <= finmatricula:
                #             if RubroMatricula.objects.filter(rubro=self).exists():
                #                 mat = RubroMatricula.objects.filter(rubro=self)[:1].get()
                #                 if mat.matricula.nivel.nivelmalla.id != NIVEL_MALLA_UNO:
                #                     if PagoNivel.objects.filter(tipo=0,nivel=mat.matricula.nivel).exists():
                #                         rubro = PagoNivel.objects.filter(tipo=0,nivel=mat.matricula.nivel)[:1].get()
                #                         if rubro.valor == self.valor:
                #                             return  True
                #         return False

        return False
    def aplica_descuento15(self):
        if HABILITA_APLICA_DESCUE and not self.inscripcion.carrera.validacionprofesional:
            fecha = datetime.now().date()
            fechav = date(fecha.year,fecha.month,1)
            if self.fechavence >= fechav :
                # if self.fechavence.month >= fecha.month and self.fechavence.year >= fecha.year :
                if self.es_cuota() or self.tipo() == 'CUOTA':
                    if not self.inscripcion.tiene_promocion() and  self.inscripcion.promocion or not  self.inscripcion.promocion :
                        if DirferidoRubro.objects.filter(inscripcion=self.inscripcion).exists():
                            for d in DirferidoRubro.objects.filter(inscripcion=self.inscripcion):
                                for ra in d.rubrosactuales.split(","):
                                    rub = ra.replace('L','').replace(']','').replace('[','')
                                    if self.id == int(rub):
                                        return False
                        if 'DIFERIDO' in self.nombre():
                            return False
                        if self.inscripcion.matricula_set.filter().exists():
                            matricula = self.inscripcion.matricula_set.filter().order_by('-id')[:1].get()
                            if matricula.nivel.pagonivel_set.all().exclude(tipo=0):
                                # rubro = matricula.nivel.pagonivel_set.all().exclude(tipo=0)[:1].get()
                                if matricula.nivel.pagonivel_set.filter(valor=self.valor).exclude(tipo=0).exists():
                                    return  True
                                else:
                                    return  False

    def pago_nota_credito_inst(self):
        for p in self.pago_set.all():
            if p.es_notacreditoinst():
                return p
        return None

    def pagos_nc(self):
        if PagoNotaCreditoInstitucion.objects.filter(pagos__rubro=self).exists():
            return PagoNotaCreditoInstitucion.objects.filter(pagos__rubro=self)
        return None

    def mail_editrubro(self, user,valor,motivo,autoriza):
        if TipoIncidencia.objects.filter(pk=INCIDENCIA_SEGUIMIENTO_RUBRO).exists():
            tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_SEGUIMIENTO_RUBRO)
            if Coordinacion.objects.filter(carrera=self.inscripcion.carrera).exists():
                coor = Coordinacion.objects.filter(carrera=self.inscripcion.carrera)[:1].get()
                correo=  tipo.correo + ',' + str(coor.correo)
                hoy = datetime.now().today()
                contenido = "Rubro Modificado:"
                send_html_mail("Rubro Modificado",
                               "emails/editrubro.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user, 'valor':valor, 'motivo':motivo,'autoriza':autoriza},correo.split(","))

    def mail_editfecha(self, user,fecha,motivo,autoriza):
        if TipoIncidencia.objects.filter(pk=INCIDENCIA_SEGUIMIENTO_RUBRO).exists():
            tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_SEGUIMIENTO_RUBRO)
            hoy = datetime.now().today()
            if Coordinacion.objects.filter(carrera=self.inscripcion.carrera).exists():
                coor = Coordinacion.objects.filter(carrera=self.inscripcion.carrera)[:1].get()
                correo=  tipo.correo + ',' + str(coor.correo)
                contenido = "Fecha Rubro Modificada:"
                send_html_mail("Fecha Rubro Modificada",
                               "emails/editfecha.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user, 'fechaant':fecha,'motivo':motivo,'autoriza':autoriza},correo.split(","))

    def mail_delrubro(self, user,motivo,autoriza,ip):
        if TipoIncidencia.objects.filter(pk=INCIDENCIA_SEGUIMIENTO_RUBRO).exists():
            tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_SEGUIMIENTO_RUBRO)
            hoy = datetime.now().today()
            if Coordinacion.objects.filter(carrera=self.inscripcion.carrera).exists():
                coor = Coordinacion.objects.filter(carrera=self.inscripcion.carrera)[:1].get()
                correo=  tipo.correo + ',' + str(coor.correo)
                contenido = "Rubro Eliminado"
                send_html_mail("Rubro Eliminado",
                               "emails/eliminarubro.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user, 'motivo':motivo,'autoriza':autoriza,'ip':ip},correo.split(","))

    def total_pagado(self):
        sum = Pago.objects.filter(rubro=self).aggregate(Sum('valor'))
        return sum['valor__sum'] if sum['valor__sum'] else 0

    def total_pagado_sin_nc(self):
        pagos= Pago.objects.filter(rubro=self).values('id')
        f = Factura.objects.filter(pagos__id__in=pagos).values('id')
        factncid = NotaCreditoInstitucion.objects.filter(factura__id__in=f).values('factura')
        factnc=Factura.objects.filter(id__in=factncid,pagos__rubro=self).values('pagos')
        n = Pago.objects.filter(id__in=factnc).aggregate(Sum('valor'))
        suma = n['valor__sum'] if n['valor__sum'] else 0
        return self.total_pagado() - suma

    def verifica_total_pagado(self):
        totalpagdo = self.total_pagado()
        if totalpagdo > self.valor:
            return self.total_pagado_sin_nc()
        else:
            return totalpagdo

    def chequea_cancelacion(self):
        self.cancelado = self.total_pagado()>=self.valor
        self.save()
        self.inscripcion.actualiza_estadistica() #Actualizar las deudas y creditos InscripcionEstadistica

    def donacion_aplicada(self):
        if self.donacionrubros_set.exists():
            return self.donacionrubros_set.all()[:1].get()
        return None

    def donaciones(self):
        return self.donacionrubros_set.all()

    def nivel(self):
        try:
            return self.inscripcion.matricula().nivel.nivelmalla
        except:
            return ""

    def tipo(self):
        if self.rubroinscripcion_set.exists():
            return "INSCRIPCION"
        elif self.rubromatricula_set.exists():
            return "MATRICULA"
        elif self.rubromateria_set.exists():
            return "MATERIA"
        elif self.rubroactividadextracurricular_set.exists():
            return "ACTIVIDAD EXTRA-CURRICULAR"
        elif self.rubroespecievalorada_set.exists():
            return "ESPECIE" # +self.rubroespecievalorada_set.all()[:1].get().tipoespecie.nombre
        elif self.rubrocuota_set.exists():
            return "CUOTA"
        elif self.rubrootro_set.exists():
            return self.rubrootro_set.all()[:1].get().tipo.nombre
        elif self.rubronotadebito_set.exists():
            return "NOTA DE DEBITO"
        elif self.rubroplan12materias_set.exists():
            return "PLAN12"
        else:
            return "OTRO"

    def nombre(self):
        if self.rubroinscripcion_set.exists():
            # return "INSC: "+str(self.inscripcion)
            return "ADM: "+str(self.inscripcion)
        elif self.rubrocuota_set.exists():
            return "CUOTA #"+str(self.rubrocuota_set.get().cuota)+" "+self.rubrocuota_set.get().nombre_corto()
        if self.rubromatricula_set.exists():
            return "MATRICULA: "+self.rubromatricula_set.get().nombre_corto()
        elif self.rubroactividadextracurricular_set.exists():
            return "Actividad Extra-Curricular "+self.rubroactividadextracurricular_set.get().actividad.nombre
        elif self.rubromateria_set.exists():
            return "MATERIA: "+str(self.rubromateria_set.get().materiaasignada.materia.asignatura)
        elif self.rubroespecievalorada_set.exists():
            return str(self.rubroespecievalorada_set.all()[:1].get())
        elif self.rubronotadebito_set.exists():
            return str(self.rubronotadebito_set.all()[:1].get())
        elif self.rubroplan12materias_set.exists():
            return str(self.rubroplan12materias_set.all()[:1].get())
        else:
            return self.rubrootro_set.all()[:1].get().descripcion.replace("\n",' ').replace("\r",' ') if self.rubrootro_set.exists() else "OTROS RUBROS"

    def nombre_corto(self):
        if self.rubroinscripcion_set.exists():
            return "ADM:"
        elif self.rubrocuota_set.exists():
            return "CUOTA #"+str(self.rubrocuota_set.get().cuota)
        if self.rubromatricula_set.exists():
            return "MATRICULA"
        elif self.rubroactividadextracurricular_set.exists():
            return "EXTRA-CURR."
        elif self.rubromateria_set.exists():
            return "MATERIA"
        elif self.rubroespecievalorada_set.exists():
            return (str(self.rubroespecievalorada_set.all()[:1].get()))[:10]
        elif self.rubronotadebito_set.exists():
            return (str(self.rubronotadebito_set.all()[:1].get()))[:10]
        elif self.rubroplan12materias_set.exists():
            return (str(self.rubroplan12materias_set.all()[:1].get()))[:10]
        else:
            return self.rubrootro_set.all()[:1].get().descripcion.replace("\n",' ').replace("\r",' ') if self.rubrootro_set.exists() else ""

    def suma_pagos(self, idfactura):
        factura = Factura.objects.get(pk=idfactura)
        if factura.pagos.filter(rubro=self).exists():
            # return ((factura.pagos.filter(rubro=self).aggregate(Sum('valor'))['valor__sum']) + self.suma_descuentos(factura.id))
            return factura.pagos.filter(rubro=self).aggregate(Sum('valor'))['valor__sum']
        return 0

    def suma_descuentos(self, idfactura):
        factura = Factura.objects.get(pk=idfactura)
        if DetalleDescuento.objects.filter(rubro=self).exists():
            return DetalleDescuento.objects.filter(rubro=self).aggregate(Sum('valor'))['valor__sum']
        return 0

    def total_factura(self, idfactura):
        return self.suma_pagos(idfactura) - self.suma_descuentos(idfactura)

    def dias_vencidos(self):
        fechavencimiento = self.fechavence
        diasvencido = (datetime.now().date()- fechavencimiento).days
        return  diasvencido

    def dias_vencidos_fecha(self,fecha):
        if fecha == None or fecha == 'None':
            fecha = datetime.now().date()
        fechavencimiento = self.fechavence
        diasvencido = (fecha- fechavencimiento).days
        return  diasvencido

    def diasvencimiento(self):
        hoy = datetime.now().date()
        fechavencimiento = self.fechavence
        diasvencido = (datetime.now().date() - fechavencimiento).days
        if CategoriaRubro.objects.filter(numdiasmaximo__gte=diasvencido,numdiasminimo__lte=diasvencido, estado=True).exists():
            return CategoriaRubro.objects.filter(numdiasmaximo__gte=diasvencido,numdiasminimo__lte=diasvencido, estado=True)[:1].get()

    def diasvencimiento2(self):
        fechavencimiento = self.fechavence
        diasvencido = (datetime.now().date()- fechavencimiento).days
        if diasvencido<=0:
            return "A1"
        elif diasvencido>=1 and diasvencido<=8 :
            return "A2"
        elif diasvencido>=9 and diasvencido<=15 :
            return "A3"
        elif diasvencido>=16 and diasvencido<=30 :
            return "B1"
        elif diasvencido>=31 and diasvencido<=45 :
            return "B2"
        elif diasvencido>=46 and diasvencido<=70 :
            return "C1"
        elif diasvencido>=71 and diasvencido<=90 :
            return "C2"
        elif diasvencido>=91 and diasvencido<=120 :
            return "D"
        elif diasvencido>120 :
            return "E"

    def __str__(self):
        # if self.detalldesc():
        #     return "Rubro "+self.nombre()+" $"+str(self.valor) + " + Desc." +str(self.detalldesc())
        # else:
        return "Rubro "+self.nombre()+" $"+str(self.valor)

    class Meta:
        verbose_name = "Rubro de Cobro"
        verbose_name_plural = "Rubros de Cobro"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.valor = round((self.valor),2)
        super(Rubro, self).save(force_insert=force_insert, force_update=force_update, using=using, update_fields=update_fields)


class TipoEspecieValorada(models.Model):
    nombre = models.CharField(max_length=50)
    es_especie = models.BooleanField(default=False)
    precio = models.FloatField(null=True, blank=True)
    reporte = models.ForeignKey(Reporte,  null=True, blank=True, on_delete=models.CASCADE)
    destinatario = models.CharField(max_length=100, null=True, blank=True)
    cargo = models.CharField(max_length=100, null=True, blank=True)
    certificado = models.ForeignKey(Reporte, related_name='certificado',  null=True, blank=True, on_delete=models.CASCADE)
    tienegestion = models.BooleanField(default=False, verbose_name='Tiene Gestion')
    relaciodocente = models.BooleanField(default=False, verbose_name='Relaciona Docente')
    relacionaasig = models.BooleanField(default=False, verbose_name='Relaciona Asignatura')
    tieneaprobacion = models.BooleanField(default=False, verbose_name='Tiene Aprobacion Docente')
    coordinadores = models.BooleanField(default=False, verbose_name='Gestiona Coordinador')
    tiposolicitud = models.ForeignKey(TipoSolicitudSecretariaDocente, null=True, blank=True, on_delete=models.CASCADE)
    activa = models.BooleanField(default=True)
    informacion = models.CharField(max_length=800,blank=True,null=True)

    def __str__(self):
        if  (self.precio):
            return "Precio: $"+str(self.precio)+" - "+self.nombre
        else:
            return self.nombre

    class Meta:
        verbose_name = "Tipo Especie Valorada"
        verbose_name_plural = "Tipos de Especies Valoradas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        self.informacion = self.informacion.upper().strip() if self.informacion else ''
        super(TipoEspecieValorada, self).save(force_insert=force_insert, force_update=force_update, using=using, update_fields=update_fields)

class TipoEstadoSolicitudBeca(models.Model):
    nombre = models.CharField(max_length= 100)
    estado = models.BooleanField(default= True)

    class Meta():
        verbose_name= "Tipo Estado Beca"
        verbose_name_plural = "Tipos Estado Becas"

class SolicitudBeca(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=400, null=True,blank= True)
    nivel = models.ForeignKey(Nivel,null=True,blank= True, on_delete=models.CASCADE)
    puntaje = models.FloatField()
    fecha = models.DateTimeField(blank=True, null=True)
    aprobado = models.BooleanField(default=False)
    observacion = models.CharField(max_length=400, null=True,blank= True)
    fechaproces = models.DateTimeField(blank=True, null=True)
    usuario = models.ForeignKey(User,blank=True, null=True, on_delete=models.CASCADE)
    serieespecie = models.IntegerField(null=True, blank=True)
    codigoespecie = models.CharField(max_length=6,null=True, blank=True)
    obsespecie = models.CharField(max_length=300,null=True, blank=True)
    fechaespecie = models.DateTimeField(blank=True, null=True)
    f_registroespe = models.DateTimeField(blank=True, null=True)
    usrregistroespe = models.ForeignKey(User,related_name='usr_registroespe',null=True, blank=True, on_delete=models.CASCADE)
    fechaenviocorreo = models.DateTimeField(blank=True, null=True)
    usuarioenviocorreo = models.ForeignKey(User,related_name='usr_registroenviocorreo',blank=True, null=True, on_delete=models.CASCADE)
    estadosolicitud=models.ForeignKey(TipoEstadoSolicitudBeca,null=True,blank= True, on_delete=models.CASCADE)
    tiposolicitud=models.IntegerField(default=1)
    renovarbeca=models.BooleanField(default=False)
    fecharenovacion = models.DateTimeField(blank=True, null=True)
    estadoverificaciondoc=models.BooleanField(default=False)
    eliminado=models.BooleanField(default=False)
    aprobacionestudiante=models.BooleanField(default=False)
    asignaciontarficadescuento=models.BooleanField(default=False)
    envioanalisis=models.BooleanField(default=False)
    aprobadoetnia=models.BooleanField(default=False)
    autorizacioneliminarcrisfe=models.BooleanField(default=False)
    idgestion=models.IntegerField(default=0)


    def __str__(self):
        return str(self.inscripcion)

    class Meta:
        verbose_name = "Solicitud de Beca"
        verbose_name_plural = "Solicitud de Becas"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.motivo = self.motivo.upper().strip() if self.motivo else ''
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        super(SolicitudBeca, self).save(force_insert,force_update,using, update_fields)

    def mail_aprobacionbeca(self,contenido,user):
        correo=''
        if TipoIncidencia.objects.filter(pk=65).exists():
            tipo = TipoIncidencia.objects.filter(pk=65)[:1].get()
            correo = tipo.correo

        if self.inscripcion.persona.email1:
            lista = str(self.inscripcion.persona.emailinst+','+self.inscripcion.persona.email1+','+str(correo))
        else:
            lista = str(self.inscripcion.persona.emailinst+','+str(correo))
        hoy = datetime.now().today()
        contenido = contenido
        send_html_mail(contenido,
                       "emails/correo_aprobacionbeca.html", {'solicitudbeca': self, 'fecha': hoy,'user':user,'contenido': contenido},lista.split(','))



    def mail_aprobacionbecaalumno(self,contenido,user):
        correo=''
        if TipoIncidencia.objects.filter(pk=65).exists():
            tipo = TipoIncidencia.objects.filter(pk=65)[:1].get()
            correo = tipo.correo

        if self.inscripcion.persona.email1:
            lista = str(self.inscripcion.persona.emailinst+','+self.inscripcion.persona.email1+','+str(correo))
        else:
            lista = str(self.inscripcion.persona.emailinst+','+str(correo))
        hoy = datetime.now().today()
        contenido = contenido
        send_html_mail('APROBACION BECA',
                       "emails/correo_aprobacionbeca.html", {'solicitudbeca': self, 'fecha': hoy,'user':user,'contenido': contenido},lista.split(','))

    def mail_aprobacionayudafinanciera(self,contenido,user):
        correo=''
        if TipoIncidencia.objects.filter(pk=65).exists():
            tipo = TipoIncidencia.objects.filter(pk=65)[:1].get()
            correo = tipo.correo

        if self.inscripcion.persona.email1:
            lista = str(self.inscripcion.persona.emailinst+','+self.inscripcion.persona.email1+','+str(correo))

        else:
            lista = str(self.inscripcion.persona.emailinst+','+str(correo))

        hoy = datetime.now().today()
        contenido = contenido
        send_html_mail(contenido,
                       "emails/correo_aprobacionayudafinaciero.html", {'solicitudbeca': self, 'fecha': hoy,'user':user,'contenido': contenido},lista.split(','))

    def mail_aprobacionayudafinancieraalumno(self,contenido,user):
        correo=''
        if TipoIncidencia.objects.filter(pk=65).exists():
            tipo = TipoIncidencia.objects.filter(pk=65)[:1].get()
            correo = tipo.correo

        if self.inscripcion.persona.email1:
            lista = str(self.inscripcion.persona.emailinst+','+self.inscripcion.persona.email1+','+str(correo))

        else:
            lista = str(self.inscripcion.persona.emailinst+','+str(correo))

        hoy = datetime.now().today()
        contenido = contenido
        send_html_mail('APROBACION BECA',
                       "emails/correo_aprobacionayudafinaciero.html", {'solicitudbeca': self, 'fecha': hoy,'user':user,'contenido': contenido},lista.split(','))

    def verarchivoSolicitudBeca(self):
        if ArchivoSoliciBeca.objects.filter(solicitudbeca=self).exists():
            return ArchivoSoliciBeca.objects.filter(solicitudbeca=self)
        else:
            return False

class Departamento(models.Model):
    descripcion = models.CharField(max_length=300)
    controlespecies = models.BooleanField(default=True)


    def __str__(self):
        return  self.descripcion

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(Departamento, self).save(force_insert, force_update, using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return Departamento.objects.filter(descripcion__contains=q)

    def flexbox_repr(self):
        return self.descripcion

    def puede_eliminarse(self):
        return AsistenteDepartamento.objects.filter(departamento=self).exists()

    def tramitesgestionadospordpto(self,fecha,fechafin,fin):
        fechafin2 = convertir_fecha(fin)+timedelta(hours=23,minutes=59)
        tot_asistente=0
        for asistente in AsistenteDepartamento.objects.filter(departamento=self).exclude(puedereasignar=True).order_by('persona__apellido1','persona__apellido2','persona__nombres'):
            #tot_asistente+=RubroEspecieValorada.objects.filter(usrasig=asistente.persona.usuario,aplicada=True,rubro__fecha__gte=fecha,rubro__fecha__lte=fechafin,fechaasigna__lte=fechafin2,fechafinaliza__lte=fechafin2,departamento=self).count()
            tot_asistente+=SolicitudEstudiante.objects.filter(rubro__fecha__gte=fecha,rubro__fecha__lte=fechafin,rubro__rubroespecievalorada__usrasig=asistente.persona.usuario,rubro__rubroespecievalorada__fechaasigna__lte=fechafin2,rubro__rubroespecievalorada__fechafinaliza__lte=fechafin2,rubro__rubroespecievalorada__aplicada=True,rubro__rubroespecievalorada__departamento=self).count()
        return  tot_asistente

    def solfinalizadospordptofecha(self,fecha,fechafin,fin):
        tot_asistente=0
        fechafin2 = convertir_fecha(fin)+timedelta(hours=23,minutes=59)
        for asistente in AsistenteDepartamento.objects.filter(departamento=self).exclude(puedereasignar=True).order_by('persona__apellido1','persona__apellido2','persona__nombres'):
            #tot_asistente+=SolicitudSecretariaDocente.objects.filter(personaasignada=asistente.persona,fecha__gte=fecha,fecha__lte=fechafin,fechaasignacion__lte=fechafin2,fechacierre__lte=fechafin,cerrada=True).exclude(solicitudestudiante=None).count()
            tot_asistente+=SolicitudSecretariaDocente.objects.filter(Q(personaasignada=asistente.persona,fecha__gte=fecha,fecha__lte=fechafin,fechaasignacion__lte=fechafin2,fechacierre__lte=fechafin,cerrada=True,departamento=self)|Q(personaasignada=asistente.persona,fecha__gte=fecha,fecha__lte=fechafin,fechacierre__lte=fechafin,cerrada=True,departamento=self)).count()
        return tot_asistente

    def tothorastramitesxdpto(self,fechai,fechaf,fin):
        horas_totales=0
        totalhtramasistente=0
        fechaaux2=convertir_fecha(fin)+timedelta(hours=23,minutes=59)
        for asistente in AsistenteDepartamento.objects.filter(departamento=self).exclude(puedereasignar=True).order_by('persona__apellido1','persona__apellido2','persona__nombres'):
            for re in  RubroEspecieValorada.objects.filter(usrasig=asistente.persona.usuario,rubro__fecha__gte=fechai,rubro__fecha__lte=fechaf,aplicada=True,fechafinaliza__lte=fechaaux2,departamento=self).order_by('rubro__fecha','serie'):
                if re.es_online():
                    h_espera=0
                    h_espera2=0
                    if re.aplicada:
                        estadotramite='FINALIZADA'
                    else:
                        if re.autorizado:
                            estadotramite='EN PROCESO'
                        else:
                            if  re.usrautoriza:
                                estadotramite='NO APROBADA'
                            else:
                                estadotramite='EN PROCESO'
                    #if re.es_online():
                    if re.fechaasigna!=None and re.fechafinaliza!=None:
                        if re.fechafinaliza<fechaaux2 and re.fechaasigna<fechaaux2:
                            dias_espera = (re.fechafinaliza-re.fechaasigna).days
                            h_espera=(dias_espera*24)
                            segundos_espera = (re.fechafinaliza-re.fechaasigna).seconds
                            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                            if dias_espera<0:
                                h_espera=0
                            horas_totales=h_espera+h_espera2
                        elif estadotramite=='FINALIZADA' and re.fechaasigna<fechaaux2 and re.fechaasigna!=None and re.fechafinaliza<fechaaux2:
                            dias_espera = (re.fechaasigna-re.es_online().fecha).days
                            h_espera=(dias_espera*24)
                            segundos_espera = (re.fechaasigna-re.es_online().fecha).seconds
                            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                            if dias_espera<0:
                                h_espera=0
                            horas_totales=h_espera+h_espera2
                    elif re.fechaasigna==None:
                        horas_totales=0
                    elif re.fechafinaliza and re.fechaasigna==None:
                        dias_espera = (re.fechafinaliza-re.es_online().fecha).days
                        h_espera=(dias_espera*24)
                        segundos_espera = (re.fechafinaliza-re.es_online().fecha).seconds
                        h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                        if dias_espera<0:
                            h_espera=0
                        horas_totales=h_espera+h_espera2
                    else:
                        dias_espera = (datetime.now()-re.fechaasigna).days
                        h_espera=(dias_espera*24)
                        segundos_espera = (datetime.now()-re.fechaasigna).seconds
                        h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                        if dias_espera<0:
                            h_espera=0
                        horas_totales=h_espera+h_espera2
                    #else:
                    #para las especies generadas en caja
                    #    if re.fechafinaliza!=None and  re.fechaasigna!=None:
                    #        if re.fechafinaliza and re.fechaasigna<=fechaaux2:
                    #            dias_espera = (re.fechafinaliza-re.fechaasigna).days
                    #            h_espera=(dias_espera*24)
                    #            segundos_espera = (re.fechafinaliza-re.fechaasigna).seconds
                    #            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                    #            if dias_espera<0:
                    #                h_espera=0
                    #            horas_totales=h_espera+h_espera2
                    #        else:
                    #            dias_espera = (datetime.now()- re.fechaasigna).days
                    #            h_espera=(dias_espera*24)
                    #            segundos_espera = (datetime.now()- re.fechaasigna).seconds
                    #            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                    #            if dias_espera<0:
                    #                h_espera=0
                    #            horas_totales=h_espera+h_espera2
                    #    elif re.fechaasigna==None:
                    #        horas_totales=0
                    totalhtramasistente+=(h_espera+h_espera2)
        return totalhtramasistente

    def tothorassolicitudesxdpto(self,fechai,fechaf,fin):
        hoy=datetime.now()
        horas_totales=0
        totalhsolicasistente=0
        fechaaux2=convertir_fecha(fin)+timedelta(hours=23,minutes=59)
        fechaf2=convertir_fecha(fin).date()
        for asistente in AsistenteDepartamento.objects.filter(departamento=self).exclude(puedereasignar=True).order_by('persona__apellido1','persona__apellido2','persona__nombres'):
            for sol in SolicitudSecretariaDocente.objects.filter(personaasignada=asistente.persona,fecha__gte=fechai,fecha__lte=fechaf,cerrada=True,fechacierre__lte=fechaf2).exclude(solicitudestudiante=None):
                fcierre=datetime.combine(sol.fechacierre,sol.hora)
                h_espera=0
                h_espera2=0
                if sol.cerrada  and sol.fechacierre<=fechaf2:
                    if sol.fechacierre and sol.fechaasignacion and sol.fechaasignacion<=fechaaux2 and sol.fechaasignacion!=None:
                        fcierre=datetime.combine(sol.fechacierre,sol.hora)
                        dias_espera = (fcierre-sol.fechaasignacion).days
                        h_espera=(dias_espera*24)
                        segundos_espera = (fcierre-sol.fechaasignacion).seconds
                        h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                        if dias_espera<0:
                            h_espera=0
                        horas_totales=h_espera+h_espera2
                    else:
                        #cuando no tiene fecha de asignacion
                        sol_estud=SolicitudEstudiante.objects.filter(pk=sol.solicitudestudiante.id)[:1].get()
                        fcierre=datetime.combine(sol.fechacierre,sol.hora)
                        dias_espera = (fcierre-sol_estud.fecha).days
                        h_espera=(dias_espera*24)
                        segundos_espera = (fcierre-sol_estud.fecha).seconds
                        h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                        if dias_espera<0:
                            h_espera=0
                        horas_totales=h_espera+h_espera2
                else:
                    fsol=datetime.combine(sol.fecha,sol.hora)
                    dias_espera = (hoy-fsol).days
                    h_espera=(dias_espera*24)
                    segundos_espera = (hoy-fsol).seconds
                    h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                    if dias_espera<0:
                        h_espera=0
                    horas_totales=h_espera+h_espera2
                totalhsolicasistente+=(h_espera+h_espera2)
        return totalhsolicasistente

class AsistenteDepartamento(models.Model):
    departamento = models.ForeignKey(Departamento, on_delete=models.CASCADE)
    cantidad = models.IntegerField(blank=True,null=True)
    cantidadsol = models.IntegerField(blank=True,null=True)
    puedereasignar = models.BooleanField(default=False)
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    estutor = models.BooleanField(default=False)
    activo = models.BooleanField(default=True)


    def num_grupos(self):
        if NivelTutor.objects.filter(tutor=self).exists():
            return NivelTutor.objects.filter(tutor=self).count()
        else:
            return 0

    def num_grupos_activos(self):
        if NivelTutor.objects.filter(tutor=self, activo=True).exists():
            return NivelTutor.objects.filter(tutor=self, activo=True).count()
        else:
            return 0

    def gestionados(self):
        return  RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,aplicada=True).count()

    def pendientest(self):
        return RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,fechafinaliza=None).count()

    def pendientest72H(self):
        c=0
        h_espera=0
        h_espera2=0
        segundos_espera=0
        horas_totales=0
        for r in  RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,fechafinaliza=None):
            if r.fechafinaliza and r.fechaasigna:
                dias_espera = (r.fechafinaliza-r.fechaasigna).days
                h_espera=(dias_espera*24)
                segundos_espera = (r.fechafinaliza-r.fechaasigna).seconds
                h_espera2 = int(segundos_espera/3600)
                horas_totales=h_espera+h_espera2
                if horas_totales > 72:
                    c = c+1
        return c

    def pendientest72Hfecha(self,fecha,fechafin):
        #fecha = convertir_fecha(fecha)+timedelta(hours=23,minutes=59)
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        c=0
        for r in  RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,fechaasigna__gte=fecha,fechaasigna__lte=fechafin,fechafinaliza=None):
            if r.fechaasigna:
                dias_espera = (datetime.now()-r.fechaasigna).days
                h_espera=(dias_espera*24)
                segundos_espera = (datetime.now()-r.fechaasigna).seconds
                h_espera2 = int(segundos_espera/3600)
                horas_totales=h_espera+h_espera2
                if horas_totales > 72:
                    c = c+1
        return c

    def reasignadostramitesfecha(self,fecha,fechafin):
        return SeguimientoEspecie.objects.filter(Q(usuario=self.persona.usuario,fecha__gte=fecha,fecha__lte=fechafin,observacion='REASIGNACION DE DEPARTAMENTO')| Q(usuario=self.persona.usuario,fecha__gte=fecha,fecha__lte=fechafin,observacion='REASIGNACION DE USUARIO')).count()

    def reasignadossolicitudesfecha(self,fecha,fechafin):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        return IncidenciaAsignada.objects.filter(Q(usuario=self.persona.usuario,fecha__gte=fecha,fecha__lte=fechafin,observacion='REASIGNACION DE DEPARTAMENTO')| Q(usuario=self.persona.usuario,fecha__gte=fecha,fecha__lte=fechafin,observacion='REASIGNACION DE USUARIO')).count()

    def asignadas(self):
        return RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario).count()

    def gestiones(self):
        return SeguimientoEspecie.objects.filter(usuario=self.persona.usuario).exclude(observacion='REASIGNACION DE DEPARTAMENTO').exclude(observacion='REASIGNACION DE USUARIO').count()

    def gestionados72(self):
        c=0
        h_espera=0
        h_espera2=0
        segundos_espera=0
        horas_totales=0
        h_esperaseg=0
        h_espera2seg=0
        segundos_esperaseg=0
        horas_totalesseg=0
        ids = RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,aplicada=True).values('id')
        for r in  RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,aplicada=True):
            if r.fechafinaliza and r.fechaasigna:
                dias_espera = (r.fechafinaliza-r.fechaasigna).days
                h_espera=(dias_espera*24)
                segundos_espera = (r.fechafinaliza-r.fechaasigna).seconds
                h_espera2 = int(segundos_espera/3600)
                horas_totales=h_espera+h_espera2

            for seg in SeguimientoEspecie.objects.filter(Q(rubroespecie=r,asistente=self.persona.usuario,observacion='REASIGNACION DE DEPARTAMENTO')|Q(rubroespecie=r,asistente=self.persona.usuario,observacion='REASIGNACION DE USUARIO')):
                if seg.fechaasig and seg.fecha:
                    fechacierre = datetime.combine(seg.fecha, seg.hora)
                    dias_esperaseg = (fechacierre-seg.fechaasig).days
                    h_esperaseg=(dias_esperaseg*24)
                    segundos_esperaseg = (fechacierre-seg.fechaasig).seconds
                    h_espera2seg = int(segundos_esperaseg/3600)
                    horas_totalesseg = h_esperaseg+h_espera2seg

            if horas_totales + horas_totalesseg > 72:
                c = c+1
        h_esperasegtot=0
        h_espera2segtot=0
        segundos_esperasegtot=0
        horas_totalessegtot=0
        for segtot in SeguimientoEspecie.objects.filter(Q(asistente=self.persona.usuario,observacion='REASIGNACION DE DEPARTAMENTO')|Q(asistente=self.persona.usuario,observacion='REASIGNACION DE USUARIO'),rubroespecie__aplicada=True).exclude(rubroespecie__id__in=ids):
            if segtot.fechaasig and segtot.fecha:
                fechacierre = datetime.combine(segtot.fecha, segtot.hora)
                dias_esperasegtot = (fechacierre-segtot.fechaasig).days
                h_esperasegtot =(dias_esperasegtot*24)
                segundos_esperasegtot = (fechacierre-segtot.fechaasig).seconds
                h_espera2segtot = int(segundos_esperasegtot /3600)
                horas_totalessegtot = h_esperasegtot+h_espera2segtot
                if horas_totalessegtot > 72:
                    c = c+1
        return c

    def gestionadossol72(self):
        c=0
        h_espera=0
        h_espera2=0
        segundos_espera=0
        horas_totales=0
        h_esperaseg=0
        h_espera2seg=0
        segundos_esperaseg=0
        horas_totalesseg=0
        ids =  SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona,cerrada=True).exclude(solicitudestudiante=None).values('id')
        for r in  SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona,cerrada=True).exclude(solicitudestudiante=None):
            if r.fechacierre and r.fechaasignacion:
                fechacierre = datetime.combine(r.fechacierre,r.hora)
                dias_espera = (fechacierre-r.fechaasignacion).days
                h_espera=(dias_espera*24)
                segundos_espera = (fechacierre-r.fechaasignacion).seconds
                h_espera2 = int(segundos_espera/3600)
                horas_totales=h_espera+h_espera2
            for inci in IncidenciaAsignada.objects.filter(Q(solicitusecret=r,asistenteasig=self.persona.usuario,observacion='CAMBIO DE DEPARTAMENTO' )|Q(solicitusecret=r,asistenteasig=self.persona.usuario,observacion='REASIGNACION DE USUARIO' )):
                if inci.fechaasig and inci.fecha:
                    dias_esperaseg = (inci.fecha-inci.fechaasig).days
                    h_esperaseg=(dias_esperaseg*24)
                    segundos_esperaseg = (inci.fecha-inci.fechaasig).seconds
                    h_espera2seg = int(segundos_esperaseg/3600)
                    horas_totalesseg =h_esperaseg +h_espera2seg
            if horas_totales + horas_totalesseg > 72:
                c = c+1
        h_esperasegtot=0
        dias_esperasegtot=0
        h_espera2segtot=0
        segundos_esperasegtot=0
        horas_totalessegtot=0
        for inci in IncidenciaAsignada.objects.filter(Q(asistenteasig=self.persona.usuario,observacion='CAMBIO DE DEPARTAMENTO' )|Q(asistenteasig=self.persona.usuario,observacion='REASIGNACION DE USUARIO'  ),solicitusecret__cerrada=True).exclude(solicitusecret__id__in=ids):
            if inci.fechaasig and inci.fecha:
                dias_esperasegtot = (inci.fecha-inci.fechaasig).days
                h_esperasegtot=(dias_esperasegtot*24)
                segundos_esperasegtot = (inci.fecha-inci.fechaasig).seconds
                h_espera2segtot = int(segundos_esperasegtot/3600)
                horas_totalessegtot =h_esperasegtot +h_espera2segtot
                if horas_totalessegtot > 72:
                    c = c+1
        return c
        # return SeguimientoEspecie.objects.filter(usuario=self.persona.usuario).exclude(observacion='REASIGNACION DE DEPARTAMENTO').exclude(observacion='REASIGNACION DE USUARIO').count()

    def gestionessoli(self):
        return IncidenciaAsignada.objects.filter(usuario=self.persona.usuario).exclude(observacion='REASIGNACION DE USUARIO').exclude(solicitusecret__solicitudestudiante=None).count()

    def pendientestfecha(self,fecha,fechafin,general):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        if general:
            return  self.pendientest()
        return  RubroEspecieValorada.objects.filter(Q(usrasig=self.persona.usuario,fechaasigna__gte=fecha,fechaasigna__lte=fechafin,fechafinaliza__gt=fechafin,departamento=self.departamento)|Q(usrasig=self.persona.usuario,fechaasigna__gte=fecha,fechaasigna__lte=fechafin,fechafinaliza=None,departamento=self.departamento)).count()

    def asignadasfecha(self,fecha,fechafin,general):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        if general:
            return  self.asignadas()
        return  RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,fechaasigna__gte=fecha,fechaasigna__lte=fechafin,departamento=self.departamento).count()

    def pendientestsoli(self):
        return SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona,fechacierre=None).exclude(solicitudestudiante=None).count()

    def pendientestsoli72Hfecha(self,fecha,fechafin):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        hoy=datetime.now()
        c=0
        h_espera=0
        h_espera2=0
        segundos_espera=0
        horas_totales=0
        for sol in  SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona,fecha__gte=fecha,fecha__lte=fechafin,fechacierre=None).exclude(solicitudestudiante=None):
            fsol=datetime.combine(sol.fecha,sol.hora)
            dias_espera = (hoy-fsol).days
            h_espera=(dias_espera*24)

            segundos_espera = (hoy-fsol).seconds
            h_espera2 = int(segundos_espera/3600)
            horas_totales=h_espera+h_espera2
            if horas_totales > 72:
                c = c+1
        return c


    def asignadassoli(self):
        return SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona).exclude(solicitudestudiante=None).count()


    def pendientesssolifecha(self,fecha,fechafin,general):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        if general:
            return  self.pendientestsoli()
        return  SolicitudSecretariaDocente.objects.filter(Q(personaasignada=self.persona,fechaasignacion__gte=fecha,fechaasignacion__lte=fechafin,fechacierre__gt=fechafin,departamento=self.departamento)|Q(personaasignada=self.persona,fechacierre=None,fechaasignacion__gte=fecha,fechaasignacion__lte=fechafin,departamento=self.departamento)).exclude(solicitudestudiante=None).count()

    def asignadassolifecha(self,fecha,fechafin,general):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        if general:
            return  self.asignadassoli()
        return  SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona,fechaasignacion__gte=fecha,fechaasignacion__lte=fechafin).exclude(solicitudestudiante=None).count()

    def gestionesfecha(self,fecha,fechafin,general):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        if general:
            return  self.gestiones()
        #return  SeguimientoEspecie.objects.filter(usuario=self.persona.usuario,fecha__gte=fecha,fecha__lte=fechafin).exclude(observacion='REASIGNACION DE DEPARTAMENTO').exclude(observacion='REASIGNACION DE USUARIO').count()
        return RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,fecha__gte=fecha,fecha__lte=fechafin,aplicada=True).count()

    def gestionadosfecha72(self,fecha,fechafin,general):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        if general:
            return  self.gestionados72()
        else:
            c=0
            h_espera=0
            h_espera2=0
            segundos_espera=0
            horas_totales=0
            h_esperaseg=0
            h_espera2seg=0
            segundos_esperaseg=0
            horas_totalesseg=0
            ids =RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,rubro__fecha__gte=fecha,rubro__fecha__lte=fechafin,fechafinaliza__gte=fecha,fechafinaliza__lte=fechafin,fechaasigna__gte=fecha,fechaasigna__lte=fechafin,departamento=self.departamento).values('id')
            for r in  RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,rubro__fecha__gte=fecha,rubro__fecha__lte=fechafin,fechafinaliza__gte=fecha,fechafinaliza__lte=fechafin,fechaasigna__gte=fecha,fechaasigna__lte=fechafin,departamento=self.departamento):
                horas_totales=0
                if r.fechafinaliza and r.fechaasigna:
                    dias_espera = (r.fechafinaliza-r.fechaasigna).days
                    h_espera=(dias_espera*24)
                    segundos_espera = (r.fechafinaliza-r.fechaasigna).seconds
                    h_espera2 = int(segundos_espera/3600)
                    horas_totales=h_espera+h_espera2

                horas_totalesseg=0
                for seg in SeguimientoEspecie.objects.filter(Q(asistente=self.persona.usuario,observacion='REASIGNACION DE DEPARTAMENTO',rubroespecie=r)|Q(asistente=self.persona.usuario,observacion='REASIGNACION DE USUARIO',rubroespecie=r)):
                    if seg.fechaasig and seg.fecha:
                        fechacierre = datetime.combine(seg.fecha, seg.hora)
                        dias_esperaseg = (fechacierre-seg.fechaasig).days
                        h_esperaseg=(dias_esperaseg*24)
                        segundos_esperaseg = (fechacierre-seg.fechaasig).seconds
                        h_espera2seg = int(segundos_esperaseg/3600)
                        horas_totalesseg = h_esperaseg+h_espera2seg
                if horas_totales + horas_totalesseg > 72:
                    c = c+1
                    #print(r.id,self.persona.usuario.id)

            dias_esperasegtot=0
            h_esperasegtot=0
            h_espera2segtot=0
            segundos_esperasegtot=0
            horas_totalessegtot=0
            for segtot in SeguimientoEspecie.objects.filter(Q(asistente=self.persona.usuario,observacion='REASIGNACION DE DEPARTAMENTO')|Q(asistente=self.persona.usuario,observacion='REASIGNACION DE USUARIO'),fecha__gte=fecha,fecha__lte=fechafin,fechaasig__gte=fecha,fechaasig__lte=fechafin,rubroespecie__aplicada=True).exclude(rubroespecie__id__in=ids):
                if segtot.fechaasig and segtot.fecha:
                    fechacierre = datetime.combine(segtot.fecha, segtot.hora)
                    dias_esperasegtot = (fechacierre-segtot.fechaasig).days
                    h_esperasegtot =(dias_esperasegtot*24)
                    segundos_esperasegtot = (fechacierre -segtot.fechaasig).seconds
                    h_espera2segtot = int(segundos_esperasegtot /3600)
                    horas_totalessegtot = h_esperasegtot+h_espera2segtot
                    if horas_totalessegtot > 72:
                        c = c+1
                        #print(segtot.rubroespecie.id,self.persona.usuario.id)
            return c

    def gestionadossolfecha72(self,fecha,fechafin,general):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        if general:
            return  self.gestionadossol72()
        else:
            c=0
            h_espera=0
            h_espera2=0
            segundos_espera=0
            horas_totales=0
            h_esperaseg=0
            h_espera2seg=0
            segundos_esperaseg=0
            horas_totalesseg=0
            ids = SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona,fecha__gte=fecha,fecha__lte=fechafin,fechaasignacion__gte=fecha,fechaasignacion__lte=fechafin,fechacierre__gte=fecha,fechacierre__lte=fechafin,departamento=self.departamento).exclude(solicitudestudiante=None).values('id')
            for r in  SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona,fecha__gte=fecha,fecha__lte=fechafin,fechaasignacion__gte=fecha,fechaasignacion__lte=fechafin,fechacierre__gte=fecha,fechacierre__lte=fechafin,departamento=self.departamento).exclude(solicitudestudiante=None):
                horas_totales=0
                if r.fechacierre and r.fechaasignacion:
                    fechacierre = datetime.combine(r.fechacierre,r.hora)
                    dias_espera = (fechacierre-r.fechaasignacion).days
                    h_espera=(dias_espera*24)
                    segundos_espera = (fechacierre-r.fechaasignacion).seconds
                    h_espera2 = int(segundos_espera/3600)
                    horas_totales=h_espera+h_espera2
                horas_totalesseg=0
                for inci in IncidenciaAsignada.objects.filter(Q(solicitusecret=r,asistenteasig=self.persona.usuario,observacion='CAMBIO DE DEPARTAMENTO' )|Q(solicitusecret=r,asistenteasig=self.persona.usuario,observacion='REASIGNACION DE USUARIO' )):
                    if inci.fechaasig and inci.fecha:
                        dias_esperaseg = (inci.fecha-inci.fechaasig).days
                        h_esperaseg=(dias_esperaseg*24)
                        segundos_esperaseg = (inci.fecha-inci.fechaasig).seconds
                        h_espera2seg = int(segundos_esperaseg/3600)
                        horas_totalesseg =h_esperaseg +h_espera2seg
                if horas_totales + horas_totalesseg > 72:
                    #print(r.id,horas_totales,horas_totalesseg)
                    #print(r.id,r.personaasignada)
                    c = c+1
            h_esperasegtot=0
            h_espera2segtot=0
            dias_esperasegtot=0
            segundos_esperasegtot=0
            horas_totalessegtot=0
            for inci in IncidenciaAsignada.objects.filter(Q(asistenteasig=self.persona.usuario,observacion='CAMBIO DE DEPARTAMENTO',fechaasig__gte=fecha,fechaasig__lte=fechafin,fecha__gte=fecha,fecha__lte=fechafin )|Q(asistenteasig=self.persona.usuario,observacion='REASIGNACION DE USUARIO',fechaasig__gte=fecha,fechaasig__lte=fechafin,fecha__gte=fecha,fecha__lte=fechafin ,solicitusecret__cerrada=True )).exclude(solicitusecret__id__in=ids):
                if inci.fechaasig and inci.fecha:
                    dias_esperasegtot = (inci.fecha-inci.fechaasig).days
                    h_esperasegtot=(dias_esperasegtot*24)
                    segundos_esperasegtot = (inci.fecha-inci.fechaasig).seconds
                    h_espera2segtot = int(segundos_esperasegtot/3600)
                    horas_totalessegtot =h_esperasegtot +h_espera2segtot
                    if horas_totalessegtot > 72:
                        #print(inci.solicitusecret.id,inci.asistenteasig.id)
                        c = c+1
            return c
        # return  SeguimientoEspecie.objects.filter(usuario=self.persona.usuario,fecha__gte=fecha,fecha__lte=fechafin).exclude(observacion='REASIGNACION DE DEPARTAMENTO').exclude(observacion='REASIGNACION DE USUARIO').count()

    def gestionessolfecha(self,fecha,fechafin,general):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        if general:
            return  self.gestionessoli()
        return  IncidenciaAsignada.objects.filter(usuario=self.persona.usuario,fecha__gte=fecha,fecha__lte=fechafin).exclude(observacion='REASIGNACION DE USUARIO').exclude(solicitusecret__solicitudestudiante=None).count()



    def finalizadosfecha(self,fecha,fechafin,general):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        if general:
            return  self.gestionados()
        return  RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,fechafinaliza__gte=fecha,fechafinaliza__lte=fechafin,fechaasigna__gte=fecha,fechaasigna__lte=fechafin,departamento=self.departamento).count()


    def finalizadossolfecha(self,fecha,fechafin,general):
        fechafin = convertir_fecha(fechafin)+timedelta(hours=23,minutes=59)
        if general:
            return  self.solicitudes_gestionados()
        return  SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona,fechaasignacion__gte=fecha,fechaasignacion__lte=fechafin,fechacierre__gte=fecha,fechacierre__lte=fechafin).exclude(solicitudestudiante=None).count()

    def tramitesfinalizadosfecha(self,fecha,fechafin,fin):
        fechafin2 = convertir_fecha(fin)+timedelta(hours=23,minutes=59)
        return  SolicitudEstudiante.objects.filter(rubro__fecha__gte=fecha,rubro__fecha__lte=fechafin,rubro__rubroespecievalorada__usrasig=self.persona.usuario,rubro__rubroespecievalorada__fechaasigna__lte=fechafin2,rubro__rubroespecievalorada__fechafinaliza__lte=fechafin2,rubro__rubroespecievalorada__aplicada=True,rubro__rubroespecievalorada__departamento=self.departamento).count()

    def solicitudesfinalizadasfecha(self,fecha,fechafin,fin):
        fechafin2 = convertir_fecha(fin)+timedelta(hours=23,minutes=59)
        return  SolicitudSecretariaDocente.objects.filter(Q(personaasignada=self.persona,fecha__gte=fecha,fecha__lte=fechafin,fechaasignacion__lte=fechafin2,fechacierre__lte=fechafin,cerrada=True,departamento=self.departamento)|Q(personaasignada=self.persona,fecha__gte=fecha,fecha__lte=fechafin,fechacierre__lte=fechafin,cerrada=True,departamento=self.departamento)).count()

    def solicitudes_gestionados(self):
        return  SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona,cerrada=True).exclude(solicitudestudiante=None).count()

    def horastramitesatendidosfecha(self,fechai,fechaf,fin):
        horas_totales=0
        totalhtramasistente=0
        fechaaux2=convertir_fecha(fin)+timedelta(hours=23,minutes=59)
        #for solicitud in SolicitudEstudiante.objects.filter(rubro__fecha__gte=fechai,rubro__fecha__lte=fechaf).order_by('rubro__fecha'):
        for re in  RubroEspecieValorada.objects.filter(usrasig=self.persona.usuario,rubro__fecha__gte=fechai,rubro__fecha__lte=fechaf,aplicada=True,fechafinaliza__lte=fechaaux2,departamento=self.departamento).order_by('rubro__fecha','serie'):
            if re.es_online():
                h_espera=0
                h_espera2=0
                if re.aplicada:
                    estadotramite='FINALIZADA'
                else:
                    if re.autorizado:
                        estadotramite='EN PROCESO'
                    else:
                        if  re.usrautoriza:
                            estadotramite='NO APROBADA'
                        else:
                            estadotramite='EN PROCESO'
                #if re.es_online():
                if re.fechaasigna!=None and re.fechafinaliza!=None:
                    if re.fechafinaliza<fechaaux2 and re.fechaasigna<fechaaux2:
                        dias_espera = (re.fechafinaliza-re.fechaasigna).days
                        h_espera=(dias_espera*24)
                        segundos_espera = (re.fechafinaliza-re.fechaasigna).seconds
                        h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                        if dias_espera<0:
                            h_espera=0
                        horas_totales=h_espera+h_espera2
                    elif estadotramite=='FINALIZADA' and re.fechaasigna<fechaaux2 and re.fechaasigna!=None and re.fechafinaliza<fechaaux2:
                        dias_espera = (re.fechaasigna-re.es_online().fecha).days
                        h_espera=(dias_espera*24)
                        segundos_espera = (re.fechaasigna-re.es_online().fecha).seconds
                        h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                        if dias_espera<0:
                            h_espera=0
                        horas_totales=h_espera+h_espera2
                elif re.fechaasigna==None:
                    horas_totales=0
                elif re.fechafinaliza and re.fechaasigna==None:
                    dias_espera = (re.fechafinaliza-re.es_online().fecha).days
                    h_espera=(dias_espera*24)
                    segundos_espera = (re.fechafinaliza-re.es_online().fecha).seconds
                    h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                    if dias_espera<0:
                        h_espera=0
                        horas_totales=h_espera+h_espera2
                    else:
                        dias_espera = (datetime.now()-re.fechaasigna).days
                        h_espera=(dias_espera*24)
                        segundos_espera = (datetime.now()-re.fechaasigna).seconds
                        h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                        if dias_espera<0:
                            h_espera=0
                        horas_totales=h_espera+h_espera2
                #else:
                #para las especies generadas en caja
                #    if re.fechafinaliza!=None and  re.fechaasigna!=None:
                #        if re.fechafinaliza and re.fechaasigna<=fechaaux2:
                #            dias_espera = (re.fechafinaliza-re.fechaasigna).days
                #            h_espera=(dias_espera*24)
                #            segundos_espera = (re.fechafinaliza-re.fechaasigna).seconds
                #            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                #            if dias_espera<0:
                #                h_espera=0
                #            horas_totales=h_espera+h_espera2
                #        else:
                #            dias_espera = (datetime.now()- re.fechaasigna).days
                #            h_espera=(dias_espera*24)
                #            segundos_espera = (datetime.now()- re.fechaasigna).seconds
                #            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                #            if dias_espera<0:
                #                h_espera=0
                #            horas_totales=h_espera+h_espera2
                #    elif re.fechaasigna==None:
                #        horas_totales=0
                totalhtramasistente+=(h_espera+h_espera2)
        return totalhtramasistente

    def horassolicitudesatendidasfecha(self,fechai,fechaf,fin):
        hoy=datetime.now()
        horas_totales=0
        totalhsolicasistente=0
        fechaaux2=convertir_fecha(fin)+timedelta(hours=23,minutes=59)
        fechaf2=convertir_fecha(fin).date()
        for sol in SolicitudSecretariaDocente.objects.filter(personaasignada=self.persona,fecha__gte=fechai,fecha__lte=fechaf,cerrada=True,fechacierre__lte=fechaf2,departamento=self.departamento).exclude(solicitudestudiante=None):
            fcierre=datetime.combine(sol.fechacierre,sol.hora)
            h_espera=0
            h_espera2=0
            if sol.cerrada  and sol.fechacierre<=fechaf2:
                if sol.fechacierre and sol.fechaasignacion and sol.fechaasignacion<=fechaaux2 and sol.fechaasignacion!=None:
                    fcierre=datetime.combine(sol.fechacierre,sol.hora)
                    dias_espera = (fcierre-sol.fechaasignacion).days
                    h_espera=(dias_espera*24)
                    segundos_espera = (fcierre-sol.fechaasignacion).seconds
                    h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                    if dias_espera<0:
                        h_espera=0
                    horas_totales=h_espera+h_espera2
                else:
                    #cuando no tiene fecha de asignacion
                    sol_estud=SolicitudEstudiante.objects.filter(pk=sol.solicitudestudiante.id)[:1].get()
                    fcierre=datetime.combine(sol.fechacierre,sol.hora)
                    dias_espera = (fcierre-sol_estud.fecha).days
                    h_espera=(dias_espera*24)
                    segundos_espera = (fcierre-sol_estud.fecha).seconds
                    h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                    if dias_espera<0:
                        h_espera=0
                    horas_totales=h_espera+h_espera2
            else:
                fsol=datetime.combine(sol.fecha,sol.hora)
                dias_espera = (hoy-fsol).days
                h_espera=(dias_espera*24)
                segundos_espera = (hoy-fsol).seconds
                h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
                if dias_espera<0:
                    h_espera=0
                horas_totales=h_espera+h_espera2
            totalhsolicasistente+=(horas_totales)
        return totalhsolicasistente

    def horario_ingreso(self):
        if HorarioAsistenteSolicitudes.objects.filter(fecha=datetime.now().date(),usuario=self.persona.usuario).exists():
            h= HorarioAsistenteSolicitudes.objects.filter(fecha=datetime.now().date(),usuario=self.persona.usuario)[:1].get()
            if h.fechaingreso:

                return h.fechaingreso.strftime("%H:%M")
            return  '--:--'
        return  '--:--'

    def horario_actual(self):
        if HorarioAsistenteSolicitudes.objects.filter(fecha=datetime.now().date(),usuario=self.persona.usuario).exists():
            h= HorarioAsistenteSolicitudes.objects.filter(fecha=datetime.now().date(),usuario=self.persona.usuario)[:1].get()
            if h.nolabora:
                return  'NO LABORA'
            return str(h.horainicio.strftime("%H:%M")) +' - '+ str(h.horafin.strftime("%H:%M"))
        return  '--:--'


    def correo_reasignacion(self, user,especie):
        hoy = datetime.now().today()
        contenido = "TRAMITE REASIGNADO"
        send_html_mail("TRAMITE REASIGNADO",
                       "emails/reasignacion_especie.html", {'a': self, 'fecha': hoy,'usuario': user,'especie':especie ,'contenido':contenido},self.persona.emailinst.split(","))

    def correo_reasignacion_solicitud(self, user,solicitud):
        hoy = datetime.now().today()
        contenido = "TRAMITE REASIGNADO"
        send_html_mail("TRAMITE REASIGNADO",
                       "emails/reasignacion_especie_solicitud.html", {'a': self, 'fecha': hoy,'usuario': user,'solicitud':solicitud ,'contenido':contenido},self.persona.emailinst.split(","))

    def __str__(self):
        return  str(self.persona)


class RubroEspecieValorada(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    tipoespecie = models.ForeignKey(TipoEspecieValorada, on_delete=models.CASCADE)
    serie = models.IntegerField(null=True, blank=True)
    codigoe = models.CharField(max_length=6)
    observaciones = models.CharField(max_length=300)
    aplicada = models.BooleanField(default=False)
    fecha = models.DateField()
    usuario = models.ForeignKey(User,null= True, blank =True, on_delete=models.CASCADE)
    destinatario = models.CharField(max_length=100,null= True, blank =True)
    materia = models.ForeignKey(MateriaAsignada,null= True, blank =True, on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='documentos/%Y/%m/%d', max_length=200,null = True, blank= True)
    disponible = models.BooleanField(default=True)
    profesor = models.ForeignKey(Profesor,null= True, blank =True, on_delete=models.CASCADE)
    obssecretaria = models.CharField(max_length=500,null=True, blank=True)
    f_registro = models.DateField()
    usrregistro = models.ForeignKey(User, related_name='usr_registro',null=True, blank=True, on_delete=models.CASCADE)
    becasolicitud = models.ForeignKey(SolicitudBeca, on_delete=models.CASCADE)
    certificado = models.ForeignKey(Reporte,  null=True, blank=True, on_delete=models.CASCADE)
    autorizado = models.BooleanField(default=True)
    obsautorizar = models.CharField(max_length=300)
    usrautoriza = models.ForeignKey(User, related_name='usrautoriza',blank=True,null=True, on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento,null=True, blank=True, on_delete=models.CASCADE)
    usrasig = models.ForeignKey(User, related_name='usr_asig',null=True, blank=True, on_delete=models.CASCADE)
    fechaasigna=models.DateTimeField(null= True, blank =True)
    fechafinaliza=models.DateTimeField(null= True, blank =True)
    habilita = models.BooleanField(default=False)
    fechahabilita = models.DateField(null=True, blank=True)

    @staticmethod
    def flexbox_query(q):
        return [x.rubro for x in RubroEspecieValorada.objects.filter(Q(serie__contains=q))[:20]]

    def flexbox_repr(self):
        return self.numero_serie()

    def __str__(self):
        return self.tipoespecie.nombre+" #"+self.numero_serie()

    def numero_serie(self):
        return str(self.rubro.fecha.year)+str(self.serie).zfill(4)
    def usuarioautoriza(self):
        return Persona.objects.filter(usuario=self.usrautoriza)[:1].get()
    def usuarioreg(self):
        return Persona.objects.filter(usuario=self.usrregistro)[:1].get()
    def usuarioasig(self):
        return Persona.objects.filter(usuario=self.usrasig)[:1].get()
    def vencida(self):
        if self.rubro.cancelado:
            # se cambia por la fecha de asignacion
            if  self.fechaasigna:
                fechaespecie = self.fechaasigna.date()
            else:
                fechaespecie = self.rubro.fecha
            diasvalidez = (datetime.now().date()- fechaespecie).days
            return diasvalidez
    def dias_disponibles(self):
        if self.vencida() or self.vencida()==0:
            return DIAS_ESPECIE - self.vencida()

    def dptoactual(self):
        if self.departamento:
            return  self.departamento.descripcion
        else:
            if  AsistenteDepartamento.objects.filter(persona__usuario=self.usrasig).exclude(puedereasignar=True).exists():
                asistentes = AsistenteDepartamento.objects.filter(persona__usuario=self.usrasig).exclude(puedereasignar=True)[:1].get()
                return asistentes.departamento.descripcion
        return ''



    def tiene_horario(self):
        if HorarioAsistenteSolicitudes.objects.filter(fecha=datetime.now().date(),usuario=self.usrasig).exists():
            return HorarioAsistenteSolicitudes.objects.filter(fecha=datetime.now().date(),usuario=self.usrasig)[:1].get()
        return  False
    def especie_fact(self):
        if self.rubro.cancelado:
            pago = Pago.objects.filter(rubro =self.rubro)[:1].get()
            if pago.dbf_factura().fecha == date(2019, 4, 2):
                return True
            return False

    def usuarioasignado(self):
        if self.usrasig:
            if Persona.objects.filter(usuario=self.usrasig).exists():
                return Persona.objects.filter(usuario=self.usrasig)[:1].get().nombre_completo_inverso()
            return False

    def es_online(self):
        if SolicitudEstudiante.objects.filter(rubro=self.rubro,tipoe=self.tipoespecie).exists():
            return  SolicitudEstudiante.objects.filter(rubro=self.rubro,tipoe=self.tipoespecie)[:1].get()
        return False

    #OCastillo 26-04-2022 nueva funcion para rubro otro DERECHO
    def tienederecho(self):
        respuesta = False
        if self.tipoespecie.id == 84 or self.tipoespecie.id == 85:
            inscripcion=self.rubro.inscripcion
            if self.rubro.cancelado and not self.aplicada:
                for r in Rubro.objects.filter(inscripcion=inscripcion,cancelado=False):
                    if RubroOtro.objects.filter(Q(rubro=r,tipo__id=TIPO_OTRO_RUBRO,descripcion='DERECHO')|Q(rubro=r,tipo__id=TIPO_OTRO_RUBRO,descripcion='DERECHO A COMPLEXIVO')).exists():
                        return False
                        pass
                    else:
                        respuesta = False
                for r in Rubro.objects.filter(inscripcion=inscripcion,cancelado=True,fecha__gte=self.rubro.fecha):
                    if RubroOtro.objects.filter(Q(rubro=r,tipo__id=TIPO_OTRO_RUBRO,descripcion='DERECHO')|Q(rubro=r,tipo__id=TIPO_OTRO_RUBRO,descripcion='DERECHO A COMPLEXIVO')).exists():
                        return True
                        pass
                    else:
                        respuesta = False
                        pass
            else:
                respuesta = True
        else:
            respuesta = True
        return respuesta

    #OCastillo 03-08-2022 funcion para filtrar las especies de calificaiones
    def especiescalificaciones(self):
        if self.tipoespecie.id == ESPECIE_EXAMEN or self.tipoespecie.id == ESPECIE_RECUPERACION or self.tipoespecie.id == ID_TIPO_ESPECIE_REG_NOTA or self.tipoespecie.id == ESPECIE_MEJORAMIENTO:
            respuesta = True
        else:
            respuesta = False
        return respuesta

    # OCU especies que solicitan certificado
    def imprime_especies(self):
        if self.tipoespecie.id in (4,15,20,29,31,34):
            return True

    # OCU especies para examenes y lecciones atrasados
    def tipo_atrasado(self):
        if self.tipoespecie.id in (ESPECIE_EXAMEN,ESPECIE_RECUPERACION,ESPECIE_ASENTAMIENTO_NOTA,ESPECIE_MEJORAMIENTO,ID_TIPO_ESPECIE_REG_NOTA):
            return True

    # OCU especies para asentamiento de notas
    def tipo_asentamiento(self):
        if self.tipoespecie.id == ID_TIPO_ESPECIE_REG_NOTA:
            return True

    # OCU especies tipo examen atrasado
    def tipo_examen(self):
        if self.tipoespecie.id == ESPECIE_EXAMEN:
            return True

    # OCU especies tipo examen recuperacion
    def tipo_recuperacion(self):
        if self.tipoespecie.id == ESPECIE_RECUPERACION:
            return True

    # OCU especies para beca
    def tipo_beca(self):
        if self.tipoespecie.id == 9:
            return True

    def tienegestion(self):
        return  SeguimientoEspecie.objects.filter(rubroespecie=self).exists()

    def correo(self, user,rubros):
        tipo = TipoIncidencia.objects.get(pk=39)
        hoy = datetime.now().today()
        contenido = "CAMBIO DE PROGRAMACION"
        send_html_mail("REALIZADO CAMBIO DE PROGRAMACION",
                       "emails/cambio_programacion.html", {'d': self, 'fecha': hoy,'contenido': contenido,'rubros':rubros, 'user': user},tipo.correo.split(","))


    def correoasentamientonotas(self,carrera,grupo,nivel,email):
        hoy = datetime.now().today()
        correo=email
        contenido = "PAGO DE ESPECIES ASENTAMIENTO"
        asunto='ESTUDIANTES HAN REALIZADO PAGOS DE ESPECIE ASENTAMIENTO DE NOTAS'
        send_html_mail("PAGO DE ESPECIES ASENTAMIENTO",
                       "emails/correo_multadocente.html",
                       {'materia': self, 'fecha': hoy,'contenido': contenido,'asunto':asunto,'carrera':carrera,'grupo':grupo,'nivel':nivel,'op':2},correo.split(","))

    def puede_reasignar(self,persona):
        if AsistenteDepartamento.objects.filter(persona__usuario=persona.usuario,puedereasignar=True).exists():
            # dptoasi = AsistenteDepartamento.objects.filter(persona__usuario=persona.usuario,puedereasignar=True)[:1].get().departamento
            # if AsistenteDepartamento.objects.filter(persona=persona,puedereasignar=True,departamento=dptoasi).exists():
            return True
        return False

    def tienegestion_docente(self):
        if GestionTramite.objects.filter(tramite=self).exists():
            return GestionTramite.objects.filter(tramite=self)[:1].get()
        return False

    def descargar(self):
        return self.archivo.url

    def tiempoesperaestudiante(self,fecha,parametro):
        horas_totales=0
        if parametro==1:
            dias_espera = (self.fechafinaliza-fecha).days
            h_espera=(dias_espera*24)
            segundos_espera = (self.fechafinaliza-fecha).seconds
            #h_espera2 = int(segundos_espera/3600)
            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
            if dias_espera<0:
                h_espera=0
            horas_totales=h_espera+h_espera2
        elif parametro==2:
            dias_espera = (fecha-self.fechaasigna).days
            h_espera=(dias_espera*24)
            segundos_espera = (fecha-self.fechaasigna).seconds
            #h_espera2 = int(segundos_espera/3600)
            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
            if dias_espera<0:
                h_espera=0
            horas_totales=h_espera+h_espera2
        elif parametro==3:
            dias_espera = (self.fechafinaliza-fecha).days
            h_espera=(dias_espera*24)
            segundos_espera = (self.fechafinaliza-fecha).seconds
            #h_espera2 = int(segundos_espera/3600)
            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
            if dias_espera<0:
                h_espera=0
            horas_totales=h_espera+h_espera2
        elif parametro==4:
            hoy=datetime.now()
            dias_espera = (hoy-fecha).days
            h_espera=(dias_espera*24)
            segundos_espera = (hoy-fecha).seconds
            #h_espera2 = int(segundos_espera/3600)
            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
            if dias_espera<0:
                h_espera=0
            horas_totales=h_espera+h_espera2
        return horas_totales

    def existe_rubroespepractica(self):
        if SolicitudPracticas.objects.filter(rubroespecie=self,rubroespecie__aplicada=False).exists():
            if not ReportePractSolicitud.objects.filter(solicitudpractica__rubroespecie=self,reportepractica__nombre__id=ID_REPORTE_CARTA_ASIGNAC,revisado=True).exists():
                return SolicitudPracticas.objects.filter(rubroespecie=self,rubroespecie__aplicada=False)[:1].get()
        return False

    class Meta:
        verbose_name = "Rubro Especie Valorada"
        verbose_name_plural = "Rubros Especies Valoradas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if not self.id:
            self.serie = sequenciapostgr('sec_serie_especie')
        else:
            self.serie = RubroEspecieValorada.objects.get(id=self.id).serie
        if self.observaciones: self.observaciones = self.observaciones
        if self.obsautorizar: self.obsautorizar = self.obsautorizar
        super(RubroEspecieValorada, self).save(force_insert, force_update, using, update_fields)


class RubroInscripcion(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)

    def __str__(self):
        return "Rubro Inscripcion "+str(self.rubro)

    class Meta:
        verbose_name = "Rubro de Inscripcion"
        verbose_name_plural = "Rubros de Inscripciones"

class RubroCuota(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    cuota = models.IntegerField()

    def __str__(self):
        return "Rubro Cuota "+str(self.cuota)+" "+str(self.rubro)

    class Meta:
        verbose_name = "Rubro Cuota"
        verbose_name_plural = "Rubros Cuotas"


    def nombre_corto(self):
        if self.matricula.becado:
            if self.matricula.tipobeneficio_id == TIPO_AYUDA_FINANCIERA:
                return str(self.matricula.nivel.nivelmalla)+" - "+self.matricula.nivel.grupo.nombre+ " (AYUDA FINANCIERA "+ str(self.matricula.porcientobeca) + "%)"
            else:
                if self.matricula.nivel.nivelmalla:
                    return str(self.matricula.nivel.nivelmalla)+" - "+self.matricula.nivel.grupo.nombre+ " (BECA "+ str(self.matricula.porcientobeca)+ "%)"
                else:
                    return " (BECA "+ str(self.matricula.porcientobeca)+ "%)"
        else:
            if self.matricula.nivel.nivelmalla and self.matricula.nivel.grupo:
                return str(self.matricula.nivel.nivelmalla)+" - "+self.matricula.nivel.grupo.nombre
            else:
                return self.matricula.nivel.paralelo

class RubroMatricula(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)

    def __str__(self):
        return "Rubro Matricula "+str(self.matricula)+" $"+str(self.rubro.valor)

    class Meta:
        verbose_name = "Rubro de Matricula"
        verbose_name_plural = "Rubros de Matriculas"

    def nombre_corto(self):
        if self.matricula.becado:
            if self.matricula.tipobeneficio_id == TIPO_AYUDA_FINANCIERA:
                return str(self.matricula.nivel.nivelmalla)+" - "+self.matricula.nivel.grupo.nombre+ " (AYUDA FINANCIERA "+ str(self.matricula.porcientobeca) + "%)"
            else:
                return str(self.matricula.nivel.nivelmalla)+" - "+self.matricula.nivel.grupo.nombre+ " (BECA "+ str(self.matricula.porcientobeca)+ "%)"
        else:
            if self.matricula.nivel.nivelmalla and self.matricula.nivel.grupo:
                return str(self.matricula.nivel.nivelmalla)+" - "+self.matricula.nivel.grupo.nombre
            else:
                return self.matricula.nivel.paralelo

class PrecioMateria(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    precio = models.FloatField()

    def __str__(self):
        return "Precio Materia: "+str(self.periodo)+" - "+str(self.asignatura)

    class Meta:
        verbose_name = "Precio Materia"
        verbose_name_plural = "Precios de Materias"

class RubroMateria(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    materiaasignada = models.ForeignKey(MateriaAsignada, on_delete=models.CASCADE)

    def __str__(self):
        return "Rubro Materia "+str(self.materiaasignada)+" $"+str(self.rubro.valor)

    class Meta:
        verbose_name = "Rubro de Materia"
        verbose_name = "Rubros de Materias"

class TipoActividadExtraCurricular(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo de Actividad Extra-curricular"
        verbose_name_plural = "Tipos de Actividades Extra-curriculares"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoActividadExtraCurricular, self).save(force_insert, force_update,using, update_fields)


class PrecioActividadExtraCurricular(models.Model):
    tipo = models.ForeignKey(TipoActividadExtraCurricular, on_delete=models.CASCADE)
    precio = models.FloatField()
    fecha = models.DateField()

    def __str__(self):
        return "Precio Actividad Extra Cur. "+str(self.tipo)

    class Meta:
        verbose_name = "Precio Actividad Extra Curricular"
        verbose_name_plural = "Precios Actividades Extra Curriculares"


class ActividadExtraCurricular(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=100)
    tipo = models.ForeignKey(TipoActividadExtraCurricular, on_delete=models.CASCADE)
    fechainicio = models.DateField()
    fechafin = models.DateField()
    costo = models.FloatField()
    responsable = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    cupo = models.IntegerField()

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Actividad Extra-curricular"
        verbose_name_plural = "Actividades Extra-curriculares"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(ActividadExtraCurricular, self).save(force_insert, force_update,using, update_fields)


class ParticipanteActividadExtraCurricular(models.Model):
    actividad = models.ForeignKey(ActividadExtraCurricular, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    nota = models.FloatField()
    asistencia = models.FloatField()

    def __str__(self):
        return "Participante Actividad Extra Curricular "+str(self.actividad)+" - "+str(self.inscripcion)

    class Meta:
        verbose_name = "Part. Actividad Extra Curricular"
        verbose_name_plural = "Part. Actividades Extra Curriculares"


class RubroActividadExtraCurricular(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    actividad = models.ForeignKey(ActividadExtraCurricular, on_delete=models.CASCADE)

    def __str__(self):
        return "Rubro Actividad Extra Curricular "+str(self.rubro.inscripcion)+" $"+str(self.rubro.valor)

    class Meta:
        verbose_name = "Rubro Actividad Extre Curricular"
        verbose_name = "Rubros Actividades Extra Curriculares"



class TipoOtroRubro(models.Model):
    nombre = models.CharField(max_length=100)
    preciolibre = models.BooleanField(blank=True, null=True)
    # para contable
    inscripcion = models.BooleanField(default=False)
    matricula = models.BooleanField(default=False)
    cuota = models.BooleanField(default=False)
    especie = models.BooleanField(default=False)
    materia = models.BooleanField(default=False)
    extracurricular = models.BooleanField(default=False)
    notadebito = models.BooleanField(default=False)

    def __str__(self):
        return self.nombre

    @staticmethod
    def flexbox_query(q):
        return TipoOtroRubro.objects.filter(Q(nombre__contains=q))

    def flexbox_repr(self):
        return str(self.nombre)


    def precio_sugerido(self):
        try:
            precios = PrecioTipoOtroRubro.objects.filter(tipo=self).order_by('fecha')
            if precios.count()>0:
                return precios[0].precio
        except :
            pass
        return 0

    class Meta:
        verbose_name = "Tipo de Rubro (Otro)"
        verbose_name_plural = "Tipos otros Rubros"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoOtroRubro, self).save(force_insert, force_update,using, update_fields)


class PrecioTipoOtroRubro(models.Model):
    tipo = models.ForeignKey(TipoOtroRubro, on_delete=models.CASCADE)
    precio = models.FloatField()
    fecha = models.DateField()

    def __str__(self):
        return "Precio Tipo de Otro Rubro "+str(self.tipo)

    class Meta:
        verbose_name = "Precio Tipo de Otro Rubro"
        verbose_name_plural = "Precios Tipos de Otros Rubros"


class RubroOtro(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoOtroRubro, on_delete=models.CASCADE)
    descripcion = models.TextField()
    extra = models.CharField(max_length=50, blank=True, null=True)
    matricula = models.IntegerField(blank=True, null=True)

    def __str__(self):
        return "Otro Rubro "+str(self.rubro.inscripcion) + " $"+str(self.rubro.valor)

    class Meta:
        verbose_name = "Rubro (Otro)"
        verbose_name_plural = "Otros Rubros"

    @staticmethod
    def flexbox_query(q):
        return RubroOtro.objects.filter(Q(rubro__inscripcion__contains=q)|Q(rubro__tipo__nombre__contains=q))

    def flexbox_repr(self):
        return str(self.rubro)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(RubroOtro, self).save(force_insert, force_update,using, update_fields)


class SesionCaja(models.Model):
    """Almacena cada sesion de recaudacion en caja realizada a diario por Cobranzas"""
    caja = models.ForeignKey(LugarRecaudacion, on_delete=models.CASCADE)
    fecha = models.DateField()
    hora = models.TimeField()
    fondo = models.FloatField()
    facturaempieza = models.IntegerField()
    facturatermina = models.IntegerField(blank=True,null=True)
    abierta = models.BooleanField(blank=True, null=True)
    autorizacion = models.CharField(max_length=20, blank=True,null=True)

    @staticmethod
    def flexbox_query(q):
        if len(q)==10 and q[2]=='-' and q[2]=='-':
            try:
                fecha = datetime(int(q[6:10]), int(q[3:5]), int(q[0:2])).date()
                return SesionCaja.objects.filter(fecha=fecha)
            except:
                pass

        return SesionCaja.objects.filter(Q(caja__nombre__contains=q)|Q(caja__persona__apellido1__contains=q)|Q(caja__persona__apellido2__contains=q)|Q(caja__persona__nombres__contains=q)|Q(caja__persona__cedula__contains=q)).order_by('-fecha')

    @staticmethod
    def flexbox_query_2(q):
        if len(q)==10 and q[2]=='-' and q[2]=='-':
            try:
                fecha = datetime(int(q[6:10]), int(q[3:5]), int(q[0:2])).date()
                return SesionCaja.objects.filter(fecha=fecha)
            except:
                pass

        return SesionCaja.objects.filter(Q(caja__nombre__contains=q)|Q(caja__persona__apellido1__contains=q)|Q(caja__persona__apellido2__contains=q)|Q(caja__persona__nombres__contains=q)|Q(caja__persona__cedula__contains=q)).order_by('-fecha')

    def flexbox_repr(self):
        return self.caja.nombre +" "+self.fecha.strftime("%d-%m-%Y")+" "+str(self.id)

    def flexbox_alias(self):
        return "SESION DE CAJA: "+str(self.caja)+" "+self.fecha.strftime("%d-%m-%Y")

    def __str__(self):
        return "SESION DE CAJA: "+str(self.caja)+" "+self.fecha.strftime("%d-%m-%Y")

    #Metodos para ver los pagos y formas de pagos de cada sesion
    def total_efectivo_sesion(self):
        return Pago.objects.filter(sesion=self, efectivo=True).aggregate(Sum('valor'))['valor__sum'] if Pago.objects.filter(sesion=self, efectivo=True).exists() else 0

    def cantidad_facturas_sesion(self):
        return Factura.objects.filter(pagos__sesion=self).distinct().count()

    def cantidad_cheques_sesion(self):
        return PagoCheque.objects.filter(pagos__sesion=self).distinct().count()

    def total_cheque_sesion(self):
        return PagoCheque.objects.filter(pagos__sesion=self).aggregate(Sum('pagos__valor'))['pagos__valor__sum'] if PagoCheque.objects.filter(pagos__sesion=self).exists() else 0

    def cantidad_tarjetas_sesion(self):
        return PagoTarjeta.objects.filter(pagos__sesion=self).distinct().count()

    def total_tarjeta_sesion(self):
        return PagoTarjeta.objects.filter(pagos__sesion=self).aggregate(Sum('pagos__valor'))['pagos__valor__sum'] if PagoTarjeta.objects.filter(pagos__sesion=self).exists() else 0

    def cantidad_depositos_sesion(self):
        return PagoTransferenciaDeposito.objects.filter(pagos__sesion=self, deposito=True).distinct().count()

    def total_deposito_sesion(self):
        return PagoTransferenciaDeposito.objects.filter(pagos__sesion=self, deposito=True).aggregate(Sum('pagos__valor'))['pagos__valor__sum'] if  PagoTransferenciaDeposito.objects.filter(pagos__sesion=self, deposito=True).exists() else 0

    def cantidad_transferencias_sesion(self):
        return PagoTransferenciaDeposito.objects.filter(pagos__sesion=self, deposito=False).distinct().count()

    def total_transferencia_sesion(self):
        return PagoTransferenciaDeposito.objects.filter(pagos__sesion=self, deposito=False).aggregate(Sum('pagos__valor'))['pagos__valor__sum'] if PagoTransferenciaDeposito.objects.filter(pagos__sesion=self, deposito=False).exists() else 0

    def cantidad_notasdecredito_sesion(self):
        return PagoNotaCreditoInstitucion.objects.filter(pagos__sesion=self).distinct().count()

    def total_notasdecredito_sesion(self):
        return PagoNotaCreditoInstitucion.objects.filter(pagos__sesion=self).aggregate(Sum('pagos__valor'))['pagos__valor__sum'] if PagoNotaCreditoInstitucion.objects.filter(pagos__sesion=self).exists() else 0

    def total_sesion_pedagogia(self):
        return Pago.objects.filter(sesion=self).aggregate(Sum('valor'))['valor__sum'] if Pago.objects.filter(sesion=self).exists() else 0


    def cantidad_recibocaja_sesion(self):
        return PagoReciboCajaInstitucion.objects.filter(pagos__sesion=self).distinct().count()

    def total_retencion_sesion(self):
        return PagoRetencion.objects.filter(pagos__sesion=self).aggregate(Sum('pagos__valor'))['pagos__valor__sum'] if PagoRetencion.objects.filter(pagos__sesion=self).exists() else 0

    def cantidad_retencion_sesion(self):
        return PagoRetencion.objects.filter(pagos__sesion=self).distinct().count()

    def total_recibocaja_sesion(self):
        return PagoReciboCajaInstitucion.objects.filter(pagos__sesion=self).aggregate(Sum('pagos__valor'))['pagos__valor__sum'] if PagoReciboCajaInstitucion.objects.filter(pagos__sesion=self).exists() else 0

    def total_sesion(self):
        return self.total_efectivo_sesion() + self.total_cheque_sesion() + self.total_deposito_sesion() + self.total_transferencia_sesion() + self.total_tarjeta_sesion() + self.total_notasdecredito_sesion() + self.total_recibocaja_sesion() + self.total_retencion_sesion()
    def cierre_sesion(self):
        try:
            return self.cierresesioncaja_set.all()[:1].get()
        except :
            return None

    def hora_cierre(self):
        return self.cierresesioncaja_set.all()[:1].get().hora if self.cierresesioncaja_set.all()[:1].get().hora else None

    def total_sesion_facilito(self):
        return Pago.objects.filter(sesion=self, facilito=True).aggregate(Sum('valor'))['valor__sum'] if Pago.objects.filter(sesion=self, facilito=True).exists() else 0

    def total_sesion_pacifico(self):
        return Pago.objects.filter(sesion=self, pacifico=True).aggregate(Sum('valor'))['valor__sum'] if Pago.objects.filter(sesion=self, pacifico=True).exists() else 0

    class Meta:
        verbose_name="Sesion de Recaudacion de Caja"
        verbose_name_plural = "Sesiones de Recaudacion de Caja"


class CierreSesionCaja(models.Model):
    """Indica cuantos billetes se tienen al cierre de la Sesion de Caja"""
    sesion = models.ForeignKey(SesionCaja, on_delete=models.CASCADE)
    total = models.FloatField()
    bill100 = models.IntegerField(null=True, blank=True, default=0)
    bill50 = models.IntegerField(null=True, blank=True, default=0)
    bill20 = models.IntegerField(null=True, blank=True, default=0)
    bill10 = models.IntegerField(null=True, blank=True, default=0)
    bill5 = models.IntegerField(null=True, blank=True, default=0)
    bill2 = models.IntegerField(null=True, blank=True, default=0)
    bill1 = models.IntegerField(null=True, blank=True, default=0)
    enmonedas = models.FloatField(null=True, blank=True, default=0)
    deposito = models.FloatField(null=True, blank=True, default=0)
    fecha = models.DateField(blank=True,null=True)
    hora = models.TimeField(blank=True,null=True)
    enmonedas1 = models.FloatField(null=True, blank=True, default=0)
    enmonedas5 = models.FloatField(null=True, blank=True, default=0)
    enmonedas10 = models.FloatField(null=True, blank=True, default=0)
    enmonedas25 = models.FloatField(null=True, blank=True, default=0)
    enmonedas50 = models.FloatField(null=True, blank=True, default=0)
    enmonedas100 = models.FloatField(null=True, blank=True, default=0)
    referido = models.FloatField(null=True, blank=True, default=0)
    vale = models.FloatField(null=True, blank=True, default=0)
    tarjetas = models.FloatField(null=True, blank=True, default=0)
    cheque = models.FloatField(null=True, blank=True, default=0)
    totalrecaudado = models.FloatField(null=True, blank=True, default=0)
    faltante = models.FloatField(null=True, blank=True, default=0)
    sobrante = models.FloatField(null=True, blank=True, default=0)
    observacion = models.CharField(null=True, blank=True, max_length=1000)

    def __str__(self):
        return "Billetes Cierre Sesion: "+str(self.sesion)

    class Meta:
        verbose_name = "Resumen Cierre de Sesion de Caja"
        verbose_name_plural = "Resumenes Cierre de Sesion de Caja"




class CodigoFormaPago(models.Model):
    descripcion = models.CharField(max_length=300,null=True,blank=True)
    codigo = models.CharField(max_length=300,null=True,blank=True)
    fechainicio = models.DateField()
    fechafin = models.DateField()
    activo = models.BooleanField(default=False)

    def __str__(self):
        return self.descripcion + ' '+ self.codigo

    class Meta:
        verbose_name = "Codigo Forma de Pago"
        verbose_name_plural = "Codigos de Formas de Pago"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(CodigoFormaPago, self).save(force_insert,force_update,using, update_fields)

class FormaDePago(models.Model):
    nombre = models.CharField(max_length=100)
    codigoformapago = models.ForeignKey(CodigoFormaPago,null=True,blank=True, on_delete=models.CASCADE)
    # para contable
    efectivo = models.BooleanField(default=False)
    cheque = models.BooleanField(default=False)
    tarjetacredito = models.BooleanField(default=False)
    tarjetadebito = models.BooleanField(default=False)
    deposito = models.BooleanField(default=False)
    transferencia = models.BooleanField(default=False)
    notacredito = models.BooleanField(default=False)
    recibocaja = models.BooleanField(default=False)
    electronico = models.BooleanField(default=False)
    wester = models.BooleanField(default=False)
    facilito=models.BooleanField(default=False)
    pacifico=models.BooleanField(default=False)
    referido =models.BooleanField(default=False)
    pichincha =models.BooleanField(default=False)
    paymentez =models.BooleanField(default=False)
    retencion =models.BooleanField(default=False)
    chequepostfechado = models.BooleanField(default=False)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Forma de Pago"
        verbose_name_plural = "Formas de Pago"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(FormaDePago, self).save(force_insert,force_update,using, update_fields)

class Pago(models.Model):
    fecha = models.DateField()
    recibe = models.ForeignKey(Persona, on_delete=models.CASCADE)
    valor = models.FloatField()
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    efectivo = models.BooleanField(blank=True, null=True)
    sesion = models.ForeignKey(SesionCaja, on_delete=models.CASCADE)
    electronico = models.BooleanField(blank=True, null=True)
    wester = models.BooleanField(blank=True, null=True)
    facilito=models.BooleanField(blank=True, null=True)
    pacifico=models.BooleanField(blank=True, null=True)
    secuenciapago= models.CharField(max_length=50)
    referido =models.BooleanField(default=False)
    pichincha =models.BooleanField(default=False)
    paymentez =models.BooleanField(default=False)
    formapago = models.ForeignKey(FormaDePago, blank=True, null=True, on_delete=models.CASCADE)

    def obtener_forma_pago(self):
        pago = Pago.objects.filter(id=self.id).values_list('id', flat=True)
        if self.efectivo:
            return FormaDePago.objects.get(pk=FORMA_PAGO_EFECTIVO)
        elif (PagoCheque.objects.filter(pagos__id__in=pago).annotate(pago_fecha=F('pagos__fecha')).filter(fechacobro=F('pago_fecha'))).exists():
            return FormaDePago.objects.get(pk=FORMA_PAGO_CHEQUE)
        elif PagoTarjeta.objects.filter(pagos__id__in=pago).exclude(tarjetadebito=True).exists():
            return FormaDePago.objects.get(pk=FORMA_PAGO_TARJETA)
        elif PagoTransferenciaDeposito.objects.filter(deposito=True, pagos__id__in=pago).exists():
            return FormaDePago.objects.get(pk=FORMA_PAGO_DEPOSITO)
        elif PagoTransferenciaDeposito.objects.filter(pagos__id__in=pago).exclude(deposito=True).exists():
            return FormaDePago.objects.get(pk=FORMA_PAGO_TRANSFERENCIA)
        elif PagoNotaCreditoInstitucion.objects.filter(pagos__id__in=pago).exists():
            return FormaDePago.objects.get(pk=FORMA_PAGO_NOTA_CREDITO)
        elif PagoReciboCajaInstitucion.objects.filter(pagos__id__in=pago).exists():
            return FormaDePago.objects.get(pk=FORMA_PAGO_RECIBOCAJAINSTITUCION)
        elif PagoTarjeta.objects.filter(tarjetadebito=True, pagos__id__in=pago).exists():
            return FormaDePago.objects.get(pk=FORMA_PAGO_TARJETA_DEB)
        elif self.electronico:
            return FormaDePago.objects.get(pk=FORMA_PAGO_ELECTRONICO)
        elif self.wester:
            return FormaDePago.objects.get(pk=FORMA_PAGO_WESTER)
        elif self.pichincha:
            return FormaDePago.objects.get(pk=FORMA_PAGO_PICHINCHA)
        elif self.pacifico:
            return FormaDePago.objects.get(pk=FORMA_PAGO_PACIFICO)
        elif self.facilito:
            return FormaDePago.objects.get(pk=FORMA_PAGO_FACILITO)
        elif self.referido:
            return FormaDePago.objects.get(pk=FORMA_PAGO_REFERIDO)
        elif self.paymentez:
            return FormaDePago.objects.get(pk=FORMA_PAGO_PAGOONLINE)
        elif PagoRetencion.objects.filter(pagos__id__in=pago).exists():
            return FormaDePago.objects.get(pk=FORMA_PAGO_RETENCION)
        elif (PagoCheque.objects.filter(pagos__id__in=pago).annotate(pago_fecha=F('pagos__fecha')).filter(~Q(fechacobro=F('pago_fecha')))).exists():
            return FormaDePago.objects.get(pk=FORMA_PAGO_CHEQUE_POSTFECHADO)
        return "ERROR"

    def __str__(self):
        return "Pago $"+str(self.valor)+" x "+str(self.rubro)

    class Meta:
        verbose_name = "Pago"
        verbose_name_plural = "Pagos"

    def tipo(self):
        if self.pagotarjeta_set.exists():
            if self.pagotarjeta_set.filter(Q(tarjetadebito=False)|Q(tarjetadebito=None)).exists():
                return "TARJETA DE CREDITO"
            else:
                return "TARJETA DE DEBITO"
        elif self.pagocheque_set.exists():
            return "CHEQUE"
        elif self.pagotransferenciadeposito_set.exists():
            p = PagoTransferenciaDeposito.objects.filter(pagos__in=[self])[:1].get()
            return "TRANSFERENCIA" if not p.deposito else "DEPOSITO"
        elif self.pagonotacreditoinstitucion_set.exists():
            return "NOTA DE CREDITO"
        elif self.pagoretencion_set.exists():
            return 'RETENCION'
        elif self.electronico:
            return 'DINERO ELECTRONICO'
        elif self.wester:
            return 'WESTERN UNION'
        elif self.pichincha:
            return 'RECAUDACION PICHINCHA'
        elif self.pacifico:
            return 'RECAUDACION PACIFICO'
        return "EFECTIVO"

    def nombre(self):
        return self.tipo()+" $"+str(self.relacionado().valor)

    def relacionado(self):
        if self.pagotarjeta_set.exists():
            return self.pagotarjeta_set.get()
        elif self.pagocheque_set.exists():
            return self.pagocheque_set.get()
        elif self.pagotransferenciadeposito_set.exists():
            return self.pagotransferenciadeposito_set.get()
        elif self.pagonotacreditoinstitucion_set.exists():
            return self.pagonotacreditoinstitucion_set.get()
        return self

    def es_notadecredito(self):
        if self.pagonotacredito_set.exists():
            return self.pagonotacredito_set.get()

    def es_chequevista(self):
        if self.pagocheque_set.exists():
            cheque = self.pagocheque_set.all()[:1].get()
            return cheque.a_vista()
        return False

    def chequevista(self):
        if self.es_chequevista():
            return self.pagocheque_set.all()[:1].get()
        return None

    def es_tarjeta(self):
        return self.pagotarjeta_set.exists()

    def es_retencion(self):
        return self.pagoretencion_set.exists()

    def tipo_retencion(self):
        if self.pagoretencion_set.exists():
            return self.pagoretencion_set.all()[:1].get().tiporetencion_id



    def es_notacreditoinst(self):
        if self.pagonotacreditoinstitucion_set.exists():
            return self.pagonotacreditoinstitucion_set.all()[:1].get()
        return False

    def cedula(self):
        if self.pagonotacreditoinstitucion_set.exists():
            p= self.pagonotacreditoinstitucion_set.all()[:1].get()
            p.notacredito.inscripcion.persona.cedula
            return p

    def es_recibocajainst(self):
        return self.pagorecibocajainstitucion_set.exists()

    def es_chequepostfechado(self):
        if self.pagocheque_set.exists():
            cheque = self.pagocheque_set.all()[:1].get()
            return not cheque.a_vista()
        return False

    def chequepostfechado(self):
        if self.es_chequepostfechado():
            return self.pagocheque_set.all()[:1].get()
        return None

    def es_transferencia(self):
        if self.pagotransferenciadeposito_set.exists():
            trans = self.pagotransferenciadeposito_set.all()[:1].get()
            return not trans.deposito
        return False

    def es_deposito(self):
        if self.pagotransferenciadeposito_set.exists():
            trans = self.pagotransferenciadeposito_set.all()[:1].get()
            return trans.deposito
        return False

    def es_especievalorada(self):
        return self.rubro.es_especie()

    def dbf_factura(self):
        if self.factura_set.exists():
            return self.factura_set.all()[:1].get()
        return None

class PagoTransferenciaDeposito(models.Model):
    pagos = models.ManyToManyField(Pago)
    referencia = models.CharField(max_length=50)
    fecha = models.DateField()
    cuentabanco = models.ForeignKey(CuentaBanco, on_delete=models.CASCADE)
    valor = models.FloatField()
    deposito = models.BooleanField(blank=True, null=True)

    def __str__(self):
        return "Pago "+("Transferencia" if not self.deposito else "Deposito")+" $"+str(self.valor)

    class Meta:
        verbose_name = "Pago con Tranferencia/Deposito"
        verbose_name_plural = "Pagos con Transferencias/Depositos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.referencia = self.referencia.upper()
        super(PagoTransferenciaDeposito, self).save(force_insert, force_update,using, update_fields)


class PagoCheque(models.Model):
    pagos = models.ManyToManyField(Pago)
    numero = models.CharField(max_length=50)
    banco = models.ForeignKey(Banco, on_delete=models.CASCADE)
    fecha = models.DateField()
    fechacobro = models.DateField()
    emite = models.CharField(max_length=100)
    valor = models.FloatField()
    protestado = models.BooleanField(blank=True, null=True)
    recibido = models.BooleanField(blank=True, null=True)
    observacion = models.CharField(max_length=300)


    def a_vista(self):
        return self.fecha == self.fechacobro

    def __str__(self):
        return "Pago Cheque $"+str(self.valor)

    class Meta:
        verbose_name = "Pago con Cheque"
        verbose_name_plural = "Pagos con Cheques"

    def esta_protestado(self):
        try:
            return ChequeProtestado.objects.get(cheque=self)
        except :
            return None

    def tiene_pagos(self):
        return self.pagos.all().count()>0

    def inscripcion(self):
        try:
            return self.pagos.all()[:1].get().rubro.inscripcion
        except :
            return None

    def fichamedica(self):
        try:
            return self.pagos.all()[:1].get().rubro.fichamedica
        except :
            return None

    def factura(self):
        try:
            pago = self.pagos.all()[:1].get()
            return pago.factura_set.all()[:1].get()
        except :
            return None

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.emite = self.emite.upper()
        super(PagoCheque, self).save(force_insert, force_update,using, update_fields)

class TipoTarjetaBanco(models.Model):
    nombre = models.CharField(max_length=100)
    alias = models.CharField(max_length=10,blank=True,null=True)
    activa = models.BooleanField(default=True)
    procesador = models.ForeignKey(ProcesadorPagoTarjeta,blank=True,null=True, on_delete=models.CASCADE)

    def __str__(self):
        return self.nombre + "   COD:" + self.alias if self.alias else self.nombre

    class Meta:
        verbose_name = "Tipo de Tarjeta de Banco"
        verbose_name_plural = "Tipos de Tarjetas de Banco"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        self.alias = self.alias.upper()
        super(TipoTarjetaBanco, self).save(force_insert,force_update,using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return TipoTarjetaBanco.objects.filter(Q(nombre__contains=q))

    def flexbox_repr(self):
        return str(self.nombre)


class PagoTarjeta(models.Model):
    pagos = models.ManyToManyField(Pago)
    banco = models.ForeignKey(Banco,blank=True,null=True, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoTarjetaBanco,blank=True,null=True, on_delete=models.CASCADE)
    poseedor = models.CharField(max_length=100,blank=True,null=True)
    valor = models.FloatField()
    procesadorpago = models.ForeignKey(ProcesadorPagoTarjeta,blank=True,null=True, on_delete=models.CASCADE)
    referencia = models.CharField(max_length=50)
    fecha = models.DateField()
    tarjetadebito = models.BooleanField(default=False)
    online = models.BooleanField(default=False)
    lote = models.IntegerField(blank=True,null=True)
    adquiriente=models.CharField(max_length=50,blank=True,null=True)
    autorizacion = models.CharField(max_length=50, blank=True, null=True)

    def __str__(self):
        return "Pago Tarjeta $"+str(self.valor)

    class Meta:
        verbose_name = "Pago con Tarjeta"
        verbose_name_plural = "Pagos con Tarjetas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.poseedor: self.poseedor = self.poseedor.upper()
        if self.adquiriente: self.adquiriente = self.adquiriente.upper()
        super(PagoTarjeta, self).save(force_insert, force_update,using, update_fields)

class TipoRetencion(models.Model):
    descripcion = models.CharField(max_length=50)
    porcentaje = models.IntegerField()

    def __str__(self):
        return self.descripcion + " - " +str(self.porcentaje) + "%"

    class Meta:
        verbose_name = "Tipo de Retencion"
        verbose_name_plural = "Tipo de Retenciones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(TipoRetencion, self).save(force_insert, force_update,using, update_fields)

class PagoRetencion(models.Model):
    pagos = models.ManyToManyField(Pago)
    autorizacion = models.CharField(max_length=50, blank=True)
    numerot = models.CharField(max_length=50, blank=True)
    tiporetencion = models.ForeignKey(TipoRetencion, on_delete=models.CASCADE)
    valor = models.FloatField()
    fecha = models.DateField()

    def __str__(self):
        return "Pago Retencion $"+str(self.valor)

    class Meta:
        verbose_name = "Pago con Retencion"
        verbose_name_plural = "Pagos con Retenciones"


class RubroNotaDebito(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=100)
    pagocheque = models.ForeignKey(PagoCheque, on_delete=models.CASCADE)

    def __str__(self):
        return self.motivo

    class Meta:
        verbose_name = "Rubro Nota de Debito"
        verbose_name_plural = "Rubros Notas de Debito"

class Factura(models.Model):
    numero = models.CharField(max_length=20)
    fecha = models.DateField()
    valida = models.BooleanField(blank=True, null=True)
    cliente = models.ForeignKey(ClienteFactura, on_delete=models.CASCADE)
    subtotal = models.FloatField()
    iva = models.FloatField()
    total = models.FloatField()
    caja = models.ForeignKey(LugarRecaudacion, on_delete=models.CASCADE)
    impresa = models.BooleanField(blank=True, null=True)
    pagos = models.ManyToManyField(Pago, blank=True)
    estado = models.CharField(max_length=50,blank=True, null=True)
    mensaje = models.CharField(max_length=800,blank=True, null=True)
    dirfactura = models.CharField(max_length=300,blank=True, null=True)
    numautorizacion= models.CharField(max_length=100,blank=True, null=True)
    fechaautorizacion= models.DateTimeField(blank=True, null=True)
    claveacceso= models.CharField(max_length=100,blank=True, null=True)
    hora = models.TimeField(blank=True, null=True)

    def promo_gym(self):
        return PromoGym.objects.filter(factura=self).exists()

    def enletras(self):
        return number_to_letter.enletras(self.total)

    def dbf_numero(self):
        if '-' in self.numero:
            #return int(self.numero[self.numero.index("-")+1:])
            return int(self.numero.split("-")[-1])
        else:
            return int(self.numero)

    def dbf_numero_centroexterno(self):
        if '-' in self.numero:
            return self.numero.split("-")[0] + self.numero.split("-")[1] + self.numero.split("-")[2]
        else:
            return int(self.numero)


    def dbf_efectivo(self):
        return sum([x.valor for x in self.pagos.filter(efectivo=True)])

    def dbf_western(self):
        return sum([x.valor for x in self.pagos.filter(wester=True)])

    def dbf_electronico(self):
        return sum([x.valor for x in self.pagos.filter(electronico=True)])

    def dbf_facilito(self):
        return sum([x.valor for x in self.pagos.filter(facilito=True)])

    def dbf_cheques(self):
        cheques = PagoCheque.objects.filter(pagos__in=self.pagos.all()).distinct()
        return sum([x.valor for x in cheques])

    def dbf_cheques_vista(self):
        cheques = PagoCheque.objects.filter(fecha=F('fechacobro'), pagos__in=self.pagos.all()).distinct()
        return sum([x.valor for x in cheques])

    def dbf_cheques_posfechados(self):
        cheques = PagoCheque.objects.filter(fecha__lt=F('fechacobro'), pagos__in=self.pagos.all()).distinct()
        return sum([x.valor for x in cheques])

    def dbf_tarjetas(self):
        tarjetas = PagoTarjeta.objects.filter(pagos__in=self.pagos.all()).distinct()
        return sum([x.valor for x in tarjetas])

    def dbf_notacredito(self):
        notas = PagoNotaCredito.objects.filter(pagos__in=self.pagos.all()).distinct()
        return sum([x.valor for x in notas])

    def dbf_recibocajainst(self):
        recibos = PagoReciboCajaInstitucion.objects.filter(pagos__in=self.pagos.all()).distinct()
        return sum([x.valor for x in recibos])

    def dbf_transferencia(self):
        trans = PagoTransferenciaDeposito.objects.filter(pagos__in=self.pagos.all(), deposito=False).distinct()
        return sum([x.valor for x in trans])

    def dbf_deposito(self):
        trans = PagoTransferenciaDeposito.objects.filter(pagos__in=self.pagos.all(), deposito=True).distinct()
        return sum([x.valor for x in trans])

    def dbf_alumno(self):
        try:
            pago = self.pagos.all()[:1].get()
            return pago.rubro.inscripcion
        except:
            return None

    def estudiante(self):
        if self.pagos.exists():
            pago = self.pagos.all()[:1].get()
            if pago.rubro.inscripcion:
                return pago.rubro.inscripcion
            if pago.rubro.fichamedica:
                return pago.rubro.fichamedica
        return None

    def sesioncaja(self):
        if self.pagos.exists():
            return self.pagos.all()[:1].get().sesion
        return None

    def __str__(self):
        return "Factura No. "+self.numero

    class Meta:
        verbose_name = "Factura"
        verbose_name_plural = "Facturas"

    def anulada(self):
        if FacturaCancelada.objects.filter(factura=self).exists():
            return FacturaCancelada.objects.filter(factura=self)[:1].get()
        else :
            return None

    def nota_credito_inst(self):
        if self.notacreditoinstitucion_set.filter(anulada=False).exists():
            return self.notacreditoinstitucion_set.filter(anulada=False)[:1].get()
        return None

    def nota_credito_inst_devol(self):
        if self.notacreditoinstitucion_set.filter().exclude(anulada=True).exists():
            return self.notacreditoinstitucion_set.filter().exclude(anulada=True)
        return None

    def nota_credito_devol(self):
        if self.notacreditoinstitucion_set.filter().exclude(anulada=True).exists():
            total = 0
            for nota in NotaCreditoInstitucion.objects.filter(factura=self).exclude(anulada=True):
                total = Decimal(nota.valor) + Decimal(total)
            if Decimal(total) == Decimal(self.total):
                return self.notacreditoinstitucion_set.filter( )[:1].get()
        return None

    def sesion(self):
        if self.pagos.all().exists():
            return self.pagos.all()[:1].get().sesion
        return None

    def en_fecha(self):
        return datetime.now().date() == self.fecha

    def estudiante_print(self):
        est = []
        for i in self.pagos.all():
            est.append(i.rubro.inscripcion.persona.nombre_completo())
        return ",".join(set(est))

    def fecha_anulacion(self):

        mes=self.fecha.month
        anio=self.fecha.year
        if mes==12:
            mes=1
            anio=anio+1
        else:
            mes +=1

        fecha=str(anio)+"-"+str(mes)+"-"+str(DIA_MAX_ANULA)

        m= datetime.now().month
        if len(str(m))==1:
            m = str('0' + str(m))
        else:
            m = str(m)
        hoy = str(datetime.now().year)+"-"+m+"-"+str(datetime.now().day)
        # fecha=datetime(fecha)
        if(hoy > fecha):
            return False
        else:
            return True

    def tiene_deposito(self):
        return PagoTransferenciaDeposito.objects.filter(pagos__in=self.pagos.all(), deposito=True).exists()

    def tiene_tarjeta(self):
        if PagoTarjeta.objects.filter(pagos__in=self.pagos.all()).exists():
            return PagoTarjeta.objects.filter(pagos__in=self.pagos.all())[:1].get()
        return False

    def tiene_transferencia(self):
        # OCastillo 30-06-2015 debe permitir transferencias
        return PagoTransferenciaDeposito.objects.filter(pagos__in=self.pagos.all(), deposito=False).exists()

    def tiene_cheque(self):
        # OCastillo 22-09-2015 debe permitir ingreso de cheques
        return PagoCheque.objects.filter(pagos__in=self.pagos.all()).exists()

    def tiene_receta(self):
        for pago in self.pagos.all():
            if RubroReceta.objects.filter(rubrootro__rubro = pago.rubro).exists():
                return  True
            break
        return False

    def notificacion_pago_online(self,rubro):
        tipo = TipoIncidencia.objects.get(pk=50)
        hoy = datetime.now().today()
        contenido = "ADICIONADO PAGO ONLINE"
        send_html_mail("PAGO ONLINE",
                       "emails/pago_online.html", {'f': self, 'fecha': hoy,'contenido':contenido,'rubro':rubro },tipo.correo.split(","))

    def notificacion_pacifico(self,rubro):
        tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_FACT)
        hoy = datetime.now().today()
        contenido = "ADICIONADO PAGO RED PACIFICO"
        send_html_mail("PAGO RED PACIFICO",
                       "emails/pagofacilito.html", {'f': self, 'fecha': hoy,'contenido':contenido,'rubro':rubro },tipo.correo.split(","))

    def existe_rubroseguimiento(self):
        if self.pagos.filter(rubro__id__in=RubroSeguimiento.objects.filter(estado=True, valordesc__gt=0).values('rubro')).exists():
            return True

class FacturaCancelada(models.Model):
    factura = models.ForeignKey(Factura, related_name='cancelada', on_delete=models.CASCADE)
    motivo = models.CharField(max_length=200)
    fecha = models.DateField()
    sesion = models.ForeignKey(SesionCaja, null=True, blank=True, on_delete=models.CASCADE)

    def __str__(self):
        return "Factura Cancelada No. "+str(self.factura)+" - "+ str(self.fecha) + (str(self.sesion) if self.sesion else "")

    class Meta:
        verbose_name = "Factura Cancelada"
        verbose_name_plural = "Facturas Canceladas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()
        super(FacturaCancelada, self).save(force_insert,force_update,using, update_fields)


class ChequeProtestado(models.Model):
    cheque = models.ForeignKey(PagoCheque, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=200)
    fecha = models.DateField()

    def __str__(self):
        return "Cheque Protestado No. %s - %s".format(str(self.cheque), str(self.fecha))

    class Meta:
        verbose_name = "Cheque Protestado"
        verbose_name_plural = "Cheques Protestados"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()
        super(ChequeProtestado, self).save(force_insert,force_update,using, update_fields)

class NotaCredito(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=200)
    fecha = models.DateField()
    valorinicial = models.FloatField()
    saldo = models.FloatField()




    def __str__(self):
        return self.motivo + (": Saldo: $%0.2f " % self.saldo)

    class Meta:
        verbose_name = "Nota de Credito"
        verbose_name_plural = "Notas de Creditos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()
        super(NotaCredito, self).save(force_insert,force_update,using, update_fields)

class PagoNotaCredito(models.Model):
    pagos = models.ManyToManyField(Pago)
    notacredito = models.ForeignKey(NotaCredito, on_delete=models.CASCADE)
    valor = models.FloatField()
    fecha = models.DateField()

    def __str__(self):
        return "Pago Nota Credito $"+str(self.valor)

    class Meta:
        verbose_name = "Pago con Nota de Credito"
        verbose_name_plural = "Pagos con Notas de Credito"


class ReciboCajaInstitucion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=200)
    fecha = models.DateField()
    hora = models.TimeField()
    valorinicial = models.FloatField()
    saldo = models.FloatField()
    sesioncaja = models.ForeignKey(SesionCaja, blank=True, null=True, on_delete=models.CASCADE)
    activo = models.BooleanField(default=True)
    fechaanula=models.DateTimeField(null= True, blank =True)
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)
    motivoanulacion = models.TextField(max_length=1000, blank=True, null=True)
    motivocambio = models.TextField(max_length=1000, blank=True, null=True)
    fechacambio=models.DateTimeField(null= True, blank =True)
    usuariocambio = models.ForeignKey(User,related_name='usuariocambio', blank=True, null=True, on_delete=models.CASCADE)
    formapago = models.ForeignKey(FormaDePago, blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return "Recibo Caja: %s VI: ($%10.2f)  S: ($%10.2f) "%(str(self.inscripcion), self.valorinicial, self.saldo)

    class Meta:
        verbose_name = "Recibo de Caja Institucion"
        verbose_name_plural = "Recibos de Caja Institucion"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()
        super(ReciboCajaInstitucion, self).save(force_insert,force_update,using, update_fields)

    def mail_recibo(self, user,recibo,motivo):
        tipo = TipoIncidencia.objects.get(pk=20)
        hoy = datetime.now().today()
        contenido = "EDITADO RECIBO CAJA"
        send_html_mail("Editado Recibo de Caja",
                       "emails/editadorecibo.html", {'d': self, 'fecha': hoy,'contenido': contenido,'recibo':recibo, 'user': user,'motivo':motivo},tipo.correo.split(","))


class PagoReciboCajaInstitucion(models.Model):
    pagos = models.ManyToManyField(Pago)
    recibocaja = models.ForeignKey(ReciboCajaInstitucion, on_delete=models.CASCADE)
    valor = models.FloatField()
    fecha = models.DateField()

    def __str__(self):
        return "Pago Recibo Caja Institucion $"+str(self.valor)

    class Meta:
        verbose_name = "Pago con Recibo Caja"
        verbose_name_plural = "Pagos con Recibos Cajas Institucion"

class ReciboPago(models.Model):
    pago=models.ForeignKey(Pago,blank=True,null=True, on_delete=models.CASCADE)
    recibocaja=models.ForeignKey(ReciboCajaInstitucion,blank=True,null=True, on_delete=models.CASCADE)

    class Meta:
        verbose_name = "Recibo Caja  y Pago"
        verbose_name_plural = "Recibo Caja  y Pago"

class TipoNotaCredito(models.Model):
    descripcion = models.CharField(max_length=200)

    def __str__(self):
        return self.descripcion

class TipoMotivoNotaCredito(models.Model):
    descripcion = models.CharField(max_length=200)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = "Tipo de Motivo NC"
        verbose_name_plural = "Tipos de Motivos de NC"

class NotaCreditoInstitucion(models.Model):
    tipo=models.ForeignKey(TipoNotaCredito, blank=True,null=True, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion,blank=True, null=True, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=200)
    fecha = models.DateField()
    hora = models.TimeField()
    valor = models.FloatField()
    factura = models.ForeignKey(Factura, on_delete=models.CASCADE)
    sesioncaja = models.ForeignKey(SesionCaja, blank=True, null=True, on_delete=models.CASCADE)
    beneficiario = models.ForeignKey(Inscripcion, blank=True, null=True, related_name='beneficiario', on_delete=models.CASCADE)
    fichamedica = models.ForeignKey('clinicaestetica.FichaMedica', blank=True, null=True, related_name='fichamedica', on_delete=models.CASCADE)
    usuario = models.CharField(max_length=50, blank=True, null=True)
    cancelada = models.BooleanField(default=False)
    anulada = models.BooleanField(default=False)
    numero = models.CharField(max_length=50)
    neto = models.FloatField(blank=True, null=True)
    iva = models.FloatField(blank=True, null=True)
    estado = models.CharField(max_length=50,blank=True, null=True)
    mensaje = models.CharField(max_length=800,blank=True, null=True)
    dirnotacredito = models.CharField(max_length=300,blank=True, null=True)
    numautorizacion= models.CharField(max_length=100,blank=True, null=True)
    fechaautorizacion= models.DateTimeField(blank=True, null=True)
    claveacceso= models.CharField(max_length=100,blank=True, null=True)
    saldo = models.FloatField(blank=True,null=True)
    motivonc=models.ForeignKey(TipoMotivoNotaCredito, blank=True,null=True, on_delete=models.CASCADE)

    def tiene_pago_nc(self):
        if PagoNotaCreditoInstitucion.objects.filter(notacredito=self).exists():
            return  PagoNotaCreditoInstitucion.objects.filter(notacredito=self)[:1].get()

    def baja(self):
        if BajaNC.objects.filter(notacredito=self).exists():
            return BajaNC.objects.filter(notacredito=self)[:1].get()
        return None

    def existedobleNCA(self):
        existe=False
        nca = NotaCreditoInstitucion.objects.filter(pk=self.id,tipo__id=1)[:1].get()
        total= NotaCreditoInstitucion.objects.filter(factura=nca.factura,sesioncaja=nca.sesioncaja,beneficiario=nca.beneficiario,numero=nca.numero,estado=nca.estado,numautorizacion=nca.numautorizacion,claveacceso=nca.claveacceso).count()
        if total > 1:
            existe=True
        return existe


    def __str__(self):
        return "NC: #%s %s ($%10.2f) [Caja: #%s, #%s]"%(self.numero, str(self.inscripcion), self.valor, self.sesioncaja.caja.nombre, self.factura)

    # def numero(self):
    #     return str(self.id).zfill(5)

    class Meta:
        verbose_name = "Nota de Credito Institucion"
        verbose_name_plural = "Notas de Creditos Institucion"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()
        super(NotaCreditoInstitucion, self).save(force_insert,force_update,using, update_fields)


class PagoNotaCreditoInstitucion(models.Model):
    pagos = models.ManyToManyField(Pago)
    notacredito = models.ForeignKey(NotaCreditoInstitucion, on_delete=models.CASCADE)
    valor = models.FloatField()
    fecha = models.DateField()



    def __str__(self):
        return "Pago Nota Credito Inst: $"+str(self.valor)

    class Meta:
        verbose_name = "Pago con Nota de Credito"
        verbose_name_plural = "Pagos con Notas de Creditos"


#---------------------------------------------------------------------------
#
#   NOTICIAS
#
#---------------------------------------------------------------------------

TIPOS_NOTICIAS = (
    (1, 'Informativa'),
    (2, 'Urgente'),
    (3, 'Administrativa'),
    (4, 'Estudiantes'),
    (5, 'Profesores')
)

class Noticia(models.Model):
    titular = models.CharField(max_length=100)
    cuerpo = models.TextField()
    tipo = models.IntegerField(choices=TIPOS_NOTICIAS)
    desde = models.DateField()
    hasta = models.DateField()
    publica = models.ForeignKey(Persona, on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='noticia/%Y/', verbose_name='Imagen', max_length=450, blank=True, null=True)

    def publicada(self):
        d = datetime.now().date()
        td = d - self.desde
        th = d - self.hasta
        return (td.days * 24 * 60 * 60 + td.seconds)>=0 >= (th.days * 24 * 60 * 60 + th.seconds)

    def tiporepr(self):
        d = [x[1] for x in TIPOS_NOTICIAS]
        return d[self.tipo-1]

    def __str__(self):
        return self.titular

    class Meta:
        verbose_name = "Noticia"
        verbose_name_plural = "Noticias"


#---------------------------------------------------------------------------
#
#   EVALUACIONES DE DOCENTES
#
#---------------------------------------------------------------------------
class CoordinadorCarrera(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    # profesor = models.ForeignKey(Profesor, blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.persona) + ' - ' + str(self.carrera)



    @staticmethod
    def flexbox_query(q):
        return Persona.objects.filter(Q(nombres__contains=q)|Q(apellido1__contains=q)|Q(apellido2__contains=q))

    def flexbox_repr(self):
        return self.persona.nombre_completo_inverso()

    def mis_carreras(self, periodo):
        if Carrera.objects.filter(coordinadorcarrera__persona=self.persona, coordinadorcarrera__periodo=periodo).exists():
            return Carrera.objects.filter(coordinadorcarrera__persona=self.persona, coordinadorcarrera__periodo=periodo)
        return None

    def mis_profesores(self, periodo):
        carreras = self.mis_carreras(periodo)
        if carreras is not None:
            if Profesor.objects.filter(persona__profesor__profesormateria__materia__nivel__periodo=periodo, persona__profesor__profesormateria__materia__nivel__carrera__in=carreras).exists():
                return Profesor.objects.filter(persona__profesor__profesormateria__materia__nivel__periodo=periodo, persona__profesor__profesormateria__materia__nivel__carrera__in=carreras).distinct()
        return None

    def mis_profesoresconsult(self, periodo,search):
        carreras = self.mis_carreras(periodo)
        if carreras is not None:
            if Profesor.objects.filter(persona__profesor__profesormateria__materia__nivel__periodo=periodo, persona__profesor__profesormateria__materia__nivel__carrera__in=carreras).exists():
                if search:
                    ss = search.split(' ')
                    while '' in ss:
                        ss.remove('')
                    if len(ss)==1:
                        return Profesor.objects.filter(Q(persona__nombres__icontains=search) | Q(persona__apellido1__icontains=search) | Q(persona__apellido2__icontains=search) | Q(persona__cedula__icontains=search) | Q(persona__pasaporte__icontains=search)).order_by('persona__apellido1')
                    else:
                        return Profesor.objects.filter(Q(persona__apellido1__icontains=ss[0]) & Q(persona__apellido2__icontains=ss[1])).order_by('persona__apellido1','persona__apellido2','persona__nombres')
                else:
                    return Profesor.objects.filter(persona__profesor__profesormateria__materia__nivel__periodo=periodo, persona__profesor__profesormateria__materia__nivel__carrera__in=carreras).distinct()
        return None

class Coordinacion(models.Model):
    nombre = models.CharField(max_length=200)
    carrera = models.ManyToManyField(Carrera, blank=True)
    correo = models.CharField(max_length=80, blank=True, null=True)
    alias= models.CharField(max_length=500, blank=True, null=True)
    persona = models.ForeignKey(Persona, blank=True, on_delete=models.CASCADE)
    estado=models.BooleanField(default=False)

    def __str__(self):
        return "Coordinacion de Carrera:" + " " + str(self.nombre)

    class Meta:
        verbose_name = "Coordinacion de Carrera"
        verbose_name_plural = "Coordinaciones de Carreras"

    @staticmethod
    def flexbox_query(q):
        return Coordinacion.objects.filter(Q(nombre__contains=q))

    def flexbox_repr(self):
        return self.nombre

    def fun_carrera(self):
        if self.carrera.all().exists():
            return self.carrera.all()
        return None

    #Metodos para Estadisticas Academicas y Financieras
    def cantidad_facturas_dia(self):
        return Factura.objects.filter(pagos__sesion__fecha=datetime.now().today(), pagos__rubro__inscripcion__carrera__in=self.carrera.all()).distinct().count() if Factura.objects.filter(pagos__sesion__fecha=datetime.now().today(), pagos__rubro__inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def total_pagos_dia(self):
        return Pago.objects.filter(sesion__fecha=datetime.now().today(), rubro__inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum'] if Pago.objects.filter(sesion__fecha=datetime.now().today(), rubro__inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def cantidad_facturas_fecha(self, fecha):
        return Factura.objects.filter(pagos__sesion__fecha=fecha, pagos__rubro__inscripcion__carrera__in=self.carrera.all()).distinct().count() if Factura.objects.filter(pagos__sesion__fecha=fecha, pagos__rubro__inscripcion__carrera__in=self.carrera.all()).exists() else 0

    # def cantidad_facturas_fecha(self, fecha):
    #     return Factura.objects.filter(pagos__sesion__fecha=fecha, pagos__rubro__inscripcion__carrera__in=self.carrera.all()).distinct().count() if Factura.objects.filter(pagos__sesion__fecha=fecha, pagos__rubro__inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def total_pagos_fecha(self, fecha):
        if Pago.objects.filter(sesion__fecha=fecha, rubro__inscripcion__carrera__in=self.carrera.all()).exists():
            pago = Pago.objects.filter(sesion__fecha=fecha, rubro__inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum']

        else:
            pago = 0
        pagorecibo = self.total_pagosrecibocaja_fecha(fecha)
        pagonc = self.total_pagosncred_fecha(fecha)
        return  pago- pagorecibo - pagonc

    def total_pagos_fecha2(self, fecha):
        if Pago.objects.filter(sesion__fecha=fecha, rubro__inscripcion__carrera__in=self.carrera.all()).exists():
            pago = Pago.objects.filter(sesion__fecha=fecha, rubro__inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum']
        else:
            pago = 0
        return pago

    def total_pagos_rango_fechas2(self, inicio, fin):
        if Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin, rubro__inscripcion__carrera__in=self.carrera.all()).exists() :
           pago= Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin, rubro__inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum']
        else :
            pago = 0
        return  pago
    def total_pagosrecibocaja_fecha(self, fecha):
        return PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha=fecha, recibocaja__inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum'] if PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha=fecha, recibocaja__inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def total_pagosncred_fecha(self, fecha):
        return PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha=fecha, notacredito__inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum'] if PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha=fecha, notacredito__inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def total_ncpagos_fecha(self, fecha):
        return NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha=fecha, inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum'] if NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha=fecha, inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def total_recibo_fecha(self, fecha):
        return ReciboCajaInstitucion.objects.filter(sesioncaja__fecha=fecha, inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valorinicial'))['valorinicial__sum'] if ReciboCajaInstitucion.objects.filter(sesioncaja__fecha=fecha, inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def cantidad_facturas_rango_fechas(self, inicio, fin):
        return Factura.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin, pagos__rubro__inscripcion__carrera__in=self.carrera.all()).distinct().count() if Factura.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin, pagos__rubro__inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def total_pagos_rango_fechas(self, inicio, fin):
        if Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin, rubro__inscripcion__carrera__in=self.carrera.all()).exists() :
            pago= Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin, rubro__inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum']
        else :
            pago = 0
        pagorecibo = self.total_pagosrecibo_rango_fechas(inicio, fin)
        pagonc = self.total_pagosncred_rango_fechas(inicio, fin)
        return  pago- pagorecibo -pagonc

    def total_pagosrecibo_rango_fechas(self, inicio, fin):
        return PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin,recibocaja__inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum'] if PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin, recibocaja__inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def total_pagosncred_rango_fechas(self, inicio, fin):
        return PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin,notacredito__inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum'] if PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin, notacredito__inscripcion__carrera__in=self.carrera.all()).exists() else 0


    def total_recibo_rango_fechas(self, inicio, fin):
        return ReciboCajaInstitucion.objects.filter(sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valorinicial'))['valorinicial__sum'] if ReciboCajaInstitucion.objects.filter(sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def total_ncpagos_rango_fechas(self, inicio, fin):
        return NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('valor'))['valor__sum'] if NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__carrera__in=self.carrera.all()).exists() else 0

    def total_pagos_por_fechas(self, inicio, fin):
        return Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin).aggregate(Sum('valor'))['valor__sum'] if Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin).exists() else 0

    def cantidad_facturas_por_fechas(self, inicio, fin):
        return Factura.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin).distinct().count() if Factura.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin).exists() else 0

    def cantidad_matriculados(self):
        return Matricula.objects.filter(inscripcion__carrera__in=self.carrera.filter().exclude(nombre='CONGRESO DE PEDAGOGIA'),nivel__cerrado=False,nivel__periodo__activo=True,inscripcion__persona__usuario__is_active=True).count()

    def cantidad_matriculadosfilt(self,fechainicio,fechafin):
        return Matricula.objects.filter(inscripcion__carrera__in=self.carrera.filter().exclude(nombre='CONGRESO DE PEDAGOGIA'),nivel__cerrado=False,nivel__periodo__activo=True,inscripcion__persona__usuario__is_active=True, fecha__gte=fechainicio,fecha__lte=fechafin).count()

    #Porcientos de cantidad facturas y valores con respecto a totales
    def porciento_cantidad_facturas(self, inicio, fin):
        return (self.cantidad_facturas_rango_fechas(inicio,fin)/float(self.cantidad_facturas_por_fechas(inicio,fin)))*100 if self.cantidad_facturas_por_fechas(inicio,fin) else 0

    def porciento_valor_pagos(self, inicio, fin):
        return (self.total_pagos_rango_fechas(inicio,fin)/self.total_pagos_por_fechas(inicio,fin))*100 if self.total_pagos_por_fechas(inicio,fin) else 0

    # Deudores y valores de deudas (modelo InscripcionEstadistica)
    def valor_deudores(self):
        return self.valor_deudores_retirados() + self.valor_deudores_inactivos() + self.valor_deudores_activos()

    def valor_deudores_retirados(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, retirado=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('deuda'))['deuda__sum'] if InscripcionEstadistica.objects.filter(deuda__gt=0, retirado=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def valor_deudores_inactivos(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('deuda'))['deuda__sum'] if InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def valor_deudores_activos(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=False, retirado=False, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('deuda'))['deuda__sum'] if InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=False, retirado=False, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def cantidad_deudores(self):
        return self.cantidad_total_deudores_retirados() + self.cantidad_total_deudores_inactivos() + self.cantidad_total_deudores_activos()


    def cantidad_total_deudores_retirados(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, retirado=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_deudores_inactivos(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_deudores_activos(self):
        return InscripcionEstadistica.objects.filter(deuda__gt=0, inactivo=False, retirado=False, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()


    def valor_creditos(self):
        return  self.valor_total_creditos_retirados() + self.valor_total_creditos_inactivos() + self.valor_total_creditos_activos()
        # return InscripcionEstadistica.objects.filter(credito__gt=0, inscripcion__carrera__in=self.carrera.all()).aggregate(Sum('credito'))['credito__sum'] if InscripcionEstadistica.objects.filter(credito__gt=0, inscripcion__carrera__in=self.carrera.all()) else 0

    def valor_total_creditos_retirados(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, retirado=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('credito'))['credito__sum'] if InscripcionEstadistica.objects.filter(credito__gt=0, retirado=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def valor_total_creditos_inactivos(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, inactivo=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('credito'))['credito__sum'] if InscripcionEstadistica.objects.filter(credito__gt=0, inactivo=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def valor_total_creditos_activos(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, retirado=False, inactivo=False, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').aggregate(Sum('credito'))['credito__sum'] if InscripcionEstadistica.objects.filter(credito__gt=0, retirado=False, inactivo=False, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists() else 0

    def cantidad_creditos(self):
        return self.cantidad_total_creditos_retirados() + self.cantidad_total_creditos_inactivos() + self.cantidad_total_creditos_activos()

    def cantidad_total_creditos_retirados(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, retirado=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_creditos_inactivos(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, inactivo=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_creditos_activos(self):
        return InscripcionEstadistica.objects.filter(credito__gt=0, inactivo=False, retirado=False, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()


    def cantidad_total_porcobrar(self):
        return  self.cantidad_total_porcobrar_retirados() + self.cantidad_total_porcobrar_inactivos()  + self.cantidad_total_porcobrar_activos()
        # return InscripcionEstadistica.objects.filter(Q(deuda__gt=0)|Q(credito__gt=0),inscripcion__carrera__in=self.carrera.all()).count()

    def cantidad_total_porcobrar_retirados(self):
        return InscripcionEstadistica.objects.filter(Q(deuda__gt=0)|Q(credito__gt=0), retirado=True,inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_porcobrar_inactivos(self):
        return InscripcionEstadistica.objects.filter(Q(deuda__gt=0)|Q(credito__gt=0), inactivo=True,inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_total_porcobrar_activos(self):
        return InscripcionEstadistica.objects.filter(Q(deuda__gt=0)|Q(credito__gt=0), inactivo=False, retirado=False,inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()


    def valor_total_porcobrar(self):
        return self.valor_deudores() + self.valor_creditos()

    def valor_total_porcobrar_retirados(self):
        return self.valor_deudores_retirados() + self.valor_total_creditos_retirados()

    def valor_total_porcobrar_inactivos(self):
        return self.valor_deudores_inactivos() + self.valor_total_creditos_inactivos()

    def valor_total_porcobrar_activos(self):
        return self.valor_deudores_activos() + self.valor_total_creditos_activos()

    # OCU 04-07-2014 validacion de estudiantes activos
    # inscripcion__persona__usuario__is_active=True
    #Datos academicos y admnistrativos
    def cantidad_matriculados_mujeres(self):
        return Matricula.objects.filter(inscripcion__persona__sexo=SEXO_FEMENINO, nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_hombres(self):
        return Matricula.objects.filter(inscripcion__persona__sexo=SEXO_MASCULINO, nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_sexos(self):
        return Matricula.objects.filter(Q(inscripcion__persona__sexo=SEXO_MASCULINO)|Q(inscripcion__persona__sexo=SEXO_FEMENINO), nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_beca(self):
        return Matricula.objects.filter(becado=True,nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_discapacidad(self):
        return Matricula.objects.filter(inscripcion__tienediscapacidad=True,nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_provinciafil(self, provincia,fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True,inscripcion__persona__provincia=provincia, inscripcion__persona__usuario__is_active=True,inscripcion__carrera__in=self.carrera.all(),fecha__gte=fechainicio,fecha__lte=fechafin).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_provinciafilnull(self, fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all(),fecha__gte=fechainicio,fecha__lte=fechafin,inscripcion__persona__provincia=None).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_provincia(self, provincia):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__persona__provincia=provincia, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_provincianull(self):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__persona__provincia=None, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_canton(self, canton):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__persona__canton=canton, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_cantonnull(self):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__persona__canton=None, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_cantonfil(self, canton,fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__persona__canton=canton, inscripcion__carrera__in=self.carrera.all(),fecha__gte=fechainicio,fecha__lte=fechafin).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def cantidad_matriculados_cantonfilnull(self, fechainicio,fechafin):
        return Matricula.objects.filter(nivel__cerrado=False, nivel__periodo__activo=True, inscripcion__persona__usuario__is_active=True, inscripcion__persona__canton=None, inscripcion__carrera__in=self.carrera.all(),fecha__gte=fechainicio,fecha__lte=fechafin).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    #Matriculados por rango de edades
    def matriculados_menor_30(self):
        return InscripcionEstadistica.objects.filter(edad__gt=0, edad__lte=30, matriculado=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def matriculados_31_40(self):
        return InscripcionEstadistica.objects.filter(edad__gt=30, edad__lte=40, matriculado=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def matriculados_41_50(self):
        return InscripcionEstadistica.objects.filter(edad__gt=40, edad__lte=50, matriculado=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def matriculados_51_60(self):
        return InscripcionEstadistica.objects.filter(edad__gt=50, edad__lte=60, matriculado=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def matriculados_mayor_61(self):
        return InscripcionEstadistica.objects.filter(edad__gt=60, matriculado=True, inscripcion__persona__usuario__is_active=True, inscripcion__carrera__in=self.carrera.all()).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').count()

    def tot_gestionesporcoordinacion(self,fechai,fechaf):
        fechaf = convertir_fecha(fechaf)+timedelta(hours=23,minutes=59)
        tot_gestion=0
        for prof in  GestionTramite.objects.filter(fechaasignacion__gte=fechai,fechaasignacion__lte=fechaf,tramite__rubro__inscripcion__carrera__coordinacion=self).distinct('profesor').order_by('profesor').values('profesor'):
            if GestionTramite.objects.filter(profesor=prof['profesor'],fechaasignacion__gte=fechai,fechaasignacion__lte=fechaf,fecharespuesta__gte=fechai,fecharespuesta__lte=fechaf,finalizado=True).exists():
                tot_gestion+=GestionTramite.objects.filter(profesor=prof['profesor'],fechaasignacion__gte=fechai,fechaasignacion__lte=fechaf,fecharespuesta__gte=fechai,fecharespuesta__lte=fechaf,finalizado=True).count()
        return tot_gestion

    def tot_horasatencionporcoordinacion(self,fechai,fechaf):
        fechaf = convertir_fecha(fechaf)+timedelta(hours=23,minutes=59)
        totalhoras=0
        for ges in GestionTramite.objects.filter(tramite__rubro__inscripcion__carrera__coordinacion=self,fechaasignacion__gte=fechai,fechaasignacion__lte=fechaf,fecharespuesta__gte=fechai,fecharespuesta__lte=fechaf,finalizado=True):
            h_espera=0
            h_espera2=0
            dias_espera = (ges.fecharespuesta-ges.fechaasignacion).days
            h_espera=(dias_espera*24)
            segundos_espera = (ges.fecharespuesta-ges.fechaasignacion).seconds
            h_espera2 = int(segundos_espera/3600)
            if dias_espera<0:
                h_espera=0
            if segundos_espera<3600:
                minut_espera2 = int(segundos_espera/60)
                if minut_espera2<10:
                    minutos_termina = str('0'+'.'+'0'+str( minut_espera2))
                    h_espera2=Decimal(minutos_termina).quantize(Decimal(10) ** -2)
                else:
                    minutos_termina = str('0'+'.'+str( minut_espera2))
                    h_espera2=Decimal(minutos_termina).quantize(Decimal(10) ** -2)
            totalhoras+=(h_espera+h_espera2)

        return totalhoras


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        super(Coordinacion, self).save(force_insert,force_update,using, update_fields)


class NivelLibreCoordinacion(models.Model):
    nivel = models.ForeignKey(Nivel, on_delete=models.CASCADE)
    coordinacion = models.ForeignKey(Coordinacion, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.nivel)+" - "+str(self.coordinacion)

    class Meta:
        verbose_name = "Nivel Libre de Coordinacion"
        verbose_name_plural = "Niveles Libres de Coordinaciones"

class Feriado(models.Model):
    fecha = models.DateField()
    motivo = models.CharField(max_length=200, blank=True, null=True)

    def __str__(self):
        return "Feriado: "+str(self.fecha)+" - "+ self.motivo

    class Meta:
        verbose_name = "Dia Feriado"
        verbose_name_plural = "Dias Feriados"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.motivo: self.motivo = self.motivo.upper()
        super(Feriado, self).save(force_insert,force_update,using, update_fields)

class CalificacionEvaluacion(models.Model):
    descripcion = models.CharField(max_length=200)
    clase = models.CharField(max_length=100)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = "Calificacion de Evaluacion"
        verbose_name_plural = "Calificacion de Evaluaciones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(CalificacionEvaluacion, self).save(force_insert,force_update,using, update_fields)

class AmbitoEvaluacion(models.Model):
    nombre = models.CharField(max_length=100)
    encuesta = models.BooleanField(default=False)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Ambito de Evaluacion"
        verbose_name_plural = "Ambitos de Evaluacion"
        ordering = ['nombre']

    def encuestaron_excelente(self):
        return DatoRespuestaEncuesta.objects.filter(indicador__ambitoinstrumento__ambito=self, valor=5).distinct().count() if DatoRespuestaEncuesta.objects.filter(indicador__ambitoinstrumento__ambito=self, valor=5).distinct().exists() else 0

    def encuestaron_muybien(self):
        return DatoRespuestaEncuesta.objects.filter(indicador__ambitoinstrumento__ambito=self, valor=4).distinct().count() if DatoRespuestaEncuesta.objects.filter(indicador__ambitoinstrumento__ambito=self, valor=4).distinct().exists() else 0

    def encuestaron_bien(self):
        return DatoRespuestaEncuesta.objects.filter(indicador__ambitoinstrumento__ambito=self, valor=3).distinct().count() if DatoRespuestaEncuesta.objects.filter(indicador__ambitoinstrumento__ambito=self, valor=3).distinct().exists() else 0

    def encuestaron_regular(self):
        return DatoRespuestaEncuesta.objects.filter(indicador__ambitoinstrumento__ambito=self, valor=2).distinct().count() if DatoRespuestaEncuesta.objects.filter(indicador__ambitoinstrumento__ambito=self, valor=2).distinct().exists() else 0

    def encuestaron_mal(self):
        return DatoRespuestaEncuesta.objects.filter(indicador__ambitoinstrumento__ambito=self, valor=1).distinct().count() if DatoRespuestaEncuesta.objects.filter(indicador__ambitoinstrumento__ambito=self, valor=1).distinct().exists() else 0

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(AmbitoEvaluacion, self).save(force_insert, force_update, using, update_fields)



class IndicadorEvaluacion(models.Model):
    nombre = models.CharField(max_length=300)
    encuesta = models.BooleanField(default=False)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Indicador de Evaluacion"
        verbose_name_plural = "Indicadores de Evaluacion"
        ordering = ['nombre']

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(IndicadorEvaluacion, self).save(force_insert, force_update, using, update_fields)

class InstrumentoEvaluacion(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Instrumento de Evaluacion"
        verbose_name_plural = "Instrumentos de Evaluacion"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(InstrumentoEvaluacion, self).save(force_insert, force_update, using, update_fields)

    def cantidad_ambitos(self):
        pass

    def cantidad_indicadores(self):
        return IndicadorAmbitoInstrumentoEvaluacion.objects.filter(ambitoinstrumento__in=self.ambitoinstrumentoevaluacion_set.all()).count()

    @staticmethod
    def flexbox_query(q):
        return InstrumentoEvaluacion.objects.filter(Q(nombre__contains=q))

    def flexbox_repr(self):
        return str(self.id)+'-'+self.nombre

class AmbitoInstrumentoEvaluacion(models.Model):
    instrumento = models.ForeignKey(InstrumentoEvaluacion, on_delete=models.CASCADE)
    ambito = models.ForeignKey(AmbitoEvaluacion, on_delete=models.CASCADE)

    def __str__(self):
        return "Ambito Instrumento Evaluacion"

    class Meta:
        verbose_name = "Ambito Instrumento de Evaluacion"
        verbose_name_plural = "Ambitos Instrumentos de Evaluacion"

    def indicadores_libres(self):
        return IndicadorEvaluacion.objects.all().exclude(id__in=[x.indicador.id for x in self.indicadorambitoinstrumentoevaluacion_set.all()]).order_by("nombre")

    def indicadores_libres_encuesta(self):
        return IndicadorEvaluacion.objects.filter(encuesta=True).exclude(id__in=[x.indicador.id for x in self.indicadorambitoinstrumentoevaluacion_set.all()]).order_by("nombre")

    def indicadores(self):
        if IndicadorAmbitoInstrumentoEvaluacion.objects.filter(ambitoinstrumento=self).order_by('indicador__nombre').exists():
            return IndicadorAmbitoInstrumentoEvaluacion.objects.filter(ambitoinstrumento=self).order_by('indicador__nombre')
        return None

class IndicadorAmbitoInstrumentoEvaluacion(models.Model):
    ambitoinstrumento = models.ForeignKey(AmbitoInstrumentoEvaluacion, on_delete=models.CASCADE)
    indicador = models.ForeignKey(IndicadorEvaluacion, on_delete=models.CASCADE)

    def __str__(self):
        return "Indicador Ambito Instrumento Evaluacion"

    class Meta:
        verbose_name = "Indicador Ambito Instrumento Evaluacion"
        verbose_name_plural = "Indicador Ambito Instrumento Evaluacion"

    def encuestaron_excelente(self):
        return DatoRespuestaEncuesta.objects.filter(indicador=self, valor=5).count() if DatoRespuestaEncuesta.objects.filter(indicador=self, valor=5).exists() else 0

    def encuestaron_muybien(self):
        return DatoRespuestaEncuesta.objects.filter(indicador=self, valor=4).count() if DatoRespuestaEncuesta.objects.filter(indicador=self, valor=4).exists() else 0

    def encuestaron_bien(self):
        return DatoRespuestaEncuesta.objects.filter(indicador=self, valor=3).count() if DatoRespuestaEncuesta.objects.filter(indicador=self, valor=3).exists() else 0

    def encuestaron_regular(self):
        return DatoRespuestaEncuesta.objects.filter(indicador=self, valor=2).count() if DatoRespuestaEncuesta.objects.filter(indicador=self, valor=2).exists() else 0

    def encuestaron_mal(self):
        return DatoRespuestaEncuesta.objects.filter(indicador=self, valor=1).count() if DatoRespuestaEncuesta.objects.filter(indicador=self, valor=1).exists() else 0


DIAS_EVALUACION = (
    (7, '1 SEMANA ANTES'),
    (14,'2 SEMANAS ANTES'),
    (30,'1 MES ANTES'),
    (45,'6 SEMANAS ANTES')
)

class ProcesoEvaluativo(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    instrumentoalumno = models.ForeignKey(InstrumentoEvaluacion, related_name='instrumentoalumno', null=True, blank=True, on_delete=models.CASCADE)
    instrumentoprofesor = models.ForeignKey(InstrumentoEvaluacion, related_name='instrumentoprofesor', null=True, blank=True, on_delete=models.CASCADE)
    instrumentocoordinador = models.ForeignKey(InstrumentoEvaluacion, related_name='instrumentocoordinador', null=True, blank=True, on_delete=models.CASCADE)
    desde = models.DateField()
    hasta = models.DateField()
    activado = models.BooleanField(blank=True, null=True)
    rangoactivacion = models.BooleanField(blank=True, null=True)
    diasactivacion = models.IntegerField(choices=DIAS_EVALUACION)

    @staticmethod
    def flexbox_query(q):
        return ProcesoEvaluativo.objects.filter(Q(periodo__nombre__contains=q))

    def flexbox_repr(self):
        return str(self.id)+'-'+self.periodo.nombre

    def proceso_activo(self):
        return self.activado

    def proceso_perido_activo(self, periodo):
        if ProcesoEvaluativo.objects.filter(periodo=periodo).exists():
            return ProcesoEvaluativo.objects.filter(periodo=periodo)[:1].get().activado
        else:
            False

    def __str__(self):
        return "Proceso Evaluativo "+str(self.periodo)

    class Meta:
        verbose_name = "Proceso de Evaluacion"
        verbose_name_plural = "Procesos de Evaluacion"

    def instrumento_alumno(self):
        if self.instrumentoalumno:
            return self.instrumentoalumno
        else:
            instrumento = InstrumentoEvaluacion(nombre = "Evaluacion de Docentes por Alumnos")
            instrumento.save()
            self.instrumentoalumno = instrumento
            self.save()
            return self.instrumentoalumno

    def instrumento_profesor(self):
        if self.instrumentoprofesor is not None:
            return self.instrumentoprofesor
        else:
            instrumento = InstrumentoEvaluacion(nombre = "Autoevaluacion de Docentes")
            instrumento.save()
            self.instrumentoprofesor = instrumento
            self.save()
            return self.instrumentoprofesor

    def instrumento_coordinador(self):
        if self.instrumentocoordinador is not None:
            return self.instrumentocoordinador
        else:
            instrumento = InstrumentoEvaluacion(nombre = "Evaluacion de Docentes por Coordinadores")
            instrumento.save()
            self.instrumentocoordinador = instrumento
            self.save()
            return self.instrumentocoordinador


class EvaluacionProfesor(models.Model):
    proceso = models.ForeignKey(ProcesoEvaluativo, on_delete=models.CASCADE)
    instrumento = models.ForeignKey(InstrumentoEvaluacion, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    fecha = models.DateField()
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)

    def __str__(self):
        return "Evaluacion Profesor: "+str(self.profesor)

    class Meta:
        verbose_name = "Evaluacion del Profesor"
        verbose_name_plural = "Evaluaciones de Profesores"

class DatoInstrumentoEvaluacion(models.Model):
    evaluacion = models.ForeignKey(EvaluacionProfesor, on_delete=models.CASCADE)
    indicador = models.ForeignKey(IndicadorAmbitoInstrumentoEvaluacion, on_delete=models.CASCADE)
    valor = models.IntegerField()
    observaciones = models.CharField(max_length=200)

    def __str__(self):
        return "Dato Instrumento Evaluacion"

    class Meta:
        verbose_name = "Dato Instrumento de Evaluacion"
        verbose_name_plural = "Datos Instrumentos Evaluacion"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observaciones = self.observaciones.upper()
        super(DatoInstrumentoEvaluacion, self).save(force_insert, force_update, using, update_fields)

class EstudioInscripcion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    colegio = models.CharField(max_length=200, blank=True, null=True)
    titulo = models.CharField(max_length=200, blank=True, null=True)
    incorporacion = models.CharField(max_length=10, blank=True, null=True)
    especialidad = models.CharField(max_length=100, blank=True, null=True)
    universidad = models.CharField(max_length=200, blank=True, null=True)
    carrera = models.CharField(max_length=200, blank=True, null=True)
    anoestudio = models.IntegerField(blank=True, null=True)
    graduado = models.BooleanField(blank=True, null=True)

    def __str__(self):
        return str(self.inscripcion)

    class Meta:
        verbose_name = "Estudio Realizado"
        verbose_name_plural = "Estudios Realizados"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.colegio: self.colegio = self.colegio.upper()
        if self.titulo: self.titulo = self.titulo.upper()
        if self.incorporacion: self.incorporacion = self.incorporacion.upper()
        if self.especialidad: self.especialidad = self.especialidad.upper()
        if self.universidad: self.universidad = self.universidad.upper()
        if self.carrera: self.carrera = self.carrera.upper()
        super(EstudioInscripcion, self).save(force_insert, force_update, using, update_fields)


class EmpresaInscripcion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    razon = models.CharField(max_length=200, blank=True, null=True)
    cargo = models.CharField(max_length=200, blank=True, null=True)
    direccion = models.CharField(max_length=200, blank=True, null=True)
    telefono = models.CharField(max_length=100, blank=True, null=True)
    email = models.CharField(max_length=200, blank=True, null=True)

    def __str__(self):
        return str(self.inscripcion) + "Razon: " + self.razon + "Cargo: "+ self.cargo

    class Meta:
        verbose_name = "Actividad Laboral"
        verbose_name_plural = "Actividades Laborales"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.razon: self.razon = self.razon.upper()
        if self.cargo: self.cargo = self.cargo.upper()
        if self.direccion: self.direccion = self.direccion.upper()
        if self.telefono: self.telefono = self.telefono.upper()
        super(EmpresaInscripcion, self).save(force_insert, force_update, using, update_fields)


class DocumentoInscripcion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    archivo = models.ForeignKey(Archivo, on_delete=models.CASCADE)
    aprobado =models.BooleanField(default=False)
    motivo = models.CharField(max_length=500, blank=True, null=True)

    def __str__(self):
        return "Documentos de: "  + str(self.inscripcion)

    class Meta:
        verbose_name = "Documento de Inscripcion"
        verbose_name_plural = "Documentos de Inscripciones"


    def correo_secretaria(self,mensaje):
        if TipoIncidencia.objects.filter(pk=61).exists():
            tipo = TipoIncidencia.objects.get(pk=61)
            hoy = datetime.now().today()
            contenido = mensaje
            send_html_mail(contenido,
                           "emails/documentoinscripcionsecretaria.html", {'d': self, 'fecha': hoy },tipo.correo.split(","))

    def correo_alumno(self,mensaje):
        correo = self.inscripcion.persona.emailinst
        if  self.inscripcion.persona.email:
            correo= correo+ ","+ self.inscripcion.persona.email
        hoy = datetime.now().today()
        contenido = "NOTIFICACION"
        send_html_mail(contenido,
                       "emails/documentoinscripcionalumno.html", {'d': self, 'fecha': hoy ,'mensaje':mensaje },correo.split(","))

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.motivo: self.motivo = self.motivo.upper()
        super(DocumentoInscripcion, self).save(force_insert, force_update, using, update_fields)

class InscripcionGrupo(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    grupo = models.ForeignKey(Grupo, on_delete=models.CASCADE)
    activo = models.BooleanField(default=False)

    def __str__(self):
        return str(self.inscripcion) + " -> " + str(self.grupo)

    class Meta:
        verbose_name = "Inscripcion a Grupo"
        verbose_name_plural = "Inscripciones a Grupos"

class InscripcionFlags(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    tienechequeprotestado = models.BooleanField(blank=True, null=True)
    tienedeudaexterna = models.BooleanField(blank=True, null=True)
    motivo = models.CharField(max_length=500, blank=True, null=True)

    def __str__(self):
        return str(self.inscripcion)

    class Meta:
        verbose_name = "Inscripcion Bandera"
        verbose_name_plural = "Inscripciones Banderas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()
        super(InscripcionFlags, self).save(force_insert, force_update, using, update_fields)



# GRUPO DE USUARIOS QUE ATIENDEN UNA DETERMINADA CARRERA

class GrupoCoordinadorCarrera(models.Model):
    """Indica el grupo de usuarios coordinador de cada carrera"""
    group = models.ForeignKey(Group, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)

    def __str__(self):
        return "Grupos Usuarios responsables de Carreras"

    class Meta:
        verbose_name = "Grupo Responsable de Carrera"
        verbose_name_plural = "Grupo Responsables de Carreras"




class PrecioCarreraGrupo(models.Model):
    """Indica los precios que se deben cobrar por distintos rubros
    en la carrera"""
    grupo = models.ForeignKey(Grupo, on_delete=models.CASCADE)
    precioinscripcion = models.FloatField()
    preciomatricula = models.FloatField()
    precioperiodo = models.FloatField()
    cuotas = models.IntegerField()

    def __str__(self):
        return "Precios: "+self.grupo.nombre

    class Meta:
        verbose_name = "Precio de Carrera por Grupo"
        verbose_name_plural = "Precios de Carreras por Grupos"

    def valor_cuota(self):
        if self.cuotas>0:
            return self.precioperiodo/self.cuotas
        return 0



#Modelo para Clave de Padres en el Sistema
class PadreClave(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=200, verbose_name='Nombre Completo', blank=True, null=True)
    cedula = models.CharField(max_length=15, verbose_name='Cedula', blank=True, null=True)
    email = models.CharField(max_length=200, verbose_name='Correo', blank=True, null=True)
    fecha = models.DateField(verbose_name='Fecha de Solicitud')
    clave = models.CharField(max_length=100, verbose_name='Clave', blank=True, null=True)

    def __str__(self):
        return "Consulta del Padre"

    class Meta:
        verbose_name = "Clave de Padres"
        verbose_name_plural = "Claves de Padres"

    def mail_subject_respuesta_clave(self, email):
        try:
            tituloinst = TituloInstitucion.objects.filter()[:1].get()
        except :
            tituloinst = None
        send_html_mail("Acceso de Padres al Sistema Academico",
                       "emails/respuestaclavepadre.html",
                       {'d':self,'t':tituloinst}, [email])

    def mail_subject_borrar_clave(self, email):
        try:
            tituloinst = TituloInstitucion.objects.filter()[:1].get()
        except :
            tituloinst = None
        send_html_mail("Acceso de Padre Borrado del Sistema Academico",
                       "emails/borrarclavepadre.html",
                       {'d':self,'t':tituloinst}, [email])

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        self.email = self.email.lower()
        super(PadreClave, self).save(force_insert, force_update, using, update_fields)


# Modelos para Guardar la Historia de Notas del ITB
class HistoricoNotasITB(models.Model):
    historico = models.ForeignKey(HistoricoRecordAcademico, on_delete=models.CASCADE)
    n1 = models.IntegerField(blank=True, null=True)
    cod1 = models.IntegerField(blank=True, null=True)
    n2 = models.IntegerField(blank=True, null=True)
    cod2 = models.IntegerField(blank=True, null=True)
    n3 = models.IntegerField(blank=True, null=True)
    cod3 = models.IntegerField(blank=True, null=True)
    n4 = models.IntegerField(blank=True, null=True)
    cod4 = models.IntegerField(blank=True, null=True)
    n5 = models.IntegerField(blank=True, null=True)
    total = models.IntegerField(blank=True, null=True)
    recup = models.IntegerField(blank=True, null=True)
    notafinal = models.IntegerField(blank=True, null=True)
    estado = models.ForeignKey(TipoEstado, null=True, on_delete=models.CASCADE)
    permitir = models.BooleanField(default=False)

    def __str__(self):
        return "Historico Notas ITB "

    class Meta:
        verbose_name = 'Historico de Nota'
        verbose_name_plural = "Historicos de Notas"

    def codigo1(self):
        return CodigoEvaluacion.objects.get(pk=self.cod1).nombre

    def codigo2(self):
        return CodigoEvaluacion.objects.get(pk=self.cod2).nombre

    def codigo3(self):
        return CodigoEvaluacion.objects.get(pk=self.cod3).nombre

    def codigo4(self):
        return CodigoEvaluacion.objects.get(pk=self.cod4).nombre

# Parametrizacion de Cargos y Tituloa de Reportes

class CargoInstitucion(models.Model):
    cargo = models.CharField(max_length=100, verbose_name='Cargo')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)

    class Meta:
        verbose_name = "Cargo en Institucion"
        verbose_name_plural = "Cargos en Institucion"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.cargo = self.cargo.upper()
        super(CargoInstitucion, self).save(force_insert, force_update, using, update_fields)


class TituloInstitucion(models.Model):
    nombre = models.CharField(max_length=300, verbose_name='Nombre')
    direccion = models.CharField(max_length=300, verbose_name='Direccion', blank=True, null=True)
    telefono = models.CharField(max_length=200, verbose_name='Telefonos', blank=True, null=True)
    correo = models.CharField(max_length=200, verbose_name='Email', blank=True, null=True)
    web = models.CharField(max_length=200, verbose_name='Web', blank=True, null=True)
    municipio = models.CharField(max_length=100, verbose_name='Municipio', blank=True, null=True)
    nombrecomercial = models.CharField(max_length=200, verbose_name='Nombre Comercial', blank=True, null=True)
    ruc = models.CharField(max_length=15, verbose_name='Ruc', blank=True, null=True)
    contribu_especial = models.IntegerField(blank=True,verbose_name='Numero Contribuyente Especial', null=True)
    contabilidad = models.CharField(max_length=2, verbose_name='Lleva Contabilida', blank=True, null=True)
    moneda = models.CharField(max_length=10, verbose_name='Moneda', blank=True, null=True)
    alias = models.CharField(max_length=300, verbose_name='Alias')

    class Meta:
        verbose_name = "Titulo de Institucion"
        verbose_name_plural = "Titulos de Institucion"


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        self.direccion = self.direccion.upper()
        self.telefono = self.telefono.upper()
        self.correo = self.correo.lower()
        self.web = self.web.lower()
        super(TituloInstitucion, self).save(force_insert, force_update, using, update_fields)

class ConvalidacionInscripcion(models.Model):
    record = models.ForeignKey(RecordAcademico, on_delete=models.CASCADE)
    centro = models.CharField(max_length=200, verbose_name='Institucion', blank=True, null=True)
    carrera = models.CharField(max_length=100, verbose_name='Carrera', blank=True, null=True)
    asignatura = models.CharField(max_length=200, verbose_name='Asignatura', blank=True, null=True)
    anno = models.CharField(max_length=50, verbose_name='Anno de Aprobacion', blank=True, null=True)
    nota_ant = models.CharField(max_length=50, verbose_name='Calificacion', blank=True, null=True)
    nota_act = models.CharField(max_length=50, verbose_name='Calificacion Equivalente', blank=True, null=True)
    observaciones = models.CharField(max_length=300, verbose_name='Observaciones', blank=True, null=True)
    ra = models.BooleanField(blank=True, null=True)
    exa = models.BooleanField(blank=True, null=True)
    nojus = models.BooleanField(blank=True, null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateField()

    class Meta:
        verbose_name = "Convalidacion del Estudiante"
        verbose_name_plural = "Convalidaciones de Estudiantes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.centro: self.centro = self.centro.upper()
        if self.asignatura: self.asignatura = self.asignatura.upper()
        if self.observaciones: self.observaciones = self.observaciones.upper()
        if self.carrera: self.carrera = self.carrera.upper()
        super(ConvalidacionInscripcion, self).save(force_insert, force_update, using, update_fields)


class EvaluacionITS(models.Model):
    materiaasignada = models.ForeignKey(MateriaAsignada, on_delete=models.CASCADE)
    tc1 = models.FloatField()
    te1 = models.FloatField()
    p1 = models.FloatField()
    momento1 = models.FloatField()
    tc2 = models.FloatField()
    te2 = models.FloatField()
    p2 = models.FloatField()
    momento2 = models.FloatField()
    pfinal = models.FloatField()
    proy = models.FloatField()
    su = models.FloatField()
    estado = models.ForeignKey(TipoEstado, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.materiaasignada)+" "+str(self.estado) + " [TC1:"+str(self.tc1)+", TE1:"+str(self.te1)+", P1:"+str(self.p1)+", TC2:"+str(self.tc2)+", TE2:"+str(self.te2)+", P2:"+str(self.p2)+", PF:"+str(self.pfinal)+", PROY:"+str(self.proy)+"]"

    class Meta:
        verbose_name = 'Evaluacion ITS'
        verbose_name_plural = 'Evaluaciones ITS'

    def primer_momento(self):
        return round(((self.tc1 + self.te1 + self.p1)/3.0),1)

    def segundo_momento(self):
        return round(((self.tc2 + self.te2 + self.p2)/3.0),1)

    def nota_total(self):
        return self.primer_momento()+self.segundo_momento()+self.pfinal+self.proy

    def nota_final(self):
        # Si hay nota en supletorio, entonces la formula seria con el supletorio y no con el total
        if not self.su==0:
            return round((self.nota_total() + self.su)/2.0)
        return round(self.nota_total())


    def actualiza_estado(self):
        if self.momento1 and self.momento2 and self.proy and self.pfinal:
            if VALIDAR_ASISTENCIAS and not self.materiaasignada.materia.nivel.carrera.online:
                if self.materiaasignada.notafinal >= NOTA_PARA_APROBAR and self.materiaasignada.asistenciafinal >= ASIST_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                if self.materiaasignada.notafinal < NOTA_PARA_SUPLET or self.materiaasignada.asistenciafinal < ASIST_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
            else:
                if self.materiaasignada.notafinal >= NOTA_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                else:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)

            if not self.su:
                if NOTA_PARA_SUPLET <= self.materiaasignada.notafinal < NOTA_PARA_APROBAR :
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)

        else:
            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)
        self.save()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if not 0<=self.tc1<=20: self.tc1=0
        if not 0<=self.te1<=20: self.te1=0
        if not 0<=self.p1<=20: self.p1=0
        self.momento1 = self.primer_momento()
        if not 0<=self.tc2<=20: self.tc2=0
        if not 0<=self.te2<=20: self.te2=0
        if not 0<=self.p2<=20: self.p2=0
        self.momento2 = self.segundo_momento()
        if not 0<=self.pfinal<=20: self.pfinal=0
        if not 0<=self.proy<=40: self.proy=0
        if not 0<=self.su<=100: self.su=0
        ma = self.materiaasignada
        ma.notafinal = self.nota_final()
        if self.su:
            ma.supletorio=self.su
        ma.save()
        super(EvaluacionITS, self).save(force_insert, force_update, using, update_fields)


class ValeCaja(models.Model):
    valor = models.FloatField()
    recibe = models.CharField(max_length=200)
    responsable = models.CharField(max_length=200)
    concepto = models.TextField()
    referencia = models.CharField(max_length=100, blank=True, null=True)
    anulado = models.BooleanField(blank=True, null=True)
    sesion = models.ForeignKey(SesionCaja, on_delete=models.CASCADE)
    hora = models.TimeField()
    motivo = models.CharField(max_length=300)
    fecha_anula = models.DateTimeField()
    pendiente = models.BooleanField(default=True)
    motivo_baja = models.CharField(max_length=300,blank=True,null=True)
    fecha_baja = models.DateField(blank=True,null=True)


    def __str__(self):
        return "Vale de Caja $"+str(self.valor)+" emitido a: "+self.recibe + " aprobado por: "+self.responsable

    class Meta:
        verbose_name = "Vale de Caja"
        verbose_name_plural = "Vales de Cajas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.recibe: self.recibe = self.recibe.upper()
        if self.responsable: self.responsable = self.responsable.upper()
        if self.concepto: self.concepto = self.concepto.upper()
        if self.referencia: self.referencia = self.referencia.upper()
        super(ValeCaja, self).save(force_insert, force_update, using, update_fields)

class ReciboCaja(models.Model):
    valor = models.FloatField()
    persona = models.CharField(max_length=300)
    concepto = models.TextField()
    sesion = models.ForeignKey(SesionCaja, on_delete=models.CASCADE)
    hora = models.TimeField()

    def __str__(self):
        return "Recibo de Caja $"+str(self.valor)+" emitido a: "+ self.persona + str(self.sesion)

    class Meta:
        verbose_name = "Recibo de Caja"
        verbose_name_plural = "Recibos de Cajas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.persona: self.persona = self.persona.upper()
        if self.concepto: self.concepto = self.concepto.upper()
        super(ReciboCaja, self).save(force_insert, force_update, using, update_fields)


class InscripcionEstadistica(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    deuda = models.FloatField(blank=True, null=True)
    credito = models.FloatField(blank=True, null=True)
    edad = models.IntegerField(blank=True, null=True)
    matriculado = models.BooleanField(blank=True, null=True)
    retirado = models.BooleanField(blank=True, null=True)
    inactivo = models.BooleanField(blank=True, null=True)

    def __str__(self):
        return str(self.inscripcion)+" DEUDA: "+ str(self.deuda) + " CREDITO: "+ str(self.credito)

    class Meta:
        verbose_name = "Inscripcion Deuda"
        verbose_name_plural = "Inscripciones Deudas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        ins = self.inscripcion
        if RetiradoMatricula.objects.filter(inscripcion__persona__usuario__is_active=True, activo=True, inscripcion=ins).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists():
            retirado = True
        else:
            retirado = False
        if InscripcionEstadistica.objects.filter(inscripcion__persona__usuario__is_active=False, inscripcion=ins).exclude(inscripcion__carrera__nombre='CONGRESO DE PEDAGOGIA').exists():
            inactivo = True
        else:
            inactivo = False
        self.edad = self.inscripcion.persona.edad()
        self.matriculado = self.inscripcion.matriculado()
        self.retirado = retirado
        self.inactivo = inactivo
        super(InscripcionEstadistica, self).save(force_insert, force_update, using, update_fields)

#MODELOS PARA ROLES DE PAGOS DE PROFESORES
class PrestamoInstitucional(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    fecha = models.DateField()
    motivo = models.TextField()
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    cuota = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    cancelado = models.BooleanField(default=False)

    def recalcula(self):
        self.cancelado = self.valor == self.pagado()
        self.save()

    def proximo_descuento(self):
        pagado = self.pagado()
        if self.valor - pagado >= self.cuota:
            return self.cuota
        else:
            return self.valor - pagado

    def pagado(self):
        if self.rolpagoprofesordescuento_set.all().exists():
            a = self.rolpagoprofesordescuento_set.all().aggregate(Sum('descuentoprestamoinst'))
            return a['descuentoprestamoinst__sum']
        return 0

    def roles(self):
        if self.rolpagoprofesordescuento_set.all().exists():
            return self.rolpagoprofesordescuento_set.all().count()
        return 0

    def porpagar(self):
        return self.valor - self.pagado()

    def __str__(self):
        return "Prestamo: "+self.persona.nombre_completo()+" $"+str(self.valor)

    class Meta:
        verbose_name = "Prestamo Institucional"
        verbose_name_plural = "Prestamos Institucionales"


class TablaTarifaIRPersonaNatural(models.Model):
    anno = models.IntegerField()
    nombre = models.CharField(max_length=200, blank=True, null=True)
    registro = models.CharField(max_length=200, blank=True, null=True)

    class Meta:
        verbose_name = 'Tabla IRenta - Persona Natural'
        verbose_name_plural = 'Tablas IRenta - Personas Naturales'

    def __str__(self):
        return self.nombre + ' (' + str(self.anno) + ')'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        self.registro = self.registro.upper()
        super(TablaTarifaIRPersonaNatural, self).save(force_insert, force_update, using, update_fields)


class DetalleTablaTarifaIRPersonaNatural(models.Model):
    tarifa = models.ForeignKey(TablaTarifaIRPersonaNatural, on_delete=models.CASCADE)
    fb = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), verbose_name='Fraccion Basica', blank=True, null=True)
    eh = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), verbose_name='Exceso Hasta', blank=True, null=True)
    ifb = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), verbose_name='Impuesto Fraccion Basica', blank=True, null=True)
    ife = models.DecimalField(max_digits=4, decimal_places=2, default=Decimal('0.0'), verbose_name='% Impuesto Fraccion Excedente', blank=True, null=True)

    class Meta:
        verbose_name = 'Tarifa IRenta - Persona Natural - Detalle'
        verbose_name_plural = 'Tarifa IRenta - Personas Naturales - Detalles'

    def __str__(self):
        return "Detalle Tarifa IR Personas Naturales: " + str(self.tarifa.anno)


class CargoProfesor(models.Model):
    nombre = models.CharField(max_length=200)

    class Meta:
        verbose_name = 'Cargo - Profesor'
        verbose_name_plural = 'Cargos - Profesores'

    def __str__(self):
        return self.nombre

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(CargoProfesor, self).save(force_insert, force_update, using, update_fields)

#Perfil Institucional y financiero del docente
class RolPerfilProfesor(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    chlunes = models.FloatField()
    chmartes = models.FloatField()
    chmiercoles = models.FloatField()
    chjueves = models.FloatField()
    chviernes = models.FloatField()
    chsabado = models.FloatField()
    chdomingo = models.FloatField()
    esfijo = models.BooleanField(blank=True, null=True)
    horassalario = models.FloatField(blank=True, null=True)     #Horas Clases de Contrato
    salario = models.FloatField(blank=True, null=True)          #Salario Contratado
    descuentos = models.FloatField(blank=True, null=True)       #No se va a usar luego del cambio rol
    salariopercibir = models.FloatField(blank=True, null=True)  #No se va a usar luego del cambio rol
    esadministrativo = models.BooleanField(default=False)
    fechaafiliacion = models.DateField(blank=True, null=True)
    coordinacion = models.ForeignKey(Coordinacion, blank=True, null=True, on_delete=models.CASCADE)

    #Nuevos campos para si es administrativo adicionar cargo
    cargo = models.ForeignKey(CargoProfesor, blank=True, null=True, on_delete=models.CASCADE)
    iniciocargo = models.DateField(blank=True, null=True)
    fincargo = models.DateField(blank=True, null=True)
    documentocargo = models.CharField(max_length=100, blank=True, null=True)


    def __str__(self):
        return str(self.profesor) + "Administrativo" if self.esadministrativo else str(self.profesor)

    class Meta:
        verbose_name = "Rol Pago Perfil de Profesor"
        verbose_name_plural = "Roles Pagos Perfiles de Profesores"

    def gastos_personales_sri(self):
        if self.profesorinstituciongp_set.exists():
            gastospersonales = self.profesorinstituciongp_set.all()[:1].get()
        else:
            gastospersonales = ProfesorInstitucionGP(perfilprof=self)
            gastospersonales.save()
        return gastospersonales

#Proyeccion de Gastos Personales(GP)
class ProfesorInstitucionGP(models.Model):
    perfilprof = models.ForeignKey(RolPerfilProfesor, on_delete=models.CASCADE)
    vivienda = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    educacion = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    salud = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    vestimenta = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    alimentacion = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    total = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)

    class Meta:
        verbose_name = 'Personal - Gasto Proyectado SRI'
        verbose_name_plural = 'Personal - Gastos Proyectados SRI'

    def __str__(self):
        return str(self.perfilprof) + ' ' + str(self.total)

    def calcula_total_gp(self):
        return (self.vivienda + self.educacion + self.salud + self.vestimenta + self.alimentacion).quantize(Decimal(10)**-2)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.total = self.calcula_total_gp()
        super(ProfesorInstitucionGP, self).save(force_insert, force_update, using, update_fields)


class RolPago(models.Model):
    nombre = models.CharField(max_length=200)
    inicio = models.DateField(verbose_name='Fecha Inicial', blank=True, null=True)
    fin = models.DateField(verbose_name='Fecha Final', blank=True, null=True)
    fecha = models.DateField(verbose_name='Fecha Calculo', blank=True, null=True)
    cerrado = models.BooleanField(default=False)
    fechacierre = models.DateField(verbose_name='Fecha Cierre', blank=True, null=True)
    tablatarifa = models.ForeignKey(TablaTarifaIRPersonaNatural, blank=True, null=True, on_delete=models.CASCADE)
    fechamax = models.DateField(verbose_name='Fecha Max Clase', blank=True, null=True)
    fechamaxvin = models.DateField(verbose_name='Fecha Max Vinculacion', blank=True, null=True)
    activo =  models.BooleanField(default=True)

    def __str__(self):
        return self.nombre + " " + "[" + self.inicio.strftime('%d-%m-%Y') + " al " + self.fin.strftime('%d-%m-%Y') + "]"

    @staticmethod
    def flexbox_query(q):
        return RolPago.objects.filter(nombre__contains=q,activo=True)

    def flexbox_repr(self):
        return str(self)

    # Funciones para totalizar Roles Pago Profesor
    def total_salariocontratado(self):
        return round(sum([x.salario() for x in self.rolpagoprofesor_set.all()]), 2)

    def total_salariocontratado_mujeres(self):
        return sum([x.salario() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO)])

    def total_salariocontratado_hombres(self):
        return sum([x.salario() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO)])


    def total_salariomes(self):
        return self.rolpagoprofesor_set.all().aggregate(Sum('salariomes'))['salariomes__sum']

    def total_salariomes_mujeres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO).aggregate(Sum('salariomes'))['salariomes__sum']

    def total_salariomes_hombres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO).aggregate(Sum('salariomes'))['salariomes__sum']


    def total_salariodocencia(self):
        return self.rolpagoprofesor_set.all().aggregate(Sum('valortotal'))['valortotal__sum']

    def total_bonificaciondocencia(self):
        return self.rolpagoprofesor_set.all().aggregate(Sum('diferenciavalor'))['diferenciavalor__sum']

    def total_tutorias(self):
        return self.rolpagoprofesor_set.all().aggregate(Sum('tutorias'))['tutorias__sum']


    def total_horasextras(self):
        return round(self.rolpagoprofesor_set.all().aggregate(Sum('hextrass'))['hextrass__sum'] + self.rolpagoprofesor_set.all().aggregate(Sum('hextrase'))['hextrase__sum'], 2)

    def total_horasextras_mujeres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO).aggregate(Sum('hextrass'))['hextrass__sum'] + self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO).aggregate(Sum('hextrase'))['hextrase__sum']

    def total_horasextras_hombres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO).aggregate(Sum('hextrass'))['hextrass__sum'] + self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO).aggregate(Sum('hextrase'))['hextrase__sum']


    def total_otrosingresos(self):
        return self.rolpagoprofesor_set.all().aggregate(Sum('otrosing'))['otrosing__sum']

    def total_otrosingresos_mujeres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO).aggregate(Sum('otrosing'))['otrosing__sum']

    def total_otrosingresos_hombres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO).aggregate(Sum('otrosing'))['otrosing__sum']


    def total_ingresosgravados(self):
        return self.rolpagoprofesor_set.all().aggregate(Sum('totalinggravados'))['totalinggravados__sum']

    def total_ingresosgravados_mujeres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO).aggregate(Sum('totalinggravados'))['totalinggravados__sum']

    def total_ingresosgravados_hombres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO).aggregate(Sum('totalinggravados'))['totalinggravados__sum']


    def total_fondoreserva(self):
        return self.rolpagoprofesor_set.all().aggregate(Sum('fondoreserva'))['fondoreserva__sum']

    def total_fondoreserva_mujeres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO).aggregate(Sum('fondoreserva'))['fondoreserva__sum']

    def total_fondoreserva_hombres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO).aggregate(Sum('fondoreserva'))['fondoreserva__sum']


    def total_ingresos(self):
        return round(sum([x.total_ingresos_general() for x in self.rolpagoprofesor_set.all()]), 2)

    def total_ingresos_mujeres(self):
        return sum([x.total_ingresos_general() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO)])

    def total_ingresos_hombres(self):
        return sum([x.total_ingresos_general() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO)])


    def total_iess(self):
        return round(sum([x.iess() for x in self.rolpagoprofesor_set.all()]), 2)

    def total_iess_mujeres(self):
        return sum([x.iess() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO)])

    def total_iess_hombres(self):
        return sum([x.iess() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO)])


    def total_prestamosiess(self):
        return round(sum([x.prestamos_iess() for x in self.rolpagoprofesor_set.all()]), 2)

    def total_prestamosiess_mujeres(self):
        return sum([x.prestamos_iess() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO)])

    def total_prestamosiess_hombres(self):
        return sum([x.prestamos_iess() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO)])


    def total_prestamosinst(self):
        return round(sum([x.descuento_prestamos_inst() for x in self.rolpagoprofesor_set.all()]), 2)

    def total_prestamosinst_mujeres(self):
        return sum([x.descuento_prestamos_inst() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO)])

    def total_prestamosinst_hombres(self):
        return sum([x.descuento_prestamos_inst() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO)])


    def total_quincena(self):
        return round(sum([x.descuento_quincena() for x in self.rolpagoprofesor_set.all()]), 2)

    def total_quincena_mujeres(self):
        return sum([x.descuento_quincena() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO)])

    def total_quincena_hombres(self):
        return sum([x.descuento_quincena() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO)])


    def total_multas(self):
        return round(sum([x.descuento_multas() for x in self.rolpagoprofesor_set.all()]), 2)

    def total_multas_mujeres(self):
        return sum([x.descuento_multas() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO)])

    def total_multas_hombres(self):
        return sum([x.descuento_multas() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO)])


    def total_irenta(self):
        return round(sum([x.descuento_irenta() for x in self.rolpagoprofesor_set.all()]), 2)

    def total_irenta_mujeres(self):
        return sum([x.descuento_irenta() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO)])

    def total_irenta_hombres(self):
        return sum([x.descuento_irenta() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO)])


    def total_otrosdescuentos(self):
        return round(sum([x.descuento_otrosdesc() for x in self.rolpagoprofesor_set.all()]), 2)

    def total_otrosdescuentos_mujeres(self):
        return sum([x.descuento_otrosdesc() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO)])

    def total_otrosdescuentos_hombres(self):
        return sum([x.descuento_otrosdesc() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO)])


    def total_descuentos(self):
        return round(sum([x.total_descuentos() for x in self.rolpagoprofesor_set.all()]), 2)

    def total_descuentos_mujeres(self):
        return sum([x.total_descuentos() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO)])

    def total_descuentos_hombres(self):
        return sum([x.total_descuentos() for x in self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO)])


    def total_valor_percibir(self):
        return self.rolpagoprofesor_set.all().aggregate(Sum('salariopercibir'))['salariopercibir__sum']

    def total_valor_percibir_mujeres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO).aggregate(Sum('salariopercibir'))['salariopercibir__sum']

    def total_valor_percibir_hombres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO).aggregate(Sum('salariopercibir'))['salariopercibir__sum']


    def cantidad_docentes(self):
        return self.rolpagoprofesor_set.all().count()

    def cantidad_docentes_mujeres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO).count()

    def cantidad_docentes_hombres(self):
        return self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO).count()


    def promedio_dias(self):
        return round(self.rolpagoprofesor_set.all().aggregate(Sum('dias'))['dias__sum'] / self.cantidad_docentes())

    def promedio_dias_mujeres(self):
        if self.cantidad_docentes_mujeres():
            return round(self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_FEMENINO).aggregate(Sum('dias'))['dias__sum'] / self.cantidad_docentes_mujeres())
        return 0

    def promedio_dias_hombres(self):
        if self.cantidad_docentes_hombres():
            return round(self.rolpagoprofesor_set.filter(profesor__persona__sexo=SEXO_MASCULINO).aggregate(Sum('dias'))['dias__sum'] / self.cantidad_docentes_hombres())
        return 0

    def calcular_rolpagoprofesor(self):
        # self.rolpagoprofesor_set.all().delete() #borrar antes para volver a actualizar
        profesores = [x for x in Profesor.objects.filter(activo=True) if (x.tiene_lecciongrupo(self.inicio, self.fin) or x.es_administrativo() or x.tutoria_exist())]
        contad = 1
        for profesor in profesores:
            # print(profesor.id)
            if not profesor.rolpagoprofesor_set.filter(rol=self).exists():
                rolpagoprofesor = RolPagoProfesor(rol=self, profesor=profesor)
                rolpagoprofesor.save()
                #Obtener o crear el model de descuentos
                rolprofdesc = rolpagoprofesor.modelo_descuento()
            else:
                rolpagoprofesor = profesor.rolpagoprofesor_set.filter(rol=self)[:1].get()

            rolpagoprofesor.recalcular()

    class Meta:
        verbose_name = "Rol de Pago"
        verbose_name_plural = "Roles de Pagos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(RolPago, self).save(force_insert, force_update, using, update_fields)



class RolPagoProfesor(models.Model):
    rol = models.ForeignKey(RolPago, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    dias = models.IntegerField(default=DIAS_TRABAJO)                  #Dias laborados
    horastrabajo = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)               #Horas de Clases impartidas
    valortotal = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)                 #Salario segun horas de clases
    diferenciavalor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)            #Bonificacion por docencia
    tutorias = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)                   #Valor segun tutorias impartidas
    salariomes = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)                 #Salario Mes
    hextrass = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)                   #Valor de horas extras suplementarias
    hextrase = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)                   #Valor de horas extras extraordinarias
    otrosing = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)                   #Valor de otros ingresos a percibir
    totalinggravados = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)           #Total de ingresos gravados
    fondoreserva = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)               #Valor del fondo de reserva
    salariopercibir = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)            #Total de salario ingresos - descuentos


    def __str__(self):
        return str(self.rol) + " " + str(self.profesor)

    class Meta:
        verbose_name = "Rol Pago del Profesor"
        verbose_name_plural = "Roles Pagos de Profesores"

    def genera_roldetallepagoprofesor(self):
        self.rolpagodetalleprofesor_set.all().delete()
        materias = Materia.objects.filter(lecciongrupo__profesor=self.profesor, lecciongrupo__fecha__gte=self.rol.inicio, lecciongrupo__fecha__lte=self.rol.fin).distinct()
        for materia in materias:
            rolpagodetalleprofesor = RolPagoDetalleProfesor(rolprof=self,materia=materia, horasmateria=0, valormateria=0)
            rolpagodetalleprofesor.save()
            rolpagodetalleprofesor.recalcular()

    def horas_extras(self):
        return (self.hextrase + self.hextrass).quantize(Decimal(10)**-2)

    def total_ingresos_gravados(self):
        if self.diferenciavalor > 0:
            self.totalinggravados = (self.salariomes + self.horas_extras() + self.otrosing + self.diferenciavalor + self.tutorias).quantize(Decimal(10)**-2)
        else:
            self.totalinggravados = (self.salariomes + self.horas_extras() + self.otrosing + self.tutorias).quantize(Decimal(10)**-2)
        self.save()
        return self.totalinggravados

    def total_ingresos_general(self):
        if self.fondoreserva:
            return (self.total_ingresos_gravados() + self.fondoreserva).quantize(Decimal(10)**-2)
        return self.total_ingresos_gravados()

    def es_fijo(self):
        return self.rol_perfil().esfijo

    def es_administrativo(self):
        return self.rol_perfil().esadministrativo

    # Buscar el modelo Descuento o sino crearlo
    def modelo_descuento(self):
        if self.rolpagoprofesordescuento_set.exists():
            profdesc = self.rolpagoprofesordescuento_set.all()[:1].get()
        else:
            profdesc = RolPagoProfesorDescuento(rolprof=self, gp=self.rol_perfil().gastos_personales_sri())
            profdesc.save()

        return profdesc

    def iess(self):
        if self.total_ingresos_gravados():
            if MODELO_EVALUACION==EVALUACION_CASADE:
                return (self.total_ingresos_gravados() * Decimal(COEFICIENTE_IVA)).quantize(Decimal(10)**-2)
            else:
                return (self.total_ingresos_gravados() * Decimal(COEFICIENTE_PORCIENTO_IESS)).quantize(Decimal(10)**-2)
        return 0
    # OCU 23/05/2014 NUEVO CALCULO PARA CASADE
    def total_ingresos_general(self):
        if self.total_ingresos_gravados():
            if MODELO_EVALUACION==EVALUACION_CASADE:
                return (self.total_ingresos_gravados() + self.iess()).quantize(Decimal(10)**-2)
            else:
                return (self.total_ingresos_gravados() + self.fondo_reserva()).quantize(Decimal(10)**-2)
        return self.total_ingresos_gravados()

    def prestamos_iess(self):
        if self.modelo_descuento():
            return self.modelo_descuento().prestamoiess
        return 0

    def descuento_prestamos_inst(self):
        if self.modelo_descuento():
            return self.modelo_descuento().descuentoprestamoinst
        return 0

    def descuento_quincena(self):
        if self.modelo_descuento():
            return self.modelo_descuento().quincena
        return 0

    def descuento_multas(self):
        if self.modelo_descuento():
            return self.modelo_descuento().descuentomulta
        return 0

    def descuento_irenta(self):
        if self.modelo_descuento():
            if MODELO_EVALUACION==EVALUACION_CASADE:
                return self.modelo_descuento().irenta
                # pass
            else:
                return self.modelo_descuento().irenta
        return 0

    def descuento_otrosdesc(self):
        if self.modelo_descuento():
            return self.modelo_descuento().otrosdesc
        return 0

    def total_descuentos(self):
        if self.modelo_descuento():
            return self.modelo_descuento().totaldesc
        return 0

    def anticipo_quincena(self):
        return (self.salariomes * Decimal(COEFICIENTE_ANTICIPO_QUINCENA)).quantize(Decimal(10)**-2)

    def salario_a_percibir(self):
        return (self.total_ingresos_general() - self.modelo_descuento().totaldesc).quantize(Decimal(10)**-2)

    def salario_mes(self):
        if self.rol_perfil():
            if self.rol_perfil().salario !=None:
                self.salariomes = (self.salario()*self.dias / Decimal(DIAS_TRABAJO)).quantize(Decimal(10)**-2)
                # if not self.salariomes:
                #     self.salariomes= Decimal(0)
            else:
                self.salariomes = Decimal(0)
        else:
            self.salariomes = Decimal(0)

        self.save()

    def salario(self):
        if self.rol_perfil():
            if self.rol_perfil().salario !=None:
                return Decimal(self.rol_perfil().salario)
            else:
                return Decimal(0)

    def fondo_reserva(self):
        ultimafecharol = self.rol.fin
        if self.rol_perfil().fechaafiliacion:
            if (ultimafecharol - self.rol_perfil().fechaafiliacion).days > 365:
                return (self.salario()/Decimal(12.0)).quantize(Decimal(10)**-2)
        return 0

    def bonificacion_docencia(self):
        if self.es_administrativo():
            self.diferenciavalor = self.valortotal
        else:
            self.diferenciavalor = self.calcula_diferencia_valor()
        self.save()

    def horas(self):
        return self.rol_perfil().horassalario

    def calcula_diferencia_valor(self):
        if not self.salario():
            perfil = self.rol_perfil()
            perfil.salario = 0
            perfil.horassalario = 0
            perfil.save()
        return (self.valortotal - self.salariomes).quantize(Decimal(10)**-2)

    def calcula_horas_trabajadas(self):
        # OCastillo cambio en calculo horas por docentes con horario
        if self.profesor.conhorario:
            if LeccionGrupo.objects.filter(profesor=self.profesor, fecha__gte=self.rol.inicio, fecha__lte=self.rol.fin).exclude(Q(horaentrada__gte=self.profesor.horainicio,horaentrada__lte=self.profesor.horafin)|Q(horasalida__gte=self.profesor.horainicio,horasalida__lte=self.profesor.horafin),dia__in=[1,2,3,4,5]).exists():
                # return sum([x.turno.horas for x in leccionesGrupo])
                return LeccionGrupo.objects.filter(profesor=self.profesor, fecha__gte=self.rol.inicio, fecha__lte=self.rol.fin).exclude(Q(horaentrada__gte=self.profesor.horainicio,horaentrada__lte=self.profesor.horafin)|Q(horasalida__gte=self.profesor.horainicio,horasalida__lte=self.profesor.horafin),dia__in=[1,2,3,4,5]).aggregate(Sum('turno__horas'))['turno__horas__sum']
            else:
                return 0
        else:
            if LeccionGrupo.objects.filter(profesor=self.profesor, fecha__gte=self.rol.inicio, fecha__lte=self.rol.fin).select_related('turno').exists():
                return LeccionGrupo.objects.filter(profesor=self.profesor, fecha__gte=self.rol.inicio, fecha__lte=self.rol.fin).select_related('turno').aggregate(Sum('turno__horas'))['turno__horas__sum']
            else:
               return 0
            # leccionesGrupo = LeccionGrupo.objects.filter(profesor=self.profesor, fecha__gte=self.rol.inicio, fecha__lte=self.rol.fin).select_related('turno').aggregate(Sum('turno__horas'))['turno__horas__sum']
            # if leccionesGrupo.exists():
            #     return sum([x.turno.horas for x in leccionesGrupo])
            # else:
            #     return 0

    def calcula_valor_total(self):
        suma=0
        # OCastillo cambio en calculo horas por docentes con horario
        if self.profesor.conhorario:
            if LeccionGrupo.objects.filter(profesor=self.profesor, fecha__gte=self.rol.inicio,fecha__lte=self.rol.fin).exclude(Q(horaentrada__gte=self.profesor.horainicio, horaentrada__lte=self.profesor.horafin) | Q(horasalida__gte=self.profesor.horainicio, horasalida__lte=self.profesor.horafin),dia__in=[1, 2, 3, 4, 5]).exists():
                leccionesGrupo=LeccionGrupo.objects.filter(profesor=self.profesor, fecha__gte=self.rol.inicio,fecha__lte=self.rol.fin).exclude(Q(horaentrada__gte=self.profesor.horainicio, horaentrada__lte=self.profesor.horafin) | Q(horasalida__gte=self.profesor.horainicio, horasalida__lte=self.profesor.horafin),dia__in=[1, 2, 3, 4, 5])
                for lg in leccionesGrupo:
                    suma += lg.costo_profesor_dia(self.rol.inicio)
        else:
            leccionesGrupo = LeccionGrupo.objects.filter(profesor=self.profesor, fecha__gte=self.rol.inicio, fecha__lte=self.rol.fin)
            if leccionesGrupo.exists():
                for lg in leccionesGrupo:
                    suma += lg.costo_profesor_dia(self.rol.inicio)
        return suma

    def datos_perfil_incompletos(self):
        rol_perfil = self.rol_perfil()
        return not rol_perfil.chlunes or  not rol_perfil.chmartes or \
            not rol_perfil.chmiercoles or not rol_perfil.chjueves or \
            not rol_perfil.chviernes or not rol_perfil.chsabado or not rol_perfil.chdomingo

    def rol_perfil(self):
        #Crea el perfil del rol en caso de no existir
        if not self.profesor.rolperfilprofesor_set.all().exists():
            rolperfilprofesor = RolPerfilProfesor(profesor=self.profesor,
                                                  chlunes=0,chmartes=0,
                                                  chmiercoles=0,chjueves=0,
                                                  chviernes=0,chsabado=0,
                                                  chdomingo=0,esfijo=False,
                                                  salario=0, horassalario=0,
                                                  descuentos=0,salariopercibir=0)
            rolperfilprofesor.save()
        else:
            rolperfilprofesor = self.profesor.rolperfilprofesor_set.all()[:1].get()

        return rolperfilprofesor


    def recalcular(self):
        self.horastrabajo = Decimal(self.calcula_horas_trabajadas()).quantize(Decimal(10)**-2)

        #Ingresosssss
        self.valortotal = Decimal(self.calcula_valor_total()).quantize(Decimal(10)**-2)   #Calcula el valor horas clases, convertir a Decimal
        self.salario_mes()                                      #Calcular el salario mes
        self.bonificacion_docencia()                            #Calcula la diferencia valor clases menos salario base
        self.totalinggravados = self.total_ingresos_gravados()
        self.fondoreserva = self.fondo_reserva()                #Calcula el fondo de reserva
        # 23-05-2014 OCU para totalizar factura docentes + iva
        if MODELO_EVALUACION==EVALUACION_CASADE:
            self.salariopercibir = self.salario_a_percibir()+ self.iess()   #ReCalcula valor a percibir
        else:
            self.salariopercibir = self.salario_a_percibir()        #ReCalcula valor a percibir

        self.save()

        #Descuentosssss
        desc = self.modelo_descuento()
        desc.iess = self.iess()
        desc.quincena = self.anticipo_quincena()

        #Si tiene multa obtener el valor de la multa a ser descontada
        if self.profesor.multa_rolpago():
            multa = self.profesor.multa_rolpago()
            desc.descuentomulta = multa.valor
            desc.multa = multa
            #Ha sido asignada una multa a un rol
            multa.cancelada = True
            multa.save()

        desc.save()
        if MODELO_EVALUACION==EVALUACION_CASADE:
            self.salariopercibir = self.salario_a_percibir()  #Se vuelve a ReCalcular valor a percibir + iva
        else:
            self.salariopercibir = self.salario_a_percibir()  #Se vuelve a ReCalcular valor a percibir por los descuentos
        self.save()

        self.genera_roldetallepagoprofesor() #Genera el detalle de rol de pago


class TipoMulta(models.Model):
    nombre = models.CharField(max_length=200)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = 'Tipo de Multa Docente'
        verbose_name_plural = 'Tipos de Multas Docentes'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoMulta, self).save(force_insert, force_update, using, update_fields)

class Multa(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoMulta, on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=11, decimal_places=2, blank=True, null=True)
    fecha = models.DateField()
    motivo = models.CharField(max_length=200)
    cancelada = models.BooleanField(default=False)

    class Meta:
        verbose_name = 'Multa Docente'
        verbose_name_plural = 'Multas Docentes'

    def __str__(self):
        return str(self.profesor) + ' - ' + str(self.tipo)

    def en_roles(self):
        return self.rolpagoprofesordescuento_set.exists()

    def rol_asociado(self):
        if self.en_roles():
            return self.rolpagoprofesordescuento_set.all()[:1].get()
        return None

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()
        super(Multa, self).save(force_insert, force_update, using, update_fields)


class RolPagoProfesorDescuento(models.Model):
    rolprof = models.ForeignKey(RolPagoProfesor, on_delete=models.CASCADE)
    iess = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    prestamoiess = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    descuentoprestamoinst = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    prestamoinst = models.ForeignKey(PrestamoInstitucional, null=True, blank=True, on_delete=models.CASCADE)
    quincena = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    descuentomulta = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    multa = models.ForeignKey(Multa, blank=True, null=True, on_delete=models.CASCADE)
    #Impuesto a la Renta - es otro descuento
    gp = models.ForeignKey(ProfesorInstitucionGP, on_delete=models.CASCADE)
    bi = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    fb = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    ifb = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tasaife = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    ife = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    irenta = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    #otros y total descuentos
    otrosdesc = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    totaldesc = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)

    class Meta:
        verbose_name = 'Rol Descuento Docente'
        verbose_name_plural = 'Roles Descuentos Docentes'

    def __str__(self):
        return str(self.rolprof) + ' ' + str(self.totaldesc)

    def ubica_base_imponible_tarifa(self, bi):
        tablatarifa = self.rolprof.rol.tablatarifa
        if tablatarifa.detalletablatarifairpersonanatural_set.filter(fb__lte=bi, eh__gte=bi).exists():
            return tablatarifa.detalletablatarifairpersonanatural_set.filter(fb__lte=bi, eh__gte=bi)[:1].get()
        return tablatarifa.detalletablatarifairpersonanatural_set.filter(fb=0)[:1].get()

    def calcula_base_imponible(self):
        return (self.rolprof.totalinggravados - self.iess - self.gp.total).quantize(Decimal(10)**-2)

    def calcula_irc(self):
        return (self.ifb + self.ife).quantize(Decimal(10)**-2)

    def diferencia_bi_fb(self):
        return (self.bi - self.fb).quantize(Decimal(10)**2)

    def calcula_total_descuentos(self):
        return (self.iess + self.prestamoiess + self.descuentoprestamoinst + self.quincena + self.descuentomulta + self.irenta + self.otrosdesc).quantize(Decimal(10)**-2)

    #Calculos de datos impuesto a la renta
    def calcular_datos_impuesto_renta(self):
        self.bi = self.calcula_base_imponible()                         #Calcula Base Imponible (ING - IESS - GP)
        self.fb = self.ubica_base_imponible_tarifa(self.bi).fb          #Buscar Fraccion Basica en Tabla Tarifa a partir de BI
        self.ifb = self.ubica_base_imponible_tarifa(self.bi).ifb        #Buscar Impuesto Fraccion Basica en Tabla Tarifa a partir de BI
        self.tasaife = self.ubica_base_imponible_tarifa(self.bi).ife    #Buscar Tasa Impto Fraccion Excedente en Tabla Tarifa a partir de BI
        self.ife = (self.diferencia_bi_fb() * self.tasaife)/Decimal(100)#Calculo Impto Fraccion Excedente
        self.irenta = self.calcula_irc()                                #Calcular Impto Renta Causado

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.totaldesc = self.calcula_total_descuentos()
        if MODELO_EVALUACION==EVALUACION_CASADE or INSCRIPCION_CONDUCCION:
            self.irenta = self.rolprof.total_ingresos_gravados() * Decimal(COEFICIENTE_IMPUESTO_RENTA)
        else:
            self.calcular_datos_impuesto_renta()
        super(RolPagoProfesorDescuento, self).save(force_insert, force_update, using, update_fields)


class RolPagoDetalleProfesor(models.Model):
    rolprof = models.ForeignKey(RolPagoProfesor, on_delete=models.CASCADE)
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    horasmateria = models.FloatField()
    valormateria = models.FloatField()

    def __str__(self):
        return str(self.rolprof) + " Materia:" + str(self.materia.asignatura) + " Horas:" + str(self.horasmateria) + " Valor:" + str(self.valormateria)

    def calcula_horas_materia(self):
        if LeccionGrupo.objects.filter(profesor=self.rolprof.profesor, materia=self.materia, fecha__gte=self.rolprof.rol.inicio, fecha__lte=self.rolprof.rol.fin).exists():
            leccionesGrupo = LeccionGrupo.objects.filter(profesor=self.rolprof.profesor, materia=self.materia, fecha__gte=self.rolprof.rol.inicio, fecha__lte=self.rolprof.rol.fin)
            return sum([x.turno.horas for x in leccionesGrupo])
        else:
            return 0

    def calcula_valor_materia(self):
        suma=0
        if LeccionGrupo.objects.filter(profesor=self.rolprof.profesor, materia=self.materia, fecha__gte=self.rolprof.rol.inicio, fecha__lte=self.rolprof.rol.fin).exists():
            for lg in LeccionGrupo.objects.filter(profesor=self.rolprof.profesor, materia=self.materia, fecha__gte=self.rolprof.rol.inicio, fecha__lte=self.rolprof.rol.fin):
                suma += lg.costo_profesor_dia(self.rolprof.rol.inicio)
        return suma

    def recalcular(self):
        self.horasmateria = self.calcula_horas_materia()
        self.valormateria = self.calcula_valor_materia()
        self.save()

    class Meta:
        verbose_name = "Rol Pago Detallado del Profesor"
        verbose_name_plural = "Roles Pagos Detallados de Profesores"



class InscripcionSenescyt(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True, null=True)
    tienebeca = models.BooleanField(default=False)
    observaciones = models.TextField(max_length=300, blank=True, null=True)

    def __str__(self):
        return str(self.inscripcion)+" FECHA: "+ str(self.fecha)

    class Meta:
        verbose_name = "Inscripcion Senescyt"
        verbose_name_plural = "Inscripciones Senescyt"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observaciones: self.observaciones = self.observaciones.upper()
        super(InscripcionSenescyt, self).save(force_insert, force_update, using, update_fields)


#-----------------------------------
# ENCUESTAS

class Encuesta(models.Model):
    nombre = models.CharField(max_length=200)
    fechainicio = models.DateField()
    fechafin = models.DateField()
    activa = models.BooleanField(default=False)
    grupos = models.ManyToManyField(Group)
    instrumento = models.ForeignKey(InstrumentoEvaluacion, null=True, blank=True, on_delete=models.CASCADE)
    obligatoria = models.BooleanField(default=False)

    def __str__(self):
        return "Encuesta: "+self.nombre

    @staticmethod
    def flexbox_query(q):
        return Encuesta.objects.filter(Q(nombre__contains=q))

    def flexbox_repr(self):
        return str(self)

    def grupos_repr(self):
        return ", ".join([x.name for x in self.grupos.all()])

    def ambitos(self):
        return AmbitoEvaluacion.objects.filter(ambitoinstrumentoevaluacion__instrumento=self.instrumento).distinct()

    def indicadores(self):
        return IndicadorAmbitoInstrumentoEvaluacion.objects.filter(ambitoinstrumento__instrumento=self.instrumento).order_by('ambitoinstrumento__ambito')

    def universo_a_encuestar(self):
        otros = Persona.objects.filter(usuario__groups__in=self.grupos.all(), usuario__is_active=True).exclude(usuario__groups__id=ALUMNOS_GROUP_ID).distinct().count()
        if Group.objects.get(pk=ALUMNOS_GROUP_ID) in self.grupos.all():
            return total_matriculados() + otros
        return otros

    def encuestados(self):
        if self.respuestaencuesta_set.distinct().count() > self.universo_a_encuestar():
            return self.universo_a_encuestar()
        return self.respuestaencuesta_set.distinct().count()

    def no_encuestados(self):
        return self.universo_a_encuestar() - self.encuestados() if self.universo_a_encuestar() else 0

    def completamiento(self):
        if self.universo_a_encuestar()==0:
            return 0
        return round((float(self.encuestados())/float(self.universo_a_encuestar()))*100.0,1)

    def completamiento_bar(self):
        c = self.completamiento()
        if 0<=c<=35:
            return "danger"
        elif 35<=c<=70:
            return "warning"
        else:
            return "success"

    class Meta:
        verbose_name = "Encuesta"
        verbose_name_plural = "Encuestas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(Encuesta, self).save(force_insert, force_update, using, update_fields)


class RespuestaEncuesta(models.Model):
    encuesta = models.ForeignKey(Encuesta, on_delete=models.CASCADE)
    fecha = models.DateField()
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)

    def __str__(self):
        return "Respuesta Encuesta: "+str(self.encuesta)

    class Meta:
        verbose_name = "Respuesta Encuesta"
        verbose_name_plural = "Respuesta Encuestas"


class DatoRespuestaEncuesta(models.Model):
    respuesta = models.ForeignKey(RespuestaEncuesta, on_delete=models.CASCADE)
    indicador = models.ForeignKey(IndicadorAmbitoInstrumentoEvaluacion, on_delete=models.CASCADE)
    valor = models.IntegerField()
    observaciones = models.CharField(max_length=200)

    def __str__(self):
        return "Dato Respuesta Encuesta"

    class Meta:
        verbose_name = "Dato Respuesta Encuesta"
        verbose_name_plural = "Datos Respuestas Encuesta"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observaciones = self.observaciones.upper()
        super(DatoRespuestaEncuesta, self).save(force_insert, force_update, using, update_fields)


class Donacion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    valor = models.FloatField()
    motivo = models.CharField(max_length=200)
    fecha = models.DateField()
    aplicada = models.BooleanField(default=False)
    usuario = models.CharField(max_length=20, blank=True, null=True)
    usuarioaplica = models.CharField(max_length=20, blank=True, null=True)

    def __str__(self):
        return "Donacion de $%10.2f a %s [%s]"%(self.valor, str(self.inscripcion), self.fecha.strftime("%d-%m-%Y"))

    def recalcula_rubros(self):
        donacion = self.valor
        for r in self.inscripcion.rubros_pendientes():
            if donacion:
                if r.adeudado() <= donacion:
                    donacion = round(donacion - r.adeudado(), 2)
                    #Registro de DonacionRubros
                    dr = DonacionRubros(donacion=self,rubro=r,valor=r.adeudado(),fecha=datetime.today())
                    dr.save()
                    #Liquidar los Rubros pendientes
                    r.valor = r.total_pagado()
                    r.cancelado = True
                    r.save()
                elif r.adeudado() > donacion:
                    r.valor = round(r.total_pagado() + round(r.valor - donacion,2), 2)
                    r.save()
                    #Registro de DonacionRubros
                    dr = DonacionRubros(donacion=self, rubro=r, valor=donacion, fecha=datetime.today())
                    dr.save()
                    donacion = 0


    class Meta:
        verbose_name = "Donacion"
        verbose_name_plural = "Donaciones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()
        super(Donacion, self).save(force_insert,force_update,using, update_fields)


class DonacionRubros(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    donacion = models.ForeignKey(Donacion, on_delete=models.CASCADE)
    fecha = models.DateField()
    valor = models.FloatField()

    def __str__(self):
        return "Aplicada %s al %s por $%10.2f"%(self.donacion, self.rubro, self.valor)

    class Meta:
        verbose_name = "Donacion de Rubro"
        verbose_name_plural = "Donaciones de Rubros"


class PagoCalendario(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    tipo = models.IntegerField(choices=TIPOS_PAGO_NIVEL)
    fecha = models.DateField()
    valor = models.FloatField()

    def __str__(self):
        return str(self.periodo)+" "+str(self.tipo)+" $"+str(self.valor)+" "+self.fecha.strftime("%d-%m-%Y")

    class Meta:
        verbose_name = "Pago de Periodo"
        verbose_name_plural = "Pagos de Periodos"

    def nombre(self):
        return [y for x,y in TIPOS_PAGO_NIVEL if x==self.tipo][0]



class Impresion(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    impresa = models.BooleanField(blank=True, null=True)
    contenido = models.TextField()

class ModeloImpresion(models.Model):
    referencia = models.CharField(max_length=40)
    modelo = models.CharField(max_length=100)
    plantilla = models.CharField(max_length=200)

    def __str__(self):
        return "%s - %s - %s"%(self.referencia,self.modelo,self.plantilla)

def proxima_fecha_pasada(fecha):
    mes = fecha.month+1
    anno = fecha.year
    if mes>12:
        mes = 1
        anno += 1
    return datetime(anno, mes, DIA_PAGO_PLAN12)

def proxima_fecha(fecha):
    if fecha.day>DIA_PAGO_PLAN12:
        return proxima_fecha_pasada(fecha)
    elif fecha.day<DIA_PAGO_PLAN12:
        return datetime(fecha.year, fecha.month, DIA_PAGO_PLAN12)
    elif fecha.day==DIA_PAGO_PLAN12:
        return fecha

class Plan12Materias(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    numerocontrato = models.CharField(max_length=20)
    inicio = models.DateField()
    vencimiento = models.DateField()
    materiastotales = models.IntegerField()
    materiascursadas = models.IntegerField()
    valorpormateria = models.FloatField()
    valortotal = models.FloatField()
    valorpagado = models.FloatField()
    valorvencido = models.FloatField()

    def completado(self):
        return self.materiastotales==self.materiascursadas



    def crear_pagos(self):
        proxfecha = proxima_fecha(self.inicio)
        for i in range(1, self.materiastotales+1):
            rubro = Rubro(fecha=datetime.today().date(),
                          valor = self.valorpormateria,
                          inscripcion=self.inscripcion,
                          cancelado = False,
                          fechavence = proxfecha)
            rubro.save()
            rubroPlan = RubroPlan12Materias(rubro=rubro,
                                            plan=self,
                                            cuota=i)
            rubroPlan.save()

            proxfecha = proxima_fecha(proxfecha+timedelta(1))


class MateriaEnPlan12(models.Model):
    materia = models.ForeignKey(MateriaAsignada, on_delete=models.CASCADE)
    plan = models.ForeignKey(Plan12Materias, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.materia)+" "+str(self.plan)




class RubroPlan12Materias(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    plan = models.ForeignKey(Plan12Materias, on_delete=models.CASCADE)
    cuota = models.IntegerField()

    def __str__(self):
        return "CUOTA "+str(self.cuota)+" CONT #: "+self.plan.numerocontrato

    class Meta:
        verbose_name = "Rubro Plan 12 Materias"
        verbose_name_plural = "Rubros Cuotas"

class InscripcionBecario(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    tipobeca = models.ForeignKey(TipoBeca, on_delete=models.CASCADE)
    porciento = models.FloatField()
    motivo = models.TextField(max_length=300)
    fecha = models.DateField()

    def __str__(self):
        return str(self.inscripcion)+" FECHA: "+ str(self.fecha) + " Beca: " + str(self.tipobeca)

    class Meta:
        verbose_name = "Inscripcion Becario"
        verbose_name_plural = "Inscripciones Becarios"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.motivo: self.motivo = self.motivo.upper()
        super(InscripcionBecario, self).save(force_insert, force_update, using, update_fields)


class InscripcionPracticas(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    horas = models.IntegerField(default=0)
    lugar = models.CharField(max_length=200, blank=True, null=True)
    profesor = models.ForeignKey(Profesor, blank=True, null=True, on_delete=models.CASCADE)
    inicio = models.DateField(verbose_name="Fecha Inicio", blank=True, null=True)
    fin = models.DateField(verbose_name="Fecha Fin", blank=True, null=True)
    observaciones = models.CharField(max_length=2000, blank=True, null=True)
    equipamiento = models.CharField(max_length=300, blank=True, null=True)
    archivo = models.FileField(upload_to='practicas/%Y/%m/%d', max_length=250, blank=True, null=True)
    nivelmalla= models.ForeignKey(NivelMalla, blank=True, null=True, on_delete=models.CASCADE)
    aprobado = models.BooleanField(default=True)

    def __str__(self):
        return str(self.inscripcion) + "Horas: " + str(self.horas) + " Lugar: "+ self.lugar

    def correo_practica(self,user,cont):
        if TipoIncidencia.objects.filter(pk=INCIDENCIA_PRAC_VINC).exists():
            tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_PRAC_VINC)
            hoy = datetime.now().today()
            contenido = cont
            send_html_mail(contenido,
                           "emails/practicas_vinculacion.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'usuario': user,'op':'1'  },tipo.correo.split(","))

    class Meta:
        verbose_name = "Inscripcion - Practica Preprofesional"
        verbose_name_plural = "Inscripciones - Practicas Preprofesionales"

    def nombre_archivo(self):
        return os.path.split(self.archivo.name)[1]

    def tipo_archivo(self):
        a = self.nombre_archivo()
        n = a[a.rindex(".")+1:]
        if n=='pdf' or n=='doc' or n=='docx':
            return n
        return 'other'

    def download_link(self):
        return self.archivo.url

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.lugar: self.lugar = self.lugar.upper()
        if self.observaciones: self.observaciones = self.observaciones.upper()
        super(InscripcionPracticas, self).save(force_insert, force_update, using, update_fields)


class TipoLiquidacion(models.Model):
    nombre = models.CharField(max_length=200)

    class Meta:
        verbose_name = 'Tipo de Liquidacion'
        verbose_name_plural = 'Tipos de Liquidaciones'

    def __str__(self):
        return self.nombre

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        super(TipoLiquidacion, self).save(force_insert, force_update, using, update_fields)

class ProfesorLiquidacion(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoLiquidacion, on_delete=models.CASCADE)
    salida = models.DateField()
    observaciones = models.CharField(max_length=300, blank=True, null=True)

    class Meta:
        verbose_name = 'Profesor - Liquidacion'
        verbose_name_plural = 'Profesor - Liquidaciones'

    def __str__(self):
        return "Liquidacion: #%s, Tipo: %s (%s)"%(self.profesor.persona, self.tipo, self.salida.strftime('%d-%m-%Y'))

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observaciones = self.observaciones.upper()
        super(ProfesorLiquidacion, self).save(force_insert, force_update, using, update_fields)


class DocumentosProfesor(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    archivo = models.ForeignKey(Archivo, on_delete=models.CASCADE)

    def __str__(self):
        return "Documentos de: "  + str(self.profesor)

    class Meta:
        verbose_name = "Documento del Profesor"
        verbose_name_plural = "Documentos del Profesor"


class ObservacionGraduado(models.Model):
    graduado = models.ForeignKey(Graduado, on_delete=models.CASCADE)
    observaciones = models.CharField(max_length=300, blank=True, null=True)
    fecha = models.DateField()

    def __str__(self):
        return "Observacion Graduado: " + self.graduado.inscripcion.persona.apellido1

    class Meta:
        verbose_name = "Graduado Observacion"
        verbose_name_plural = "Graduados Observaciones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observaciones = self.observaciones.upper()
        super(ObservacionGraduado, self).save(force_insert, force_update, using, update_fields)


class TipoObservacionInscripcion(models.Model):
    nombre = models.CharField(max_length=200)

    class Meta:
        verbose_name = 'Tipo Observacion Estudiante'
        verbose_name_plural = 'Tipos Observaciones Estudiantes'

    def __str__(self):
        return self.nombre

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        super(TipoObservacionInscripcion, self).save(force_insert, force_update, using, update_fields)


class ObservacionInscripcion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoObservacionInscripcion, on_delete=models.CASCADE)
    observaciones = models.CharField(max_length=300, blank=True, null=True)
    fecha = models.DateField()
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)
    activa = models.BooleanField(default=True)

    def __str__(self):
        return "Observacion: " + str(self.inscripcion)

    def es_critica(self):
        return self.tipo_id == TIPO_OBSERVACION_CRITICA_ID

    class Meta:
        verbose_name = "Inscripcion Observacion"
        verbose_name_plural = "Inscripciones Observaciones"


    def correo_docente(self):
        if self.inscripcion.persona.email:
            hoy = datetime.now().today()
            contenido = 'NOTIFICACION 4TO CONGRESO'
            send_html_mail(contenido,
                           "emails/cong_docente_nombramiento.html", {'o': self, 'fecha': hoy },self.inscripcion.persona.email.split(","))

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observaciones = self.observaciones.upper()
        super(ObservacionInscripcion, self).save(force_insert, force_update, using, update_fields)


#Modelo para listar formas de pagos (diferente a FormaDePago que si esta enlazado con Finanzas) y sirvan como parametros de reportes
class ListaFormaDePago(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Lista de Forma de Pago"
        verbose_name_plural = "Lista de Formas de Pago"

    @staticmethod
    def flexbox_query(q):
        return ListaFormaDePago.objects.filter(nombre__icontains=q)

    def flexbox_repr(self):
        return self.nombre

    def flexbox_alias(self):
        return self.nombre

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(ListaFormaDePago, self).save(force_insert, force_update, using, update_fields)

#Modelos para los estudios que cursa el docente (matriz Sniese)
class TipoEstudioCursa(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Tipo Estudio cursado"
        verbose_name_plural = "Tipos de Estudios cursados"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TipoEstudioCursa, self).save(force_insert, force_update, using, update_fields)


class EntidadFinancia(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Entidad Financia Curso"
        verbose_name_plural = "Entidades Financian Cursos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(EntidadFinancia, self).save(force_insert, force_update, using, update_fields)

class ProfesorEstudiosCursa(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    tipoestudio = models.ForeignKey(TipoEstudioCursa, on_delete=models.CASCADE)
    financiado = models.ForeignKey(EntidadFinancia, on_delete=models.CASCADE)
    inicio = models.DateField(blank=True, null=True)

    def __str__(self):
        return self.profesor.persona.nombre_completo() + ' ' + str(self.tipoestudio) + ' Finacia: ' + str(self.financiado)

    class Meta:
        verbose_name = "Profesor - Estudio Cursa"
        verbose_name_plural = "Profesores - Cursando Estudios"

class TitulacionAdministrativo(models.Model):
    administrativo = models.ForeignKey(Persona, on_delete=models.CASCADE)
    titulo = models.CharField(max_length=200)
    pais = models.ForeignKey(Pais, blank=True, null=True, on_delete=models.CASCADE)
    nivel = models.CharField(max_length=20, choices=NIVELES_TITULACION)
    tiponivel = models.ForeignKey(TipoNivelTitulacion, blank=True, null=True, on_delete=models.CASCADE)
    institucion = models.CharField(max_length=200)
    fecha = models.DateField(verbose_name=u'Fecha Titulo')
    registro = models.CharField(max_length=100, verbose_name=u'Registro SENESCYT', blank=True, null=True)
    codigoprofesional = models.CharField(max_length=100, verbose_name="Codigo Profesional", null=True, blank=True)
    subarea = models.ForeignKey(SubAreaConocimiento, blank=True, null=True, on_delete=models.CASCADE)

    def representacion_api(self):
        return "%s %s %s"%(self.titulo, self.nivel, self.institucion)

    def __str__(self):
        return str(self.administrativo)+" "+self.titulo+" "+self.nivel+" "+self.institucion+" "

    class Meta:
        verbose_name = "Titulo de Administrativo"
        verbose_name_plural = "Titulos de Administrativos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.titulo = self.titulo.upper()
        self.institucion = self.institucion.upper()
        self.registro = self.registro.upper()
        if self.codigoprofesional:
            self.codigoprofesional = self.codigoprofesional.upper()
        super(TitulacionAdministrativo, self).save(force_insert, force_update, using, update_fields)

class AdministrativoEstudiosCursa(models.Model):
    administrativo = models.ForeignKey(Persona, on_delete=models.CASCADE)
    tipoestudio = models.ForeignKey(TipoEstudioCursa, on_delete=models.CASCADE)
    financiado = models.ForeignKey(EntidadFinancia, on_delete=models.CASCADE)
    inicio = models.DateField(blank=True, null=True)

    def __str__(self):
        return self.administrativo.nombre_completo() + ' ' + str(self.tipoestudio) + ' Finacia: ' + str(self.financiado)

    class Meta:
        verbose_name = "Administrativo - Estudio Cursa"
        verbose_name_plural = "Administrativos - Cursando Estudios"


class PersonaDatosMatriz(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    numerocontrato = models.CharField(max_length=100, blank=True, null=True)
    tienediscapacidad = models.BooleanField(default=False, verbose_name="Tiene Discapacidad?")
    tipodiscapacidad = models.ForeignKey(Discapacidad, null=True, blank=True, verbose_name="Tipo de Discapacidad", on_delete=models.CASCADE)
    porcientodiscapacidad = models.FloatField(blank=True, null=True, verbose_name='% de Discapacidad')
    carnetdiscapacidad = models.CharField(max_length=100, blank=True, null=True, verbose_name='Carnet Discapacitado')

    def __str__(self):
        return self.persona.nombre_completo() + ' Discapacitado' if self.tienediscapacidad else ""

    class Meta:
        verbose_name = "Persona - Datos Matriz"
        verbose_name_plural = "Personas - Mas Datos Matrices"


class MateriaRecepcionActaNotas(models.Model):
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    entregada = models.BooleanField(default=False)
    fecha = models.DateField(blank=True, null=True)
    hora = models.TimeField(null=True, blank=True)
    codigo = models.CharField(max_length=10, blank=True, null=True)
    entrega = models.CharField(max_length=100, blank=True, null=True)
    observaciones = models.CharField(max_length=300, blank=True, null=True)
    usuario = models.ForeignKey(User, blank=True, null=True, on_delete=models.CASCADE)
    acta = models.FileField(upload_to='actanotas/%Y/%m/%d', max_length=200,blank=True,null=True)
    resumen = models.FileField(upload_to='actanotas/%Y/%m/%d', max_length=200,blank=True,null=True)
    alcance = models.FileField(upload_to='actanotas/%Y/%m/%d', max_length=200,blank=True,null=True)
    alcanceentregada = models.BooleanField(default=False)
    alcancefecha = models.DateField(blank=True, null=True)
    alcancehora = models.TimeField(null=True, blank=True)
    observacionesalcance = models.CharField(max_length=300, blank=True, null=True)
    actanivel = models.FileField(upload_to='actanotas/%Y/%m/%d', max_length=200,blank=True,null=True)
    actanivelentregada = models.BooleanField(default=False)
    actanivelfecha = models.DateField(blank=True, null=True)
    actanivelhora = models.TimeField(null=True, blank=True)
    actanivelobservaciones = models.CharField(max_length=300, blank=True, null=True)
    resumennivel = models.FileField(upload_to='actanotas/%Y/%m/%d', max_length=200,blank=True,null=True)



    def __str__(self):
        if self.fecha and self.codigo:
            return self.materia.asignatura.nombre + ' (' + self.codigo + ')' + ' [Fecha: ' + self.fecha.strftime("%d-%m-%Y") + ']'
        return self.materia.asignatura.nombre

    def correoentrega_acta(self,correo,persona):
        hoy = datetime.now().today()
        contenido = "ACTA DE NOTAS ENTREGADA"
        send_html_mail("ACTA DE NOTAS ENTREGADA",
                       "emails/entregaactanotas.html", {'d': self, 'fecha': hoy,'contenido': contenido,'profesor':persona },correo.split(","))

    def correoentrega_acta_alcance(self,correo,persona):
        hoy = datetime.now().today()
        contenido = "ACTA DE ALCANCE ENTREGADA"
        send_html_mail("ACTA DE ALCANCE ENTREGADA",
                       "emails/entregaactaalcance.html", {'d': self, 'fecha': hoy,'contenido': contenido,'profesor':persona },correo.split(","))

    def correoentrega_acta_nivelcerrado(self,correo,persona):
        hoy = datetime.now().today()
        contenido = "ACTA DE NIVEL CERRADO"
        send_html_mail("ACTA DE NIVEL CERRADO",
                       "emails/entregaactanivelcerrado.html", {'d': self, 'fecha': hoy,'contenido': contenido,'profesor':persona },correo.split(","))
    class Meta:
        verbose_name = "Materia - Recepcion Acta de Nota"
        verbose_name_plural = "Materias - Recepciones Actas de Notas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.codigo: self.codigo = self.codigo.upper()
        if self.entrega: self.entrega = self.entrega.upper()
        if self.observaciones: self.observaciones = self.observaciones.upper()
        if self.observacionesalcance: self.observacionesalcance = self.observacionesalcance.upper()
        super(MateriaRecepcionActaNotas, self).save(force_insert, force_update, using, update_fields)

class AusenciaJustificada(models.Model):
    asist = models.ForeignKey(AsistenciaLeccion, on_delete=models.CASCADE)
    numeroe = models.CharField(max_length=10)
    codigoe = models.CharField(max_length=6)
    fechae = models.DateField()
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    observaciones = models.CharField(max_length=300)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateField()

    def __str__(self):
        return str(self.asist.matricula.inscripcion) + ' #Esp: ' + self.numeroe  + ' (%s, %s)'%(self.usuario.username, self.fecha.strftime('%d-%m-%Y'))



    class Meta:
        verbose_name = 'Ausencia Justificada'
        verbose_name_plural = 'Ausencias Justificadas'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.numeroe: self.numeroe = self.numeroe.upper()
        if self.codigoe: self.codigoe = self.codigoe.upper()
        if self.observaciones: self.observaciones = self.observaciones.upper()
        super(AusenciaJustificada, self).save(force_insert, force_update, using, update_fields)

# Planificacion de Actividades
class TipoActividad(models.Model):
    nombre = models.CharField(max_length=100)
    representacion = models.CharField(max_length=6)

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = 'Tipo de Actividad'
        verbose_name_plural = 'Tipos de Actividades'

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        self.representacion = self.representacion.upper().strip() if self.representacion else ''
        super(TipoActividad, self).save(force_insert, force_update, using, update_fields)

class DepartamentoActividad(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = 'Departamento - Actividad'
        verbose_name_plural  = 'Departamentos - Actividad'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper() if self.nombre else ''
        super(DepartamentoActividad, self).save(force_insert, force_update, using, update_fields)

class Actividad(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=100)
    inicio = models.DateField()
    fin = models.DateField()
    tipo = models.ForeignKey(TipoActividad, on_delete=models.CASCADE)
    lunes = models.BooleanField(default=False)
    martes = models.BooleanField(default=False)
    miercoles = models.BooleanField(default=False)
    jueves = models.BooleanField(default=False)
    viernes = models.BooleanField(default=False)
    sabado = models.BooleanField(default=False)
    domingo = models.BooleanField(default=False)
    departamento = models.ForeignKey(DepartamentoActividad, on_delete=models.CASCADE)
    horainicio = models.TimeField(null=True, blank=True)
    horafin = models.TimeField(null=True, blank=True)
    usuario = models.ForeignKey(User,null=True, on_delete=models.CASCADE)
    responsable = models.ForeignKey(Persona,null=True, on_delete=models.CASCADE)
    lugar = models.CharField(max_length=200,null=True, blank=True)
    auditorio=models.ForeignKey(Aula,blank=True,null=True, on_delete=models.CASCADE)
    archivo=models.FileField(upload_to='actividad/%Y/%m/%d', max_length=200,blank=True,null=True)
    adicional = models.CharField(max_length=500,null=True, blank=True)

    def __str__(self):
        return "%s, (%s)"%(self.nombre, self.periodo.nombre)

    class Meta:
        verbose_name = 'Actividad del Periodo'
        verbose_name_plural = 'Actividades del Periodo'

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        self.lugar = self.lugar.upper().strip() if self.lugar else ''
        super(Actividad, self).save(force_insert, force_update, using, update_fields)

    def en_fecha(self):
        return self.inicio >= datetime.now().date()

    def existpartici(self):
        return ParticipanteActividad.objects.filter(actividad=self).exists()

    def edit_fech(self):
        if self.fin > datetime.now().date():
            return 1
        else:
            if self.fin == datetime.now().date() and self.horainicio > datetime.now().time():
                return 1
            else:
                return 0

    def mail_responsactividad(self,asunto):
        hoy = datetime.now().today()
        contenido = asunto
        send_html_mail(asunto,
                       "emails/actividad_email.html", {'actividad': self, 'fecha': hoy,'contenido': contenido},[self.responsable.emailinst])
    def notificacion(self,aulas,contenido,op):
        hoy = datetime.now().today()
        persona = Persona.objects.filter(usuario=self.usuario)[:1].get()
        contenido = contenido
        send_html_mail('NOTIFICACION DE ACTIVIDAD',
                       "emails/actividad_notificacion.html", {'actividad': self, 'fecha': hoy,'contenido': contenido,'aulas':aulas,'op':op },[persona.emailinst])

class ParticipanteActividad(models.Model):
    actividad = models.ForeignKey(Actividad,null=True, on_delete=models.CASCADE)
    participante = models.ForeignKey(Persona,null=True, on_delete=models.CASCADE)

    def mail_particiactividad(self,asunto):
        hoy = datetime.now().today()
        contenido = asunto
        send_html_mail(asunto,
                       "emails/actividad_email.html", {'actividad': self.actividad, 'fecha': hoy,'contenido': contenido},[self.participante.emailinst, self.participante.email])

class ProcesoDobe(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=1200)
    aprobado = models.BooleanField(default=False)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateField()

    def __str__(self):
        return str(self.inscripcion.persona)


    class Meta:
        verbose_name = " Proceso de Aceptacion"
        verbose_name_plural = "Procesos de Aceptacion"

    def mail_procesodobe(self, user):
        if TipoIncidencia.objects.filter(pk=13).exists():
            tipo = TipoIncidencia.objects.get(pk=13)
            hoy = datetime.now().today()
            contenido = "El proceso de aceptacion ha culminado. Favor Cambiar de grupo (Admision) y Matricular (Secretaria)"
            send_html_mail("Matricula DOBE",
                           "emails/procesodobe.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user},tipo.correo.split(","))

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observacion: self.observacion = self.observacion.upper()
        super(ProcesoDobe, self).save(force_insert, force_update, using, update_fields)

def dia_semana_correcto(dia, mes, anio, dia_semana):
    return dia_semana == date(anio, mes, dia).isoweekday()

class ProcesoDobleMatricula(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=1200)
    aprobado = models.BooleanField(default=False)
    usuario = models.ForeignKey(User, null=True, blank=True, on_delete=models.CASCADE)
    fecha = models.DateField()

    def __str__(self):
        return str(self.inscripcion.persona)


    class Meta:
        verbose_name = " Proceso de Doble Matricula"
        verbose_name_plural = "Procesos de Doble Matriculacion"

    def mail_procesodoblematricula(self, user, carrera, usuario):
        if TipoIncidencia.objects.filter(pk=26).exists():
            tipo = TipoIncidencia.objects.get(pk=26)
            hoy = datetime.now().today()
            carrera= carrera
            registro = usuario
            contenido = "El estudiante esta inscrito en una nueva carrera. Para retomar los estudios debe acercarse a Dpto. Orientacion Vocacional"
            send_html_mail("Doble Matricula",
                           "emails/procesodoblematricula.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user, 'carrera':carrera, 'registro':registro},tipo.correo.split(","))

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observacion: self.observacion = self.observacion.upper()
        super(ProcesoDobleMatricula, self).save(force_insert, force_update, using, update_fields)


    def mail_procesodoblematriculaap(self, user, carrera, usuario):
        if TipoIncidencia.objects.filter(pk=26).exists():
            tipo = TipoIncidencia.objects.get(pk=26)
            hoy = datetime.now().today()
            carrera= carrera
            registro = usuario
            contenido = "El proceso de aceptacion ha culminado. Favor Cambiar de grupo (Admision) y Matricular (Secretaria)"
            send_html_mail("Doble Matricula - Aprobacion",
                           "emails/procesodoblematriculaap.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user, 'carrera':carrera, 'registro':registro},tipo.correo.split(","))

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observacion: self.observacion = self.observacion.upper()
        super(ProcesoDobleMatricula, self).save(force_insert, force_update, using, update_fields)


class InscripcionConduccion (models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    fotos2 = models.BooleanField(blank=True, null=True)
    titulo = models.BooleanField(blank=True, null=True)
    licencia = models.BooleanField(blank=True, null=True)
    copia_cedula = models.BooleanField(blank=True, null=True)
    votacion = models.BooleanField(blank=True, null=True)
    carnetsangre = models.BooleanField(blank=True, null=True)
    ex_psicologico = models.BooleanField(blank=True, null=True)
    val_psicosometrica = models.BooleanField(blank=True, null=True)
    val_medica = models.BooleanField(blank=True, null=True)
    tienediscapacidad = models.BooleanField(blank=True, null=True)
    licienciatipoc = models.BooleanField(blank=True, null=True)
    originalrecord = models.BooleanField(blank=True, null=True)
    originalcontenido = models.BooleanField(blank=True, null=True)
    certificado = models.BooleanField(blank=True, null=True)
    acta = models.BooleanField(blank=True, null=True)
    tiene_licencia = models.BooleanField(default=False)
    tipo_licencia = models.CharField(max_length=20,blank=True,null=True)
    sabe_conducir = models.BooleanField(default=False)
    f_emision = models.DateField(blank=True, null=True)
    puntos_licencia = models.CharField(max_length=20,blank=True,null=True)
    soporte_ant = models.FileField(upload_to='soporteant/%Y/%m/%d', max_length=200, null = True, blank=True)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.tipo_licencia: self.tipo_licencia = self.tipo_licencia.upper()
        super(InscripcionConduccion, self).save(force_insert, force_update, using, update_fields)

    def download_soporte_ant(self):
        return self.soporte_ant.url

class InactivaActivaUsr (models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    accion = models.CharField(max_length=50)
    motivo = models.CharField(max_length=300)
    fecha = models.DateTimeField()
    usuario= models.ForeignKey(User, on_delete=models.CASCADE)

    def activa_usuario(self):
        if TipoIncidencia.objects.filter(pk=49).exists():
            tipo = TipoIncidencia.objects.get(pk=49)
            hoy = datetime.now().today()
            contenido = 'NOTIFICACION DE USUARIO'
            send_html_mail(contenido,
                           "emails/usuario_activado.html", {'i': self, 'fecha': hoy,'contenido': contenido },tipo.correo.split(","))

class NotaCreditoInstitucionAnulada(models.Model):
    notacredito = models.ForeignKey(NotaCreditoInstitucion, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=200)
    fecha = models.DateTimeField()
    usuario = models.ForeignKey(User, null=True, blank=True, on_delete=models.CASCADE)

    def __str__(self):
        return "Nota de Credito Anulada No. "+str(self.notacredito)+" - "+self.motivo + " "+  str(self.fecha)

    class Meta:
        verbose_name = "Nota de Credito Anulada"
        verbose_name_plural = "Notas de Credito Anuladas"



class TipoVisitasBiblioteca(models.Model):
    descripcion = models.CharField(max_length=150)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = " Tipo Visita a Biblioteca"
        verbose_name_plural = "Tipos de Visitas a Biblioteca"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(TipoVisitasBiblioteca, self).save(force_insert, force_update, using, update_fields)

class TipoArticulo(models.Model):
    descripcion = models.CharField(max_length=150)
    estado = models.BooleanField(default=True)
    tipovisitabiblioteca = models.ForeignKey(TipoVisitasBiblioteca, null=True, blank=True, on_delete=models.CASCADE)

    def __str__(self):
        return self.descripcion

    class Meta:
       verbose_name = " Tipo Articulo"
       verbose_name_plural = "Tipos de Articulos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(TipoArticulo, self).save(force_insert, force_update, using, update_fields)


class TipoPersona(models.Model):
    descripcion = models.CharField(max_length=150)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = " Tipo Persona"
        verbose_name_plural = "Tipos de Personas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(TipoPersona, self).save(force_insert, force_update, using, update_fields)


class MotivoVisitasBiblioteca(models.Model):
    descripcion = models.CharField(max_length=150)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = " Motivo Visita a Biblioteca"
        verbose_name_plural = "Motivos de Visitas a Biblioteca"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(MotivoVisitasBiblioteca, self).save(force_insert, force_update, using, update_fields)


class VisitaBiblioteca(models.Model):
    tipopersona = models.ForeignKey(TipoPersona, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE,blank=True, null=True)
    nombre = models.CharField(max_length= 300)
    cedula = models.CharField(max_length=10, verbose_name="Cedula", blank=True, null=True)
    direccion = models.CharField(max_length= 300)
    telefono = models.CharField(max_length=60)
    motivovisita = models.ForeignKey(MotivoVisitasBiblioteca, on_delete=models.CASCADE)
    facultad = models.ForeignKey(Coordinacion, blank=True, null=True, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera, blank=True, null=True, on_delete=models.CASCADE)
    modalidad = models.ForeignKey(Modalidad, blank=True, null=True, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel, blank=True, null=True, on_delete=models.CASCADE)
    jornada = models.ForeignKey(Sesion, blank=True, null=True, on_delete=models.CASCADE)
    departamento = models.ForeignKey(Group,blank=True,null=True, on_delete=models.CASCADE)
    egresado = models.BooleanField(default=False, blank=True, null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = " Visita a Biblioteca"
        verbose_name_plural = "Visitas a Biblioteca"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        if self.direccion: self.direccion = self.direccion.upper()
        super(VisitaBiblioteca, self).save(force_insert, force_update, using, update_fields)

class DetalleVisitasBiblioteca(models.Model):
    visitabiblioteca = models.ForeignKey(VisitaBiblioteca, on_delete=models.CASCADE)
    tipovisitabiblioteca = models.ForeignKey(TipoVisitasBiblioteca, on_delete=models.CASCADE)
    tipoarticulo = models.ForeignKey(TipoArticulo, on_delete=models.CASCADE, blank=True, null=True)
    fecha = models.DateTimeField()
    sede = models.ForeignKey(Sede, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=100)

    def __str__(self):
        return self.observacion

    class Meta:
        verbose_name = " Detalle de Visita a Biblioteca"
        verbose_name_plural = "Detalles de Visitas a Biblioteca"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observacion: self.observacion = self.observacion.upper()
        super(DetalleVisitasBiblioteca, self).save(force_insert, force_update, using, update_fields)

class CategoriaVehiculo(models.Model):
    nombre = models.CharField(max_length=300)
    activo = models.BooleanField(default=False)

    def __str__(self):
        return self.nombre

class Poliza(models.Model):
    descripcion = models.CharField(max_length=300)
    inicio = models.DateField()
    fin = models.DateField()
    proveedor = models.CharField(max_length=300)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    vigente = models.BooleanField(default=False)

    def __str__(self):
        return str(self.inicio)  + " " + str(self.fin)

    def tiene_vehiculo(self):
        if PolizaVehiculo.objects.filter(poliza=self).exists():
            return PolizaVehiculo.objects.filter(poliza=self)[:1].get()
        return False

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        if self.proveedor: self.proveedor = self.proveedor.upper()
        super(Poliza, self).save(force_insert, force_update, using, update_fields)

class TipoCombustible(models.Model):
    nombre = models.CharField(max_length=300)
    activo = models.BooleanField(default=False)

    def __str__(self):
        return self.nombre

class Vehiculo(models.Model):
    categoria = models.ForeignKey(CategoriaVehiculo, blank=True, null=True, on_delete=models.CASCADE)
    combustible = models.ForeignKey(TipoCombustible, blank=True, null=True, on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'))
    placa = models.CharField(max_length=100, blank=True, null=True)
    codigo = models.CharField(max_length=100, blank=True, null=True)
    marca = models.CharField(max_length=100, blank=True, null=True)
    modelo = models.CharField(max_length=100, blank=True, null=True)
    color = models.CharField(max_length=100, blank=True, null=True)
    motor = models.CharField(max_length=100, blank=True, null=True)
    chasis = models.CharField(max_length=100, blank=True, null=True)
    anio = models.IntegerField()
    activo= models.BooleanField(default=True)
    imagen = models.FileField(upload_to='fotos/%Y/%m/%d', max_length=200,blank=True,null=True)


    def __str__(self):
        return "Placa: " + str(self.placa) +" Codigo " + str(self.codigo)

    def veheexist(self):
        return ClaseConduccion.objects.filter(vehiculo = self).exists()

    def poliza(self):
        return PolizaVehiculo.objects.filter(vehiculo = self).exists()

    class Meta:
        verbose_name = "Vehiculo"
        verbose_name_plural = "Vehiculos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.placa: self.placa = self.placa.upper()
        if self.codigo: self.codigo = self.codigo.upper()
        if self.marca: self.marca = self.marca.upper()
        if self.modelo: self.modelo = self.modelo.upper()
        if self.color: self.color = self.color.upper()
        if self.motor: self.motor = self.motor.upper()
        if self.chasis: self.chasis = self.chasis.upper()

        super(Vehiculo, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Foto Vehiculo"
        verbose_name_plural = "Foto Vehiculo"

    def download_fotovehic(self):
        return self.imagen.url

class PolizaVehiculo(models.Model):
    poliza = models.ForeignKey(Poliza, on_delete=models.CASCADE)
    vehiculo = models.ForeignKey(Vehiculo, on_delete=models.CASCADE)

    def __str__(self):
        return "Poliza: " + str(self.poliza) +" Vehiculo " + str(self.vehiculo)

    class Meta:
        verbose_name = "Poliza Vehiculo"
        verbose_name_plural = "Polizas Vehiculos"

class SesionPractica(models.Model):
    nombre = models.CharField(max_length=100)
    comienza = models.TimeField(null=True, blank=True)
    termina = models.TimeField(null=True, blank=True)
    lunes = models.BooleanField(default=False, blank=True)
    martes = models.BooleanField(default=False, blank=True)
    miercoles = models.BooleanField(default=False, blank=True)
    jueves = models.BooleanField(default=False, blank=True)
    viernes = models.BooleanField(default=False, blank=True)
    sabado = models.BooleanField(default=False, blank=True)
    domingo = models.BooleanField(default=False, blank=True)

    def cantidad_dias_plus_1(self):
        cant = 0
        for i in range(1,8):
            cant += 1 if self.clases_los_(i) else 0
        return cant+1

    def sesionexist(self):
        return GrupoPractica.objects.filter(sesionpracticas=self).exists()

    def semana(self):
        s = []
        if self.lunes: s.append(("Lunes",1))
        if self.martes: s.append(("Martes",2))
        if self.miercoles: s.append(("Miercoles",3))
        if self.jueves: s.append(("Jueves",4))
        if self.viernes: s.append(("Viernes",5))
        if self.sabado: s.append(("Sabado",6))
        if self.domingo: s.append(("Domingo",7))
        return s

    def diasemana(self):
        s=0
        if self.lunes: s = 1
        elif self.martes: s = 2
        elif self.miercoles: s = 3
        elif self.jueves: s = 4
        elif self.viernes: s = 5
        elif self.sabado: s = 6
        elif self.domingo: s = 7
        return s

    def clases_los_(self, x):
        if x==1: return self.lunes
        if x==2: return self.martes
        if x==3: return self.miercoles
        if x==4: return self.jueves
        if x==5: return self.viernes
        if x==6: return self.sabado
        if x==7: return self.domingo

    def repr_dias(self):
        if self.lunes and self.martes and self.miercoles and self.jueves and \
                self.viernes and self.sabado and self.domingo:
            return ""
        elif self.lunes and self.martes and self.miercoles and self.jueves and \
                self.viernes and not self.sabado and not self.domingo:
            return ""
        elif not self.lunes and not self.martes and not self.miercoles and not self.jueves and \
                not self.viernes and self.sabado and self.domingo:
            return ""
        else:
            dias = []
            if self.lunes: dias.append("Lunes")
            if self.martes: dias.append("Martes")
            if self.miercoles: dias.append("Miercoles")
            if self.jueves: dias.append("Jueves")
            if self.viernes: dias.append("Viernes")
            if self.sabado: dias.append("Sabado")
            if self.domingo: dias.append("Domingo")
            return ", ".join(dias)

    # def cantidad_turnos(self):
    #     return TurnoPractica.objects.filter(sesionpracticas=self).count()

    def __str__(self):
        if self.comienza and self.termina:
            return self.nombre+" - "+self.comienza.strftime("%H:%M")+" a "+self.termina.strftime("%H:%M")
        else:
            return self.nombre+" los "+self.repr_dias()

    # def turnos(self):
    #     return TurnoPractica.objects.filter(grupopracticas=self).order_by('turno')

    # class Meta:
    #     verbose_name = "Sesion"
    #     verbose_name_plural = "Sesiones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(SesionPractica, self).save(force_insert, force_update, using, update_fields)


    class meta:
        verbose_name = "Grupo de Practica"
        verbose_name_plural = "Grupos de Practicas"



class TurnoPractica(models.Model):
    sesionpracticas = models.ForeignKey(SesionPractica,verbose_name = "Seccion Practica", on_delete=models.CASCADE)
    turno = models.IntegerField()
    comienza = models.TimeField()
    termina = models.TimeField()


    def __str__(self):
        return "Turno "+str(self.turno)+" ["+str(self.comienza)+" a "+str(self.termina)+"]"

    def turnexist(self):
        return ClaseConduccion.objects.filter(turnopractica = self).exists()
    class Meta:
        verbose_name = "Turno de Practica"
        verbose_name_plural = "Turnos de Practicas"



class  GrupoPractica(models.Model):
    """Indica los niveles con sus respectivos grupos"""
    carrera = models.ForeignKey(Carrera, null=True, blank=True, on_delete=models.CASCADE)
    periodo = models.ForeignKey(Periodo, verbose_name=u"Período", on_delete=models.CASCADE)
    sede = models.ForeignKey(Sede, null=True, blank=True , on_delete=models.CASCADE)
    nivelmalla = models.ForeignKey(NivelMalla, verbose_name="Nivel", null=True, blank=True, on_delete=models.CASCADE)
    sesionpracticas = models.ForeignKey(SesionPractica,verbose_name=u"Sección", null=True, blank=True, on_delete=models.CASCADE)
    inicio = models.DateField()
    fin = models.DateField()

    def __str__(self):
        return (str(self.sesionpracticas)+" -"+(" en "+str(self.sede)+ " - "+
                                                ((str(self.carrera)))))

    def tiene_practica(self):
        return Practica.objects.filter(grupopracticas=self).exists()


class Practica(models.Model):
    grupopracticas= models.ForeignKey(GrupoPractica,verbose_name='Grupo', on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=100, null=True, blank=True,verbose_name='Descripcion')
    horas = models.FloatField(verbose_name='Horas')
    fechainicio = models.DateField(verbose_name='Fecha Inicial', blank=True, null=True)
    fechafin = models.DateField(verbose_name='Fecha Final', blank=True, null=True)
    observaciones = models.CharField(max_length=300, blank=True, null=True)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        self.observaciones = self.observaciones.upper()
        super(Practica, self).save(force_insert, force_update, using, update_fields)



    def __str__(self):
        return str(self.descripcion)+" "+str(self.grupopracticas)
    def nombre_horarios(self):
        return (self.descripcion if self.descripcion is not None else "###")+" ("+self.fechainicio.strftime('%d-%m-%Y')+" al "+self.fechafin.strftime('%d-%m-%Y')+")"

    def nombre_completo(self):
        return (self.descripcion if self.descripcion is not None else "###")

    def tieneclaseconduccion(self):
        return  ClaseConduccion.objects.filter(practica=self).exists()

    def tienealumnosclase(self):
        return AlumnoPractica.objects.filter(claseconduccion__practica=self).exists()

    def tienegrupopractica(self):
        return  GrupoPractica.objects.filter(practica=self)

class ClaseConduccion(models.Model):
    practica = models.ForeignKey(Practica, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, null=True, blank=True, on_delete=models.CASCADE)
    turnopractica = models.ForeignKey(TurnoPractica, on_delete=models.CASCADE)
    vehiculo = models.ForeignKey(Vehiculo, on_delete=models.CASCADE)
    dia = models.IntegerField(choices=DIAS_CHOICES)

    def dia_semana(self):
        return DIAS_CHOICES[self.dia-1][1]

    def __str__(self):
        return str(self.turnopractica)+"   "+"Profesor: "+str(self.profesor.persona.nombre_completo_simple())+"  Vehiculo:  "+str(self.vehiculo.placa)

    def for_inscripcion(self,persona):
        return Inscripcion.objects.filter(persona=persona)

    class Meta:
        verbose_name = "Clase Conduccion"
        verbose_name_plural = "Clases de Conduccion"

    def tienealumnoscond(self):
        return  AlumnoPractica.objects.filter(claseconduccion=self,claseconduccion__practica=self.practica).exists()

class AlumnoPractica(models.Model):

    claseconduccion = models.ForeignKey(ClaseConduccion, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, null=True, blank=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcion)+"   "+str(self.claseconduccion)

    def existe_historia(self):
        return HistoricoRecordAcademico.objects.filter(asignatura__id=ASIGNATURA_PRACTICA_CONDUCCION,inscripcion = self.inscripcion).exists()

class EliminacionMatricula(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel, blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateField()
    motivo = models.CharField(max_length=200, blank=True, null=True)

    def __str__(self):
        return str(self.inscripcion)+str(self.nivel)+self.fecha.strftime('%d-%m-%Y')

    def existe_detalleeliminamatricula(self):
        if DetalleEliminaMatricula.objects.filter(eliminadamatriculada=self).exists():
            return True
        else:
            return False

    class Meta:
        verbose_name = "Eliminacion de Matricula"
        verbose_name_plural = "Eliminacion de Matriculas"





class EstudiantesXDesertar(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    materiareprobada = models.IntegerField(null=True, blank=True)
    reintegro = models.BooleanField(default=False)
    observacion = models.CharField(max_length=1005)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observacion: self.observacion = self.observacion.upper()
        super(EstudiantesXDesertar, self).save(force_insert, force_update, using, update_fields)

    def __str__(self):
        return str(self.inscripcion) + str(self.matricula)

    class Meta:
        verbose_name = "Estudiante por Desertar"
        verbose_name_plural = "Estudiantes por Desertar"

class EstudiantesXDesertarObservacion(models.Model):
    estudiantesxdesertar = models.ForeignKey(EstudiantesXDesertar, on_delete=models.CASCADE)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    observacion = models.CharField(max_length=300)

    def __str__(self):
        return str(self.estudiantesxdesertar)

    class Meta:
        verbose_name = "Estudiante por Desertar Observacion"
        verbose_name_plural = "Estudiantes por Desertar Observaciones"



class PreInscripcion(models.Model):
    """Perfil de Persona, todos los usuarios del sistema tienen un registro"""
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    modalidad = models.ForeignKey(Modalidad, on_delete=models.CASCADE)
    seccion = models.ForeignKey(Sesion, on_delete=models.CASCADE)
    grupo = models.ForeignKey(Grupo, on_delete=models.CASCADE)
    inicio_clases = models.DateField(blank=True, null=True)
    nombres = models.CharField(max_length=100)
    apellido1 = models.CharField(max_length=100, verbose_name="1er Apellido")
    apellido2 = models.CharField(max_length=100, verbose_name="2do Apellido", blank=True, null=True)
    cedula = models.CharField(max_length=13, verbose_name="Cedula", blank=True, null=True)
    nacimiento = models.DateField(verbose_name=u"Fecha de Nacimiento", blank=True, null=True)
    email = models.CharField(max_length=200,blank=True, null=True, verbose_name="Correos Electronicos")
    sexo = models.ForeignKey(Sexo, blank=True, null=True, on_delete=models.CASCADE)
    telefono = models.CharField(max_length=50, verbose_name=u"Telefonos Moviles", blank=True, null=True)
    celular = models.CharField(max_length=50, verbose_name=u"Telefonos Moviles", blank=True, null=True)
    colegio = models.CharField(max_length=300, verbose_name=u"Telefonos Moviles", blank=True, null=True)
    especialidad = models.ForeignKey(Especialidad,blank=True,null=True, on_delete=models.CASCADE)
    fecha_registro = models.DateField(blank=True, null=True)
    hora_registro = models.TimeField(blank=True, null=True)
    fecha_caducidad = models.DateTimeField(blank=True, null=True)
    inscrito = models.BooleanField(default=False)
    calleprincipal = models.CharField(max_length=300, blank=True, null=True)
    callesecundaria= models.CharField(max_length=300, blank=True, null=True)
    numerocasa= models.CharField(max_length=300, blank=True, null=True)
    canton = models.ForeignKey(Canton,blank=True,null=True, on_delete=models.CASCADE)
    provincia = models.ForeignKey(Provincia,blank=True,null=True, on_delete=models.CASCADE)
    tipoanuncio = models.ForeignKey(TipoAnuncio,blank=True,null=True, on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True, null=True)
    tipodoc = models.CharField(max_length=2,blank=True,null=True)
    repetido= models.BooleanField(default=False)
    enviocorreo= models.BooleanField(default=False)


    def correo_aviso(self):
        # correo=TipoIncidencia.objects.get(pk=INCIDENCIA_BAJAMEDI)
        hoy = datetime.now().date()
        contenido = "AVISO IMPORTANTE"
        send_html_mail(self.grupo.nombre,
                       "emails/aviso_precongreso.html", { 'fecha': hoy,'contenido': contenido,'opc':1, 'preins':self},self.email.split(","))

    def esta_cadudado(self):
        if self.fecha_caducidad >= datetime.now():
            return False
        return True

    def __str__(self):
        return self.nombres + " " + self.apellido1 + " " + self.apellido2 + " Ced:" + str(self.cedula)

    def se_inscribio(self):
        if RegistroSeguimiento.objects.filter(identificacion=self.cedula).exists():
            r = RegistroSeguimiento.objects.filter(identificacion=self.cedula)[:1].get()
            return r.seinscribio()
        return False

    def usuario_llamada(self,llamada):
        if RegistroSeguimiento.objects.filter(identificacion=self.cedula).exists():
            r = RegistroSeguimiento.objects.filter(identificacion=self.cedula)[:1].get()
            if LlamadaUsuario.objects.filter(estadollamada=llamada).exists():
                return  LlamadaUsuario.objects.filter(estadollamada=llamada).latest('id')


    def finalizado(self):
        return RegistroSeguimiento.objects.filter(identificacion=self.cedula,finalizada=True).exists()

    class Meta:
        verbose_name = " PreInscripcion"
        verbose_name_plural = "PreInscripciones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombres: self.nombres = self.nombres.upper()
        if self.apellido1: self.apellido1 = self.apellido1.upper()
        if self.apellido2: self.apellido2 = self.apellido2.upper()
        super(PreInscripcion, self).save(force_insert, force_update, using, update_fields)

class DetalleRetiradoMatricula(models.Model):
    retirado = models.ForeignKey(RetiradoMatricula, on_delete=models.CASCADE)
    fecha = models.DateField()
    especie = models.CharField(max_length=20, blank=True, null=True)
    motivo = models.CharField(max_length=200, blank=True, null=True)
    estado = models.CharField(max_length=20, blank=True, null=True)
    usuario = models.ForeignKey(User,null=True, on_delete=models.CASCADE)
    seguimiento = models.CharField(max_length=300, blank=True, null=True)
    f_seguimiento = models.DateField()
    usrseguimiento = models.ForeignKey(User,related_name='usr_regseguimiento',null=True, blank=True, on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento,null=True, blank=True, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona,null=True, blank=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.retirado) +self.fecha.strftime('%d-%m-%Y')

    class Meta:
        verbose_name = "Detalle de Retiro de Matricula"
        verbose_name_plural = "Detalles de Retiros de Matriculas"

# vista box

class TipoVisitasBox(models.Model):
    descripcion = models.CharField(max_length=150)
    valida_deuda = models.BooleanField(default=False)
    valida_retiro = models.BooleanField(default=False)
    alias = models.CharField(max_length=150)
    estado = models.BooleanField(default=False)
    visor = models.CharField(max_length=5)
    sede = models.ForeignKey(Sede, blank=True, null=True, on_delete=models.CASCADE)
    cita = models.BooleanField(default=False)

    def __str__(self):
        return self.descripcion + ' - ' + str(self.sede)

    class Meta:
        verbose_name = " Tipo Visita a Box"
        verbose_name_plural = "Tipos de Visitas a Box"

    @staticmethod
    def flexbox_query(q):
        return TipoVisitasBox.objects.filter(Q(descripcion__contains=q)).distinct()

    def flexbox_repr(self):
        return self.descripcion +" - " + str(self.sede)


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(TipoVisitasBox, self).save(force_insert, force_update, using, update_fields)

class ClaveBox(models.Model):
    descripcion = models.CharField(max_length=150)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = " Clave de Consulta"
        verbose_name_plural = "Claves de Consulta"


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(ClaveBox, self).save(force_insert, force_update, using, update_fields)

class TipoConsulta(models.Model):
    tipovisitabox = models.ForeignKey(TipoVisitasBox, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=150)
    veces = models.IntegerField()

    def __str__(self):
        return self.descripcion
    class Meta:
        verbose_name = " Tipo Consulta"
        verbose_name_plural = "Tipos de Consulta"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(TipoConsulta, self).save(force_insert, force_update, using, update_fields)

class ConvenioBox(models.Model):
    descripcion = models.CharField(max_length=300)
    cita=models.BooleanField(default=False)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return  self.descripcion

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(ConvenioBox, self).save(force_insert, force_update, using, update_fields)


class VisitaBox(models.Model):
    tipopersona = models.ForeignKey(TipoPersona, on_delete=models.CASCADE)
    nombre = models.CharField(max_length= 300)
    cedula = models.CharField(max_length=10, verbose_name="Cedula", blank=True, null=True)
    convenio = models.ForeignKey(ConvenioBox,blank=True,null=True, on_delete=models.CASCADE)
    sexo = models.ForeignKey(Sexo, blank=True, null=True, on_delete=models.CASCADE)
    direccion = models.CharField(max_length= 300)
    telefono = models.CharField(max_length=60)
    firma = models.FileField(upload_to='archivofirma/%Y/%m/%d', max_length=200,blank=True,null=True)


    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = " Visita Box"
        verbose_name_plural = "Visitas Box"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        if self.direccion: self.direccion = self.direccion.upper()
        super(VisitaBox, self).save(force_insert, force_update, using, update_fields)

class SesionTratamiento(models.Model):
    visitabox = models.ForeignKey(VisitaBox, on_delete=models.CASCADE)
    tipovisitabox = models.ForeignKey(TipoVisitasBox, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length= 100)
    numerosesion = models.IntegerField()

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = " Sesion para Tratamiento"
        verbose_name_plural = "Sesiones para Tratamiento"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(SesionTratamiento, self).save(force_insert, force_update, using, update_fields)

class AlternativasBoxExt(models.Model):
    descripcion = models.CharField(max_length=500)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = "Alternativa Box"
        verbose_name_plural = "Alternativas Box"

class DetalleVisitasBox(models.Model):
    visitabox = models.ForeignKey(VisitaBox, on_delete=models.CASCADE)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    tipovisitabox = models.ForeignKey(TipoVisitasBox, on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True, null=True)
    fecha = models.DateTimeField()
    motivo = models.CharField(max_length=500)
    observacion = models.CharField(max_length=500)
    sede = models.ForeignKey(Sede, on_delete=models.CASCADE)
    costo = models.BooleanField(blank=True, null=True)
    sesion = models.IntegerField()
    tipoconsulta = models.IntegerField(blank=True,null =True)
    sesiontratamiento = models.IntegerField(blank=True,null =True)
    clavebox = models.ForeignKey(ClaveBox, on_delete=models.CASCADE)
    deuda = models.BooleanField(blank=True, null=True)
    emeregencia = models.BooleanField(default=False)
    alternativa = models.ForeignKey(AlternativasBoxExt,blank=True,null=True, on_delete=models.CASCADE)

    def __str__(self):
        return self.observacion

    def tipo_consulta(self):
        tipo = TipoConsulta.objects.get(pk=self.tipoconsulta)
        return tipo

    def sesion_tratamiento(self):
        sesion = SesionTratamiento.objects.get(pk=self.sesiontratamiento)
        return sesion

    def sesion_numero(self):
        sesion = SesionTratamiento.objects.get(pk=self.sesiontratamiento)
        return sesion.numerosesion
    class Meta:
        verbose_name = " Detalle de Visita Box"
        verbose_name_plural = "Detalles de Visitas Box"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observacion: self.observacion = self.observacion.upper()
        super(DetalleVisitasBox, self).save(force_insert, force_update, using, update_fields)

    def mail_inscdeuda(self, user,cedula):
        if TipoIncidencia.objects.filter(pk=9).exists():
            user = Persona.objects.get(usuario__id=user)
            alumno = Persona.objects.get(cedula=cedula)
            tipo = TipoIncidencia.objects.get(pk=9)
            hoy = datetime.now().today()
            contenido = "Consulta con deuda:"
            send_html_mail("Consulta Box con deuda",
                           "emails/boxdeuda.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user, 'alumno':alumno},tipo.correo.split(","))
    def receta_exist(self):
        receta = RecetaVisitaBox.objects.filter(visita=self)
        return receta

    def especialista_exist(self):
        return EspecialistaVisitaBox.objects.filter(visita=self)

    def correo_receta(self, user,emer):
        if TipoIncidencia.objects.filter(pk=37).exists():
            tipo = TipoIncidencia.objects.filter(pk=37)[:1].get()
            hoy = datetime.now().today()
            regis = RecetaVisitaBox.objects.filter(visita=self)
            if emer == '1' :
                contenido = "Receta Generada - EMERGENCIA"
            else:
                contenido = "Receta Generada"
            send_html_mail("SE HA GENERADO UNA RECETA",
                           "emails/receta.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user,'receta':regis,'emer':emer },tipo.correo.split(","))
#termino box
class EstudianteXEgresar(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    promedio = models.FloatField()
    asistencia = models.BooleanField(blank=True, null=True)
    estado = models.BooleanField(blank=True, null=True)

    def __str__(self):
        return str(self.inscripcion)

    class Meta:
        verbose_name = "Estudiante X Egresar"
        verbose_name_plural = "Estudiantes X Egresar"

# PRACTICAS CONDUCCION

class ParametroEvaluacion(models.Model):
    nombre = models.CharField(max_length=200)
    alias = models.CharField(max_length=50, blank=True, null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Parametro de Evaluacion Practica"
        verbose_name_plural = "Parametros de Evaluacion practicas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        if self.alias: self.alias = self.alias.upper()
        super(ParametroEvaluacion, self).save(force_insert, force_update, using, update_fields)

class HistoricoNotasPractica(models.Model):
    historico = models.ForeignKey(HistoricoRecordAcademico, on_delete=models.CASCADE)
    responsable = models.IntegerField(blank=True, null=True)
    evaluador = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    n1 = models.IntegerField(blank=True, null=True)
    cod1 = models.IntegerField(blank=True, null=True)
    n2 = models.IntegerField(blank=True, null=True)
    cod2 = models.IntegerField(blank=True, null=True)
    n3 = models.IntegerField(blank=True, null=True)
    cod3 = models.IntegerField(blank=True, null=True)
    n4 = models.IntegerField(blank=True, null=True)
    cod4 = models.IntegerField(blank=True, null=True)
    n5 = models.IntegerField(blank=True, null=True)
    total = models.IntegerField(blank=True, null=True)
    recup = models.IntegerField(blank=True, null=True)
    notafinal = models.IntegerField(blank=True, null=True)
    estado = models.ForeignKey(TipoEstado, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return "Historico Notas Practicas "



    def codigo1(self):
        return ParametroEvaluacion.objects.get(pk=self.cod1).nombre

    def codigo2(self):
        return ParametroEvaluacion.objects.get(pk=self.cod2).nombre

    def codigo3(self):
        return ParametroEvaluacion.objects.get(pk=self.cod3).nombre

    def codigo4(self):
        return ParametroEvaluacion.objects.get(pk=self.cod4).nombre

    class Meta:
        verbose_name = 'Historico de Nota'
        verbose_name_plural = "Historicos de Notas practicas"
# class Pregunta(models.Model):
#     descripcion = models.CharField(max_length=200)
#
#     def __str__(self):
#         return self.descripcion
#
#     class Meta:
#        verbose_name = " Pregunta Secreta"
#        verbose_name_plural = "Preguntas Secretas"
#
#     def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
#         if self.descripcion: self.descripcion = self.descripcion.upper()
#         super(Pregunta, self).save(force_insert, force_update, using, update_fields)
#
# class UsuarioPregunta(models.Model):
#     usuario = models.ForeignKey(User, on_delete=models.CASCADE)
#     pregunta = models.ForeignKey(Pregunta, on_delete=models.CASCADE)
#     respuesta = models.CharField(max_length=200)
#     fecha = models.DateField()
#
#     class Meta:
#        verbose_name = " Respuesta Secreta"
#        verbose_name_plural = "Respuestas Secretas"
#
#     def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
#         if self.respuesta: self.respuesta = self.respuesta.upper()
#         super(UsuarioPregunta, self).save(force_insert, force_update, using, update_fields)

###########################################################################################################################
class TipoTest(models.Model):
    descripcion = models.CharField(max_length=500, verbose_name="Titulo",blank=True,null=True)
    descripcioncorta = models.CharField(max_length=100, verbose_name="Descripcion Corta",blank=True,null=True)
    minutofin = models.IntegerField(blank=True, null=True,verbose_name="Tiempo de Finalizacion")
    observacion = models.CharField(blank=True,null=True,max_length=1000,verbose_name="Mensaje")
    fecha = models.DateTimeField(blank=True, null=True)
    estado = models.BooleanField(default=False)
    personalidad = models.BooleanField(default=False)
    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = 'Tipo de Test'
        verbose_name_plural = "Tipos de Test"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(TipoTest, self).save(force_insert, force_update, using, update_fields)
    def tipo_existerespu(self,inscripciontest):
        return RespuestaTest.objects.filter(inscripciontipotest=inscripciontest,tipotest=self).exists()
    def instrucion_test(self):
        return InstruccionTest.objects.filter(tipotest=self).exists()

    def ejercicio_test(self):
        return EjercicioTest.objects.filter(tipotest=self).exists()
    def pregunta_test(self):
        return PreguntaTest.objects.filter(tipotest=self).exists()
    def resulta_direc(self,inscr):
        cant=0
        respuesta= RespuestaTest.objects.filter(inscripciontipotest=inscr,tipotest=self)
        for resp in respuesta:
            ejer = EjercicioTest.objects.get(pk=resp.ejerciciotest)
            if resp.respuesta==ejer.parametrotest.id:
                p=ParametroTest.objects.get(pk=ejer.parametrotest.id)
                cant=int(p.puntaje)+cant

        return cant
    def resulta_perce(self,inscr):
        cant=0
        respuesta= RespuestaTest.objects.filter(inscripciontipotest=inscr,tipotest=self)
        for resp in respuesta:
            ejer = EjercicioTest.objects.get(pk=resp.ejerciciotest)
            if resp.respuesta==ejer.parametrotest.id:
                p=ParametroTest.objects.get(pk=ejer.parametrotest.id)
                cant=int(p.puntaje)+cant
        cod=0
        bara=PuntoBaremo.objects.all().order_by('-directo')
        for bara in bara:
            if cant >= bara.directo:
                cod=bara.percentil
                break
        return cod
    def resulta_descr(self,inscr):
        cant=0
        respuesta= RespuestaTest.objects.filter(inscripciontipotest=inscr,tipotest=self)
        for resp in respuesta:
            ejer = EjercicioTest.objects.get(pk=resp.ejerciciotest)
            if resp.respuesta==ejer.parametrotest.id:
                p=ParametroTest.objects.get(pk=ejer.parametrotest.id)
                cant=int(p.puntaje)+cant
        cod=""
        if not inscr.inscripcion.tienediscapacidad:
            bara=PuntoBaremo.objects.all().order_by('-directo')
            for bara in bara:
                if cant >= bara.directo :
                    cod=bara.descripcion
                    break
        else:
            cal=CalificacionAutoestima.objects.filter(desde__lte=cant, hasta__gte=cant)[:1].get()
            cod=cal.calificacion
        return cod

    def valida_editar(self):
        if not InscripcionTipoTest.objects.filter(tipotest=self).exists():
            return False
        else:
            return True



class InstruccionTest(models.Model):
    tipotest = models.ForeignKey(TipoTest, on_delete=models.CASCADE)
    imagen = models.FileField(upload_to='fotoaf/%Y/%m/%d')
    ejemplo = models.CharField(max_length=1000)
    explicacion = models.CharField(max_length=1000)

    def __str__(self):
        return str(self.tipotest.descripcion)

    class Meta:
        verbose_name = 'Instruccion de Test'
        verbose_name_plural = "Instruciones de Test"


class ParametroTest(models.Model):
    descripcion = models.CharField(max_length=500)
    puntaje = models.IntegerField(blank=True, null=True)
    tipotest=models.ForeignKey(TipoTest, on_delete=models.CASCADE)
    estado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = 'Parametro Test'
        verbose_name_plural = "Parametro de Test"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(ParametroTest, self).save(force_insert, force_update, using, update_fields)

class EjercicioTest(models.Model):
    tipotest = models.ForeignKey(TipoTest, on_delete=models.CASCADE)
    imagen = models.FileField(upload_to='cv/%Y/%m/%d')
    pregunta = models.CharField(max_length=1500,blank=True, null=True)
    parametrotest = models.ForeignKey(ParametroTest, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.pk)+" "+str(self.tipotest.descripcion)+" "+str(self.parametrotest.descripcion)

    class Meta:
        verbose_name = 'Ejercicio Test'
        verbose_name_plural = "Ejercicios Test"

class TipoIngreso(models.Model):
    descripcion = models.CharField(max_length=50,null=True)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = 'Tipo Ingreso'
        verbose_name_plural = "Tipos de Ingreso"
    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(TipoIngreso, self).save(force_insert, force_update, using, update_fields)

class AreaTest(models.Model):
    nombre = models.CharField(max_length=300)
    descripcion = models.CharField(max_length=300)

    def __str__(self):
        return str(self.nombre)

    class Meta:
        verbose_name = 'Area Profesional'
        verbose_name_plural = "Areas Profesionales"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        super(AreaTest, self).save(force_insert, force_update, using, update_fields)

    def pregunta_area(self,inscr):
        pre=PreguntaTest.objects.filter(areatest=self,tipotest=TEST_VOCACIONAL)
        lista=[]
        for pre in pre:
            lista.append(int(pre.id))
        resul = RespuestaTest.objects.filter(tipotest=TEST_VOCACIONAL,inscripciontipotest=inscr,ejerciciotest__in=lista,respuesta=1).order_by('ejerciciotest')

        return resul

    def pregunta_total(self,inscr):
        pre=PreguntaTest.objects.filter(areatest=self,tipotest=TEST_VOCACIONAL)
        lista=[]
        for pre in pre:
            lista.append(int(pre.id))
        resul = RespuestaTest.objects.filter(tipotest=TEST_VOCACIONAL,inscripciontipotest=inscr,ejerciciotest__in=lista,respuesta=1).count()

        return resul
class PreguntaTest(models.Model):
    tipotest = models.ForeignKey(TipoTest,null=True,blank=True, on_delete=models.CASCADE)
    areatest = models.ForeignKey(AreaTest,null=True,blank=True, on_delete=models.CASCADE)
    pregunta = models.CharField(max_length=3000,null=True)
    tipo = models.ForeignKey(TipoIngreso,null=True,blank=True, on_delete=models.CASCADE)
    orden = models.IntegerField(blank=True,null=True)
    estado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.pregunta)

    class Meta:
        verbose_name = 'Pregunta'
        verbose_name_plural = "Pregunta"

    def verificarespuesta(self,idinscri):
        if RespuestaTest.objects.filter(preguntatest=self,inscripciontipotest__inscripcion__id=idinscri).exists():
            respuesta = RespuestaTest.objects.get(preguntatest=self,inscripciontipotest__inscripcion__id=idinscri)
            return respuesta
        return 0
    def verificarespuesta2(self,idinscri,idinscritipotest):
        if RespuestaTest.objects.filter(preguntatest=self,inscripciontipotest__inscripcion__id=idinscri,inscripciontipotest__id=idinscritipotest).exists():
            respuesta = RespuestaTest.objects.get(preguntatest=self,inscripciontipotest__inscripcion__id=idinscri,inscripciontipotest__id=idinscritipotest)
            # re= respuesta.preguntatest_id
            return respuesta
        return 0

    def valida_editar(self):
        if not InscripcionTipoTest.objects.filter(tipotest=self.tipotest).exists():
            return False
        else:
            return True


class InscripcionTipoTest(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=3000,blank=True, null=True)
    fechainicio = models.DateTimeField(blank=True, null=True)
    horafin = models.DateTimeField(blank=True, null=True)
    estado = models.BooleanField(default=False)
    tipotest= models.ForeignKey(TipoTest,blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcion)

    class Meta:
        verbose_name = 'Alumno Test'
        verbose_name_plural = "Alumnos Test"

    def mail_ingreobservacion(self,email,observacion):

        try:
            tituloinst = TituloInstitucion.objects.filter()[:1].get()

        except :
            tituloinst = None
        send_html_mail("Diagnostico de los Test",
                       "emails/observaciontest_email.html",
                       {'t':tituloinst,'obs':observacion}, [email])

    def mail_ingreobservaciondiscapacidad(self,email,observacion,emailpersonaobs):

        try:
            tituloinst = TituloInstitucion.objects.filter()[:1].get()

        except :
            tituloinst = None
        send_html_mail("Diagnostico del Test",
                       "emails/observaciontest_email.html",
                       {'t':tituloinst,'obs':observacion,'estudiante':self}, [email,emailpersonaobs])


    def nombre_test(self):
        test= TipoTest.objects.get(id=self.tipotest_id)
        return test

    def puntaje_test(self):
        resultado=  ResultadoRespuesta.objects.get(inscripciontipotest=self,tipotest=self.tipotest)
        return resultado

    def calculo_test(self):
        if CalculoTest.objects.filter(tipotest=self.tipotest).exists():
            calculotest=CalculoTest.objects.get(tipotest__id=self.tipotest_id)
            return calculotest.id
        else:
            return 0


class RespuestaTest(models.Model):
    inscripciontipotest = models.ForeignKey(InscripcionTipoTest, on_delete=models.CASCADE)
    tipotest = models.ForeignKey(TipoTest, on_delete=models.CASCADE)
    ejerciciotest = models.IntegerField()
    respuesta = models.IntegerField()
    preguntatest=models.ForeignKey(PreguntaTest,blank=True, null=True, on_delete=models.CASCADE)
    parametrotest=models.ForeignKey(ParametroTest,blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.tipotest.descripcion)

    class Meta:
        verbose_name = 'Respuesta de test'
        verbose_name_plural = 'Respuestas del Test'
    def pregunta_orden(self):
        orden = PreguntaTest.objects.get(pk=self.ejerciciotest)
        return orden.orden

    def nombre_parametro(self):
        parametro= ParametroTest.objects.get(id=self.parametrotest_id)
        return parametro.descripcion

class PuntoBaremo(models.Model):
    directo=models.IntegerField()
    percentil=models.IntegerField()
    descripcion=models.CharField(max_length=300)

    def __str__(self):
        return str(self.descripcion)+" "+str(self.directo)+" "+str(self.percentil)

    class Meta:
        verbose_name = 'Puntaje Baremo'
        verbose_name_plural = 'Puntajes Baremo'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.descripcion: self.descripcion = self.descripcion.upper()
        super(PuntoBaremo, self).save(force_insert, force_update, using, update_fields)


class CalificacionAutoestima(models.Model):
    desde=models.IntegerField()
    hasta=models.IntegerField()
    calificacion=models.CharField(max_length=300)

    def __str__(self):
        return str(self.calificacion)+" "+str(self.desde)+" "+str(self.hasta)

    class Meta:
        verbose_name = 'Calificacion Autoestima'
        verbose_name_plural = 'Calificaciones Autoestima'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.calificacion: self.calificacion = self.calificacion.upper()
        super(CalificacionAutoestima, self).save(force_insert, force_update, using, update_fields)


class GrupoCurso(models.Model):
    nombre = models.CharField(max_length=500)
    numeropagos = models.IntegerField()
    activo = models.BooleanField(default=True)

    def __str__(self):
        return self.nombre

    def verifica(self):
        return PagosCurso.objects.filter(grupocurso=self).count() < self.numeropagos

    def disponible(self):
        return MateriaCurso.objects.filter(grupocurso=self).count() < self.numeropagos

    def puede_eliminarse(self):
        if MateriaCurso.objects.filter(grupocurso=self).exists() or PagosCurso.objects.filter(grupocurso=self):
            return False
        else:
            return True
    def puede_eliminar(self):
        return DetallePagos.objects.filter(grupocurso=self).exists()


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(GrupoCurso, self).save(force_insert, force_update, using, update_fields)

class PagosCurso(models.Model):
    grupocurso = models.ForeignKey(GrupoCurso, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=500)
    valor = models.FloatField()
    fechavence = models.DateField()

    def __str__(self):
        return str(self.grupocurso)+" "+ self.nombre +" "+str(self.valor)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(PagosCurso, self).save(force_insert, force_update, using, update_fields)


class DetallePagos(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    grupocurso = models.ForeignKey(GrupoCurso, on_delete=models.CASCADE)
    pagocurso  = models.ForeignKey(PagosCurso, on_delete=models.CASCADE)
    activo = models.BooleanField(default=False)
    rubro = models.ForeignKey(Rubro, blank=True , null= True, on_delete=models.CASCADE)

class MateriaCurso(models.Model):
    grupocurso = models.ForeignKey(GrupoCurso, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    inicio = models.DateField()
    fin = models.DateField()
    instructor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    horas = models.IntegerField()
    grupo = models.CharField(max_length=20)


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.grupo = self.grupo.upper()
        super(MateriaCurso, self).save(force_insert, force_update, using, update_fields)

class InscripcionMateria(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    materia = models.ForeignKey(MateriaCurso, on_delete=models.CASCADE)
    fecha = models.DateField()

class FotoPersonaProf(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    fotoprof = models.FileField(upload_to='fotos/%Y/%m/%d', max_length=200)

    def __str__(self):
        return "Foto "+str(self.persona)

    class Meta:
        verbose_name = "Foto Prof"
        verbose_name_plural = "Foto Prof"

    def download_fotoprof(self):
        return self.fotoprof.url

class ServiciosBox(models.Model):
    tipopersona = models.ForeignKey(TipoPersona, on_delete=models.CASCADE)
    tipovisita = models.ForeignKey(TipoVisitasBox, on_delete=models.CASCADE)
    libre = models.BooleanField(default=True)

    def __str__(self):
        return "Grupo: "+ str(self.tipopersona) + " - " + str(self.tipovisita) + " (LIBRE PAGO : " + str(self.libre) + " )"

    class Meta:
        verbose_name = "Servicio Box "
        verbose_name_plural = "Servicios Box"


def prettify(elem):
    """Return a pretty-printed XML string for the Element.
    """
    rough_string = ElementTree.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")

# Para Conduccion
class GraduadoConduccion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    nombres = models.CharField(verbose_name=u"Nombres de Estudiante", max_length=100, null=True, blank=True)
    promedio = models.FloatField(verbose_name=u"Promedio Final")
    examen_teorico = models.FloatField(verbose_name=u"Nota Examen Teorico", null=True, blank=True)
    examen_practico = models.FloatField(verbose_name=u"Nota Examen Practico", null=True, blank=True)
    nota_final = models.FloatField(verbose_name=u"Nota Final", null=True, blank=True)
    equivalente = models.CharField(verbose_name=u"Equivalencia",max_length=50, null=True, blank=True)
    numero_acta = models.IntegerField(verbose_name=u"Numero de Acta", null=True, blank=True)
    fecha_grado = models.DateField(verbose_name=u"Fecha Grado",null=True, blank=True)
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcion)+" [graduadoconduccion]"

    class Meta:
        verbose_name = "Graduado Conduccion"
        verbose_name_plural = "Alumnos Graduados Conduccion"

class EquivalenciaCondu(models.Model):
    nombre = models.CharField(max_length=100)
    equivale = models.IntegerField()

    def __str__(self):
        return self.nombre + "" + str(self.equivale)

    class Meta:
        verbose_name = "Equivalencia Grado Condu"
        verbose_name_plural = "Equivalencias Graduaciones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(EquivalenciaCondu, self).save(force_insert, force_update, using, update_fields)


class TipoMedicamento(models.Model):
    descripcion = models.CharField(max_length=200,blank=True,null=True)

    class Meta:
        verbose_name = 'Tipo Medicamento'
        verbose_name_plural = 'Tipos de Medicamentos'

    def __str__(self):
        return self.descripcion

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(TipoMedicamento, self).save(force_insert, force_update, using, update_fields)


class SuministroBox(models.Model):
    descripcion = models.CharField(max_length=200,null=True,blank=True)
    estado = models.BooleanField(blank=True, null=True)
    baja = models.BooleanField(blank=True, null=True)

    def __str__(self):
        return self.descripcion

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(SuministroBox, self).save(force_insert, force_update, using, update_fields)

class RegistroMedicamento(models.Model):
    nombre = models.ForeignKey(SuministroBox,blank=True,null=True, on_delete=models.CASCADE)
    presentacion = models.ForeignKey(TipoMedicamento,blank=True,null=True, on_delete=models.CASCADE)
    bodega = models.ForeignKey(Sede,blank=True,null=True, on_delete=models.CASCADE)
    cantidad = models.IntegerField(blank=True,null=True)
    costo = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)
    precio_venta = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)
    factura = models.BooleanField(default=False)
    iva = models.BooleanField(default=False)
    observacion = models.CharField(max_length=300,null=True,blank=True)


    class Meta:
        verbose_name = 'Registro Medicina'
        verbose_name_plural = 'Registros de Medicinas'

    def __str__(self):
        return str( self.nombre) + ' - ' + str(self.presentacion)


    def dar_baja(self):
        return BajaMedicamento.objects.filter(registromedicamento=self,profesor=None).exists()

    def tiene_entrega(self):
        return BajaMedicamento.objects.filter(registromedicamento=self).exclude(profesor=None).exists()

    def tiene_baja(self):
        return RegistroMedicamento.objects.filter(pk=self.id,nombre__baja=True).exists()

    def trasladoexist(self):
        return TrasladoMedicamento.objects.filter(registromedicamento=self).exists()

    def ingresoxtraslado(self):
        return TrasladoMedicamento.objects.filter(registromedicamento__nombre=self.nombre,registromedicamento__presentacion=self.presentacion,bodegarecibo=self.bodega).exists()

    def existeingreso(self):
        return DetalleRegistroMedicamento.objects.filter(registromedicamento=self).exists()

    def existebajarece(self):
        return RecetaVisitaBox.objects.filter(registro=self).exists()

class DetalleRegistroMedicamento(models.Model):
    registromedicamento = models.ForeignKey(RegistroMedicamento,blank=True,null=True, on_delete=models.CASCADE)
    cantidad = models.IntegerField(blank=True,null=True)
    stock = models.IntegerField(blank=True,null=True)
    fechavencimiento = models.DateField(blank=True,null=True,verbose_name='Fecha de Vencimiento')
    lote = models.CharField(max_length=200,null=True,blank=True)
    observacion = models.CharField(max_length=500,null=True,blank=True)
    fechaingreso = models.DateField(blank=True,null=True)
    costo_unitario = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)

    class Meta:
        verbose_name = 'Detalle Registro Medicina'
        verbose_name_plural = 'Detalle Registros de Medicinas'

    @staticmethod
    def flexbox_query(q):
        return DetalleRegistroMedicamento.objects.filter(stock__gt=0,lote__icontains=q,registromedicamento__cantidad__gt=0).order_by('fechavencimiento')

    @staticmethod
    def flexbox_query_2(q):
        return DetalleRegistroMedicamento.objects.filter(registromedicamento__nombre__descripcion__icontains=q,stock__gt=0,registromedicamento__cantidad__gt=0).order_by('fechavencimiento','registromedicamento__nombre__descripcion')

    def flexbox_repr(self):
        return self.lote+ ' - ' +str(self.stock)+ ' - ' +str(self.fechavencimiento)+' .D'

    def flexbox_alias(self):
        return str( self.registromedicamento)+' - Lote('+self.lote+ ') - Stock(' +str(self.stock)+ ') - Caduca(' +str(self.fechavencimiento)+')'+' .D'

    def __str__(self):
        return self.registromedicamento.nombre.descripcion+' - ' +self.registromedicamento.presentacion.descripcion

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.lote = self.lote.upper()
        super(DetalleRegistroMedicamento, self).save(force_insert, force_update, using, update_fields)

class BajaMedicamento(models.Model):
    registromedicamento = models.ForeignKey(RegistroMedicamento,blank=True,null=True, on_delete=models.CASCADE)
    cantidad = models.IntegerField(blank=True,null=True)
    motivo = models.CharField(max_length=300,blank=True,null=True)
    lote = models.CharField(max_length=200,null=True,blank=True)
    fecha = models.DateField(blank=True,null=True)
    usuario = models.ForeignKey(User,null=True, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300,null=True,blank=True)
    profesor = models.ForeignKey(Profesor,blank=True,null=True, on_delete=models.CASCADE)

    class Meta:
        verbose_name = 'Baja de Medicina'
        verbose_name_plural = 'Dar de Baja  a las Medicinas'

    def __str__(self):
        return self.registromedicamento.nombre.descripcion+' - ' +self.motivo

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()
        if self.observacion: self.observacion = self.observacion.upper()
        super(BajaMedicamento, self).save(force_insert, force_update, using, update_fields)

    def mail_bajamedicamento(self,persona):
        correo=TipoIncidencia.objects.get(pk=INCIDENCIA_BAJAMEDI)
        hoy = datetime.now().date()
        contenido = "BAJA DE MEDICAMENTO"
        send_html_mail("BAJA DE MEDICAMENTO",
                       "emails/bajamedicamento.html", {'fecha': hoy,'contenido': contenido,'opc':0,  'usuario':str(persona), 'medicina': str(self.registromedicamento.nombre),
                                                       'cantidad': str(self.cantidad), 'presentacion': str(self.registromedicamento.presentacion),
                                                       'bodega':str(self.registromedicamento.bodega),'motivo':str(self.motivo),'observacion':str(self.observacion)},correo.correo.split(","))


class TrasladoMedicamento(models.Model):
    registromedicamento = models.ForeignKey(RegistroMedicamento,blank=True,null=True, on_delete=models.CASCADE)
    bodegaenvio = models.ForeignKey(Sede,blank=True,null=True,related_name='bodegaenvio', verbose_name='bodegaenvio', on_delete=models.CASCADE)
    bodegarecibo = models.ForeignKey(Sede,blank=True,null=True,related_name='bodegarecibo', verbose_name='bodegarecibo', on_delete=models.CASCADE)
    cantidad = models.IntegerField(blank=True,null=True)
    stock = models.IntegerField(blank=True,null=True)
    lote = models.CharField(max_length=200,null=True,blank=True)
    fechavencimiento = models.DateField(blank=True,null=True,verbose_name='Fecha de Vencimiento')
    observacion = models.CharField(max_length=200,null=True,blank=True)
    fechatraslado = models.DateField(blank=True,null=True)
    user = models.ForeignKey(User,blank=True,null=True , on_delete=models.CASCADE)
    registmedicadest = models.ForeignKey(RegistroMedicamento,blank=True,null=True,related_name='registmedicadestino', on_delete=models.CASCADE)
    class Meta:
        verbose_name = 'Traslado Medicina'
        verbose_name_plural = 'Traslado de Medicina'

    def __str__(self):
        return self.registromedicamento.nombre.descripcion+' - ' +self.registromedicamento.presentacion.descripcion

    @staticmethod
    def flexbox_query(q):
        return TrasladoMedicamento.objects.filter(registmedicadest__cantidad__gt=0,stock__gt=0,lote__icontains=q).order_by('fechavencimiento')

    @staticmethod
    def flexbox_query_2(q):
        return TrasladoMedicamento.objects.filter(registmedicadest__nombre__descripcion__icontains=q,stock__gt=0,registmedicadest__cantidad__gt=0).order_by('fechavencimiento','registmedicadest__nombre__descripcion')

    def flexbox_repr(self):
        return self.lote+ ' - ' +str(self.stock)+' - ' +str(self.fechavencimiento)+' .T'

    def flexbox_alias(self):
        return str( self.registromedicamento)+' - Lote('+self.lote+ ') - Stock(' +str(self.stock)+ ') - Caduca(' +str(self.fechavencimiento)+')'+' .T'


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper()
        super(TrasladoMedicamento, self).save(force_insert, force_update, using, update_fields)

    def mail_traslmedicamento(self):
        correo=TipoIncidencia.objects.get(pk=INCIDENCIA_BAJAMEDI)
        hoy = datetime.now().date()
        contenido = "TRASLADO MEDICAMENTO"
        send_html_mail("TRASLADO DE MEDICAMENTO",
                       "emails/bajamedicamento.html", { 'fecha': hoy,'contenido': contenido,'opc':1, 'trasl':self},correo.correo.split(","))

class RecetaVisitaBox(models.Model):
    registro = models.ForeignKey(RegistroMedicamento,blank=True,null=True, on_delete=models.CASCADE)
    visita = models.ForeignKey(DetalleVisitasBox,blank=True,null=True, on_delete=models.CASCADE)
    cantidad = models.IntegerField(blank=True,null=True)
    lote = models.CharField(max_length=200,null=True,blank=True)
    fecha = models.DateField(blank=True,null=True,verbose_name='Fecha')
    precio = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)
    detalle = models.ForeignKey(DetalleRegistroMedicamento,blank=True,null=True, on_delete=models.CASCADE)
    traslado = models.ForeignKey(TrasladoMedicamento,blank=True,null=True, on_delete=models.CASCADE)
    factura = models.BooleanField(default=False)

    class Meta:
        verbose_name = 'Registro de Receta'
        verbose_name_plural = 'Registros de Recetas'

    def __str__(self):
        return self.registro.nombre.descripcion+' - ' +self.registro.presentacion.descripcion

class ProgresoTutoria(models.Model):
    descripcion = models.CharField(max_length=100,null=True,blank=True)


    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = 'Progreso Tutoria'
        verbose_name_plural = 'Progreso de Tutorias'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(ProgresoTutoria, self).save(force_insert, force_update, using, update_fields)


class Tutoria(models.Model):
    profesor = models.ForeignKey(Profesor,blank=True,null=True, on_delete=models.CASCADE)
    estudiante = models.ForeignKey(Inscripcion,blank=True,null=True, on_delete=models.CASCADE)
    numtutoria = models.IntegerField(blank=True,null=True,verbose_name='No Tutoria')
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)
    estado = models.BooleanField(blank=True, null=True)
    fecha = models.DateField(blank=True,null=True,verbose_name='Fecha')
    persona = models.ForeignKey(Persona,blank=True,null=True, on_delete=models.CASCADE)
    archivotesis=models.FileField(upload_to='archivotesis/%Y/%m/%d', max_length=200,blank=True,null=True)
    fechaarchivo= models.DateField(blank=True,null=True,verbose_name='Fecha Archivo')
    user = models.ForeignKey(User,blank=True,null=True , on_delete=models.CASCADE)
    fecha_sustentacion = models.DateField(blank=True,null=True)
    hora_sustentacion = models.TimeField(blank=True,null=True)
    docente1 = models.ForeignKey(Profesor,blank=True,null=True,related_name="docente1",verbose_name="docente1", on_delete=models.CASCADE)
    docente2 = models.ForeignKey(Profesor,blank=True,null=True,related_name="docente2",verbose_name="docente2", on_delete=models.CASCADE)
    docente3 = models.ForeignKey(Profesor,blank=True,null=True,related_name="docente3",verbose_name="docente3", on_delete=models.CASCADE)


    class Meta:
        verbose_name = 'Tutoria Estudiante'
        verbose_name_plural = 'Tutorias del Estudiante'

    def __str__(self):
        return self.estudiante.persona.nombre_completo()

    def revision_finalizada(self):
        return  RevisionTutoria.objects.filter(tutoria=self,finalizado=True).exists()

    def tiene_actasustentacion(self):
        if  ActaSustentacion.objects.filter(tutoria=self).exists():
            return  ActaSustentacion.objects.filter(tutoria=self)[:1].get()
        return  False



    def num_detalletutoria(self):
        if EstudianteTutoria.objects.filter(tutoria=self).exists():
            return EstudianteTutoria.objects.filter(tutoria=self).count()
        else:
            return 0

    def existe_tutoria(self):
        return Tutoria.objects.filter(estado=True,estudiante=self.estudiante).exclude(id=self.id).exists()

    def existe_modificatuto(self):
        return ObservacionTutoria.objects.filter(tutoria=self).exists()

    def email_enviatuto(self,usuario):
        correo = self.profesor.persona.emailinst+","+ self.estudiante.persona.emailinst
        hoy = datetime.now().date()
        contenido = "TUTORIA ASIGNADA"
        send_html_mail("TUTORIA ASIGNADA",
                       "emails/email_tutoriaasign.html", { 'fecha': hoy,'contenido': contenido,'self':self,'usuario':usuario},correo.split(","))

    def notificacion_sustentacion_elimina(self,user,mensaje,correo):
        hoy = datetime.now().date()
        contenido = mensaje
        send_html_mail("NOTIFICACION: Sustentacion",
                       "emails/notificacion_sustentacion_elimina.html", { 'fecha': hoy,'contenido': contenido,'self':self,'user':user},correo.split(","))

    def notificacion_sustentacion(self,user,mensaje,correo,comite):
        hoy = datetime.now().date()
        contenido = mensaje
        send_html_mail("NOTIFICACION: Sustentacion",
                       "emails/notificacion_sustentacion.html", { 'fecha': hoy,'contenido': contenido,'self':self,'user':user,'comite':comite},correo.split(","))

    def notificacion_sustentacion_alumno(self,user,mensaje,correo):
        hoy = datetime.now().date()
        contenido = mensaje
        send_html_mail("NOTIFICACION: Sustentacion",
                       "emails/notificacion_sustentacion_alumno.html", { 'fecha': hoy,'contenido': contenido,'self':self,'user':user},correo.split(","))

    def email_enviatesis(self,soporte):
        if TipoIncidencia.objects.filter(pk=56).exists():
            tipo=TipoIncidencia.objects.get(pk=56)
            # soporte='Estudiante: ' + str(elimina_tildes(self.estudiante.persona.nombre_completo_inverso())) + ' Nombre Tesis: ' + str(self.archivotesis)
            hoy = datetime.now().today()
            contenido = "Se ha cargado en el sistema Tesis de Estudiante"
            send_html_mail("REVISION ANTIPLAGIO ",
                           "emails/tutoriaestudiante.html", {'tutoria': self, 'fecha': hoy,'contenido':contenido},tipo.correo.split(","))

class EstudianteTutoria(models.Model):
    tutoria = models.ForeignKey(Tutoria,null=True,blank=True, on_delete=models.CASCADE)
    progreso = models.ForeignKey(ProgresoTutoria,null=True,blank=True, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300,null=True,blank=True)
    tarea = models.CharField(max_length=300,null=True,blank=True)
    asistencia = models.BooleanField(blank=True,null = True)
    fecha = models.DateField(null = True,blank= True)
    aprobar = models.BooleanField(default= False)
    fechaaprobar = models.DateTimeField(null = True,blank= True)
    observacionestudia = models.CharField(max_length=300,null=True,blank=True)

    def __str__(self):

        return str( self.tutoria) + ' - ' + self.observacion


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper()
        self.tarea = self.tarea.upper()
        super(EstudianteTutoria, self).save(force_insert, force_update, using, update_fields)

    def bloquear_asistencia(self):
        return EstudianteTutoria.objects.filter(fecha__lt=datetime.now().date(),id = self.id).exists()

    def email_observacion(self,obser):
        if TipoIncidencia.objects.filter(pk=18).exists():
            tipo=TipoIncidencia.objects.get(pk=18)
            hoy = datetime.now().today()
            send_html_mail("Observacion del Estudiante sobre Tutoria",
                           "emails/tutoriaestudiante.html", {'contenido': "Observacion del Estudiante sobre Tutoria", 'cuerpo': obser, 'fecha': hoy},tipo.correo.split(","))

class PagoTutoria(models.Model):
    profesor = models.ForeignKey(Profesor,null=True,blank=True, on_delete=models.CASCADE)
    totaltutoria = models.IntegerField(null=True,blank=True)
    pagototal = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)
    saldo = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)
    fecha = models.DateField(null = True,blank= True)
    class Meta:
        verbose_name = 'Pago Tutoria'
        verbose_name_plural = 'Tutorias al Estudiante'

    def __str__(self):
        return self.profesor.persona.nombre_completo()

    def total_saldo(self):
        pagotutoria = PagoTutoria.objects.get(id=self.id)
        total = 0
        prof = Profesor.objects.get(id= pagotutoria.profesor.id)
        num = 0
        if DetallePagoTutoria.objects.filter(pagotutoria=pagotutoria).exists():
            for tutor in Tutoria.objects.filter(profesor = prof):
                detallepago = DetallePagoTutoria.objects.filter(pagotutoria=pagotutoria).order_by('-id')[:1].get()
                num = num + len(EstudianteTutoria.objects.filter(tutoria = tutor,fechaaprobar__gt=detallepago.fechapago,fechaaprobar__lte=datetime.now()).exclude(aprobar=False,asistencia=True))
            if num > 0:
                total = Decimal(pagotutoria.pagototal) + Decimal(pagotutoria.saldo)
            else:
                total = Decimal(pagotutoria.saldo)
        else:
            total = Decimal(pagotutoria.pagototal) + Decimal(pagotutoria.saldo)

        return total

    def detalle_exist(self):
        return DetallePagoTutoria.objects.filter(pagotutoria=self)


class DetallePagoTutoria(models.Model):
    pagotutoria = models.ForeignKey(PagoTutoria,null=True,blank=True, on_delete=models.CASCADE)
    rol = models.ForeignKey(RolPago,null=True,blank=True, on_delete=models.CASCADE)
    valorpago = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)
    saldo = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)
    totaltutoria = models.IntegerField(null=True,blank=True)
    valortutorias = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)
    fechapago = models.DateTimeField(null = True,blank= True)
    contarol = models.CharField(max_length=20,null=True,blank=True)

    class Meta:
        verbose_name = 'Detalle Pago Tutoria'
        verbose_name_plural = 'Detalle de Tutorias al Estudiante'

    def total_detalle(self):
        if DetallePagoTutoria.objects.filter(id=self.id).exists():
            detalle = DetallePagoTutoria.objects.get(id=self.id)
            total = Decimal(detalle.saldo)+ Decimal(detalle.valorpago)
            return total

class DetalleNotacredDevol(models.Model):
    notacredito = models.ForeignKey(NotaCreditoInstitucion,null = True,blank= True, on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro,null = True,blank= True, on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True,null=True)

    def __str__(self):
        return str(self.notacredito) + ' - ' + str(self.rubro) + ' - ' + str(self.valor)

    class Meta:
        verbose_name = 'Detalles Notas Credito Devoluciones'
        verbose_name_plural = 'Detalle Nota Credito Devolucion'

class TipoOficio(models.Model):
    nombre = models.CharField(max_length=300)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre : self.nombre = self.nombre.upper()
        super(TipoOficio, self).save(force_insert, force_update, using, update_fields)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = 'Tipo de Oficio'
        verbose_name_plural = 'Tipos de Oficio'

class Oficio(models.Model):
    tipo = models.ForeignKey(TipoOficio, on_delete=models.CASCADE)
    numero = models.CharField(max_length=50,blank=True,null=True)
    asunto = models.CharField(max_length=3000,blank=True,null=True)
    remitente =  models.CharField(max_length=3000,blank=True,null=True)
    fecharecepcion = models.DateField(blank=True,null=True)
    fecha = models.DateField(blank=True,null=True)
    archivo = models.FileField(upload_to='oficios/%Y/%m/%d', max_length=200)
    emitido = models.BooleanField(default=False)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.asunto: self.asunto = self.asunto.upper()
        if self.remitente: self.remitente = self.remitente.upper()
        if self.numero: self.numero = self.numero.upper()
        super(Oficio, self).save(force_insert, force_update, using, update_fields)

    def __str__(self):
        return str(self.tipo) + " - " + self.numero + " - " + self.asunto

    class Meta:
        verbose_name = 'Oficio'
        verbose_name_plural = 'Oficio'

    def descargar(self):
        return self.archivo.url

    def mail_oficio(self, usuario):
        tipo = TipoIncidencia.objects.get(pk=19)
        hoy = datetime.now().today()
        send_html_mail("Adicionado Oficio",
                       "emails/adicionadooficio.html", {'o': self, 'usuario': usuario, 'fecha': hoy},tipo.correo.split(","))

    def existe_oficio(self):
        if os.path.exists(MEDIA_ROOT + '/' + str(self.archivo)):
            return True
        return False
class AnalisisEvaluacion(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=2000)

    def __str__(self):
        return str(self.profesor)

    class Meta:
        verbose_name = 'Analisis de Evaluacion'
        verbose_name_plural = 'Analisis de Evaluaciones'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper()
        super(AnalisisEvaluacion, self).save(force_insert, force_update, using, update_fields)

class RubroAdicional(models.Model):
    descripcion = models.CharField(max_length=500)
    valor = models.FloatField()
    activo = models.BooleanField(default=True)

    def __str__(self):
        return  ' $' + str(self.valor) + ' - '  + self.descripcion

    class Meta:
        verbose_name = 'Rubro Adicional'
        verbose_name_plural = 'Rubros Adicionales'

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(RubroAdicional, self).save(force_insert, force_update, using, update_fields)

class DeberAlumno(models.Model):
    lecciongrupo = models.ForeignKey(LeccionGrupo, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    fechaentrega = models.DateTimeField()
    archivo = models.FileField(upload_to='deberalumno/%Y/%m/%d', max_length=200)
    visto = models.BooleanField(blank=True, null=True)
    nota = models.FloatField(blank=True, null=True)

    def __str__(self):
        return  str(self.lecciongrupo) + ' - '  + str(self.inscripcion)

    class Meta:
        verbose_name = 'Deber Alumno'
        verbose_name_plural = 'Deberes Alumnos'

# ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
# ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

class TipoAtencionBox(models.Model):
    descripcion = models.CharField(max_length=50,blank=True,null=True)

    def __str__(self):
        return self.descripcion

    class Meta():
        verbose_name = "Tipo de Atencion Box"
        verbose_name_plural = "Tipos de Atencion Box"



#Almacena todos los tikets por dia
class VisitaTiket(models.Model):
    tipovisitabox = models.ForeignKey(TipoVisitasBox, on_delete=models.CASCADE)
    fechatiket = models.DateField(null = True,blank= True)
    totaltiket = models.IntegerField(null=True,blank=True)

    class Meta:
        verbose_name = 'Tiket para consulta Box'
        verbose_name_plural = 'Tikets para consultas Box'

class VisTiketDet(models.Model):
    visitatiket = models.ForeignKey(VisitaTiket, on_delete=models.CASCADE)
    tiket = models.IntegerField(null=True,blank=True)
    horatiket = models.DateTimeField(null = True,blank=True)
    atendido = models.BooleanField(blank=True)
    horaatendido = models.DateTimeField(null = True,blank=True)
    tipoatencionbox = models.ForeignKey(TipoAtencionBox, on_delete=models.CASCADE)

    class Meta:
        verbose_name = 'Detalle de Tiket para consulta Box'
        verbose_name_plural = 'Detalle de Tikets para consultas Box'

class Descuento(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=900)
    total = models.FloatField()
    fecha = models.DateTimeField()

    def __str__(self):
        return  str(self.inscripcion) + ' Motivo: '  + (self.motivo) + ' $' + str(self.total)

    class Meta:
        verbose_name = 'Descuento'
        verbose_name_plural = 'Descuentos'

    def correo(self, user):
        if TipoIncidencia.objects.filter(pk=22).exists():
            tipo = TipoIncidencia.objects.get(pk=22)
            hoy = datetime.now().today()
            detalle = DetalleDescuento.objects.filter(descuento=self)
            contenido = "APLICACION DE DESCUENTO"
            send_html_mail("DESCUENTO APLICADO",
                           "emails/descuento.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user,'detalles':detalle},tipo.correo.split(","))


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()
        super(Descuento, self).save(force_insert, force_update, using, update_fields)

class DetalleDescuento(models.Model):
    descuento = models.ForeignKey(Descuento, on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    valor = models.FloatField()
    porcentaje = models.FloatField()
    usuario = models.ForeignKey(User,blank=True,null=True , on_delete=models.CASCADE)
    descuota_nivel = models.BooleanField(default=False)
    pago = models.ForeignKey(Pago, blank=True, null=True, on_delete=models.CASCADE)

    class Meta:
        verbose_name = 'Detalle de Descuento'
        verbose_name_plural = 'Detalle de Descuentos'



#   Las nocias a mostrarse en la Tiketera.
class NewsTiket(models.Model):
    hdnoticia = models.CharField(max_length=50)
    bdynoticia = models.CharField(max_length=200)
    noticiasitio=models.IntegerField(null=True,blank=True)
    horanoticia = models.DateTimeField(null = True,blank=True)
    estadonoticia = models.BooleanField(blank=True)

    class Meta:
        verbose_name = 'Ingrso de Parrafo de Noticia'
        verbose_name_plural = 'Ingrso de Parrafos de Noticias'

# Define los puntos de atencion al cliente.
class PuntoAtencion(models.Model):
    punto = models.CharField(max_length=2000)
    horapunto = models.DateTimeField(null = True,blank=True)
    estadopunto = models.BooleanField(blank=True)

    class Meta:
        verbose_name = 'Ingrso de punto de Atencion'
        verbose_name_plural = 'Ingreso de puntos de Atencion'

#   almacena los usuarios con acceso al modulo atencion al cliente
class AtencionCliente(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    puntoatencion = models.ForeignKey(PuntoAtencion, on_delete=models.CASCADE)
    fechreg = models.DateField(null = True,blank= True)
    estado = models.BooleanField(blank=True)

    def __str__(self):
        return str(self.persona)

    class Meta:
        verbose_name = 'Acceso al modulo atencion al cliente'
        verbose_name_plural = 'Acceso al modulo atencion a clientes'

    def totaltiket(self,ini,fin):
        num = 0
        if TurnoCab.objects.filter(fechatiket__lte=fin,fechatiket__gte=ini,AtencionCliente=self).exists():
            for t in TurnoCab.objects.filter(fechatiket__lte=fin,fechatiket__gte=ini,AtencionCliente=self):
                num = t.totaltiket+num
            return num
        return num


#   almacena los registros de las consultas
class TurnoCab(models.Model):
    AtencionCliente = models.ForeignKey(AtencionCliente, on_delete=models.CASCADE)
    fechatiket = models.DateField(null = True,blank= True)
    totaltiket = models.IntegerField(null=True,blank=True)

    def __str__(self):
        return str(self.AtencionCliente)
    class Meta:
        verbose_name = 'Tiket para consulta Admision'
        verbose_name_plural = 'Tikets para consultas Admision'

class TurnoDet(models.Model):
    TurnoCab = models.ForeignKey(TurnoCab,null=True,blank=True, on_delete=models.CASCADE)
    tiket = models.IntegerField(null=True,blank=True)
    horatiket = models.DateField(null = True,blank=True)
    atendido = models.BooleanField(blank=True)
    hora = models.DateTimeField(null = True,blank=True)
    horatiende = models.DateTimeField(null = True,blank=True)

    class Meta:
        verbose_name = 'Detalle de Tiket para consulta Admision'
        verbose_name_plural = 'Detalle de Tikets para consultas Admision'
# Define los puntos de atencion al cliente

#   almacena los link de videos de vista Turnos
class VturnoVideo(models.Model):
    descripcion = models.CharField(max_length=250)
    rutav = models.CharField(max_length=100)
    confv = models.CharField(max_length=500)
    estado = models.BooleanField(blank=True)
    tipovista = models.IntegerField()
    repositorio = models.IntegerField()
    fechavideo = models.DateField(null = True,blank = True)
    anchpor = models.CharField(max_length=5)
    altopx = models.CharField(max_length=5)
    codec = models.CharField(max_length=250)

    class Meta:
        verbose_name = 'Videos para consulta Admision'
        verbose_name_plural = 'Videos para consultas Admision'

TIPOS_VISOR = (
    (1, 'Admision'),
    (2, 'Box')
)

REPOSITORIO = (
    (1, 'YouTube','https://www.youtube.com/embed/','?rel=0&autoplay=1&loop=1&playlist=','&amp;controls=0&amp;showinfo=0','100%','600','frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen'),
    (2, 'Vimeo','https://player.vimeo.com/video/','?autoplay=1','&loop=1&title=0&byline=0&portrait=0','100%','600','frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen')
)

class InscripcionGuarderia(models.Model):
    tipopersona = models.ForeignKey(TipoPersona, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion,blank=True,null=True, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona,blank=True,null=True, on_delete=models.CASCADE)
    personaext = models.CharField(max_length=300,blank=True,null=True)
    identificacion = models.CharField(max_length=10)
    fecha = models.DateTimeField()
    responsable = models.CharField(max_length=300)
    edadresponsable = models.CharField(max_length=50)
    telresponsable = models.CharField(max_length=50)
    dirresponsable = models.CharField(max_length=100)
    email =  models.CharField(max_length=100)
    numhijos = models.IntegerField()



    def __str__(self):
        return  str(self.inscripcion)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.personaext = self.personaext.upper() if self.personaext else ''
        self.responsable = self.responsable.upper()
        self.dirresponsable = self.dirresponsable.upper()
        self.telresponsable = self.telresponsable.upper()
        super(InscripcionGuarderia, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = 'Inscripcion en Guarderia'
        verbose_name_plural ='Inscripciones en Guarderia'

class DetalleInscGuarderia(models.Model):
    inscripcionguarderia= models.ForeignKey(InscripcionGuarderia, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=300)
    cedula = models.CharField(max_length=15)
    fechanacimiento = models.DateTimeField()
    peso = models.CharField(max_length=50)
    enfermedades = models.CharField(max_length=500)
    alergias = models.CharField(max_length=500)
    observacion = models.CharField(max_length=500)
    edad =  models.CharField(max_length=100)
    lugar = models.CharField(max_length=300)
    direccion =  models.CharField(max_length=300)
    fecha_ins = models.DateTimeField()
    foto = models.FileField(upload_to='guarderia/%Y/%m/%d', max_length=100,null = True,blank=True)


    def __str__(self):
        return  str(self.inscripcionguarderia) + '  Hijo: ' + str(self.nombre)

    def edad_actual(self):
        try:
            a= int(self.fechanacimiento.year)
            m=int(self.fechanacimiento.month)
            d=int(self.fechanacimiento.day)

            mm = datetime.now().date().month - 1
            if mm == 0:
                mm = 1
            fecha = date(a,m,d)

            if int(self.fechanacimiento.month) > datetime.now().date().month:
                anios =(datetime.now().date().year - (fecha).year)-1
            else:
                if m == datetime.now().date().month and d > datetime.now().date().day :
                    anios =(datetime.now().date().year - (fecha).year) -1

                else:
                    anios =(datetime.now().date().year - (fecha).year)
            if m >=  datetime.now().date().month:

                if m > datetime.now().date().month:
                    meses =  fecha.month - datetime.now().date().month
                    meses =  12 - meses
                else:
                    if d <= datetime.now().date().day :
                        meses = 0
                    else:
                        meses = 11

            else:
                meses = (datetime.now().date().month -  fecha.month)-1

            if  m == datetime.now().date().month  and d <= datetime.now().date().day:
                mm = datetime.now().date().month

            fechanueva =date( datetime.now().date().year,mm,int(self.fechanacimiento.day))

            dia = (date(datetime.now().date().year,datetime.now().date().month+1,1) +timedelta(-1)).day -  (fechanueva - datetime.now().date()).days
            if dia < 0:
                dia = dia * -1
            if dia >= (date(datetime.now().date().year,datetime.now().date().month+1,1) +timedelta(-1)).day :
                if dia > (date(datetime.now().date().year,datetime.now().date().month+1,1) +timedelta(-1)).day:
                    dia = dia -(date(datetime.now().date().year,datetime.now().date().month+1,1) +timedelta(-1)).day
                else:
                    dia=0
            edad = str(anios) + ' ANIOS ' + str(meses) + ' MESES ' + str(dia) + ' DIAS'

            return  edad
        except Exception as e:
            return 0

    def edad_registro(self):
        try:
            a= int(self.fechanacimiento.year)
            m=int(self.fechanacimiento.month)
            d=int(self.fechanacimiento.day)
            mm = self.fecha_ins.date().month - 1
            fecha = date(a,m,d)

            if int(self.fechanacimiento.month) > self.fecha_ins.date().month:
                anios =(self.fecha_ins.date().year - (fecha).year)-1
            else:
                if m ==self.fecha_ins.date().month and d > self.fecha_ins.date().day :
                    anios =(self.fecha_ins.date().year - (fecha).year) -1

                else:
                    anios =(self.fecha_ins.date().year - (fecha).year)
            if m >=  self.fecha_ins.date().month:

                if m > self.fecha_ins.date().month:
                    meses =  fecha.month -self.fecha_ins.date().month
                    meses =  11 - meses
                else:
                    if d <= self.fecha_ins.date().day :
                        meses = 0
                    else:
                        meses = 11

            else:
                meses = (self.fecha_ins.date().month -  fecha.month)-1

            if  m == self.fecha_ins.date().month  and d <= self.fecha_ins.date().day:
                mm =self.fecha_ins.date().month

            fechanueva =date( self.fecha_ins.date().year,mm,int(self.fechanacimiento.day))

            dia =   (fechanueva - self.fecha_ins.date()).days
            if dia < 0:
                dia = dia * -1

            edad = str(anios) + ' ANIOS ' + str(meses) + ' MESES '

            return  edad
        except:
            return 0


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre:
            self.nombre = self.nombre.upper()
        if self.enfermedades :
            self.enfermedades = self.enfermedades.upper()
        if self.alergias:
            self.alergias = self.alergias.upper()
        if self.observacion:
            self.observacion = self.observacion.upper()
        if self.lugar:
            self.lugar = self.lugar.upper()
        if self.direccion:
            self.direccion = self.direccion.upper()
        super(DetalleInscGuarderia, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = 'Detalles de Inscripciones en Guarderia'
        verbose_name_plural = 'Detalle de Inscripcion en Guarderia'


class IngresoGuarderia(models.Model):
    detalle = models.ForeignKey(DetalleInscGuarderia, on_delete=models.CASCADE)
    horaentrada = models.TimeField()
    horasalida = models.TimeField()
    fechaentrada = models.DateField()
    observacion = models.CharField(max_length=900)

    def __str__(self):
        return  str(self.detalle) + ' Entrada: ' + str(self.horaentrada) + ' - ' + str(self.observacion)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper()
        super(IngresoGuarderia, self).save(force_insert, force_update, using, update_fields)

    def salida(self):
        return SalidaGuarderia.objects.filter(ingreso=self)[:1].get() if SalidaGuarderia.objects.filter(ingreso=self).exists() else None

    def responsable(self):
        return InscripcionGuarderia.objects.filter(inscripcion=self.detalle.inscripcionguarderia.inscripcion)[:1].get().responsable


    class Meta:
        verbose_name = 'Ingreso a Guarderia'
        verbose_name_plural = 'Ingresos a Guarderia'



class SalidaGuarderia(models.Model):
    ingreso = models.ForeignKey(IngresoGuarderia, on_delete=models.CASCADE)
    horasalida = models.TimeField()
    fechasalida = models.DateField()
    retiraresponsable = models.BooleanField(default=False)
    observacion = models.CharField(max_length=900)


    def __str__(self):
        return  str(self.ingreso) + ' Salida: ' + str(self.fechasalida) + ' - ' + str(self.observacion)


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper()
        super(SalidaGuarderia, self).save(force_insert, force_update, using, update_fields)


    class Meta:
        verbose_name = 'Salida de Guarderia'
        verbose_name_plural = 'Salidas de Guarderia'

class BajaNC(models.Model):
    notacredito = models.ForeignKey(NotaCreditoInstitucion, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=500)
    fecha = models.DateTimeField()
    usuario = models.CharField(max_length=50)

class Nee(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    valoracion = models.CharField(max_length=900)
    fechamatricula = models.DateField(blank=True,null=True)
    fechavaloracion = models.DateField(blank=True,null=True)
    mediostecnicos = models.CharField(max_length=900,blank=True,null=True)
    tutor = models.CharField(max_length=500,blank=True,null=True)
    contacto = models.CharField(max_length=500,blank=True,null=True)
    obseducativa = models.CharField(max_length=900,blank=True,null=True)
    obsclinica = models.CharField(max_length=900,blank=True,null=True)
    fecharesumen = models.DateField(blank=True,null=True)
    resumen = models.FileField(upload_to='informes/%Y/%m/%d', max_length=200)
    fechaemision = models.DateField(blank=True,null=True)
    informe = models.FileField(upload_to='informes/%Y/%m/%d', max_length=200)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.valoracion: self.valoracion = self.valoracion.upper()
        if self.tutor: self.tutor = self.tutor.upper()
        if self.obseducativa: self.obseducativa = self.obseducativa.upper()
        if self.obsclinica: self.obsclinica = self.obsclinica.upper()
        if self.mediostecnicos: self.mediostecnicos = self.mediostecnicos.upper()
        super(Nee, self).save(force_insert, force_update, using, update_fields)

    def __str__(self):
        return str(self.inscripcion)


    def mail_cargadoc(self, user,mensaje):
        if TipoIncidencia.objects.filter(pk=23).exists():
            tipo = TipoIncidencia.objects.get(pk=23)
            hoy = datetime.now().today()
            contenido = mensaje
            send_html_mail("DOBE",
                           "emails/procesodobe.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'user': user},tipo.correo.split(","))



class SeguimientoNee(models.Model):
    nee = models.ForeignKey(Nee, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=2000)
    fecha = models.DateField(blank=True,null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observacion: self.observacion = self.observacion.upper()

        super(SeguimientoNee, self).save(force_insert, force_update, using, update_fields)

class PersonaNee(models.Model):
    nee = models.ForeignKey(Nee, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)

class  TipoTestDobe(models.Model):
    nombre = models.CharField(max_length=500)

    def __str__(self):
        return self.nombre

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        super(TipoTestDobe, self).save(force_insert, force_update, using, update_fields)


class InscripcionTipoTestDobe(models.Model):
    tipotes = models.ForeignKey(TipoTestDobe, on_delete=models.CASCADE)
    nee = models.ForeignKey(Nee, on_delete=models.CASCADE)

    def __str__(self):
        return  str(self.nee.inscripcion) + ' - ' + self.tipotes.nombre

    class Meta:
        verbose_name = " Inscripcion de Tipo de Test Dobe"
        verbose_name_plural = "Inscripciones de Tipos de Test Dobe"


class TipoSuspension(models.Model):
    descipcion = models.CharField(max_length=500)

    def __str__(self):
        return  str(self.descipcion)

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.descipcion = self.descipcion.upper().strip() if self.descipcion else ''
        super(TipoSuspension, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Tipo de Suspension"
        verbose_name_plural = "Tipos de Suspension"

class MotivoSuspension(models.Model):
    descripcion = models.CharField(max_length=500)

    def __str__(self):
        return  str(self.descripcion)

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.descipcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(MotivoSuspension, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Motivo de Suspension"
        verbose_name_plural = "Motivos de Suspension"


class InscripcionSuspension(models.Model):
    tiposuspension = models.ForeignKey(TipoSuspension, on_delete=models.CASCADE)
    motivosuspension = models.ForeignKey(MotivoSuspension, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=500)
    fecha = models.DateTimeField()
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    def __str__(self):
        return  str(self.inscripcion) +' '+ str(self.tiposuspension)

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        super(InscripcionSuspension, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Alumno Suspendido"
        verbose_name_plural = "Alumnos Suspendidos"

    def eliminasuspenexis(self):
        if EliminaSuspension.objects.filter(inscripcionsuspension=self).exists():
            return EliminaSuspension.objects.get(inscripcionsuspension=self)

class EliminaSuspension(models.Model):
    inscripcionsuspension = models.ForeignKey(InscripcionSuspension, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=500)
    motivosuspension = models.ForeignKey(MotivoSuspension, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    user = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return  str(self.inscripcionsuspension)

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        super(EliminaSuspension, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Elimina Suspension"
        verbose_name_plural = "Eliminacion de Suspensiones"



class OpcionRespuesta(models.Model):
    descripcion = models.CharField(max_length=200)

    def __str__(self):
        return  str(self.descripcion)

class EstadoLlamada(models.Model):
    descripcion = models.CharField(max_length=200)

    def __str__(self):
        return  str(self.descripcion)

    class Meta:
        verbose_name = " Estado de Llamada"
        verbose_name_plural = "Estados de Llamada"


    @staticmethod
    def flexbox_query(q):
        return EstadoLlamada.objects.filter(descripcion__icontains=q)

    def flexbox_repr(self):
        return self.descripcion

    def flexbox_alias(self):
        return self.descripcion


class OpcionEstadoLlamada(models.Model):
    estadollamada = models.ForeignKey(EstadoLlamada, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=200)

    def __str__(self):
        return  str(self.estadollamada) + ' - ' + str(self.descripcion)

    class Meta:
        verbose_name = "Opcion de Estado de Llamada"
        verbose_name_plural = "Opciones de Estados de Llamada"

    @staticmethod
    def flexbox_query(q):
        return OpcionEstadoLlamada.objects.filter(descripcion__icontains=q)

    def flexbox_repr(self):
        return self.descripcion

    def flexbox_alias(self):
        return self.descripcion

class TipoRespuesta(models.Model):
    descripcion = models.CharField(max_length=200)
    acivo = models.BooleanField(default=True)

    def __str__(self):
        return  (self.descripcion)

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(TipoRespuesta, self).save(force_insert, force_update, using, update_fields)


class RegistroSeguimiento(models.Model):
    estadollamada = models.ForeignKey(EstadoLlamada, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=2000)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    cerrada = models.BooleanField(default=False)
    fecha = models.DateTimeField()
    finalizar = models.BooleanField(blank=True, null=True)
    tiporespuesta = models.ForeignKey(TipoRespuesta,blank=True,null=True, on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='cobranzas/%Y/%m/%d', max_length=100, null = True, blank=True)

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        super(RegistroSeguimiento, self).save(force_insert, force_update, using, update_fields)

    def __str__(self):
        return  str(self.inscripcion)

    def convenios(self):
        if DirferidoRubro.objects.filter(seguimiento=self):
            return DirferidoRubro.objects.filter(seguimiento=self)

    def cita(self):
        return CitaLlamada.objects.filter(registro=self).latest('id')

    def rubros(self):
        return  RubroSeguimiento.objects.filter(seguimiento=self)

    def tiene_rubros(self):
        return  RubroSeguimiento.objects.filter(seguimiento=self).exists()

    def tiene_descuento(self):
        if  DescuentoSeguimiento.objects.filter(seguimiento=self).exists():
            return  DescuentoSeguimiento.objects.filter(seguimiento=self)[:1].get()
        return False

    class Meta:
        verbose_name = " Registro de Seguimiento"
        verbose_name_plural = "Registros de Seguimiento"

    def seguimientos_rubros(self):
        return RubroSeguimiento.objects.filter(seguimiento=self).order_by('categoria')

class CategoriaRubro(models.Model):
    categoria = models.CharField(max_length=5)
    porcentaje = models.IntegerField(blank=True,null=True)
    porcentajecom = models.IntegerField(blank=True,null=True)
    porcentajedesc = models.IntegerField(blank=True,null=True)
    factor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    numdiasminimo = models.IntegerField(blank=True,null=True)
    numdiasmaximo = models.IntegerField(blank=True,null=True)
    desde = models.DateField(blank=True,null=True)
    hasta = models.DateField(blank=True,null=True)
    estado = models.BooleanField(default=False)

    def __str__(self):
        return self.categoria

    def rubros_cancelados_xfecha(self, rubros_seguimientos):
        return rubros_seguimientos.filter(categoria__categoria=self.categoria).count()

    def rubros_cancelados_xfecha_totales(self, inicio, fin):
        try:
            if RubroSeguimiento.objects.filter(categoria__categoria=self.categoria, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True).exists():
                return RubroSeguimiento.objects.filter(categoria__categoria=self.categoria, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True).count()
        except Exception as ex:
            print('ERROR: '+str(ex))

    def valor_rubros_cobrados_xfecha(self, rubros_seguimientos):
        rubro_seguimiento = rubros_seguimientos.filter(categoria__categoria=self.categoria)
        suma = 0
        for rs in rubro_seguimiento:
            suma = suma + (rs.valorgestionado-rs.valordesc)
        return suma

    def valor_rubros_cobrados_xfecha_totales(self, inicio, fin):
        if RubroSeguimiento.objects.filter(categoria__categoria=self.categoria, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True).exists():
            rubro_seguimiento = RubroSeguimiento.objects.filter(categoria__categoria=self.categoria, fechapago__gte=inicio, fechapago__lte=fin, rubro__cancelado=True, estado=True)
        suma = 0
        for rs in rubro_seguimiento:
            suma = suma + (rs.valorgestionado-rs.valordesc)
        return suma

    def porcentaje_comision(self, rubros_seguimientos, fin):
        try:
            if rubros_seguimientos.exists():
                suma = rubros_seguimientos.aggregate(Sum('valorgestionado'))['valorgestionado__sum']
                suma_desc = rubros_seguimientos.aggregate(Sum('valordesc'))['valordesc__sum']
                if IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma, fechahasta__gte=fin).exists():
                    porcentaje_comision = IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma, fechahasta__gte=fin)[:1].get().porcentajecomision
                else:
                    suma = suma - suma_desc
                    porcentaje_comision = IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma, fechahasta=None)[:1].get().porcentajecomision
                print(porcentaje_comision)
                return porcentaje_comision
        except Exception as ex:
            print(ex)
            return 9999

    def valor_comision_xfecha(self, rubros_seguimientos, fin, inicio):
        try:
            if rubros_seguimientos.exists():
                rubro_seguimiento2 = rubros_seguimientos
                rubro_seguimiento = rubros_seguimientos.filter(categoria__categoria=self.categoria)
                suma = rubro_seguimiento2.aggregate(Sum('valorgestionado'))['valorgestionado__sum']
                suma_desc = rubro_seguimiento2.aggregate(Sum('valordesc'))['valordesc__sum']
                if IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma, fechahasta__gte=fin, fechadesde__lte=inicio, orden=1).exists():
                    indicador = IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma, fechahasta__gte=fin, fechadesde__lte=inicio, orden=1)[:1].get()
                    estado=0
                else:
                    suma = suma - suma_desc
                    indicador = IndicadorComisionGestores.objects.filter(mayor__lt=suma, menorigual__gte=suma, fechahasta__gte=fin, fechadesde__lte=inicio)[:1].get()
                    estado=1

                comision = 0
                total_valorxfactor = 0
                for rs in rubro_seguimiento:
                    if ((rs.aplicadescuentocategoria or rs.aprobardescuentoadd) and indicador.orden != 1):
                        valorxfactor = round(float(rs.valorgestionado-rs.valordesc),2)*round(float(rs.categoria.factor),2)
                    else:
                        valorxfactor = round(float(rs.valorgestionado),2)*round(float(rs.categoria.factor),2)
                    total_valorxfactor = total_valorxfactor + valorxfactor
                comision = round(total_valorxfactor,2)*round(float(indicador.porcentajecomision),2)/100
                return round(comision,2)
            return 0
        except Exception as ex:
            print(ex)
            return 99999

class IndicadorComisionGestores(models.Model):
    mayor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    menorigual = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    porcentajecomision = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    fechadesde = models.DateField(blank=True,null=True)
    fechahasta = models.DateField(blank=True,null=True)
    orden = models.IntegerField(blank=True,null=True)

class RubroSeguimiento(models.Model):
    seguimiento = models.ForeignKey(RegistroSeguimiento, on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    categoria = models.ForeignKey(CategoriaRubro,blank=True,null=True, on_delete=models.CASCADE)
    valorgestionado = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    valordesc = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    fechaposiblepago = models.DateField(blank=True,null=True)
    fechapago = models.DateField(blank=True,null=True)
    aplicadescuentocategoria = models.BooleanField(default=False)
    aprobardescuentoadd = models.BooleanField(default=False)
    porcentajedescuentoadd = models.IntegerField(blank=True,null=True)
    estado = models.BooleanField(default=True)

    def __str__(self):
        return  str(self.seguimiento)

    def calcula_descuento(self):
        descuento = float(self.valorgestionado)*float(1-(float(self.categoria.porcentaje)*float(self.categoria.factor)/100))
        return round(descuento,2)

    def calcula_descuento_adicional(self):
        descuento = 0
        descuento_add = 0
        if self.aplicadescuentocategoria:
            descuento = self.categoria.porcentaje*self.categoria.factor
        if self.aprobardescuentoadd:
            descuento_add = self.porcentajedescuentoadd
            descuento_total = descuento + descuento_add
        valor = float(self.valorgestionado)*(1.00-(float(descuento_total)/100.00))
        return round(valor,2)

    def historial(self):
        if HistoricoRubroSeguimiento.objects.filter(rubroseguimiento=self, estado=True).exists():
            return HistoricoRubroSeguimiento.objects.filter(rubroseguimiento=self, estado=True).order_by('fecha')

class HistoricoRubroSeguimiento(models.Model):
    rubroseguimiento = models.ForeignKey(RubroSeguimiento, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=200, blank=True, null=True)
    fecha = models.DateTimeField(blank=True,null=True)
    fechaposiblepago = models.DateField(blank=True,null=True)
    archivo = models.FileField(upload_to='cobranzas/%Y/%m/%d', max_length=100, null = True, blank=True)
    estado = models.BooleanField(default=True)

class HistoricoRegistroSeguimiento(models.Model):
    rubroseguimiento = models.ForeignKey(RubroSeguimiento, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=200, blank=True, null=True)
    fecha = models.DateTimeField(blank=True,null=True)
    fechaposiblepago = models.DateField(blank=True,null=True)
    archivo = models.FileField(upload_to='cobranzas/%Y/%m/%d', max_length=100, null = True, blank=True)
    estado = models.BooleanField(default=True)

class DescuentoSeguimiento(models.Model):
    seguimiento = models.ForeignKey(RegistroSeguimiento, on_delete=models.CASCADE)
    rubros = models.CharField(max_length=200,blank=True,null=True)
    pordesc = models.IntegerField(blank=True,null=True)
    valorpago =  models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    fechaposiblepago = models.DateField(blank=True,null=True)
    fechapago = models.DateField(blank=True,null=True)
    pagado = models.BooleanField(default=False)

    def __str__(self):
        return  str(self.seguimiento)

    class Meta:
        verbose_name = "Descuento Seguimiento"
        verbose_name_plural = "Descuentos Seguimiento"

    def eliminado_descuento(self):
        if TipoIncidencia.objects.filter(pk=62).exists():
            tipo = TipoIncidencia.objects.get(pk=62)
            hoy = datetime.now().today()
            rubros = RubroSeguimiento.objects.filter(seguimiento=self.seguimiento)
            contenido = u"Eliminado Descuento"
            send_html_mail(contenido,
                           "emails/elimina_descuento.html", {'d': self ,'rubros':rubros,'fecha':hoy },tipo.correo.split(","))

class Referidos(models.Model):
    registro = models.ForeignKey(RegistroSeguimiento, on_delete=models.CASCADE)
    nombres = models.CharField(max_length=100)
    celular = models.CharField(max_length=50)
    email =  models.CharField(max_length=50)

    def __str__(self):
        return  str(self.registro) + ' - ' + self.nombres

    class Meta:
        verbose_name = " Referido"
        verbose_name_plural = "Referidos"

class LlamadaUsuario(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    registro = models.ForeignKey(RegistroSeguimiento, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    estadollamada = models.ForeignKey(EstadoLlamada,blank=True,null=True, on_delete=models.CASCADE)
    opcionllamada = models.ForeignKey(OpcionEstadoLlamada,blank=True,null=True, on_delete=models.CASCADE)
    nota = models.CharField(max_length=800,blank=True,null=True)

    def __str__(self):
        return  str(self.registro) + ' - ' + str(self.usuario)

    class Meta:
        verbose_name = " Llamada"
        verbose_name_plural = "Llamadas"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.nota = self.nota.upper().strip() if self.nota else ''
        super(LlamadaUsuario, self).save(force_insert, force_update, using, update_fields)

class CitaLlamada(models.Model):
    registro = models.ForeignKey(RegistroSeguimiento, on_delete=models.CASCADE)
    fecha = models.DateField()
    hora = models.CharField(max_length=20)
    departamento = models.ForeignKey(Group, on_delete=models.CASCADE)
    asistio = models.BooleanField(default=False)
    observacion = models.CharField(max_length=555)
    fechaasistencia = models.DateTimeField()
    usuario = models.ForeignKey(User,blank=True,null=True, on_delete=models.CASCADE)

    def correo(self,user):
        if GrupoCorreo.objects.filter(grupos=self.departamento).exists():
            correo=GrupoCorreo.objects.filter(grupos=self.departamento)[:1].get().correo.split(",")
            hoy = datetime.now().date()
            contenido = "SE HA SEPARADO UNA CITA"
            send_html_mail("SE HA SEPARADO UNA CITA",
                           "emails/cita.html", { 'fecha': hoy,'contenido': contenido,'c':self,'user':user},correo)

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        super(CitaLlamada, self).save(force_insert, force_update, using, update_fields)

class SolicituInfo(models.Model):
    codigo = models.IntegerField()
    identificacion = models.CharField(max_length=20)
    nombres = models.CharField(max_length=500)
    ciudad = models.CharField(max_length=200)
    correo = models.CharField(max_length=50)
    direccion = models.CharField(max_length=500)
    fonodom = models.CharField(max_length=50)
    fonoofi = models.CharField(max_length=50)
    celular = models.CharField(max_length=50)
    mensaje = models.CharField(max_length=500)
    interes = models.CharField(max_length=200)
    fecha = models.DateField()
    resolucion = models.CharField(max_length=1055,blank=True,null=True)
    observacion = models.CharField(max_length=1055,blank=True,null=True)
    finalizado = models.BooleanField(default=False)
    fechafinaliza = models.DateTimeField(blank=True,null=True)
    usuariofinali = models.ForeignKey(User, blank=True, null=True, on_delete=models.CASCADE)
    asignado = models.BooleanField(default=False)


    def __str__(self):
        return  str(self.codigo) + ' - ' + self.nombres

    class Meta:
        verbose_name = "Solicitud Info"
        verbose_name_plural = "Solicitudes Info"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.correo = self.correo.lower().strip() if self.correo else ''
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        self.resolucion = self.resolucion.upper().strip() if self.resolucion else ''
        self.interes = self.interes.upper().strip() if self.interes else ''
        super(SolicituInfo, self).save(force_insert, force_update, using, update_fields)

    def departamentoasignado(self,user):
        if DepartamentoIncidenciaAsig.objects.filter(incidenciaasignada__solicituinfo=self,incidenciaasignada__asistenteasignado__asistente__usuario=user).exists():
            return DepartamentoIncidenciaAsig.objects.filter(incidenciaasignada__solicituinfo=self,incidenciaasignada__asistenteasignado__asistente__usuario=user)[:1].get()

    def busdepartamento(self):
        return DepartamentoIncidenciaAsig.objects.filter(incidenciaasignada__solicituinfo=self,atendiendo=True)[:1].get()

    def respuestanumero(self,user):
        if ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__solicituinfo=self,departamentoincidenciaasig__atendiendo=True,usuario__id=user).exists():
            return ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__solicituinfo=self,departamentoincidenciaasig__atendiendo=True,usuario__id=user).count()

    def mensajeconsult(self,user):
        if ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__solicituinfo=self,departamentoincidenciaasig__atendiendo=True,respuestadepart='').exists():
            return ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__solicituinfo=self,departamentoincidenciaasig__atendiendo=True,respuestadepart='').count()

    def comparafecha(self):
        fecha = datetime.combine(self.fecha,datetime.min.time())
        if self.fechafinaliza:
            if fecha + timedelta(hours=24) < self.fechafinaliza:
                return True
        else:
            if fecha + timedelta(hours=24) < datetime.now():
                return True
        return False

    def asistenteasigna(self):
        if IncidenciaAsignada.objects.filter(solicituinfo=self).exists():
            return IncidenciaAsignada.objects.filter(solicituinfo=self)[:1].get()
        return False

    def asistenteasignaexiste(self,usuario):
        if IncidenciaAsignada.objects.filter(solicituinfo=self,asistenteasignado__asistente__usuario=usuario).exists():
            return IncidenciaAsignada.objects.filter(solicituinfo=self,asistenteasignado__asistente__usuario=usuario)[:1].get()
        return False

    def email_finalizaincidenc(self):
        email = self.correo
        hoy = datetime.now().today()
        personarespon = Persona.objects.filter(usuario=self.usuariofinali)[:1].get()
        send_html_mail("RESPUESTA DEL DEPARTAMENTO ESTUDIANTIL",
                       "emails/email_finalizaincidenc.html", {'contenido': "RESPUESTA DEL DEPARTAMENTO ESTUDIANTIL", 'self': self, 'personarespon': personarespon, 'fecha': hoy},str(email).split(","))


class MotivoResolucion(models.Model):
    descripcion = models.CharField(max_length=200)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = "Motivo Resolucion"
        verbose_name_plural = "Motivos de Resolucion"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(MotivoResolucion, self).save(force_insert, force_update, using, update_fields)


class Resolucion(models.Model):
    motivo = models.ForeignKey(MotivoResolucion, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    asunto = models.CharField(max_length=200)
    resumen = models.CharField(max_length=500)
    fecharesolucion = models.DateField()
    fecha = models.DateTimeField()
    nivel = models.ForeignKey(Nivel,blank=True,null=True, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.motivo)+' - ' + str(self.asunto)

    class Meta:
        verbose_name = "Resolucion"
        verbose_name_plural = "Resoluciones"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.asunto = self.asunto.upper().strip() if self.asunto else ''
        self.resumen = self.resumen.upper().strip() if self.resumen else ''
        super(Resolucion, self).save(force_insert, force_update, using, update_fields)


    def exist_archiresolucion(self):
        return ArchivoResolucion.objects.filter(resolucion=self).exists()

    def correo_resolucion(self,mensaje):
        tipo = TipoIncidencia.objects.get(pk=25)
        hoy = datetime.now().today()
        if mensaje == 'Edicion':
            contenido = u"EDICIÓN DE RESOLUCIÓN ACADÉMICA"
        else:
            contenido = u"INGRESO DE RESOLUCIÓN ACADÉMICA"
        send_html_mail(contenido,
                       "emails/correo_resolucion.html", {'resolucion': self, 'fecha': hoy,'contenido': contenido},tipo.correo.split(","))


class ArchivoResolucion(models.Model):
    resolucion = models.ForeignKey(Resolucion, on_delete=models.CASCADE)
    numero = models.CharField(max_length=200)
    archivo = models.FileField(upload_to='resolucion/%Y/%m/%d', max_length=100,null = True,blank=True)
    fecha = models.DateTimeField()
    user = models.ForeignKey(User, on_delete=models.CASCADE)

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.numero = self.numero.upper().strip() if self.numero else ''
        super(ArchivoResolucion, self).save(force_insert, force_update, using, update_fields)

class RubroMasivo(models.Model):
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=50)
    fecha = models.DateField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return  self.descripcion

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(RubroMasivo, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Rubro Masivo"
        verbose_name_plural = "Rubro Masivo"

class DetalleRubroMasivo(models.Model):
    rubromasivo = models.ForeignKey(RubroMasivo, on_delete=models.CASCADE)
    rubrootro = models.ForeignKey(RubroOtro, on_delete=models.CASCADE)

    def __str__(self):
        return  str(self.rubrootro) +  ' - ' + str(self.rubromasivo)


class GrupoSeminario(models.Model):
    taller = models.CharField(max_length=800)
    objetivo = models.CharField(max_length=800)
    inicio = models.DateField()
    fin = models.DateField()
    horainicio = models.TimeField()
    horafin = models.TimeField()
    capacidad = models.IntegerField()
    empezardesde = models.DateField()
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    expositor = models.CharField(max_length=300)
    procedencia = models.CharField(max_length=800)
    precio = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    activo = models.BooleanField(default=True)
    libre = models.BooleanField(default=False)
    ubicacion =  models.CharField(max_length=300,blank=True,null=True)
    imgubicacion =   models.FileField(upload_to='seminario/%Y/%m', max_length=100,null = True,blank=True)

    def __str__(self):
        return str(self.id) + " - "+ self.taller  + " (Desde: " + str(self.inicio) + " - Hasta: "+ str( self.fin) + ")"

    def esta_disponible(self):
        i = InscripcionSeminario.objects.filter(gruposeminario=self).count()
        if i < self.capacidad:
            return True
        return  False

    def inscritos(self):
        if InscripcionSeminario.objects.filter(gruposeminario=self).count() > 0:
            return InscripcionSeminario.objects.filter(gruposeminario=self).count()
        else:
            return 0

    def esta_matriculado(self,matricula):
        return  InscripcionSeminario.objects.filter(gruposeminario=self,matricula=matricula).exists()

    def esta_matriculado_id(self,matricula):
        return InscripcionSeminario.objects.filter(gruposeminario=self,matricula=matricula).values('id').distinct('id')[:1].get()

    def es_gratis(self,matricula):
        if not self.libre:
            return  InscripcionSeminario.objects.filter(gruposeminario=self,matricula=matricula,rubrootro=None).exists()


    def puede_eliminarse(self):
        return  not InscripcionSeminario.objects.filter(gruposeminario=self).exists()


    class Meta:
        verbose_name = "Grupo Seminario"
        verbose_name_plural = "Grupos de Seminario"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.taller = self.taller.upper().strip() if self.taller else ''
        self.objetivo = self.objetivo.upper().strip() if self.objetivo else ''
        self.expositor = self.expositor.upper().strip() if self.expositor else ''
        self.procedencia = self.procedencia.upper().strip() if self.procedencia else ''
        self.ubicacion = self.ubicacion.upper().strip() if self.ubicacion else ''
        super(GrupoSeminario, self).save(force_insert, force_update, using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return GrupoSeminario.objects.filter(Q(taller__contains=q)|Q(inicio__contains=q)|Q(horainicio__contains=q)|Q(id__icontains=q)).order_by('inicio','horainicio')

    def flexbox_repr(self):
        return self.taller+" - Dia: "+ str(self.inicio)+" - Hora: "+str(self.horainicio)+" - Codigo: "+str(self.id)

    def esta_aprobado(self):
        return  InscripcionSeminario.objects.filter(gruposeminario=self, aprobado=True).exists()

class InscripcionSeminario(models.Model):
    gruposeminario = models.ForeignKey(GrupoSeminario, on_delete=models.CASCADE)
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    rubrootro = models.ForeignKey(RubroOtro,blank=True,null=True, on_delete=models.CASCADE)
    fecha = models.DateField()
    activo=models.BooleanField(default=True)
    aprobado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.gruposeminario) + "  " +str(self.matricula)

    def puede_eliminarse(self):
        if self.rubrootro:
            return self.rubrootro.rubro.puede_eliminarse()
        return True


# ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class TipoDocumenBeca(models.Model):
    descripcion = models.CharField(max_length=150)

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(TipoDocumenBeca, self).save(force_insert,force_update,using, update_fields)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = "Tipo Documento Beca"
        verbose_name_plural = "Tipos de Documento para Beca"

class ArchivoSolicitudBeca(models.Model):
    nombre = models.CharField(max_length= 100)
    estado = models.BooleanField(default = True)

    class Meta():
        verbose_name= "Tipo de Archivo Solicitud Beca"
        verbose_name_plural = "Tipos de Archivos Solicitud Becas"

    def verficarexiste(self,idsolcitud):
        solicitudbeca=SolicitudBeca.objects.get(pk=int(idsolcitud))
        if ArchivoVerificadoBecaAyuda.objects.filter(tipoarchivosolicitudbeca=self,solicitudbeca=solicitudbeca).exists():
            return ArchivoVerificadoBecaAyuda.objects.filter(tipoarchivosolicitudbeca=self,solicitudbeca=solicitudbeca)[:1].get()
        else:
            return False

class ArchivoSoliciBeca(models.Model):
    solicitudbeca = models.ForeignKey(SolicitudBeca, on_delete=models.CASCADE)
    tipodocumenbeca = models.ForeignKey(TipoDocumenBeca, on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='archibeca/%Y/%m', max_length=100,null = True,blank=True)
    fecha = models.DateTimeField(blank=True, null=True)

    class Meta:
        verbose_name = "Archivo Solicitud de Beca"
        verbose_name_plural = "Archivos de Solicitud de Becas"

class TenenciaVivienda(models.Model):
    descripcion = models.CharField(max_length=200,null=True,blank=True)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = "Tenencia de Vivienda"
        verbose_name_plural = "Tenencias de Vivienda"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(TenenciaVivienda, self).save(force_insert,force_update,using, update_fields)

class TipoIngresoVivienda(models.Model):
    descripcion = models.CharField(max_length=200,null=True,blank=True)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = "Ingreso Economico de Vivienda"
        verbose_name_plural = "Ingreso Economico de la Vivienda"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(TipoIngresoVivienda, self).save(force_insert,force_update,using, update_fields)

class TipoEgresoVivienda(models.Model):
    descripcion = models.CharField(max_length=200,null=True,blank=True)
    ejemplo = models.CharField(max_length=300,null=True,blank=True)

    def __str__(self):
        return "%s ( %s )"%(self.descripcion, self.ejemplo)

    class Meta:
        verbose_name = "Egreso Economico de Vivienda"
        verbose_name_plural = "Egreso Economico de la Vivienda"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(TipoEgresoVivienda, self).save(force_insert,force_update,using, update_fields)

class SectorVivienda(models.Model):
    descripcion = models.CharField(max_length=200,null=True,blank=True)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = "Sector de Vivienda"
        verbose_name_plural = "Sector de Viviendas"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(SectorVivienda, self).save(force_insert,force_update,using, update_fields)


class KitCongreso(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300)
    fecha = models.DateField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return str(self.inscripcion) + ' -  ' + (self.observacion) + " Fecha: "+str(self.fecha) +" Valor: "+ str(self.valor)

    class Meta():
        verbose_name = "kit Congreso"
        verbose_name_plural = "Kit Congreso"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        super(KitCongreso, self).save(force_insert,force_update,using, update_fields)


class EspecialistaVisitaBox(models.Model):
    especialista = models.ForeignKey(Persona,blank=True,null=True, on_delete=models.CASCADE)
    visita = models.ForeignKey(DetalleVisitasBox,blank=True,null=True, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True,null=True,verbose_name='Fecha')

    class Meta:
        verbose_name = 'Registro de Especialista'
        verbose_name_plural = 'Registros de Especialista para Box'

    def __str__(self):
        return self.especialista.nombre_completo()+' Especialista de Box '

class ReciboPermisoCondu(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    numero = models.IntegerField(verbose_name=u"Numero de Recibo", null=True, blank=True)
    fecha = models.DateField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    formadepago = models.ForeignKey(FormaDePago,blank=True,null=True, on_delete=models.CASCADE)
    # Cheque
    numerocheq = models.CharField(max_length=50,blank=True,null=True)
    fechacobro = models.DateField(blank=True,null=True)
    emite = models.CharField(max_length=100)
    # Tarjeta
    referencia = models.CharField(max_length=50,blank=True,null=True)
    tipotarje = models.ForeignKey(TipoTarjetaBanco,blank=True,null=True, on_delete=models.CASCADE)
    poseedor = models.CharField(max_length=100,blank=True,null=True)
    procesadorpago = models.ForeignKey(ProcesadorPagoTarjeta,blank=True,null=True, on_delete=models.CASCADE)
    # Cheque o tarjeta
    banco = models.ForeignKey(Banco,blank=True,null=True, on_delete=models.CASCADE)
    # Transferencia/Deposito
    referenciatransferencia = models.CharField(max_length=50,blank=True,null=True)
    cuentabanco = models.ForeignKey(CuentaBanco,blank=True,null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcion) + ' -  ' + " Fecha: "+str(self.fecha) +" Valor: "+ str(self.valor)

    class Meta():
        verbose_name = "recibo Permiso"
        verbose_name_plural = "Recibo Permiso Conduccion"


class TipoPrograma(models.Model):
    nombre = models.CharField(max_length=300)
    objetivo = models.CharField(max_length=900,blank=True,null=True)
    activo = models.BooleanField(default=True)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        self.objetivo = self.objetivo.upper().strip() if self.objetivo else ''
        super(TipoPrograma, self).save(force_insert,force_update,using, update_fields)

    class Meta():
        verbose_name = "Tipo de Programa"
        verbose_name_plural = "Tipos de Programas"

    def __str__(self):
        return self.nombre

    @staticmethod
    def flexbox_query(q):
        return TipoPrograma.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return self.nombre

class TipoConvenio(models.Model):
    nombre = models.CharField(max_length=300)

    def __str__(self):
        return self.nombre

    class Meta():
        verbose_name = "Tipo Convenio"
        verbose_name_plural = "Tipos de Convenios"


class Convenio(models.Model):
    nombre = models.CharField(max_length=300)
    institucion = models.CharField(max_length=300)
    objetivo = models.CharField(max_length=900)
    nacional = models.BooleanField(blank=True, null=True)
    inicio = models.DateField()
    indefinido = models.BooleanField(blank=True, null=True)
    fin = models.DateField()
    tiempo =  models.CharField(max_length=200)
    prolonga = models.CharField(max_length=200)
    contacto = models.CharField(max_length=300)
    contactofono = models.CharField(max_length=50)
    contactoemail = models.CharField(max_length=50)
    canton  = models.ForeignKey(Canton,blank=True,null=True, on_delete=models.CASCADE)
    pais = models.ForeignKey(Pais,blank=True,null=True, on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='vinculacion/%Y/%m/%d', max_length=200)
    activo = models.BooleanField(default=True)
    tipo = models.ForeignKey(TipoConvenio,blank=True,null=True, on_delete=models.CASCADE)
    representante = models.CharField(max_length=400)
    representantetelefono = models.CharField(max_length=100)
    representanteemail = models.CharField(max_length=100)
    #nivelmalla= models.ForeignKey(NivelMalla, blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return self.institucion


    def puede_eliminarse(self):
        return  ActividadVinculacion.objects.filter(convenio=self).exists()

    class Meta():
        verbose_name = "Convenio"
        verbose_name_plural = "Convenios"

    @staticmethod
    def flexbox_query(q):
        return Convenio.objects.filter(Q(nombre__contains=q)|Q(institucion__contains=q))


    def flexbox_repr(self):
        return str(self)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        self.institucion = self.institucion.upper().strip() if self.institucion else ''
        self.objetivo = self.objetivo.upper().strip() if self.objetivo else ''
        self.contacto = self.contacto.upper().strip() if self.contacto else ''
        super(Convenio, self).save(force_insert,force_update,using, update_fields)



class Programa(models.Model):
    tipo = models.ForeignKey(TipoPrograma, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=300)
    objetivo = models.CharField(max_length=300,blank=True,null=True)
    inicio = models.DateField(blank=True,null=True)
    fin = models.DateField(blank=True,null=True)
    archivo = models.FileField(upload_to='vinculacion/%Y/%m/%d', max_length=200)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return self.nombre+" - TIPO - "+self.tipo.nombre

    @staticmethod
    def flexbox_query(q):
        return Programa.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return self.nombre

    def puede_eliminarse(self):
        return  ActividadVinculacion.objects.filter(programa=self).exists()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        self.objetivo = self.objetivo.upper().strip() if self.objetivo else ''
        super(Programa, self).save(force_insert,force_update,using, update_fields)

    class Meta():
        verbose_name = "Programa"
        verbose_name_plural = "Programas"

class ActividadVinculacion(models.Model):
    programa = models.ForeignKey(Programa, blank=True,null=True, on_delete=models.CASCADE)
    convenio = models.ForeignKey(Convenio, blank=True,null=True, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=900)
    lugar = models.CharField(max_length=900)
    inicio = models.DateField(blank=True,null=True)
    fin = models.DateField(blank=True,null=True)
    objetivo = models.CharField(max_length=2000,blank=True,null=True)
    lider = models.CharField(max_length=200)
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='vinculacion/%Y/%m/%d', max_length=200)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return  self.nombre  + ' Lugar '+ self.lugar

    def puede_eliminarse(self):
        if DocenteVinculacion.objects.filter(actividad=self).exists() or EstudianteVinculacion.objects.filter(actividad=self).exists() or EvidenciaVinculacion.objects.filter(actividad=self).exists() or ObservacionVinculacion.objects.filter(actividad=self).exists() or BeneficiariosVinculacion.objects.filter(actividad=self).exists():
            return  False
        else:
            return  True


    def aprobadavinculacionxgrupo(self):
        if EstudianteVinculacion.objects.filter(actividad=self).exists():
            estud_vinc =EstudianteVinculacion.objects.filter(actividad=self)
            for estudiante in estud_vinc:
                if AprobacionVinculacion.objects.filter(inscripcion=estudiante.inscripcion,revisionestudiante=True,revisionproyecto=True,revisiondocente=True,estudiantevinculacion=estudiante,estudiantevinculacion__actividad=self).exists():
                    return True
        else:
            return False


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        self.lugar = self.lugar.upper().strip()  if self.lugar else ''
        self.objetivo = self.objetivo.upper().strip() if self.objetivo else ''
        self.lider = self.lider.upper().strip() if self.lider else ''
        super(ActividadVinculacion, self).save(force_insert,force_update,using, update_fields)

    class Meta():
        verbose_name = "Actividad de Vinculacion"
        verbose_name_plural = "Actividades de Vinculacion"

    def mail_vinculacion(self,user):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_VINCULACION)
        hoy = datetime.now().today()
        send_html_mail("Adicionada Actividad de Vinculacion",
                       "emails/vinculacion.html", {'p': self, 'usuario': user,'fecha':hoy},tipo.correo.split(","))

    def mail_vinculacionotro(self,user,contenido):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_VINCULACION)
        hoy = datetime.now().today()
        send_html_mail(contenido,
                       "emails/vinculacionotro.html", {'p': self, 'usuario': user,'fecha':hoy},tipo.correo.split(","))

class DocenteVinculacion(models.Model):
    actividad = models.ForeignKey(ActividadVinculacion, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    horas = models.IntegerField()
    fecha = models.DateField()
    fechaingreso = models.DateField()
    informe = models.FileField(upload_to='informe/%Y/%m/%d', max_length=200)
    usuariocambio = models.ForeignKey(User,blank=True,null=True, on_delete=models.CASCADE)
    fechacambio = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return  str(self.actividad) + ' ' + str(self.persona)

    def encorte_del_rol(self):
        rol = RolPago.objects.all().order_by('-id')[:1].get()
        print(rol)
        if self.fecha.date() >= rol.inicio and self.fecha.date() <= rol.fin:
            return True
        else:
            return False


    def correo(self, usuario):
        if TipoIncidencia.objects.filter(pk=45).exists():
            tipo=TipoIncidencia.objects.get(pk=45)
            hoy = datetime.now().today()
            send_html_mail("Docente Vinculacion",
                           "emails/docente_vinculacion.html", {'dv': self, 'usuario': usuario, 'fecha': hoy},tipo.correo.split(","))

    class Meta():
        verbose_name = "Docente Vinculacion"
        verbose_name_plural = "Docentes de Vinculacion"

class EstudianteVinculacion(models.Model):
    actividad = models.ForeignKey(ActividadVinculacion, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    horas = models.IntegerField()
    nivelmalla= models.ForeignKey(NivelMalla, blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcion) + ' ' + str(self.inscripcion)

    def correo_vinculacion(self,user,cont,horas,carrera,actividad):
        if TipoIncidencia.objects.filter(pk=INCIDENCIA_PRAC_VINC).exists():
            tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_PRAC_VINC)
            hoy = datetime.now().today()
            contenido = cont
            send_html_mail(contenido,
                           "emails/practicas_vinculacion.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'usuario': user,'op':'2' ,'horas':horas,'carrera':carrera,'actividad':actividad},tipo.correo.split(","))

    def tiene_actvinculacion(self,user,cont,horas,carrera):
        if TipoIncidencia.objects.filter(pk=TIPO_INCIDENCIA_VINCULACION).exists():
            tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_VINCULACION)
            hoy = datetime.now().today()
            contenido = cont
            send_html_mail(contenido,
                           "emails/tiene_vinculacion.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'usuario': user,'op':'1' ,'horas':horas ,'carrera':carrera},tipo.correo.split(","))

    def elimina_actividad_vinculacion(self,user,cont,horas,nota_hist,nota_record,carrera):
        if TipoIncidencia.objects.filter(pk=TIPO_INCIDENCIA_VINCULACION).exists():
            tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_VINCULACION)
            hoy = datetime.now().today()
            horas = horas
            contenido=cont
            send_html_mail(contenido,
                           "emails/tiene_vinculacion.html", {'d': self, 'fecha':hoy,'contenido':contenido,'usuario':user ,'carrera':carrera,'nota_hist':nota_hist,'nota_record':nota_record,'horas':horas,'op':'2'},tipo.correo.split(","))

    def no_aprobacion_vinculacion(self,user,cont,estudiantes):
        if TipoIncidencia.objects.filter(pk=INCIDENCIA_PRAC_VINC).exists():
            tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_PRAC_VINC)
            hoy = datetime.now().today()
            contenido = cont
            send_html_mail(contenido,
                           "emails/practicas_vinculacion.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'usuario': user,'op':'4'},tipo.correo.split(","))

    def tiene_aprobacion_vinculacionotra(self):
        if AprobacionVinculacion.objects.filter(estudiantevinculacion=self,revisionestudiante=True,revisionproyecto=True,revisiondocente=True).exists():
            return True
        else:
            return False


    class Meta():
        verbose_name = "Estudiante Vinculacion"
        verbose_name_plural = "Estudiantes de Vinculacion"

class EvidenciaVinculacion(models.Model):
    actividad = models.ForeignKey(ActividadVinculacion, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=500)
    foto = models.FileField(upload_to='evidencia/%Y/%m/%d', max_length=200)


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        super(EvidenciaVinculacion, self).save(force_insert,force_update,using, update_fields)


    def __str__(self):
        return str(self.actividad) + ' -  ' + (self.nombre)

    class Meta():
        verbose_name = "Evidencia Vincualacion"
        verbose_name_plural = "Evidencias de  Vinculacion"

class ObservacionVinculacion(models.Model):
    actividad = models.ForeignKey(ActividadVinculacion, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=1500)
    fecha = models.DateField()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        super(ObservacionVinculacion, self).save(force_insert,force_update,using, update_fields)

    def __str__(self):
        return str(self.actividad) + ' -  ' + (self.observacion)

    class Meta():
        verbose_name = "Observacion Vincualacion"
        verbose_name_plural = "Observaciones de  Vinculacion"


class BeneficiariosVinculacion(models.Model):
    actividad = models.ForeignKey(ActividadVinculacion, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=100)
    identificacion = models.CharField(max_length=20)
    edad = models.IntegerField()
    sexo = models.ForeignKey(Sexo, on_delete=models.CASCADE)
    etnia = models.ForeignKey(Raza, on_delete=models.CASCADE)
    procedencia = models.CharField(max_length=300)

    def __str__(self):
        return elimina_tildes(self.nombre) + " " + elimina_tildes(self.procedencia)

    class Meta():
        verbose_name = "Beneficiario Vinculacion"
        verbose_name_plural = "Beneficiarios Vinculacion"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        self.procedencia = self.procedencia.upper().strip() if self.procedencia else ''
        super(BeneficiariosVinculacion, self).save(force_insert,force_update,using, update_fields)

class CategoriaAbsentismo(models.Model):
    categoria = models.CharField(max_length=50)
    comision = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    numdiasminimo = models.IntegerField(blank=True,null=True)
    numdiasmaximo = models.IntegerField(blank=True,null=True)
    estado = models.BooleanField(default=False)

class Absentismo(models.Model):
    materiaasignada = models.ForeignKey(MateriaAsignada,related_name='materiaasignada', on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300,blank=True,null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    observaadmin = models.CharField(max_length=300,blank=True,null=True)
    fechaobserv = models.DateTimeField(blank=True, null=True)
    finalizado = models.BooleanField(default=False)
    reintegro = models.BooleanField(default=False)
    manual = models.BooleanField(default=False)
    fechareintegro = models.DateField(blank=True,null=True)

    def __str__(self):
        return str(self.materiaasignada)

    class Meta():
        verbose_name = "Absentismo Alumno"
        verbose_name_plural = "Alumnos en Absentismo"

    def email_observacion(self,user):
        if TipoIncidencia.objects.filter(pk=TIPO_INCIDENCIA_ABSENTISMO).exists():
            tipo=TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_ABSENTISMO)
            hoy = datetime.now().today()
            send_html_mail("ABSENTISMO DE ESTUDIANTE",
                           "emails/absentismo_email.html", {'contenido': "ABSENTISMO DE ESTUDIANTE", 'self': self, 'usuario':user , 'fecha': hoy},tipo.correo.split(","))

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        self.observaadmin = self.observaadmin.upper().strip() if self.observaadmin else ''
        super(Absentismo, self).save(force_insert,force_update,using, update_fields)

    def email_observacionadmin(self,user):
        if TipoIncidencia.objects.filter(pk=28).exists():
            tipo=TipoIncidencia.objects.get(pk=28)
            hoy = datetime.now().today()
            send_html_mail("OBSERVACION POR ABSENTISMO",
                           "emails/absentismo_email.html", {'contenido': "OBSERVACION POR ABSENTISMO", 'self': self,'usuario':user , 'fecha': hoy},tipo.correo.split(","))

    def verifica_dias_clase(self):
        ultima_leccion = Leccion.objects.filter(clase__materia=self.materiaasignada.materia).order_by('-fecha')[:1].get()
        clases = Clase.objects.filter(materia=self.materiaasignada.materia).order_by('dia')
        inicio = ultima_leccion.fecha
        fin = self.materiaasignada.materia.fin
        if ultima_leccion.fecha < self.materiaasignada.materia.fin:
            lista_fechas = [inicio + timedelta(days=d) for d in range((fin - inicio).days + 1)]
            return lista_fechas

    def existe_seguimientoabsentismo(self):
        if SeguimientoAbsentismoDetalle.objects.filter(absentismo=self, finalizado=False, seguimientoabsentismo__estado=True).exists():
            return SeguimientoAbsentismoDetalle.objects.filter(absentismo=self, finalizado=False, seguimientoabsentismo__estado=True).order_by('-id')[:1].get()

class SeguimientoAbsentismo(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    estadollamada = models.ForeignKey(EstadoLlamada, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=2000)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateField()
    estado = models.BooleanField(blank=True, null=True)

    def seguimiento_detalle(self):
        if SeguimientoAbsentismoDetalle.objects.filter(seguimientoabsentismo=self).exists():
            return SeguimientoAbsentismoDetalle.objects.filter(seguimientoabsentismo=self).order_by('absentismo__fecha')

class SeguimientoAbsentismoDetalle(models.Model):
    seguimientoabsentismo = models.ForeignKey(SeguimientoAbsentismo, on_delete=models.CASCADE)
    absentismo = models.ForeignKey(Absentismo, on_delete=models.CASCADE)
    comision = models.BooleanField(default=False)
    finalizado = models.BooleanField(default=False)
    fecha_posiblereintegro = models.DateField(blank=True,null=True)
    categoria = models.ForeignKey(CategoriaAbsentismo, blank=True,null=True, on_delete=models.CASCADE)

class ClaveEvaluacionNota(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    clave = models.CharField(max_length=8,blank=True,null=True)
    claveconfirm = models.CharField(max_length=8,blank=True,null=True)
    fecha = models.DateField(blank=True,null=True)
    maquina = models.CharField(max_length=50,blank=True,null=True)

    def __str__(self):
        return str(self.usuario)

    class Meta():
        verbose_name = "Clave Evaluacion Nota"
        verbose_name_plural = "Claves de  Evaluacion Nota"

    def email_claveevaluanota(self,email):
        hoy = datetime.now().today()
        send_html_mail("CODIGO DE MODULO DE CALIFICACIONES",
                       "emails/email_claveevaluanota.html", {'contenido': "CODIGO DE MODULO DE CALIFICACIONES", 'self': self, 'fecha': hoy},email.split(","))






class  TipoConsultaAsunto(models.Model):
    descripcion = models.CharField(max_length=100,blank=True,null=True)

    def __str__(self):
        return self.descripcion

    class Meta():
        verbose_name = "Tipo Consulta Asunto Estudiantil"
        verbose_name_plural = "Tipos de Consultas de Asunto Estudiantil"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(TipoConsultaAsunto, self).save(force_insert,force_update,using, update_fields)

class IncidenciaAdministrativo(models.Model):
    nombre = models.CharField(max_length=155,blank=True,null=True)
    correo = models.CharField(max_length=65,blank=True,null=True)
    telefono = models.CharField(max_length=45,blank=True,null=True)
    incidencia = models.CharField(max_length=300,blank=True,null=True)
    fecha = models.DateTimeField(blank=True,null=True)
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)
    tipoconsulta = models.ForeignKey(TipoConsultaAsunto,blank=True, null=True, on_delete=models.CASCADE)
    inmediato = models.BooleanField(default=False,verbose_name="Finalizar")
    observacion = models.CharField(max_length=1055,blank=True,null=True)
    resolucion = models.CharField(max_length=1055,blank=True,null=True)
    finalizado = models.BooleanField(default=False)
    fechafinaliza = models.DateTimeField(blank=True,null=True)
    usuariofinali = models.ForeignKey(User,related_name="Usuario Asistente+",verbose_name="usuarioasit", blank=True, null=True, on_delete=models.CASCADE)
    asignado = models.BooleanField(default=False)

    def __str__(self):
        return self.nombre

    class Meta():
        verbose_name = "Incidencia Administrativa"
        verbose_name_plural = "Incidencias Administrativas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        self.incidencia = self.incidencia.upper().strip() if self.incidencia else ''
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        self.resolucion = self.resolucion.upper().strip() if self.resolucion else ''
        super(IncidenciaAdministrativo, self).save(force_insert,force_update,using, update_fields)

    def asistenteasignaexiste(self,usuario):
        if IncidenciaAsignada.objects.filter(incidenciaadministrativo=self,asistenteasignado__asistente__usuario=usuario).exists():
            return IncidenciaAsignada.objects.filter(incidenciaadministrativo=self,asistenteasignado__asistente__usuario=usuario)[:1].get()
        return False

    def asistenteasigna(self):
        if IncidenciaAsignada.objects.filter(incidenciaadministrativo=self).exists():
            return IncidenciaAsignada.objects.filter(incidenciaadministrativo=self)[:1].get()

    def departamentoasignado(self,user):
        if DepartamentoIncidenciaAsig.objects.filter(incidenciaasignada__incidenciaadministrativo=self,incidenciaasignada__asistenteasignado__asistente__usuario=user).exists():
            return DepartamentoIncidenciaAsig.objects.filter(incidenciaasignada__incidenciaadministrativo=self,incidenciaasignada__asistenteasignado__asistente__usuario=user)[:1].get()


    def respuestanumero(self,user):
        if ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__incidenciaadministrativo=self,departamentoincidenciaasig__atendiendo=True,usuario__id=user).exists():
            return ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__incidenciaadministrativo=self,departamentoincidenciaasig__atendiendo=True,usuario__id=user).count()

    def busdepartamento(self):
        return DepartamentoIncidenciaAsig.objects.filter(incidenciaasignada__incidenciaadministrativo=self,atendiendo=True)[:1].get()

    def mensajeconsult(self):
        if ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__incidenciaadministrativo=self,departamentoincidenciaasig__atendiendo=True,respuestadepart='').exists():
            return ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__incidenciaadministrativo=self,departamentoincidenciaasig__atendiendo=True,respuestadepart='').count()

    def comparafecha(self):
        if self.fechafinaliza:
            if (self.fecha + timedelta(hours=24)) < self.fechafinaliza:
                return True
        else:
            if (self.fecha + timedelta(hours=24)) < datetime.now():
                return True
        return False

    def email_finalizaincidenc(self):
        email = self.correo
        hoy = datetime.now().today()
        personarespon = Persona.objects.filter(usuario=self.usuariofinali)[:1].get()
        send_html_mail("RESPUESTA DEL DEPARTAMENTO ESTUDIANTIL",
                       "emails/email_finalizaincidenc.html", {'contenido': "RESPUESTA DEL DEPARTAMENTO ESTUDIANTIL", 'self': self, 'personarespon': personarespon, 'fecha': hoy},str(email).split(","))

class GrupoCorreo(models.Model):
    grupos = models.ForeignKey(Group,blank=True,null=True, on_delete=models.CASCADE)
    correo = models.CharField(max_length=200)

    def __str__(self):
        return str(self.grupos)

    class Meta():
        verbose_name = "Correo de Grupo"
        verbose_name_plural = "Correos de Grupo"

class Panel(models.Model):
    nombre = models.CharField(max_length=300)
    fecha = models.DateField()
    horainicio = models.TimeField()
    horafin = models.TimeField()
    capacidad = models.IntegerField()

    def __str__(self):
        return self.nombre


    def puede_eliminarse(self):
        return  not InscripcionPanel.objects.filter(panel=self).exists()

    def esta_disponible(self):
        i = InscripcionPanel.objects.filter(panel=self).count()
        if i < self.capacidad:
            return True
        return  False

    def inscritos(self):
        if InscripcionPanel.objects.filter(panel=self).count() > 0:
            return InscripcionPanel.objects.filter(panel=self).count()
        else:
            return 0


    def esta_matriculado(self,matricula):
        return  InscripcionPanel.objects.filter(panel=self,matricula__inscripcion=matricula.inscripcion).exists()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper().strip() if self.nombre else ''
        super(Panel, self).save(force_insert,force_update,using, update_fields)

    class Meta():
        verbose_name = "Panel"
        verbose_name_plural = "Paneles"

class PermisoPanel(models.Model):
    panel = models.ForeignKey(Panel, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)

    def __str__(self):
        return self.inscripcion.persona.nombre_completo() + " - " + str(self.panel)

class InscripcionPanel(models.Model):
    panel = models.ForeignKey(Panel, on_delete=models.CASCADE)
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    fecha = models.DateField()

    def __str__(self):
        return self.matricula.inscripcion.persona.nombre_completo() + " - " + str(self.panel)

    class Meta():
        verbose_name = "Inscripcion Panel"
        verbose_name_plural = "Inscripcion Paneles"

class ObservacionMatricula(models.Model):
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    observaciones = models.CharField(max_length=500, blank=True, null=True)
    fecha = models.DateField()
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return "Observacion: " + str(self.matricula)


    class Meta:
        verbose_name = "Matricula Observacion"
        verbose_name_plural = "Matricula Observaciones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observaciones = self.observaciones.upper()
        super(ObservacionMatricula, self).save(force_insert, force_update, using, update_fields)

class ReferidosInscripcion(models.Model):
    nombres = models.CharField(max_length=100)
    apellido1 = models.CharField(max_length=100, verbose_name="1er Apellido")
    apellido2 = models.CharField(max_length=100, verbose_name="2do Apellido", blank=True, null=True)
    extranjero = models.BooleanField(default=False)
    cedula = models.CharField(max_length=13, verbose_name="Cedula", blank=True, null=True)
    pasaporte = models.CharField(max_length=15, verbose_name=u"Pasaporte", blank=True, null=True)
    sexo = models.ForeignKey(Sexo, blank=True, null=True, on_delete=models.CASCADE)
    telefono = models.CharField(max_length=50, verbose_name=u"Telefonos Moviles", blank=True, null=True)
    telefono_conv = models.CharField(max_length=50, verbose_name=u"Telefonos Fijos", blank=True, null=True)
    email = models.CharField(max_length=200,blank=True, null=True, verbose_name="Correos Electronicos")
    inscrito = models.BooleanField(default=False)
    pago=models.BooleanField(default=False)
    fecha = models.DateField()
    inscripcion=models.ForeignKey(Inscripcion ,related_name='inscripcion', blank=True, null=True, on_delete=models.CASCADE)
    inscripcionref=models.ForeignKey(Inscripcion,related_name='inscripcionref', blank=True, null=True, on_delete=models.CASCADE)
    activo = models.BooleanField(default=True)
    idprospecto= models.IntegerField(default=0)
    carrera = models.ForeignKey(Carrera,blank=True, null=True, on_delete=models.CASCADE)
    administrativo = models.ForeignKey(Persona,blank=True, null=True, on_delete=models.CASCADE)
    pagocomision= models.BooleanField(default=False)
    valorpago = models.FloatField()
    fechapago= models.DateTimeField(blank=True,null=True)
    observacion = models.CharField(max_length=300)
    modalidad =models.ForeignKey(Modalidad,blank=True, null=True, on_delete=models.CASCADE)
    online= models.BooleanField(default=False)
    carreraonline = models.IntegerField(default=0)
    sesioncaja = models.ForeignKey(SesionCaja,blank=True, null=True, on_delete=models.CASCADE)
    aprobado_pago= models.BooleanField(default=False)
    conduccion=models.BooleanField(default=False)
    tipolicencia= models.IntegerField(default=0)

    def __str__(self):
        return  (self.apellido1)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombres = self.nombres.upper()  if self.nombres else ''
        self.apellido1 = self.apellido1.upper()  if self.apellido1 else ''
        self.apellido2 = self.apellido2.upper()  if self.apellido2 else ''
        super(ReferidosInscripcion, self).save(force_insert, force_update, using, update_fields)

    def verificar_pago_matricula(self):
        if RubroMatricula.objects.filter(rubro__inscripcion=self.inscripcionref,rubro__cancelado=True).exists():
            return True
        return False

    def verificar_pago_1(self):
        cancelado = False
        # if Matricula.objects.filter(nivel__nivelmalla__id=1, inscripcion=self.inscripcionref).exists():
        if RubroCuota.objects.filter(matricula__inscripcion=self.inscripcionref, cuota=1)[:1].get().rubro.cancelado:
            cancelado = True
        return cancelado


    def verificar_inscrip_online(self):
        inscrito=False
        cn = psycopg2.connect("host=10.10.9.45 dbname=sgaonline user=aok password=R0b3rt0.1tb$")
        cur = cn.cursor()
        cur.execute("select cancelado,inscrito from view_referidos where id_prospecto='"+str(self.idprospecto)+"'")
        dato = cur.fetchall()
        cur.close()
        if len(dato)>0:
            inscrito=True

        return inscrito

    def verificar_inscrip_conduccion(self):
        inscrito=False
        cn = psycopg2.connect("host=10.10.9.45 dbname=crmcondu user=postgres password=Itb$2019")
        cur = cn.cursor()
        cur.execute("select * from crm_loginscripcion where id_preins_prospec='"+str(self.idprospecto)+"'")
        dato = cur.fetchall()
        cur.close()
        if len(dato)>0:
            inscrito=True

        return inscrito

    def correo_referido_eliminado(self,user,cont):
        if TipoIncidencia.objects.filter(pk=60).exists():
            tipo = TipoIncidencia.objects.get(pk=60)
            hoy = datetime.now().today()
            contenido = cont
            nombreusuario='Sin Nombre'
            if Persona.objects.filter(usuario=user).exists():
                persona= Persona.objects.get(usuario=user)
                nombreusuario=persona.nombre_completo_inverso()

            if self.inscripcion:
                correo= self.inscripcion.persona.email+','+tipo.correo
            else:
                correo= self.administrativo.email +','+tipo.correo

            send_html_mail(contenido,
                           "emails/referido_eliminado.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'usuario': user,'nombreUsuario':nombreusuario},correo.split(","))

    def verificar_pago_online(self):
        pago=False
        cn = psycopg2.connect("host=10.10.9.45 dbname=sgaonline user=aok password=R0b3rt0.1tb$")
        cur = cn.cursor()
        cur.execute("select cancelado,inscrito from view_referidos where cancelado=true and id_prospecto='"+str(self.idprospecto)+"'")
        dato = cur.fetchall()
        cur.close()
        if len(dato)>0:
            pago=True

        return pago

    def verificar_pago_cuota1_online(self):
        pago=False
        cn = psycopg2.connect("host=10.10.9.45 dbname=sgaonline user=aok password=R0b3rt0.1tb$")
        cur = cn.cursor()
        cur.execute("select view_referidos.cancelado,view_referidos.inscrito from view_referidos join sga_inscripcion on sga_inscripcion.id = view_referidos.inscripcion join sga_rubro on sga_rubro.inscripcion_id = sga_inscripcion.id join sga_rubrocuota on sga_rubrocuota.rubro_id = sga_rubro.id where sga_rubro.cancelado=true and sga_rubrocuota.cuota=1 and id_prospecto='"+str(self.idprospecto)+"'")
        dato = cur.fetchall()
        cur.close()
        if len(dato)>0:
            pago=True
        return pago

    def verificar_promocion_rsonrisas_online(self):
        promocion = False
        cn = psycopg2.connect("host=10.10.9.45 dbname=sgaonline user=aok password=R0b3rt0.1tb$")
        cur = cn.cursor()
        cur.execute("select view_referidos.cancelado,view_referidos.inscrip from view_referidos join sga_inscripcion on sga_inscripcion.id = view_referidos.inscrip where sga_inscripcion.promocion_id = 6 and id_prospecto='"+str(self.idprospecto)+"'")
        dato = cur.fetchall()
        cur.close()
        if len(dato)>0:
            promocion=True
        return promocion

    def verificar_pago_conduccion(self):
        pago=False
        cn = psycopg2.connect("host=10.10.9.45 dbname=crmcondu user=postgres password=Itb$2019")
        cur = cn.cursor()
        cur.execute("select id_preins_prospec,cancelado from view_loginscripcion where cancelado=true and id_preins_prospec='"+str(self.idprospecto)+"'")
        dato = cur.fetchall()
        cur.close()
        if len(dato)>0:
            pago=True

        return pago


    def correo_referidos(self,user,cont):
        if TipoIncidencia.objects.filter(pk=60).exists():
            tipo = TipoIncidencia.objects.get(pk=60)
            hoy = datetime.now().today()
            contenido = cont
            nombreusuario='Sin Nombre'
            if Persona.objects.filter(usuario=user).exists():
                persona= Persona.objects.get(usuario=user)
                nombreusuario=persona.nombre_completo_inverso()

            send_html_mail(contenido,
                           "emails/referifos_correo.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'usuario': user,'nombreUsuario':nombreusuario},tipo.correo.split(','))



    def correo_referidos_pago(self,user,cont):
        if TipoIncidencia.objects.filter(pk=60).exists():
            tipo = TipoIncidencia.objects.get(pk=60)
            listacorreo= tipo.correo
            if self.inscripcion:
                listacorreo=listacorreo+','+'sgaitb@itb.edu.ec'+','+self.inscripcion.persona.email
            else:
                listacorreo=listacorreo+','+'sgaitb@itb.edu.ec'+','+self.administrativo.email
            hoy = datetime.now().today()
            contenido = cont
            send_html_mail(contenido,
                           "emails/referidos_pago_comision.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'usuario': user},listacorreo.split(","))

    def verficarNombreVendedor(self):
        nombregestor=''
        if not self.online:
            cn = psycopg2.connect("host=10.10.9.45 dbname=crm user=aok password=R0b3rt0.1tb$")
            cur = cn.cursor()
            cur.execute("select gestor from crmitb_prospecto where id='"+str(self.idprospecto)+"'")
            dato = cur.fetchall()
            cur.close()
            if dato:
                for row in dato:
                    idgestor=int(row[0])
                    if Persona.objects.filter(id=idgestor).exists():
                        persona=Persona.objects.get(id=idgestor)
                        nombregestor=persona
        else:
            cn = psycopg2.connect("host=10.10.9.45 dbname=sgaonline user=aok password=R0b3rt0.1tb$")
            cur = cn.cursor()
            cur.execute("select nombre_gestor,telefono from view_prospecto where id='"+str(self.idprospecto)+"'")
            dato = cur.fetchall()

            cur.close()
            for row in dato:
                nombregestor=row[0]+' '+str(row[1])


        return  nombregestor

    def verficarNombreVendedorConduccion(self):
        nombregestor=''
        cn = psycopg2.connect("host=10.10.9.45 dbname=crmcondu user=postgres password=Itb$2019")
        cur = cn.cursor()
        cur.execute("select nombregestor,telefonogestor from view_prospecto where id='"+str(self.idprospecto)+"'")
        dato = cur.fetchall()

        cur.close()
        for row in dato:
            nombregestor=row[0]+' '+str(row[1])


        return  nombregestor

    def nomreferido(self):
        return elimina_tildes(self.apellido1)+' '+elimina_tildes(self.apellido2)+' '+elimina_tildes(self.nombres)

    def nompersonarefiere(self):
        if self.inscripcion:
            persona=self.inscripcion.persona
        else:
            persona= self.administrativo
        return elimina_tildes(persona.nombre_completo_inverso())


class DescuentoReferido(models.Model):
    desde = models.IntegerField()
    hasta = models.IntegerField()
    descuento = models.IntegerField()

    def __str__(self):
        return "Desde: " + str(self.desde) + " Hasta: "+ str(self.hasta) +  " Descuento: " + str(self.descuento) + "%"


class InscripcionDescuentoRef(models.Model):
    descuento = models.ForeignKey(DescuentoReferido, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    proximo = models.BooleanField(default=False)
    fecha = models.DateField()
    aplicado=models.BooleanField(default=False)

    def __str__(self):
        return str(self.inscripcion) + " " + str(self.descuento) + " Prox: " + str(self.proximo)  + " Aplic. " +str(self.aplicado)

    def correo(self, ins,ant,act):
        if TipoIncidencia.objects.filter(pk=32).exists():
            tipo=TipoIncidencia.objects.get(pk=32)
            hoy = datetime.now().today()
            send_html_mail("Referido Retirado",
                           "emails/retirado_referido.html", {'r': self, 'inscripcion': ins, 'fecha': hoy,'act':act,'ant':ant},tipo.correo.split(","))

    def correo_ref(self):
        if TipoIncidencia.objects.filter(pk=33).exists():
            tipo=TipoIncidencia.objects.get(pk=33)
            hoy = datetime.now().today()
            send_html_mail("Descuento Referido",
                           "emails/referido.html", {'r': self,  'fecha': hoy },tipo.correo.split(","))

class TituloExamenCondu(models.Model):
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    nombreinstitucion = models.CharField(max_length=200, blank=True, null=True)
    tituloexamen = models.CharField(max_length=200, blank=True, null=True)
    subtituloexamen = models.CharField(max_length=200, blank=True, null=True)
    descripcion = models.CharField(max_length=1000, blank=True, null=True)
    observacion = models.CharField(max_length=1000, blank=True, null=True)
    fechainicio = models.DateTimeField(blank=True, null=True)
    fechatermina = models.DateTimeField(blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    tiempo = models.DateTimeField(blank=True, null=True)
    activo = models.BooleanField(default=False)
    convalida = models.BooleanField(default=False)
    carrera = models.ForeignKey(Carrera, blank=True, null=True, on_delete=models.CASCADE)
    teleclinica = models.BooleanField(default=False)
    numeropreguntas = models.IntegerField(blank=True, null=True)
    link_televideo = models.FileField(upload_to='televideo/%Y/%m/%d', max_length=300, blank=True, null=True)

    def __str__(self):
        return str(self.asignatura)+ " " + str(elimina_tildes(self.tituloexamen))

    class Meta:
        verbose_name = "Titulo examen"
        verbose_name_plural = "Titulo de examenes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.tituloexamen = self.tituloexamen.upper() if self.tituloexamen else ''
        self.subtituloexamen = self.subtituloexamen.upper() if self.subtituloexamen else ''
        self.descripcion = self.descripcion.upper() if self.descripcion else ''
        super(TituloExamenCondu, self).save(force_insert, force_update, using, update_fields)

    def numeropregunta(self):
        return PreguntaExamen.objects.filter(tituloexamencondu=self).order_by('-numero')[:1].get().numero + 1

    def existen_preguntas(self):
        if PreguntaExamen.objects.filter(tituloexamencondu=self).order_by('-numero').exists():
            return PreguntaExamen.objects.filter(tituloexamencondu=self).order_by('-numero').count()
        return False

    def exist_tituexamenfin(self,inscripcion):
        if InscripcionExamen.objects.filter(inscripcion__id=inscripcion,tituloexamencondu=self,valida=True,finalizado=True).exists():
            return InscripcionExamen.objects.filter(inscripcion__id=inscripcion,tituloexamencondu=self,valida=True,finalizado=True)[:1].get()
        return False

    def exist_inscripex(self):
        return InscripcionExamen.objects.filter(tituloexamencondu=self).exists()

    def tipoaulaexamen(self):
        return TipAulaExamen.objects.filter(tituloexamen=self,activo=True)

    @staticmethod
    def flexbox_query(q):
        return TituloExamenCondu.objects.filter(tituloexamen__contains=q)

    def flexbox_repr(self):
        return self.tituloexamen


class PreguntaExamen(models.Model):
    tituloexamencondu = models.ForeignKey(TituloExamenCondu, on_delete=models.CASCADE)
    pregunta = models.CharField(max_length=10000,blank=True,null=True)
    imagen = models.FileField(upload_to='examen', max_length=200,blank=True,null=True)
    numero = models.IntegerField(null=True, blank=True)
    puntos = models.DecimalField(max_digits=11, decimal_places=1, default=Decimal('0.0'), blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    activo = models.BooleanField(default=False)

    def __str__(self):
        return str(elimina_tildes(self.tituloexamencondu.tituloexamen)) +" Pregunta "+ str(self.numero)

    def respuestaexamen(self):
        return RespuestaExamen.objects.filter(preguntaexamen=self).order_by('?')

    def respuesta(self):
        return RespuestaExamen.objects.filter(preguntaexamen=self)

class RespuestaExamen(models.Model):
    preguntaexamen = models.ForeignKey(PreguntaExamen, on_delete=models.CASCADE)
    respuesta = models.CharField(max_length=300,blank=True,null=True)
    valida = models.BooleanField(default=False)
    imagen = models.FileField(upload_to='examen', max_length=200,blank=True,null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return str(elimina_tildes(self.preguntaexamen.tituloexamencondu.tituloexamen)) +" Respuesta "+ str(elimina_tildes(self.respuesta))+" Preg Numero " + str(self.preguntaexamen.numero)

    def exist_respuesta(self,inscripcion):
        if InscripcionExamen.objects.filter(inscripcion__id=inscripcion,tituloexamencondu=self.preguntaexamen.tituloexamencondu,valida=True).exists():
            inscripcionexamen = InscripcionExamen.objects.filter(inscripcion__id=inscripcion,tituloexamencondu=self.preguntaexamen.tituloexamencondu,valida=True).order_by('-id')[:1].get()
            if DetalleExamen.objects.filter(inscripcionexamen=inscripcionexamen,respuestaexamen=self).exclude(fecha=None).exists():
                return DetalleExamen.objects.filter(inscripcionexamen=inscripcionexamen,respuestaexamen=self).exclude(fecha=None)[:1].get()

        return False

    def exist_detalleex(self):
        return InscripcionExamen.objects.filter(tituloexamencondu=self.preguntaexamen.tituloexamencondu).exists()

class InscripcionExamen(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    tituloexamencondu = models.ForeignKey(TituloExamenCondu, on_delete=models.CASCADE)
    tiempo = models.DateTimeField(blank=True, null=True)
    puntaje = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)
    Observacion = models.CharField(max_length=500, blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    valida = models.BooleanField(default=True)
    finalizado = models.BooleanField(default=False)
    ipmaquina = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return str(self.inscripcion) + " " + str(self.tituloexamencondu)

    def cantidadresp(self):
        if InscripcionExamen.objects.filter(id=self.id,finalizado=True,valida=True).exists():
            inscripcionexamen = InscripcionExamen.objects.filter(id=self.id,finalizado=True,valida=True)[:1].get()
            return DetalleExamen.objects.filter(inscripcionexamen=inscripcionexamen,respuestaexamen__valida=True).exclude(fecha=None).count()

    def cantidadrespincorr(self):
        if InscripcionExamen.objects.filter(id=self.id,finalizado=True,valida=True).exists():
            inscripcionexamen = InscripcionExamen.objects.filter(id=self.id,finalizado=True,valida=True)[:1].get()
            return DetalleExamen.objects.filter(inscripcionexamen=inscripcionexamen,respuestaexamen__valida=False).exclude(fecha=None).count()

    def cantidadrespsincont(self):
        if InscripcionExamen.objects.filter(id=self.id,finalizado=True,valida=True).exists():
            inscripcionexamen = InscripcionExamen.objects.filter(id=self.id,finalizado=True,valida=True)[:1].get()
            return DetalleExamen.objects.filter(inscripcionexamen=inscripcionexamen,fecha=None).count()


    def cantpregunta(self):
        if InscripcionExamen.objects.filter(id=self.id,finalizado=True,valida=True).exists():
            inscripcionexamen = InscripcionExamen.objects.filter(id=self.id,finalizado=True,valida=True)[:1].get()
            return DetalleExamen.objects.filter(inscripcionexamen=inscripcionexamen).count()

    class Meta:
        verbose_name = "Inscripcion examen"
        verbose_name_plural = "Inscripcion de examenes"

    def detallevalidaexist(self):
        if Detvalidaexamen.objects.filter(inscripcionexamen=self).exists():
            return Detvalidaexamen.objects.filter(inscripcionexamen=self)
        return False

class DetalleExamen(models.Model):
    inscripcionexamen = models.ForeignKey(InscripcionExamen, on_delete=models.CASCADE)
    respuestaexamen = models.ForeignKey(RespuestaExamen, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return str(self.inscripcionexamen.inscripcion) + " -- "+ str(self.respuestaexamen.preguntaexamen.pregunta) + " -- " + str(self.respuestaexamen.respuesta)+ " -- " + str(self.respuestaexamen.valida)

class Detvalidaexamen(models.Model):
    inscripcionexamen = models.ForeignKey(InscripcionExamen, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300,blank=True,null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)
    activo = models.BooleanField(default=True)


class UnidadOrganizacion(models.Model):
    descripcion = models.CharField(max_length=200)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return (self.descripcion)

    class Meta:
        verbose_name = "Unidad de Organizacion Curricular"
        verbose_name_plural = "Unidad de Organizaciones Curricular"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(UnidadOrganizacion, self).save(force_insert, force_update, using, update_fields)


class CamposFormacion(models.Model):
    descripcion = models.CharField(max_length=200)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return (self.descripcion)

    def tiene_syllabus(self,s):
        if SyllabusCampos.objects.filter(syllabus=s,campo=self).exists():
            return True
        return False

    class Meta:
        verbose_name = "Campo de Formacion"
        verbose_name_plural = "Campos de Formacion"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(CamposFormacion, self).save(force_insert, force_update, using, update_fields)

class Syllabus(models.Model):
    asigmalla = models.ForeignKey(AsignaturaMalla, on_delete=models.CASCADE)
    prerrequisito = models.CharField(max_length=200,blank=True,null=True)
    archivo = models.FileField(upload_to='seg_syllabus/%Y/%m/%d', max_length=200)
    correquisito = models.CharField(max_length=200,blank=True,null=True)
    unidadorg = models.ForeignKey(UnidadOrganizacion,blank=True,null=True, on_delete=models.CASCADE)
    lineasinv = models.CharField(max_length=500,blank=True,null=True)

    def __str__(self):
        return str(self.asigmalla.asignatura)

    def en_clase(self):
        return  SeguimientoSyllabus.objects.filter(syllabus=self).exists()


    class Meta:
        verbose_name = "Syllabu"
        verbose_name_plural = "Syllabus"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.lineasinv = self.lineasinv.upper()  if self.lineasinv else ''
        super(Syllabus, self).save(force_insert, force_update, using, update_fields)


class SyllabusCampos(models.Model):
    syllabus = models.ForeignKey(Syllabus, on_delete=models.CASCADE)
    campo = models.ForeignKey(CamposFormacion, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.syllabus) + str(self.campo)

class CapituloSyllabus(models.Model):
    syllabus = models.ForeignKey(Syllabus, on_delete=models.CASCADE)
    numero = models.CharField(max_length=10, blank=True, null=True)
    nombre = models.CharField(max_length=300, blank=True, null=True)
    contenido = models.CharField(max_length=5555, blank=True, null=True)
    orden = models.IntegerField()
    tiene_detalle=models.BooleanField(default=False)

    def __str__(self):
        return str(self.syllabus) + "  "+ self.numero + ". " + self.nombre

    def detalle(self):
        if DetalleCapitulo.objects.filter(capitulo=self).exists():
            return  DetalleCapitulo.objects.filter(capitulo=self).order_by('descripcion')
        return  False

    def temas(self):
        if TemaSyllabus.objects.filter(capitulo=self).exists():
            return  TemaSyllabus.objects.filter(capitulo=self).order_by('orden')
        return  False

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.contenido = self.contenido.upper() if self.contenido else ''
        self.nombre = self.nombre.upper() if self.nombre else ''
        super(CapituloSyllabus, self).save(force_insert, force_update, using, update_fields)


class DetalleCapitulo(models.Model):
    capitulo = models.ForeignKey(CapituloSyllabus, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=5555)

    def __str__(self):
        return str(self.capitulo)+ " " + self.descripcion


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(DetalleCapitulo, self).save(force_insert, force_update, using, update_fields)

class TemaSyllabus(models.Model):
    capitulo = models.ForeignKey(CapituloSyllabus, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=300, blank=True, null=True)
    numero = models.CharField(max_length=10, blank=True, null=True)
    orden = models.IntegerField()
    contenido = models.CharField(max_length=900, blank=True, null=True)

    def subtema(self):
        if SubTemaSyll.objects.filter(tema=self).exists():
            return SubTemaSyll.objects.filter(tema=self).order_by('id')
        return False

    def detalltema(self):
        if DetalleTema.objects.filter(tema=self).exists():
            return DetalleTema.objects.filter(tema=self)
        return False

    def ver_detalle(self):
        if SeguimientoSyllabus.objects.filter(detallesyll__subtema__tema=self).exists():
            return  SeguimientoSyllabus.objects.filter(detallesyll__subtema__tema=self)
        return  None

    def habilidades(self):
        if HabilidadesTema.objects.filter(tema=self).exists():
            return HabilidadesTema.objects.filter(tema=self)[:1].get()
        return False

    def valores(self):
        if ValoresTema.objects.filter(tema=self).exists():
            return ValoresTema.objects.filter(tema=self)[:1].get()
        return False

    def horas(self):
        if HorasTema.objects.filter(tema=self).exists():
            return HorasTema.objects.filter(tema=self)[:1].get()
        return False

    def __str__(self):
        return str(self.capitulo) + " "+ self.numero + " " + self.nombre

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.contenido = self.contenido.upper() if self.contenido else ''
        self.nombre = self.nombre.upper() if self.nombre else ''
        super(TemaSyllabus, self).save(force_insert, force_update, using, update_fields)


class DetalleTema(models.Model):
    tema = models.ForeignKey(TemaSyllabus, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=5555)

    def __str__(self):
        return str(self.tema)+ " " + self.descripcion

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(DetalleTema, self).save(force_insert, force_update, using, update_fields)

class SubTemaSyll(models.Model):
    tema = models.ForeignKey(TemaSyllabus, on_delete=models.CASCADE)
    numero = models.CharField(max_length=10, blank=True, null=True)
    contenido = models.CharField(max_length=900)

    def detalle(self):
        if DetalleSubTemaSyll.objects.filter(subtema=self).exists():
            return DetalleSubTemaSyll.objects.filter(subtema=self)
        return  False
    def __str__(self):
        return str(self.tema) + " "+ self.numero + " " + self.contenido

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.contenido = self.contenido.upper()
        super(SubTemaSyll, self).save(force_insert, force_update, using, update_fields)

class DetalleSubTemaSyll(models.Model):
    subtema = models.ForeignKey(SubTemaSyll, on_delete=models.CASCADE)
    numero = models.CharField(max_length=10, blank=True, null=True)
    contenido = models.CharField(max_length=900)

    def __str__(self):
        return str(self.subtema) + " "+ self.numero + " " + self.contenido


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.contenido = self.contenido.upper()
        super(DetalleSubTemaSyll, self).save(force_insert, force_update, using, update_fields)

class HabilidadesTema(models.Model):
    tema = models.ForeignKey(TemaSyllabus, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=900)

    def __str__(self):
        return str(self.tema) + " "+ self.descripcion

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(HabilidadesTema, self).save(force_insert, force_update, using, update_fields)

class ValoresTema(models.Model):
    tema = models.ForeignKey(TemaSyllabus, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=900)

    def __str__(self):
        return str(self.tema) + " "+ self.descripcion

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(ValoresTema, self).save(force_insert, force_update, using, update_fields)

class HorasTema(models.Model):
    tema = models.ForeignKey(TemaSyllabus, on_delete=models.CASCADE)
    d = models.IntegerField(blank=True,null=True)
    p = models.IntegerField(blank=True,null=True)
    a = models.IntegerField(blank=True,null=True)

    def __str__(self):
        return str(self.tema)

class SeguimientoSyllabus(models.Model):
    profesor = models.ForeignKey(ProfesorMateria, on_delete=models.CASCADE)
    syllabus =  models.ForeignKey(Syllabus, on_delete=models.CASCADE)
    capitulo = models.ForeignKey(CapituloSyllabus, on_delete=models.CASCADE)
    inicio = models.DateField(blank=True,null=True)
    fin = models.DateField(blank=True,null=True)
    finalizado = models.BooleanField(default=False)


class SeguimientoTema(models.Model):
    seguimiento = models.ForeignKey(SeguimientoSyllabus, on_delete=models.CASCADE)
    tema = models.ForeignKey(TemaSyllabus,blank=True,null=True, on_delete=models.CASCADE)
    inicio = models.DateField(blank=True,null=True)
    fin = models.DateField(blank=True,null=True)
    finalizado = models.BooleanField(default=False)

class SeguimientoDetalleTema(models.Model):
    seguimientotema = models.ForeignKey(SeguimientoTema, on_delete=models.CASCADE)
    detalletema = models.ForeignKey(DetalleTema, on_delete=models.CASCADE)
    leccion = models.ForeignKey(LeccionGrupo,blank=True,null=True, on_delete=models.CASCADE)
    finalizado = models.BooleanField(default=False)


class SeguimientoSubTema(models.Model):
    seguimientotema = models.ForeignKey(SeguimientoTema, on_delete=models.CASCADE)
    subtema = models.ForeignKey(SubTemaSyll, on_delete=models.CASCADE)
    inicio = models.DateField(blank=True,null=True)
    fin = models.DateField(blank=True,null=True)
    leccion = models.ForeignKey(LeccionGrupo,blank=True,null=True, on_delete=models.CASCADE)
    finalizado = models.BooleanField(default=False)


class SeguimientoDetalleSubTema(models.Model):
    seguimientosubtema = models.ForeignKey(SeguimientoSubTema, on_delete=models.CASCADE)
    detsubtema = models.ForeignKey(DetalleSubTemaSyll, on_delete=models.CASCADE)
    leccion = models.ForeignKey(LeccionGrupo,blank=True,null=True, on_delete=models.CASCADE)
    finalizado = models.BooleanField(default=False)


class AulaAdministra(models.Model):
    aula = models.ForeignKey(Aula, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=700,blank=True,null=True)
    fecha = models.DateTimeField(blank=True, null=True, verbose_name="Fecha Inicio")
    horainicio = models.TimeField(blank=True,null=True, verbose_name="Hora de Inicio")
    horafin = models.TimeField(blank=True,null=True , verbose_name="Hora de Fin")
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    fechaingreso = models.DateTimeField(blank=True, null=True, verbose_name="Fecha Ingreso")
    actividad = models.ForeignKey(Actividad,blank=True,null=True, on_delete=models.CASCADE)

    def __str__(self):
        return (self.motivo)


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.motivo = self.motivo.upper()  if self.motivo else ''
        super(AulaAdministra, self).save(force_insert, force_update, using, update_fields)

    def fecha_modifica(self):
        if datetime.now().date() < self.fecha.date():
            return True
        return False

    def correo_adminauditorio(self):
        if TipoIncidencia.objects.filter(pk=48).exists():
            tipo=TipoIncidencia.objects.get(pk=48)
            hoy = datetime.now().today()
            contenido = u"ASIGNACION DE AUDITORIOS"
            send_html_mail(contenido,"emails/email_adminauditorio.html", {'self': self,'fecha':hoy,'contenido':contenido},tipo.correo.split(","))

# OCU 05-agosto-2016 Para foto institucional
class FotoInstEstudiante(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    foto = models.FileField(upload_to='fotosinstest/%Y/%m/%d', max_length=200, null = True, blank=True)

    def __str__(self):
        return "Foto "+str(self.inscripcion)

    class Meta:
        verbose_name = "Foto"
        verbose_name_plural = "Fotos"

    def download_foto(self):
        return self.foto.url

class RubrosConduccion(models.Model):
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    precio =models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    descripcion =  models.CharField(max_length=300)
    tipo = models.ForeignKey(TipoOtroRubro, on_delete=models.CASCADE)

# OCU 16-agosto-2016 Para Rubros de Becas
class DetalleRubrosBeca(models.Model):
    matricula = models.ForeignKey(Matricula,blank=True, null=True, on_delete=models.CASCADE)
    # inscripcion = models.ForeignKey(Inscripcion,blank=True, null=True, on_delete=models.CASCADE)
    # promocion = models.ForeignKey(Promocion,blank=True, null=True, on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro, blank=True, null=True, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=300,blank=True, null=True, verbose_name="Descripcion Rubro")
    descuento = models.FloatField()
    porcientobeca = models.IntegerField()
    valorrubro = models.FloatField()
    fecha = models.DateField()
    pago = models.ForeignKey(Pago, blank=True, null=True, on_delete=models.CASCADE)
    # notacredito = models.BooleanField(default=False)
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.matricula)+" "+str(self.rubro)+" "+str(self.valorrubro)+" "+str(self.descripcion)

    def valorrubro_fun(self):
        return self.valorrubro - self.descuento

    class Meta:
        verbose_name = "Rubro de Beca"
        verbose_name_plural = "Rubros de Beca Matriculas"

class ImgenCorreo(models.Model):
    imagen = models.FileField(upload_to='imgcorreo', max_length=200, null = True, blank=True)


class MateriaNivel(models.Model):
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel, on_delete=models.CASCADE)
    fecha = models.DateField()

    def __str__(self):
        return  str(self.materia.asignatura) + " - " + str(self.nivel) + " " +str(self.fecha)

class ObservacionTutoria(models.Model):
    tutoria = models.ForeignKey(Tutoria, blank=True, null=True, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=500,blank=True, null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField()






# # OCU prueba reporte en excel 28-nov-2016
class ReporteExcel(models.Model):
    descripcion = models.CharField(max_length=200)
    vista = models.CharField(max_length=100)
    activo = models.BooleanField(default=True)
    esmodal = models.BooleanField(default=True)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = "Reporte Excel"
        verbose_name_plural = "Reportes de Excel"

def convertir_fecha(s):
    try:
        return datetime(int(s[-4:]), int(s[3:5]), int(s[:2]))
    except Exception as e:
        print(e)
        return datetime.now()

class GrupoReporteExcel(models.Model):
    reporteexcel = models.ForeignKey(ReporteExcel, on_delete=models.CASCADE)
    grupos = models.ForeignKey(Group, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.reporteexcel) +  " - " + str(self.grupos)

    class Meta:
        verbose_name = "Grupo de Reporte Excel"
        verbose_name_plural = "Grupos de Reportes de Excel"

class IpRecaudacion(models.Model):
    nombre = models.CharField(max_length=255)
    ip = models.CharField(max_length=50)

    class Meta:
        verbose_name = "Ip Recaudacion"
        verbose_name_plural = "Ip Recaudacion"

    def __str__(self):
        return  str(self.nombre)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()  if self.nombre else ''
        super(IpRecaudacion, self).save(force_insert, force_update, using, update_fields)

class IpRecaudLugar(models.Model):
    lugarrecaudacion = models.ForeignKey(LugarRecaudacion, on_delete=models.CASCADE)
    ip = models.ForeignKey(IpRecaudacion, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return  str(self.ip.nombre)

    class Meta:
        verbose_name = "Ip Recaudacion Lugar"
        verbose_name_plural = "Ip Recaudacion Lugares"


class PersonalConvenio(models.Model):
    conveniobox = models.ForeignKey(ConvenioBox, on_delete=models.CASCADE)
    identificacion = models.CharField(max_length=13)
    nombres = models.CharField(max_length=200)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return  self.identificacion + " - " + self.nombres

    class Meta():
        verbose_name = "Personal Convenio"
        verbose_name_plural = "Personal Convenios"



    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombres = self.nombres.upper().strip() if self.nombres else ''
        super(PersonalConvenio, self).save(force_insert,force_update,using, update_fields)

class PrecioConsulta(models.Model):
    tipovisita = models.ForeignKey(TipoVisitasBox, on_delete=models.CASCADE)
    tipopersona = models.ForeignKey(TipoPersona, on_delete=models.CASCADE)
    convenio = models.ForeignKey(ConvenioBox,blank=True,null=True, on_delete=models.CASCADE)
    precio = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)

    def __str__(self):
        return str(self.tipovisita) + ' -  ' + str(self.tipopersona) + " Precio: "+str(self.precio)


    class Meta():
        verbose_name = "Precio Consulta"
        verbose_name_plural = "Precios Consultas"

class UsuarioConvenio(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    convenio = models.ForeignKey(ConvenioBox, on_delete=models.CASCADE)

    class Meta():
        verbose_name = "Usuario Convenio"
        verbose_name_plural = "Usuarios Convenios"

class RubroReceta(models.Model):
    rubrootro = models.ForeignKey(RubroOtro, on_delete=models.CASCADE)
    detallebox = models.ForeignKey(DetalleVisitasBox, on_delete=models.CASCADE)

    def correo(self,mensaje,contenido,id,user,op,fac):
        tipo = TipoIncidencia.objects.get(pk=id)
        hoy = datetime.now().today()
        send_html_mail(mensaje,
                       "emails/correo_nc.html", {'d': self,'fecha':hoy,'contenido':contenido,'user':user,'op':op,'fac':fac},tipo.correo.split(","))

    class Meta():
        verbose_name = "Rubro Receta"
        verbose_name_plural = "Rubros Recetas"


# OCU 10-enero-2017 para grabar los titulos de estudiantes extranjeros
class InscripcionExtranjerosTitulo(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    titulodoc = models.FileField(upload_to='tituloextranjero/%Y/%m/%d', max_length=200)

    class Meta():
        verbose_name = "Inscripcion Extranjero"
        verbose_name_plural = "Inscripciones Extranjeros"


class AsistenciaCofia(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300)
    fecha = models.DateField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcion) + ' -  ' + (self.observacion) + " Fecha: "+str(self.fecha)

    class Meta():
        verbose_name = "Asistencia a Cofia"
        verbose_name_plural = "Asistencias a Cofias"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        super(AsistenciaCofia, self).save(force_insert,force_update,using, update_fields)

class ExamenPractica(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    titulo = models.CharField(max_length=300)
    caso = models.CharField(max_length=2055)
    puntaje = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)
    valida = models.BooleanField(default=True)
    fecha = models.DateTimeField()
    profesor = models.ForeignKey(Profesor,blank=True,null=True, on_delete=models.CASCADE)

    class Meta():
        verbose_name = "Examen Practico"
        verbose_name_plural = "Examenes Complexivos Practico"

    def __str__(self):
        return  str(self.titulo) + " ( " + str(self.puntaje) +" )"

    def detalleexamen(self):
        return ExamenPracticaDet.objects.filter(examenpractica=self).order_by("id")

    def detallevalexamenexist(self):
        return DetExamenVali.objects.filter(examenpractica=self)

    def profeexiste(self):
        return ProfeExamenPractica.objects.filter(examenpractica=self)

class NotasComplexivo(models.Model): #para uso de FAECAC y FATV
    egresado = models.ForeignKey(Egresado, on_delete=models.CASCADE)
    teorico = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)
    practico = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)
    total = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)
    fecha = models.DateTimeField()
    tituloexamencondu = models.ForeignKey(TituloExamenCondu, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=500, blank=True, null=True)

    class Meta():
        verbose_name = "Examen Complexivo FATV y FAECAC"
        verbose_name_plural = "Examenes Complexivos FATV y FAECAC"

    def __str__(self):
        return  str(self.egresado)

    def correo_cambio_notas(self):
        if NotasComplexivoDet.objects.filter(notascomplexivo__egresado=self.egresado).exists():
            detalle = NotasComplexivoDet.objects.filter(notascomplexivo__egresado=self.egresado)
            tipo = TipoIncidencia.objects.get(pk=58)
            # correo= 'lgomez@bolivariano.edu.ec,luis.gomez.veloz@gmail.com'
            hoy = datetime.now().today()
            contenido = "CAMBIO DE NOTAS EXAMEN COMPLEXIVO"
            send_html_mail("NOTIFICACION - CAMBIO DE NOTAS EXAMEN COMPLEXIVO",
                           "emails/cambio_complexivo.html", {'d': self, 'fecha': hoy,'contenido': contenido ,'egresado':self.egresado,'notas':detalle},tipo.correo.split(","))

class ProfeExamenPractica(models.Model):
    examenpractica = models.ForeignKey(ExamenPractica, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)

    class Meta():
        verbose_name = "Profesor Examen"
        verbose_name_plural = "Profesor Examen Practico"

    def __str__(self):
        return  str(self.profesor) + " ( " + str(self.examenpractica.id) +" )"



class ExamenPracticaDet(models.Model):
    examenpractica = models.ForeignKey(ExamenPractica, on_delete=models.CASCADE)
    metodevalua = models.CharField(max_length=700)
    escala = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)
    calif1 = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)
    calif2 = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)
    promedio = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)

    class Meta():
        verbose_name = "Detalle de Examen"
        verbose_name_plural = "Detalle de Examen Complexivo Practico"


class DetExamenVali(models.Model):
    examenpractica = models.ForeignKey(ExamenPractica, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300,blank=True,null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)
    activo = models.BooleanField(default=True)


class PagoWester(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    codigo = models.CharField(max_length=30)
    datos=models.BooleanField(default=False)
    identificacion = models.CharField(max_length=13,blank=True,null=True)
    nombre = models.CharField(max_length=300,blank=True,null=True)
    direccion = models.CharField(max_length=300,blank=True,null=True)
    telefono = models.CharField(max_length=20,blank=True,null=True)
    email = models.CharField(max_length=50,blank=True,null=True)
    fecha = models.DateTimeField()
    fechapago = models.DateTimeField()
    archivo = models.FileField(upload_to='wester/%Y/%m/%d', max_length=200,blank=True,null=True)
    factura = models.ForeignKey(Factura, blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcion) + " Codigo: " + self.codigo

    def mail_pago(self, usuario):
        tipo = TipoIncidencia.objects.get(pk=41)
        hoy = datetime.now().today()
        send_html_mail("Adicionado Registro de Pago",
                       "emails/adicionadopago.html", {'o': self, 'usuario': usuario, 'fecha': hoy},tipo.correo.split(","))

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        if self.direccion: self.direccion = self.direccion.upper()
        if self.codigo: self.codigo = self.codigo.upper()
        super(PagoWester, self).save(force_insert, force_update, using, update_fields)

# class EntidadRecaudadora(models.Model):
#     nombre = models.CharField(max_length=250)
#     activo = models.BooleanField(default=True)
#
#     def __str__(self):
#         return str(self.nombre)
#
#     class Meta():
#         verbose_name = "Entidad Recaudadora"
#         verbose_name_plural = "Entidades Recaudadoras"

class ArchivoWester(models.Model):
    fecha = models.DateField()
    archivo = models.FileField(upload_to='archivowester/%Y/%m/%d', max_length=200,blank=True,null=True)
    archivowester = models.FileField(upload_to='archivowester/%Y/%m/%d', max_length=200,blank=True,null=True)
    # entidad = models.ForeignKey(EntidadRecaudadora,blank=True,null=True, on_delete=models.CASCADE)


    def __str__(self):
        return str(self.fecha)

    def nombre_archivow(self):
        return os.path.split(self.archivo.name)[1]

    def descargar(self):
        if os.path.exists(SITE_ROOT +'/'+ str(self.archivo)):
            return "https://sga.itb.edu.ec/media/archivowester/" + str(self.nombre_archivow())
        else:
            return  "https://tesoreria.itb.edu.ec" + str(self.archivo)

    def descargarreg(self):
        if os.path.exists(SITE_ROOT + '/' + str(self.archivowester)):
            return  self.archivowester.url
        else:
            return  "http://tesoreria.itb.edu.ec/media/"   + str(self.archivowester)

    def facturado(self):
        if RegistroWester.objects.filter(archivo=self, facturado=False).exists():
            pago = RegistroWester.objects.filter(archivo=self).exclude(pago=None).count()
            if pago < 1:
                return True
            else:
                return False
        else:
            return  False

    def elimarregistros(self):
        return  RegistroWester.objects.filter(archivo=self,facturado=True).exists()

    def existeregistrowester(self):
        return  RegistroWester.objects.filter(archivo=self).exists()



class RegistroWester(models.Model):
    archivo = models.ForeignKey(ArchivoWester, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True,null=True)
    hora = models.CharField(max_length=10,blank=True,null=True)
    codigo = models.CharField(max_length=30,blank=True,null=True)
    cedula = models.CharField(max_length=30,blank=True,null=True)
    valor =  models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    cuenta =  models.IntegerField(blank=True,null=True)
    facturado=models.BooleanField(default=False)
    pago= models.ForeignKey(Pago,blank=True,null=True, on_delete=models.CASCADE)
    estado=models.CharField(max_length=30)


    def cuenta_rubro(self):
        return  Rubro.objects.filter(id=self.cuenta)[:1].get()

    def esta_facturado(self):
        if PagoWester.objects.filter(codigo=self.codigo).exclude(factura=None).exists():
            return  PagoWester.objects.filter(codigo=self.codigo).exclude(factura=None)[:1].get()
        return  False

    def subido(self):
        return  PagoWester.objects.filter(codigo=self.codigo)[:1].get()

    def __str__(self):
        return (self.codigo)


class PromedioNotasGrado(models.Model):
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    activo = models.BooleanField(default=True)
    vial = models.BooleanField(default=False)
    practica = models.BooleanField(default=False)

    class Meta():
        verbose_name = "Promedio Nota de Grado"
        verbose_name_plural = "Promedios Notas de Grado"

class ConvenioUsuario(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    convenio = models.ForeignKey(ConvenioAcademico, on_delete=models.CASCADE)

    class Meta():
        verbose_name = "Usuario Convenio Academico"
        verbose_name_plural = "Usuarios Convenios Academicos"

class PersonaConduccion(models.Model):
    identificacion = models.CharField(max_length=30)
    nombres = models.CharField(max_length=300)
    categorialicencia = models.ForeignKey(CategoriaVehiculo,blank=True,null=True, on_delete=models.CASCADE)
    telefono = models.CharField(max_length=30,blank=True,null=True)
    email = models.CharField(max_length=30,blank=True,null=True)
    chofer = models.BooleanField(default=False)
    licencia = models.FileField(upload_to='licencia/%Y/%m/%d', max_length=200,blank=True,null=True)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombres: self.nombres = self.nombres.upper()
        super(PersonaConduccion, self).save(force_insert, force_update, using, update_fields)

    def __str__(self):
        return  self.nombres + " (" + (self.identificacion) + ") "

class RegistroVehiculo(models.Model):
    vehiculo = models.ForeignKey(Vehiculo, on_delete=models.CASCADE)
    chofervehiculo = models.ForeignKey(PersonaConduccion,related_name="chofervehiculo", verbose_name="chofervehiculo", on_delete=models.CASCADE)
    solicitante = models.ForeignKey(Group,related_name="solicitante", verbose_name="solicitante", on_delete=models.CASCADE)
    beneficiario = models.ForeignKey(PersonaConduccion,related_name="beneficiario", verbose_name="beneficiario", on_delete=models.CASCADE)
    fsalida = models.DateField(blank=True, null=True)
    hsalida = models.TimeField(blank=True, null=True)
    kmsalida = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    fllegada = models.DateField(blank=True, null=True)
    hllegada = models.TimeField(blank=True, null=True)
    kmllegada = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    origen = models.CharField(max_length=300,blank=True, null=True)
    destino = models.CharField(max_length=300,blank=True, null=True)
    kmconsumido = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    consumocomb = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    costocomb = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    observacion = models.CharField(max_length=500, blank=True, null=True)
    salida = models.FileField(upload_to='licencia/%Y/%m/%d', max_length=200,blank=True, null=True)
    llegada = models.FileField(upload_to='licencia/%Y/%m/%d', max_length=200,blank=True, null=True)

    def __str__(self):
        return str(self.vehiculo)
    def consumo(self):
        return self.kmllegada - self.kmsalida

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.origen: self.origen = self.origen.upper()
        if self.destino: self.destino = self.destino.upper()
        if self.observacion: self.observacion = self.observacion.upper()
        super(RegistroVehiculo, self).save(force_insert, force_update, using, update_fields)

class DepartamentoGroup(models.Model):
    departamento = models.ForeignKey(Departamento, on_delete=models.CASCADE)
    group = models.ForeignKey(Group,blank=True,null=True, on_delete=models.CASCADE)
    tipoincidencia = models.ForeignKey(TipoIncidencia, limit_choices_to={'tipocorreo':False} ,blank=True,null=True, on_delete=models.CASCADE)
    claseincide = models.BooleanField(default=False)
    correo = models.CharField(max_length=100,blank=True,null=True)

    def __str__(self):
        if not self.claseincide:
            return  str(self.departamento)+ " - Grupo - " + str(self.group)
        else:
            return  str(self.departamento)+ " - Grupo - " + str(self.group)+ " - TipoInc - " + str(self.tipoincidencia)


class RequerimientoDepart(models.Model):
    novedad = models.CharField(max_length=1200,null=True,blank=True)
    departamento = models.ForeignKey(Departamento,null=True,blank=True, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona,null=True,blank=True, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=1200,null=True,blank=True)
    fechaingre = models.DateTimeField(blank=True, null=True)
    finalizado = models.BooleanField(default=False)
    fechafinal = models.DateTimeField(blank=True, null=True)
    archivo = models.FileField(upload_to='requerimiento/%Y/%m/%d', max_length=200)
    archivofin = models.FileField(upload_to='requerimiento/%Y/%m/%d', max_length=200)

    def exist_detalle(self):
        return DetalleRequerimiento.objects.filter(requerimiento=self)

    def email_requerimiento(self,opc,request,client_address):
        email=''
        hoy = datetime.now()
        if opc == "add":
            groups = self.persona.usuario.groups.filter()
            for departamentogroup in DepartamentoGroup.objects.filter(departamento=self.departamento,claseincide=False):
                if email:
                    email = email+','+departamentogroup.correo
                else:
                    email = departamentogroup.correo

            contenido = u"Requerimiento Departamental"
        else:

            groupsid = DepartamentoGroup.objects.filter(departamento=self.departamento,claseincide=False).distinct("group").values("group")
            groups = Group.objects.filter(id__in=groupsid)
            correo = []
            for modulogrup in ModuloGrupo.objects.filter(grupos__id__in=self.persona.usuario.groups.filter().values("id")) :
                if not modulogrup.correo in correo:
                    correo.append(modulogrup.correo)
                    if email:
                        email = email+','+modulogrup.correo
                    else:
                        email = modulogrup.correo


            contenido = u"Finalización de Requerimiento"
        send_html_mail(contenido,
                       "emails/email_requerimientodept.html", {'a': self, 'fecha': hoy,'contenido': contenido, 'groups':groups,'user':request.user,'ip':client_address},email.split(","))

    def __str__(self):
        return  str(self.departamento)

class DetalleRequerimiento(models.Model):
    requerimiento = models.ForeignKey(RequerimientoDepart, on_delete=models.CASCADE)
    preguntadepart = models.CharField(max_length=1200,null=True,blank=True)
    respuestarequer = models.CharField(max_length=1200,null=True,blank=True)
    fechapreg = models.DateTimeField(blank=True, null=True)
    fechares = models.DateTimeField(blank=True, null=True)

    def email_detrequerimiento(self,opc,request,client_address):
        email=''

        hoy = datetime.now()
        if opc == "consult":
            groupsid = DepartamentoGroup.objects.filter(departamento=self.requerimiento.departamento,claseincide=False).distinct("group").values("group")
            groups = Group.objects.filter(id__in=groupsid)
            correo = []
            for modulogrup in ModuloGrupo.objects.filter(grupos__id__in=self.requerimiento.persona.usuario.groups.filter().values("id")) :
                if not modulogrup.correo in correo:
                    correo.append(modulogrup.correo)
                    if email:
                        email = email+','+modulogrup.correo
                    else:
                        email = modulogrup.correo
            contenido = u"Consulta a Departamento"
        else:
            groups = self.requerimiento.persona.usuario.groups.filter()
            for departamentogroup in DepartamentoGroup.objects.filter(departamento=self.requerimiento.departamento,claseincide=False):
                if email:
                    email = email + ',' + departamentogroup.correo
                else:
                    email = departamentogroup.correo
            contenido = u"Respuesta del Departamento"

        send_html_mail(contenido,
                       "emails/email_detrequerimiento.html", {'a': self, 'fecha': hoy,'contenido': contenido, 'groups':groups,'user':request.user,'ip':client_address},email.split(","))

class CertificadoEntregado(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    anio = models.IntegerField()
    certificado = models.CharField(max_length=300)
    entregado = models.CharField(max_length=300)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField()

    def __str__(self):
        return  "Certificado " + self.certificado +" "+ str(self.inscripcion)

    class Meta:
        verbose_name = "Certificado Entregado"
        verbose_name_plural = "Certificados Entregados"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.certificado: self.certificado = self.certificado.upper()
        if self.entregado: self.entregado = self.entregado.upper()
        super(CertificadoEntregado, self).save(force_insert, force_update, using, update_fields)

class IndicEvaluacionExamen(models.Model):
    descripcion = models.CharField(max_length=500,blank=True,null=True)
    escala = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    teorico = models.BooleanField(default=False)
    estado = models.BooleanField(default=True)
    prioridad = models.IntegerField(blank=True,null=True)
    coordinacion = models.ForeignKey(Coordinacion, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera,blank=True,null=True, on_delete=models.CASCADE)

    # def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
    #     if self.descripcion: self.descripcion = self.descripcion.upper()
    #     super(IndicEvaluacionExamen, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Indicador Evaluacion Examen"
        verbose_name_plural = "Indicadores de Evaluacion de Examen"

class NotasComplexivoDet(models.Model): #para uso de FAECAC y FATV
    notascomplexivo = models.ForeignKey(NotasComplexivo, on_delete=models.CASCADE)
    indiceevaluacion = models.ForeignKey(IndicEvaluacionExamen, on_delete=models.CASCADE)
    calificacion = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'))

    class Meta():
        verbose_name = "Examen Complexivo Practico"
        verbose_name_plural = "Examenes Complexivos Practicos"

    def __str__(self):
        return  str(self.notascomplexivo.egresado) + " ( " + str(self.calificacion) +" )"

class TipoCulminacionEstudio(models.Model):
    nombre  = models.CharField(max_length=300)

    def __str__(self):
        return   self.nombre

    def puede_eliminar(self):
        return  not CarreraTipoCulminacion.objects.filter(tipo=self).exists()

    class Meta:
        verbose_name = "Tipo Culminacion Estudio"
        verbose_name_plural = "Tipos Culminacion Estudio"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        super(TipoCulminacionEstudio, self).save(force_insert, force_update, using, update_fields)

class SolicitudOnline(models.Model):
    nombre = models.CharField(max_length=50)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    html = models.CharField(max_length=50)
    form = models.CharField(max_length=50)
    activo= models.BooleanField(default=True)
    valida_malla=models.BooleanField(default=True)
    libre = models.BooleanField(default=True)


    def __str__(self):
        return   self.nombre

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        super(SolicitudOnline, self).save(force_insert, force_update, using, update_fields)

class SolicitudCarrera(models.Model):
    solicitud = models.ForeignKey(SolicitudOnline, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    activo= models.BooleanField(default=True)

class CarreraTipoCulminacion(models.Model):
    carrera  = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoCulminacionEstudio, on_delete=models.CASCADE)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return  str(self.carrera) + " " + str(self.tipo)

    def puede_eliminarse(self):
        return not SolicitudEstudiante.objects.filter(matricula__nivel__carrera=self.carrera,tipo=self.tipo).exists()

    class Meta:
        verbose_name = "Carrera Tipo Culminacion Estudio"
        verbose_name_plural = "Carreras Tipos Culminacion Estudio"

class CalificacionSolicitudes(models.Model):
    descripcion = models.CharField(max_length=200,blank=True, null=True)
    puntaje = models.IntegerField(default=0,blank=True, null=True)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = "Calificacion de Solicitud"
        verbose_name_plural = "Calificacion de Solicitudes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(CalificacionSolicitudes, self).save(force_insert, force_update, using, update_fields)

class SolicitudEstudiante(models.Model):
    solicitud = models.ForeignKey(SolicitudOnline, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoCulminacionEstudio,related_name='tipo',blank=True,null=True, on_delete=models.CASCADE)
    correo = models.CharField(max_length=120,blank=True,null=True)
    celular = models.CharField(max_length=120,blank=True,null=True)
    oficina = models.CharField(max_length=120,blank=True,null=True)
    domicilio = models.CharField(max_length=120,blank=True,null=True)
    tema =  models.CharField(max_length=120,blank=True,null=True)
    solicitado = models.BooleanField(default=False)
    fecha = models.DateTimeField(blank=True,null=True)
    respuesta = models.CharField(max_length=500,blank=True,null=True)
    aprobado = models.BooleanField(default=False)
    fechares = models.DateTimeField(blank=True,null=True)
    tipoe = models.ForeignKey(TipoEspecieValorada,blank=True,null=True, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=500,blank=True,null=True)
    nuevotipo= models.ForeignKey(TipoCulminacionEstudio,related_name='nuevotipo',blank=True,null=True, on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro,blank=True,null=True, on_delete=models.CASCADE)
    resolucion = models.CharField(max_length=500,blank=True,null=True)
    fecharesol = models.DateTimeField(blank=True,null=True)
    materia = models.ForeignKey(MateriaAsignada,blank=True,null=True, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura,blank=True,null=True, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor,blank=True,null=True, on_delete=models.CASCADE)
    comprobante = models.FileField(upload_to='comprobante/%Y/%m/%d', max_length=200,blank=True,null=True)
    calificacion = models.ForeignKey(CalificacionSolicitudes,blank=True, null=True, on_delete=models.CASCADE)
    obscalificacion = models.CharField(max_length=5000,blank=True, null=True)
    presencial = models.BooleanField(default=False)
    # fechaimpresion = models.DateTimeField(blank=True, null=True)
    # impresioncertificado = models.BooleanField(default=False)
    # numeroimpresion = models.IntegerField(blank=True, null=True)

    def __str__(self):
        return  str(self.solicitud) + " Est. " + str(self.inscripcion.persona)

    def mail_respuesta(self):
        hoy = datetime.now().today()
        send_html_mail("Respuesta de Solicitud Online",
                       "emails/respuesta_solicitud.html", {'o': self, 'fecha': hoy},self.correo.split(","))

    def mail_respuesta_especielibre(self):
        hoy = datetime.now().today()
        lista = str(self.inscripcion.persona.emailinst+','+self.inscripcion.persona.email)
        send_html_mail("Respuesta de Solicitud Online",
                       "emails/respuesta_solicitud_especielibre.html", {'o': self, 'fecha': hoy},lista.split(","))

    def correo_estudiante(self):
        hoy = datetime.now().today()
        send_html_mail("Se ha Generado su Solicitud Online",
                       "emails/solicitud_estudiante.html", {'o': self, 'fecha': hoy},self.correo.split(","))

    def descargar(self):
        return self.comprobante.url

    def especie(self):
        return  RubroEspecieValorada.objects.filter(rubro=self.rubro)[:1].get()

    def es_solicitud(self):
        if SolicitudSecretariaDocente.objects.filter(solicitudestudiante=self).exists():
            return  SolicitudSecretariaDocente.objects.filter(solicitudestudiante=self)[:1].get()
        return False

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.domicilio: self.domicilio = self.domicilio.upper()
        if self.tema: self.tema = self.tema.upper()
        if self.respuesta: self.respuesta = self.respuesta.upper()
        if self.resolucion: self.resolucion = self.resolucion.upper()
        if self.observacion: self.observacion = self.observacion.upper()
        super(SolicitudEstudiante, self).save(force_insert, force_update, using, update_fields)

class SolicitudSecretariaDocente(models.Model):
    fecha = models.DateField()
    hora = models.TimeField()
    persona = models.ForeignKey(Persona, related_name='persona', on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoSolicitudSecretariaDocente, blank=True, null=True, on_delete=models.CASCADE)
    solicitudestudiante = models.ForeignKey(SolicitudEstudiante, blank=True, null=True, on_delete=models.CASCADE)
    descripcion = models.TextField()
    cerrada = models.BooleanField(blank=True, null=True)
    fechacierre = models.DateField(null=True, blank=True)
    observacion = models.CharField(max_length=1055,blank=True,null=True)
    resolucion = models.CharField(max_length=1055,blank=True,null=True)
    usuario = models.ForeignKey(User,related_name='usuario', blank=True, null=True, on_delete=models.CASCADE)
    asignado = models.BooleanField(default=False)
    group = models.ForeignKey(Group, blank=True, null=True, on_delete=models.CASCADE)
    personaasignada = models.ForeignKey(Persona, related_name='personaasignada', null=True, blank=True, on_delete=models.CASCADE)
    fechaasignacion = models.DateTimeField(blank=True, null=True)
    observacionasignada = models.CharField(max_length=1055,blank=True,null=True)
    usuarioasigna = models.ForeignKey(User, related_name='usuarioasigna', blank=True, null=True, on_delete=models.CASCADE)
    comprobante = models.FileField(upload_to='comprobante/%Y/%m/%d', max_length=200,blank=True,null=True)
    ctabanco = models.ForeignKey(CuentaBanco,blank=True,null=True, on_delete=models.CASCADE)
    referencia  = models.CharField(max_length=200,blank=True,null=True)
    departamento = models.ForeignKey(Departamento,null= True, blank =True, on_delete=models.CASCADE)
    autorizado = models.BooleanField(default=False)
    motivoautoriza = models.CharField(max_length=1055, blank=True, null=True)
    asistenteautoriza = models.ForeignKey(AsistenteDepartamento, blank=True, null=True, on_delete=models.CASCADE)
    # autorizado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.persona)+str(self.tipo)+str(self.fecha)+(" pendiente" if not self.cerrada else " cerrada el "+str(self.fechacierre))

    class Meta:
        verbose_name = "Solicitud a Secretaria Docente"
        verbose_name_plural = "Solicitudes a Secretaria Docente"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        self.observacion = self.observacion.strip() if self.observacion else ''
        self.resolucion = self.resolucion.upper().strip() if self.resolucion else ''
        super(SolicitudSecretariaDocente, self).save(force_insert, force_update, using, update_fields)

    def puede_reasignar(self,persona):
        if AsistenteDepartamento.objects.filter(persona__usuario=persona.usuario).exists():
            dptoasi = AsistenteDepartamento.objects.filter(persona__usuario=persona.usuario)[:1].get().departamento
            if AsistenteDepartamento.objects.filter(persona=persona,puedereasignar=True,departamento=dptoasi).exists():
                return True
        return False

    def datosaprobacion(self):
        if DatosTransfereciaDeposito.objects.filter(solicitud=self).exists():
            return DatosTransfereciaDeposito.objects.filter(solicitud=self)[:1].get()
        return False

    def dptoactual(self):
        if self.departamento:
            return  self.departamento.descripcion
        else:
            if AsistenteDepartamento.objects.filter(persona=self.personaasignada).exclude(puedereasignar=True).exists():
                asistentes = AsistenteDepartamento.objects.filter(persona=self.personaasignada).exclude(puedereasignar=True)[:1].get()
                return asistentes.departamento.descripcion
            return ''

    def tiene_horario(self):
        if HorarioAsistenteSolicitudes.objects.filter(fecha=datetime.now().date(),usuario=self.personaasignada.usuario).exists():
            return HorarioAsistenteSolicitudes.objects.filter(fecha=datetime.now().date(),usuario=self.personaasignada.usuario)[:1].get()
        return  False

    def inscripcion(self):
        return Inscripcion.objects.filter(persona=self.persona)[:1].get()

    def descargar(self):
        return self.comprobante.url

    # def mail_subject_nuevo(self):
    #     try:
    #         tituloinst = TituloInstitucion.objects.filter()[:1].get()
    #     except :
    #         tituloinst = None
    #     send_html_mail("Nueva Solicitud a Secretaria Docente",
    #                 "emails/nuevasolicitud.html",
    #                 {'d':self, 'descripcion': plaintext2html(self.descripcion),'t':tituloinst},
    #         SECRETARIA_EMAIL)
    def tienegestion(self):
        return IncidenciaAsignada.objects.filter(solicitusecret=self).exists()

    def ultima_gestion(self):
        return IncidenciaAsignada.objects.filter(solicitusecret=self).order_by('-id')[:1].get()

    def asistenteasignaexiste(self,usuario):
        if IncidenciaAsignada.objects.filter(solicitusecret=self,asistenteasignado__asistente__usuario=usuario).exists():
            return IncidenciaAsignada.objects.filter(solicitusecret=self,asistenteasignado__asistente__usuario=usuario)[:1].get()
        return False

    def asistenteasigna(self):
        if IncidenciaAsignada.objects.filter(solicitusecret=self).exists():
            return IncidenciaAsignada.objects.filter(solicitusecret=self)[:1].get()

    def departamentoasignado(self,user):
        if DepartamentoIncidenciaAsig.objects.filter(incidenciaasignada__solicitusecret=self,incidenciaasignada__asistenteasignado__asistente__usuario=user).exists():
            return DepartamentoIncidenciaAsig.objects.filter(incidenciaasignada__solicitusecret=self,incidenciaasignada__asistenteasignado__asistente__usuario=user)[:1].get()


    def respuestanumero(self,user):
        if ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__solicitusecret=self,departamentoincidenciaasig__atendiendo=True,usuario__id=user).exists():
            return ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__solicitusecret=self,departamentoincidenciaasig__atendiendo=True,usuario__id=user).count()

    def busdepartamento(self):
        return DepartamentoIncidenciaAsig.objects.filter(incidenciaasignada__solicitusecret=self,atendiendo=True)[:1].get()

    def mensajeconsult(self):
        if ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__solicitusecret=self,departamentoincidenciaasig__atendiendo=True,respuestadepart='').exists():
            return ObservacionIncidencia.objects.filter(departamentoincidenciaasig__incidenciaasignada__solicitusecret=self,departamentoincidenciaasig__atendiendo=True,respuestadepart='').count()

    def mail_subject_respuesta(self):
        try:
            tituloinst = TituloInstitucion.objects.filter()[:1].get()
        except :
            tituloinst = None
        send_html_mail("Su solicitud ya fue atendida, por favor pase por Secretaria",
                       "emails/respuestasolicitud.html",
                       {'d':self, 'descripcion': plaintext2html(self.descripcion),'t':tituloinst},self.persona.emails())

    def mail_subject_comentar(self):
        try:
            tituloinst = TituloInstitucion.objects.filter()[:1].get()
        except :
            tituloinst = None
        send_html_mail("Solicitud recibida pero ha sido comentada por la Secretaria Docente",
                       "emails/comentarsolicitud.html",
                       {'d': self, 'descripcion': plaintext2html(self.descripcion), 't':tituloinst},
                       self.persona.emails())

    def email_finalizaincidenc(self):
        email = self.persona.emailinst
        hoy = datetime.now().today()
        personarespon = Persona.objects.filter(usuario=self.usuario)[:1].get()
        send_html_mail("RESPUESTA DEL DEPARTAMENTO ESTUDIANTIL",
                       "emails/email_finalizaincidenc.html", {'contenido': "RESPUESTA DEL DEPARTAMENTO ESTUDIANTIL", 'self': self, 'personarespon': personarespon, 'fecha': hoy},str(email).split(","))

    # def email_finalizasolicitud(self):
    #     email = self.persona.emailinst
    #     hoy = datetime.now().today()
    #     personarespon = Persona.objects.filter(usuario=self.usuario)[:1].get()
    #     send_html_mail("RESPUESTA FINALIZACION DE SOLICITUD",
    #         "emails/email_finalizasolicitud.html", {'contenido': "RESPUESTA FINALIZACION DE SOLICITUD", 'self': self, 'personarespon': personarespon, 'fecha': hoy},str(email).split(","))
    #
    # def email_finalizasolicituddpto(self,correo):
    #     # email = self.persona.emailinst
    #     try:
    #         email = correo
    #         hoy = datetime.now().today()
    #         personarespon = Persona.objects.filter(usuario=self.usuario)[:1].get()
    #
    #         send_html_mail("FINALIZACION DE SOLICITUD",
    #             "emails/correo_finsolicituddpto.html", {'contenido': "FINALIZACION DE SOLICITUD", 'self': self, 'personarespon': personarespon, 'fecha': hoy},email.split(","))
    #     except Exception as ex:
    #         print(ex)

    def comparafecha(self):
        fecha = datetime.combine(self.fecha,self.hora)
        if self.fechacierre:
            fechacierre = datetime.combine(self.fechacierre,self.hora)
            if (fecha + timedelta(hours=24)) < fechacierre:
                return True
        else:
            if (fecha + timedelta(hours=24)) < datetime.now():
                return True
        return False

    def tiempoesperaestudiante(self,fecha,parametro):
        horas_totales=0
        if parametro==1:
            fcierre=datetime.combine(self.fechacierre,self.hora)
            dias_espera = (fcierre-fecha).days
            h_espera=(dias_espera*24)
            segundos_espera = (fcierre-fecha).seconds
            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
            #h_espera2 = int(segundos_espera/3600)
            if dias_espera<0:
                h_espera=0
            horas_totales=h_espera+h_espera2
        elif parametro==2:
            sol_estud=SolicitudEstudiante.objects.filter(pk=self.solicitudestudiante.id)[:1].get()
            dias_espera = (fecha-sol_estud.fecha).days
            h_espera=(dias_espera*24)
            segundos_espera = (fecha-sol_estud.fecha).seconds
            #h_espera2 = int(segundos_espera/3600)
            h_espera2= Decimal(Decimal(segundos_espera).quantize(Decimal(10)**-2)/Decimal(3600).quantize(Decimal(10)**-2)).quantize(Decimal(10)**-2)
            if dias_espera<0:
                h_espera=0
            horas_totales=h_espera+h_espera2
        return horas_totales

    def existe_solicipractica(self):
        if SolicitudPracticas.objects.filter(solicitudsecretaria=self,fecaprobada=None):
            return SolicitudPracticas.objects.filter(solicitudsecretaria=self,fecaprobada=None)[:1].get()
        if SolicitudPracticas.objects.filter(solicitudsecretariaenvi=self,fecfinaliza=None):
            return SolicitudPracticas.objects.filter(solicitudsecretariaenvi=self,fecfinaliza=None)[:1].get()
        return False

class IncidenciaAsignada(models.Model):
    incidenciaadministrativo = models.ForeignKey(IncidenciaAdministrativo,blank=True, null=True, on_delete=models.CASCADE)
    solicituinfo = models.ForeignKey(SolicituInfo,blank=True, null=True, on_delete=models.CASCADE)
    solicitusecret = models.ForeignKey(SolicitudSecretariaDocente,blank=True, null=True, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300,blank=True,null=True)
    asistenteasignado = models.ForeignKey(AsistAsuntoEstudiant, blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True,null=True)
    atendiendo = models.BooleanField(default=False)
    usuario = models.ForeignKey(User, blank=True, null=True, on_delete=models.CASCADE)
    fechaasig=models.DateTimeField(blank=True,null=True)
    asistenteasig = models.ForeignKey(User,related_name ="asistenteasig", verbose_name="asistente", on_delete=models.CASCADE)
    asistentedepartamento = models.ForeignKey(AsistenteDepartamento,blank=True,null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.incidenciaadministrativo) + " Incidencia Asign. "

    class Meta():
        verbose_name = "Incidencia Asignada"
        verbose_name_plural = "Incidencias Asignadas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        super(IncidenciaAsignada, self).save(force_insert,force_update,using, update_fields)

    def email_asistenteasigna(self,opc):
        email = self.asistenteasignado.asistente.emailinst
        hoy = datetime.now().today()
        send_html_mail("INCIDENCIA ASIGNADA",
                       "emails/email_asistenteasigna.html", {'contenido': "INCIDENCIA ASIGNADA", 'self': self, 'tip': opc, 'fecha': hoy, "opcion":"1"},str(email).split(","))

class DepartamentoIncidenciaAsig(models.Model):
    observacion = models.CharField(max_length=300,blank=True,null=True)
    departamento = models.ForeignKey(Group,null=True, on_delete=models.CASCADE)
    incidenciaasignada = models.ForeignKey(IncidenciaAsignada,null=True, on_delete=models.CASCADE)
    atendiendo = models.BooleanField(default=False)
    fecha = models.DateTimeField(blank=True,null=True)

    def __str__(self):
        return str(self.incidenciaasignada.incidenciaadministrativo) + " Departamento Asign. "

    class Meta():
        verbose_name = "Departamento Asignado"
        verbose_name_plural = "Departamentos Asignados"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper().strip() if self.observacion else ''
        super(DepartamentoIncidenciaAsig, self).save(force_insert,force_update,using, update_fields)

    def email_departasigna(self,opc):
        email = GrupoCorreo.objects.filter(grupos=self.departamento)[:1].get()
        hoy = datetime.now().today()
        send_html_mail("INCIDENCIA ASIGNADA",
                       "emails/email_asistenteasigna.html", {'contenido': "INCIDENCIA ASIGNADA", 'self': self, 'tip': opc, 'fecha': hoy, "opcion":"2"},email.correo.split(","))


class ObservacionIncidencia(models.Model):
    observacionasisten = models.CharField(max_length=300,blank=True,null=True)
    respuestadepart = models.CharField(max_length=300,blank=True,null=True)
    departamentoincidenciaasig   = models.ForeignKey(DepartamentoIncidenciaAsig,blank=True,null=True, on_delete=models.CASCADE)
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True,null=True)
    fechaobservacion = models.DateTimeField(blank=True,null=True)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacionasisten = self.observacionasisten.upper().strip() if self.observacionasisten else ''
        self.respuestadepart = self.respuestadepart.upper().strip() if self.respuestadepart else ''
        super(ObservacionIncidencia, self).save(force_insert,force_update,using, update_fields)

    def __str__(self):
        return str(self.departamentoincidenciaasig.incidenciaasignada.incidenciaadministrativo) + " Observacion "

    class Meta():
        verbose_name = "Observacion de Incidencia"
        verbose_name_plural = "Observacion de Incidencias"

    def email_observacionincidencia(self,opc):
        if not self.observacionasisten or (self.fechaobservacion and self.fecha and self.fecha > self.fechaobservacion) :
            email = str(self.departamentoincidenciaasig.incidenciaasignada.asistenteasignado.asistente.emailinst).split(",")
            opcion = "1"

        else:
            email = GrupoCorreo.objects.filter(grupos=self.departamentoincidenciaasig.departamento)[:1].get().correo.split(",")
            opcion = "2"
        hoy = datetime.now().today()
        send_html_mail("SEGUIMIENTO DE INCIDENCIA",
                       "emails/email_observacionincidencia.html", {'contenido': "SEGUIMIENTO DE INCIDENCIA", 'self': self, 'tip': opc, 'fecha': hoy, "opcion":opcion},email)


class BoxEterno(models.Model):
    codigo = models.IntegerField(blank=True,null=True)
    persona_convenio = models.ForeignKey(PersonalConvenio, on_delete=models.CASCADE)
    sexo = models.ForeignKey(Sexo, blank=True, null=True, on_delete=models.CASCADE)
    direccion = models.CharField(max_length= 300,blank=True, null=True)
    telefono = models.CharField(max_length=60)
    fechacita = models.DateField()
    iniciocita = models.TimeField()
    fincita = models.TimeField()
    motivo = models.CharField(max_length = 300)
    campus = models.ForeignKey(Sede, on_delete=models.CASCADE)
    activa = models.BooleanField(default=True)
    check_in = models.BooleanField(default=False)
    fecha_check = models.DateTimeField(blank=True,null=True)
    visitabox = models.ForeignKey(DetalleVisitasBox,blank=True,null=True, on_delete=models.CASCADE)

    def en_hora(self):
        if datetime.now().time() > self.fincita and datetime.now().time() > self.iniciocita:
            return  'VENCIDO'
        elif  datetime.now().time() > self.iniciocita :
            return  'RETRASADO'
        else:
            return ''
    def notificacion(self):
        if TipoIncidencia.objects.filter(pk=43).exists():
            tipo = TipoIncidencia.objects.get(pk=43)
            hoy = datetime.now().today()
            send_html_mail("Notificacion",
                           "emails/consulta_majol.html", {'b': self, 'fecha': hoy},tipo.correo.split(","))


class LibroRevista(models.Model):
    es_libro = models.BooleanField(default=True)
    titulo = models.CharField(max_length=1500)
    codigo = models.CharField(max_length=50)
    num_paginas = models.IntegerField()
    volumen = models.IntegerField()
    num_capitulos = models.IntegerField(blank=True,null=True)
    referencias_bib = models.IntegerField(blank=True,null=True)
    proposito = models.CharField(max_length=500,blank=True,null=True)
    anno_publ = models.CharField(max_length=4)
    pais = models.ForeignKey(Pais,blank=True,null=True, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=1500,blank=True,null=True)
    patrocinador = models.CharField(max_length=300,blank=True,null=True)
    imprenta = models.CharField(max_length=300,blank=True,null=True)
    frecuencia = models.IntegerField(blank=True,null=True)
    electronica = models.BooleanField(default=False)
    impresa = models.BooleanField(default=False)
    indexado = models.BooleanField(default=False)
    bases_index=models.CharField(max_length=1500,blank=True,null=True)
    archivo = models.FileField(upload_to='libros_publicaciones/%Y/%m/%d', max_length=200)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField()

    def autores(self):
        return LibroPersona.objects.filter(libro_revista=self,autor=True)

    def es_autor(self,persona):
        return LibroPersona.objects.filter(libro_revista=self,persona=persona,autor=True)

    def cant_autores(self):
        return LibroPersona.objects.filter(libro_revista=self,autor=True).count() + 1

    def coautores(self):
        return LibroPersona.objects.filter(libro_revista=self,autor=False)

    def cant_coautores(self):
        return LibroPersona.objects.filter(libro_revista=self,autor=False).count() + 1

    def __str__(self):
        return  self.titulo

    class Meta:
        verbose_name = "Libro y Revista"
        verbose_name_plural = "Libros y Revistas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.titulo = self.titulo.upper() if self.titulo is not None else ''
        self.proposito = self.proposito.upper() if self.proposito is not None else ''
        self.descripcion = self.descripcion.upper() if self.descripcion is not None else ''
        self.patrocinador = self.patrocinador.upper() if self.patrocinador is not None else ''
        self.imprenta = self.imprenta.upper() if self.imprenta is not None else ''
        self.codigo = self.codigo.upper() if self.codigo is not None else ''
        super(LibroRevista, self).save(force_insert, force_update, using, update_fields)


class LibroPersona(models.Model):
    libro_revista=models.ForeignKey(LibroRevista, on_delete=models.CASCADE)
    autor=models.BooleanField(default=True)
    persona = models.ForeignKey(Persona,blank=True,null=True, on_delete=models.CASCADE)
    otros =  models.CharField(max_length=500,blank=True,null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.otros = self.otros.upper() if self.otros is not None else ''
        super(LibroPersona, self).save(force_insert, force_update, using, update_fields)


class ComisionCongreso(models.Model):
    nombre = models.CharField(max_length=500)
    moderador = models.CharField(max_length=300)
    lugar = models.CharField(max_length=300)
    fecha = models.DateField()
    horainicio = models.TimeField()
    horafin = models.TimeField()
    activo= models.BooleanField(default=True)
    ubicacion =  models.CharField(max_length=300,blank=True,null=True)
    imgubicacion =   models.FileField(upload_to='seminario/%Y/%m', max_length=100,null = True,blank=True)

    def __str__(self):
        return   self.nombre + " Dia: " + str(self.fecha)+ " Desde: " + str(self.horainicio)+ " Hasta: " + str(self.horafin)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        if self.ubicacion: self.ubicacion = self.ubicacion.upper()
        super(ComisionCongreso, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Comision Congreso"
        verbose_name_plural = "Comisiones de Congreso"

class TipoPonencia(models.Model):
    nombre = models.CharField(max_length=300)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return   self.nombre

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        super(TipoPonencia, self).save(force_insert, force_update, using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return TipoPonencia.objects.filter(nombre__icontains=q).order_by('nombre')

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

class ModalidadPonencia(models.Model):
    nombre = models.CharField(max_length=500)
    activo= models.BooleanField(default=True)

    def __str__(self):
        return   self.nombre

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        super(ModalidadPonencia, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Modalidad de Ponencia"
        verbose_name_plural = "Modalidades de Ponencias"

class GrupoPonencia(models.Model):
    nombre = models.CharField(max_length=800)
    codigo = models.CharField(max_length=10)
    horainicio = models.TimeField()
    horafin = models.TimeField()
    integrantes = models.IntegerField()
    comision = models.ForeignKey(ComisionCongreso, blank=True, null=True, on_delete=models.CASCADE)
    modalidad = models.ForeignKey(ModalidadPonencia , blank=True, null=True, on_delete=models.CASCADE)
    precio = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    revisadopor = models.CharField(max_length=300)
    activo = models.BooleanField(default=True)
    ubicacion =  models.CharField(max_length=300,blank=True,null=True)
    tipo = models.ForeignKey(TipoPonencia, on_delete=models.CASCADE)
    numero = models.CharField(max_length=10)

    def __str__(self):
        return self.codigo  +" "+ self.nombre

    def esta_disponible(self):
        i = InscripcionGrupoPonencia.objects.filter(grupoponencia=self).count()
        if i < self.integrantes:
            return True
        return  False

    def inscritos(self):
        if InscripcionGrupoPonencia.objects.filter(grupoponencia=self).count() > 0:
            return InscripcionGrupoPonencia.objects.filter(grupoponencia=self).count()
        else:
            return 0

    def esta_matriculado(self,matricula):
        return  InscripcionGrupoPonencia.objects.filter(grupoponencia=self,matricula=matricula).exists()

    def esta_matriculado_id(self,matricula):
        return InscripcionGrupoPonencia.objects.filter(grupoponencia=self,matricula=matricula).values('id').distinct('id')[:1].get()

    def puede_eliminarse(self):
        return  not InscripcionGrupoPonencia.objects.filter(grupoponencia=self).exists()

    class Meta:
        verbose_name = "Grupo de Ponencia"
        verbose_name_plural = "Grupos de Ponencias"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.codigo = self.codigo.upper() if self.codigo is not None else ''
        self.ubicacion = self.ubicacion.upper() if self.ubicacion is not None else ''
        self.revisadopor = self.revisadopor.upper() if self.revisadopor is not None else ''
        super(GrupoPonencia, self).save(force_insert, force_update, using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return GrupoPonencia.objects.filter(Q(codigo__contains=q)|Q(nombre__contains=q)).order_by('nombre')

    def flexbox_repr(self):
        return str(self)

class InscripcionGrupoPonencia(models.Model):
    grupoponencia = models.ForeignKey(GrupoPonencia, on_delete=models.CASCADE)
    autor=models.BooleanField(default=True)
    matricula = models.ForeignKey(Matricula,blank=True,null=True, on_delete=models.CASCADE)
    coautor = models.CharField(max_length=300,blank=True,null=True)
    rubrootro = models.ForeignKey(RubroOtro,blank=True,null=True, on_delete=models.CASCADE)
    institucion = models.CharField(max_length=300)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateField()
    activo=models.BooleanField(default=True)

    def __str__(self):
        return str(self.grupoponencia) + "  " +str(self.matricula)+ "  " +str(self.institucion)

    def puede_eliminarse(self):
        if self.rubrootro:
            return self.rubrootro.rubro.puede_eliminarse()
        return True

    def tiene_deuda(self):
        if self.rubrootro:
            return self.rubrootro.rubro.adeudado()
        return True

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.institucion = self.institucion.upper() if self.institucion is not None else ''
        super(InscripcionGrupoPonencia, self).save(force_insert, force_update, using, update_fields)

class Vendedor(models.Model):
    nombres = models.CharField(max_length=300)
    identificacion = models.CharField(max_length=20,blank=True,null=True)
    extra = models.CharField(max_length=1500,blank=True,null=True)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return self.nombres
    class Meta:
        verbose_name = "Vendedor"
        verbose_name_plural = "Vendedores"

    def save(self, force_insert = False, force_update = False, using = None, update_fields=None):
        self.nombres = self.nombres.upper() if self.nombres is not None else ''
        self.extra = self.extra.upper() if self.extra is not None else ''
        super(Vendedor, self).save(force_insert, force_update, using, update_fields)

class InscripcionVendedor(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    vendedor = models.ForeignKey(Vendedor, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True,null=True)

    class Meta:
        verbose_name = "Vendedor Inscripcion"
        verbose_name_plural = "Vendedores Inscripciones"

    def __str__(self):
        return "Vendedor:"+ str(self.vendedor) +" Inscrip:" + str(self.inscripcion)

    # OCU 23-junio-2016 Registro de Aspirantes
class  TipoRegistroAspirante(models.Model):
    descripcion = models.CharField(max_length=100,blank=True,null=True)

    def __str__(self):
        return self.descripcion

    class Meta():
        verbose_name = "Tipo Registro Aspirante"
        verbose_name_plural = "Tipos de Registros de Aspirantes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(TipoRegistroAspirante, self).save(force_insert,force_update,using, update_fields)

# OCU 29-julio-2016 para Registro de Aspirantes
class  TipoNoRegistroAspirante(models.Model):
    descripcion = models.CharField(max_length=100,blank=True,null=True)

    def __str__(self):
        return self.descripcion

    class Meta():
        verbose_name = "Tipo No Registro Aspirante"
        verbose_name_plural = "Tipos de No Registros de Aspirantes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(TipoNoRegistroAspirante, self).save(force_insert,force_update,using, update_fields)

class InscripcionAspirantes(models.Model):
    nombres = models.CharField(max_length=100)
    apellido1 = models.CharField(max_length=100, verbose_name="1er Apellido")
    apellido2 = models.CharField(max_length=100, verbose_name="2do Apellido", blank=True, null=True)
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    respuesta = models.ForeignKey(OpcionRespuesta, on_delete=models.CASCADE)
    sexo = models.ForeignKey(Sexo, blank=True, null=True, on_delete=models.CASCADE)
    telefono = models.CharField(max_length=50, verbose_name=u"Telefonos Moviles", blank=True, null=True)
    telefono_conv = models.CharField(max_length=50, verbose_name=u"Telefonos Fijos", blank=True, null=True)
    email = models.CharField(max_length=200,blank=True, null=True, verbose_name="Correos Electronicos")
    inscrito = models.BooleanField(default=False)
    inscripcion=models.ForeignKey(Inscripcion , blank=True, null=True, on_delete=models.CASCADE)
    tiporegistro = models.ForeignKey(TipoRegistroAspirante, on_delete=models.CASCADE)
    f_inscripcion = models.DateField(verbose_name=u"Fecha Inscripcion", blank=True, null=True)
    tiponoregistro = models.ForeignKey(TipoNoRegistroAspirante,blank=True, null=True, on_delete=models.CASCADE)
    sesionpractica = models.ForeignKey(SesionPractica,verbose_name = "Seccion Practica", on_delete=models.CASCADE)
    fecha = models.DateField()
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)
    extranjero = models.BooleanField(default=False)
    cedula = models.CharField(max_length=13, verbose_name="Cedula", blank=True, null=True)
    pasaporte = models.CharField(max_length=15, verbose_name=u"Pasaporte", blank=True, null=True)
    vendedor = models.ForeignKey(Vendedor ,verbose_name="Vendedor",blank=True,null=True, on_delete=models.CASCADE)
    activo = models.BooleanField(default=True)
    hora = models.TimeField(blank=True,null=True)
    inscripaspirante = models.ForeignKey(Inscripcion, related_name='aspirante', null=True, blank=True, on_delete=models.CASCADE)
    tieneespecie = models.BooleanField(default=False)
    rubroespecie = models.ForeignKey(RubroEspecieValorada,verbose_name="Rubro Convalidacion+", blank=True , null= True, on_delete=models.CASCADE)
    especieproforma = models.BooleanField(default=False)
    rubroespecieproforma = models.ForeignKey(RubroEspecieValorada,related_name="Especie Proforma+",verbose_name="Proforma", blank=True , null= True, on_delete=models.CASCADE)


    def __str__(self):
        if self.cedula:
            return str(self.apellido1) +" "+ str(self.apellido2) +" "+ str(self.nombres) + " (" + self.cedula + ")"
        return str(self.apellido1)+" "+str(self.apellido2)+" "+str(self.nombres)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombres = self.nombres.upper()  if self.nombres else ''
        self.apellido1 = self.apellido1.upper()  if self.apellido1 else ''
        self.apellido2 = self.apellido2.upper()  if self.apellido2 else ''
        super(InscripcionAspirantes, self).save(force_insert, force_update, using, update_fields)

    def mail_saludoaspirante(self, user):
        if TipoIncidencia.objects.filter(pk=35).exists():
            tipo = TipoIncidencia.objects.get(pk=35)
            hoy = datetime.now().today()
            contenido = u"Bienvenido Aspirante"
            send_html_mail(u"Bienvenido Aspirante",
                           "emails/emailaspirante.html", {'a': self, 'fecha': hoy,'contenido': contenido},self.email.split(","))

    def fueratiempo(self):
        fechaaspirante = self.fecha
        diasespera = (datetime.now().date()- fechaaspirante).days
        return diasespera

    def vencimientoregistro(self):
        fechaaspirante = self.fecha
        vencimiento = (fechaaspirante + timedelta(days=+7))
        return vencimiento

class MensajesEnviado(models.Model):
    nombre = models.CharField(max_length=200)
    celular = models.CharField(max_length=50)
    filtro = models.CharField(max_length=50)
    mensaje = models.CharField(max_length=200)
    nivel = models.ForeignKey(Nivel,null=True,blank=True, on_delete=models.CASCADE)
    periodo = models.ForeignKey(Periodo,null=True,blank=True, on_delete=models.CASCADE)
    grupo = models.ForeignKey(Grupo,null=True,blank=True, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera,null=True,blank=True, on_delete=models.CASCADE)
    fecha = models.DateTimeField(max_length=50)
    user = models.ForeignKey(User,null=True,blank=True, on_delete=models.CASCADE)

    class Meta:
        verbose_name = "Mensaje Enviado"
        verbose_name_plural = "Mensajes Enviados"

FILTROS_MENSAJE = ["DOCENTES", "EGRESADOS", "GRADUADOS", "RETIRADOS", "ADMINISTRATIVOS",
                   "BECADOS", "DESERTORES", "PREINSCRIPCION", "ABSENTISMO", "GRUPO",
                   "NIVEL", "PERIODO", "CARRERA", "MANUAL","ACTAS"]

class PagosCursoITB(models.Model):
    materia = models.ForeignKey(Materia,blank=True,null=True, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=500)
    valor = models.FloatField()
    fechavence = models.DateField()

    def __str__(self):
        return str(self.materia)+" "+ self.nombre +" "+str(self.valor)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(PagosCursoITB, self).save(force_insert, force_update, using, update_fields)

    def puede_eliminar(self):
        return DetallePagosITB.objects.filter(rubrocurso=self).exists()

class DetallePagosITB(models.Model):
    inscripcion = models.ForeignKey(Inscripcion,blank=True,null=True, on_delete=models.CASCADE)
    materia = models.ForeignKey(Materia,blank=True,null=True, on_delete=models.CASCADE)
    rubrocurso  = models.ForeignKey(PagosCursoITB,blank=True,null=True, on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro, blank=True , null= True, on_delete=models.CASCADE)


class EspecieGrupo(models.Model):
    tipoe = models.ForeignKey(TipoEspecieValorada, on_delete=models.CASCADE)
    # carrera = models.ForeignKey(Carrera,blank=True,null=True, on_delete=models.CASCADE)
    departamento = models.ForeignKey(Departamento, on_delete=models.CASCADE)
    todas_carreras = models.BooleanField(default=False)


class TipoDocumentosOficiales(models.Model):
    tipo = models.CharField(max_length=100)

    def __str__(self):
        return self.tipo

    class Meta:
        verbose_name = "Tipo de Documento Vinculacion"
        verbose_name_plural = "Tipos de Documentos de Vinculacion"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.tipo = self.tipo.upper()
        super(TipoDocumentosOficiales, self).save(force_insert, force_update, using, update_fields)

class DocumentosOficialesVinculacion(models.Model):
    tipo = models.ForeignKey(TipoDocumentosOficiales, on_delete=models.CASCADE)
    documento = models.FileField(upload_to='documento/%Y/%m/%d', max_length=200)
    director1 = models.ForeignKey(Profesor, related_name='director1', on_delete=models.CASCADE)
    director2 = models.ForeignKey(Profesor, related_name='director2', null=True, blank=True, on_delete=models.CASCADE)
    fecha = models.DateField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    nombredocumento = models.CharField(max_length=500,blank=True,null=True)
    inicio = models.DateTimeField(blank=True, null=True)
    fin = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return str(self.tipo) + " "+str(self.nombredocumento)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombredocumento = self.nombredocumento.upper()
        super(DocumentosOficialesVinculacion, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Documento Oficial"
        verbose_name_plural = "Documentos Oficiales"

# ////////////////////////////////////////EXAMEN EXTERNO ////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////////////////////////////
class ComponenteExamen(models.Model):
    descripcion = models.CharField(max_length=500, blank=True, null=True)
    porcentaje = models.IntegerField(blank=True, null=True)
    numpregunt = models.IntegerField(blank=True, null=True)
    activo = models.BooleanField(default=True)

    class Meta:
        verbose_name = "Componente Examen"
        verbose_name_plural = "Componentes para Examenes"

    def __str__(self):
        return str(self.descripcion) + " "+str(self.porcentaje)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(ComponenteExamen, self).save(force_insert, force_update, using, update_fields)

class ExamenExterno(models.Model):
    nombreinstitucion = models.CharField(max_length=200, blank=True, null=True)
    titulo = models.CharField(max_length=200, blank=True, null=True)
    subtitulo = models.CharField(max_length=200, blank=True, null=True)
    descripcion = models.CharField(max_length=1000, blank=True, null=True)
    fechainicio = models.DateTimeField(blank=True, null=True)
    fechatermina = models.DateTimeField(blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    tiempo = models.DateTimeField(blank=True, null=True)
    activo = models.BooleanField(default=False)
    test=models.BooleanField(default=False)

    def __str__(self):
        return str(self.titulo)

    class Meta:
        verbose_name = "Examen Externo"
        verbose_name_plural = "Examenes Externos"


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.titulo = self.titulo.upper() if self.titulo else ''
        self.subtitulo = self.subtitulo.upper() if self.subtitulo else ''
        self.descripcion = self.descripcion.upper() if self.descripcion else ''
        super(ExamenExterno, self).save(force_insert, force_update, using, update_fields)

    def numeropregunta(self):
        return PreguntaExterno.objects.filter(examenexterno=self).order_by('-numero')[:1].get().numero + 1

    def exist_personaex(self):
        return PersonaExamenExt.objects.filter(examenexterno=self).exists()
    @staticmethod
    def flexbox_query(q):
        return ExamenExterno.objects.filter(titulo__contains=q)

    def flexbox_repr(self):
        return self.titulo


class PreguntaExterno(models.Model):
    examenexterno = models.ForeignKey(ExamenExterno, on_delete=models.CASCADE)
    componenteexamen = models.ForeignKey(ComponenteExamen,blank=True,null=True, on_delete=models.CASCADE)
    pregunta = models.CharField(max_length=10000,blank=True,null=True)
    imagen = models.FileField(upload_to='examen', max_length=200,blank=True,null=True)
    numero = models.IntegerField(null=True, blank=True)
    puntos = models.DecimalField(max_digits=11, decimal_places=1, default=Decimal('0.0'), blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    activo = models.BooleanField(default=False)

    def respuestaexterno(self):
        return RespuestaExterno.objects.filter(preguntaexterno=self).order_by('?')

    def respuesta(self):
        return RespuestaExterno.objects.filter(preguntaexterno=self).order_by('id')

class RespuestaExterno(models.Model):
    preguntaexterno = models.ForeignKey(PreguntaExterno, on_delete=models.CASCADE)
    respuesta = models.CharField(max_length=300,blank=True,null=True)
    valida = models.BooleanField(default=False)
    imagen = models.FileField(upload_to='examen', max_length=200,blank=True,null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def exist_respuesta(self,personaexamenext):
        if DetalleExamenExt.objects.filter(respuestaexterno=self,personaexamenext__id=personaexamenext).exclude(fecha=None).exists():
            return DetalleExamenExt.objects.filter(respuestaexterno=self,personaexamenext__id=personaexamenext).exclude(fecha=None)[:1].get()
        return False

    def exist_detalleex(self):
        return PersonaExamenExt.objects.filter(examenexterno=self.preguntaexterno.examenexterno).exists()

class PersonaExterna(models.Model):
    nombres = models.CharField(max_length=600)
    numdocumento = models.CharField(max_length=20)
    pasaporte =  models.BooleanField(default=False)
    fecha = models.DateTimeField(blank=True)

    class Meta:
        verbose_name = "Persona Externa"
        verbose_name_plural = "Personas Externas"

    def existe_personaexamen(self):
        return PersonaExamenExt.objects.filter(personaextern=self).exclude(examenexterno=None)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombres = self.nombres.upper()
        super(PersonaExterna, self).save(force_insert, force_update, using, update_fields)

    @staticmethod
    def flexbox_query(q):
        return PersonaExterna.objects.filter(nombres__contains=q)

    def flexbox_repr(self):
        return self.nombres


class PersonaExamenExt(models.Model):
    examenexterno = models.ForeignKey(ExamenExterno,null=True,blank=True , on_delete=models.CASCADE)
    especie = models.ForeignKey(RubroEspecieValorada,null=True,blank=True, on_delete=models.CASCADE)
    personaextern = models.ForeignKey(PersonaExterna,blank=True, null=True, on_delete=models.CASCADE)
    tiempo = models.DateTimeField(blank=True, null=True)
    puntaje = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)
    observacion = models.CharField(max_length=500, blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    comienza = models.DateTimeField(blank=True, null=True)
    fechfinaliza = models.DateTimeField(blank=True, null=True)
    valida = models.BooleanField(default=True)
    finalizado = models.BooleanField(default=False)
    ipmaquina = models.CharField(max_length=100, blank=True, null=True)
    inscripcion = models.ForeignKey(Inscripcion,blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        if self.personaextern:
            return str(self.personaextern.nombres) + " " + str(self.examenexterno)
        else:
            return str(self.inscripcion.persona.nombre_completo()) + " " + str(self.examenexterno)

    def cantidadresp(self):
        if PersonaExamenExt.objects.filter(id=self.id,finalizado=True).exists():
            personaexamenext = PersonaExamenExt.objects.filter(id=self.id,finalizado=True)[:1].get()
            return DetalleExamenExt.objects.filter(personaexamenext=personaexamenext,respuestaexterno__valida=True).exclude(fecha=None).count()

    def detalledesactiva(self):
        if DesactivaExterno.objects.filter(personaexamenext=self).exists():
            return DesactivaExterno.objects.filter(personaexamenext=self)
        return False

    class Meta:
        verbose_name = "Persona Examen Externo"
        verbose_name_plural = "Personas Examenes Externo"



class DetalleExamenExt(models.Model):
    personaexamenext = models.ForeignKey(PersonaExamenExt, on_delete=models.CASCADE)
    respuestaexterno = models.ForeignKey(RespuestaExterno, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)



class DesactivaExterno(models.Model):
    personaexamenext = models.ForeignKey(PersonaExamenExt, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300,blank=True,null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)
    activo = models.BooleanField(default=True)

# /////////////////////////////////////VIDEO SGA///////////////////////////////////////////////////////////////////
class VideoLogin(models.Model):
    descripcion = models.CharField(max_length=500,blank=True,null=True)
    activo = models.BooleanField(default=False)

    class Meta:
        verbose_name = "Video Login"
        verbose_name_plural = "Video Login"

    def __str__(self):
        return self.descripcion
# ////////////////////////////////////////////////////////////////////////////////////////////////////////

def sequenciapostgr(sequence_name):
    cursor = connection.cursor()
    cursor.execute("SELECT nextval(%s)", [sequence_name])
    row = cursor.fetchone()

    # Update the data object's ID with the returned sequence value.
    return row[0]

class RegistroExterno(models.Model):
    nombres = models.CharField(max_length=200)
    apellidos = models.CharField(max_length=200)
    identificacion = models.CharField(max_length=13)
    email = models.CharField(max_length=50)
    fono = models.CharField(max_length=50)
    direccion = models.CharField(max_length=250)
    cuenta = models.ForeignKey(CuentaBanco,blank=True,null=True, on_delete=models.CASCADE)
    tipopago = models.CharField(max_length=50,blank=True,null=True)
    referencia = models.CharField(max_length=50,blank=True,null=True)
    documento = models.CharField(max_length=250,blank=True,null=True)
    valor = models.IntegerField()
    fecha = models.DateField()
    facturado = models.BooleanField(default=False)
    rubro = models.ForeignKey(Rubro,blank=True,null=True, on_delete=models.CASCADE)
    titulo = models.CharField(max_length=300)
    codigo = models.CharField(max_length=300)
    extranjero = models.BooleanField(default=False)

    def __str__(self):
        return (self.identificacion) + " - " + (self.apellidos) + " " +  (self.nombres)


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombres = self.nombres.upper() if self.nombres else ''
        self.apellidos = self.apellidos.upper() if self.apellidos else ''
        self.direccion = self.direccion.upper() if self.direccion else ''
        self.titulo = self.titulo.upper() if self.titulo else ''
        self.codigo = self.codigo.upper() if self.codigo else ''
        self.referencia = self.referencia.upper() if self.referencia else ''
        super(RegistroExterno, self).save(force_insert, force_update, using, update_fields)

class RevisionTutoria(models.Model):
    tutoria = models.ForeignKey(Tutoria, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    observacion = models.CharField(max_length=1500)
    informe = models.FileField(upload_to='archivotesis/%Y/%m/%d', max_length=200,blank=True,null=True)
    finalizado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.tutoria)

    def notificacion(self):
        hoy = datetime.now().today()
        contenido = u"Descargar el informe  en su SGA"
        send_html_mail(u"Revision de Tesis Adicionada",
                       "emails/notificacion_revision.html", {'d': self, 'fecha': hoy,'contenido': contenido},self.tutoria.estudiante.persona.email.split(","))

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper() if self.observacion else ''
        super(RevisionTutoria, self).save(force_insert, force_update, using, update_fields)

class ActaSustentacion(models.Model):
    tutoria = models.ForeignKey(Tutoria, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    fecha_sustentacion = models.DateField()
    nota = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'))
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=1500,blank=True,null=True)
    acta = models.FileField(upload_to='archivotesis/%Y/%m/%d', max_length=200,blank=True,null=True)

    def __str__(self):
        return str(self.tutoria)


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper() if self.observacion else ''
        super(ActaSustentacion, self).save(force_insert, force_update, using, update_fields)

class TipAulaExamen(models.Model):
    tituloexamen = models.ForeignKey(TituloExamenCondu, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoAula, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    activo = models.BooleanField(default=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    class Meta:
        verbose_name = "Tipo Aula Examen"
        verbose_name_plural = "Tipos de laboratorio Examen"

class SolicitudesGrupo(models.Model):
    tiposolic = models.ForeignKey(TipoSolicitudSecretariaDocente, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera,blank=True,null=True, on_delete=models.CASCADE)
    grupo = models.ForeignKey(Group, on_delete=models.CASCADE)
    todas_carreras = models.BooleanField(default=False)

    # def __str__(self):
    #     if self.carrera:
    #         return (self.tiposolic.nombre) + " - " + (self.carrera.nombre) + " - " +  (self.grupo.name)
    #     else:
    #         return (self.tiposolic.nombre) + " - " +  (self.grupo.name)

    # class Meta:
    #     verbose_name = "Solicitud Grupo"
    #     verbose_name_plural = "Solicitudes por Grupos"

class TipoPersonaCongreso(models.Model):
    nombre = models.CharField(max_length=50)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return str(self.nombre)

    class Meta:
        verbose_name = "Tipo Persona Congreso"
        verbose_name_plural = "Tipos de Personas Congreso"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper() if self.nombre else ''
        super(TipoPersonaCongreso, self).save(force_insert, force_update, using, update_fields)

class RequerimientoCongreso(models.Model):
    nombre = models.CharField(max_length=50)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return str(self.nombre)

    class Meta:
        verbose_name = "Tipo Requerimiento Congreso"
        verbose_name_plural = "Tipos de Requerimientos Congreso"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper() if self.nombre else ''
        super(RequerimientoCongreso, self).save(force_insert, force_update, using, update_fields)

class DatosPersonaCongresoIns(models.Model):
    inscripcion = models.ForeignKey(Inscripcion,blank=True,null=True, on_delete=models.CASCADE)
    preinscripcion = models.ForeignKey(PreInscripcion,blank=True,null=True, on_delete=models.CASCADE)
    grupo = models.ForeignKey(Grupo, on_delete=models.CASCADE)
    tipopersona = models.ForeignKey(TipoPersonaCongreso,blank=True,null=True, on_delete=models.CASCADE)
    requerimiento = models.ForeignKey(RequerimientoCongreso,blank=True,null=True, on_delete=models.CASCADE)
    tipodiscapacidad = models.ForeignKey(Discapacidad,blank=True,null=True, on_delete=models.CASCADE)


    def __str__(self):
        return str(self.preinscripcion)


    class Meta:
        verbose_name = "Dato Persona Congreso"
        verbose_name_plural = "Datos de Personas Congreso"


class PagoExternoPedagogia(models.Model):
    inscripcion = models.ForeignKey(Inscripcion,blank=True,null=True, on_delete=models.CASCADE)
    grupo = models.ForeignKey(Grupo, on_delete=models.CASCADE)
    nombresruc = models.CharField(max_length=200)
    documento = models.CharField(max_length=250,blank=True,null=True)
    identificacionruc = models.CharField(max_length=13)
    emailruc = models.CharField(max_length=50)
    fonoruc = models.CharField(max_length=50)
    direccionruc = models.CharField(max_length=250)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    fecha = models.DateField()
    facturado = models.BooleanField(default=False)
    codigo = models.CharField(max_length=300)
    rubro =  models.ForeignKey(Rubro,blank=True,null=True, on_delete=models.CASCADE)


    def __str__(self):
        return (self.identificacionruc) + " " +  (self.nombresruc)


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombresruc = self.nombresruc.upper() if self.nombresruc else ''
        self.direccionruc = self.direccionruc.upper() if self.direccionruc else ''
        self.codigo = self.codigo.upper() if self.codigo else ''
        super(PagoExternoPedagogia, self).save(force_insert, force_update, using, update_fields)

class CarreraConvenio(models.Model):
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    convenio = models.ForeignKey(Convenio, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.carrera) + " Convenio: " +str(self.convenio)


class ModalidadCarreraConvenio(models.Model):
    carreraconvenio = models.ForeignKey(CarreraConvenio, on_delete=models.CASCADE)
    modalidad = models.ForeignKey(Modalidad, on_delete=models.CASCADE)

class Clasificacion(models.Model):
    nombre = models.CharField(max_length=500)

    def __str__(self):
        return str(self.nombre)

    @staticmethod
    def flexbox_query(q):
        return Clasificacion.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return self.nombre

    class Meta:
        verbose_name = "Clasificacion"
        verbose_name_plural = "Clasificaciones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper() if self.nombre else ''
        super(Clasificacion, self).save(force_insert, force_update, using, update_fields)

class ConvenioClasificacion(models.Model):
    convenio = models.ForeignKey(Convenio, on_delete=models.CASCADE)
    clasificacion = models.ForeignKey(Clasificacion, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.clasificacion) + " Convenio: " +str(self.convenio)


class AprobacionVinculacion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion,blank=True,null=True, on_delete=models.CASCADE)
    revisionestudiante = models.BooleanField(default=False)
    revisionproyecto = models.BooleanField(default=False)
    revisiondocente = models.BooleanField(default=False)
    comentarios = models.CharField(max_length=500)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    estudiantevinculacion= models.ForeignKey(EstudianteVinculacion, blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcion.persona.nombre_completo())

    class Meta:
        verbose_name = "Aprobacion Vinculacion"
        verbose_name_plural = "Aprobaciones de Vinculaciones"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.comentarios = self.comentarios.upper() if self.comentarios else ''
        super(AprobacionVinculacion, self).save(force_insert, force_update, using, update_fields)

    def correo_aprobacionvinculacion(self,user,contenido,estudiantes):
        if TipoIncidencia.objects.filter(pk=INCIDENCIA_PRAC_VINC).exists():
            tipo = TipoIncidencia.objects.get(pk=INCIDENCIA_PRAC_VINC)
            hoy = datetime.now().today()
            contenido = contenido
            send_html_mail(contenido,
                           "emails/practicas_vinculacion.html", {'d': self, 'fecha': hoy,'contenido': contenido, 'usuario': user,'op':'3','estudiantes':estudiantes},tipo.correo.split(","))
    def tiene_aprobacion(self,actividad):
        if AprobacionVinculacion.objects.filter(inscripcion=self.inscripcion,revisionestudiante=True,revisionproyecto=True,revisiondocente=True,estudiantevinculacion__actividad=actividad).exists():
            return True
        else:
            return False

class PagoPymentez(models.Model):
    inscripcion =  models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    factura =  models.ForeignKey(Factura, blank=True, null=True, on_delete=models.CASCADE)
    estado = models.CharField(max_length=50)
    monto = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    codigo_aut = models.CharField(max_length=50, blank=True, null=True)
    referencia_dev =models.CharField(max_length=50, blank=True, null=True)
    idref =models.CharField(max_length=50, blank=True, null=True)
    mensaje = models.CharField(max_length=300, blank=True, null=True)
    fecha_pay = models.CharField(max_length=50, blank=True, null=True)
    detalle_estado = models.CharField(max_length=50, blank=True, null=True)
    referencia_tran =  models.CharField(max_length=50, blank=True, null=True)
    tipo =  models.CharField(max_length=5, blank=True, null=True)
    rubros =  models.CharField(max_length=150, blank=True, null=True)
    correo =  models.CharField(max_length=150, blank=True, null=True)
    nombre =  models.CharField(max_length=100, blank=True, null=True)
    direccion =  models.CharField(max_length=150, blank=True, null=True)
    ruc =  models.CharField(max_length=20, blank=True, null=True)
    telefono = models.CharField(max_length=50, blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    anulado = models.BooleanField(default=False)
    motivo = models.CharField(max_length=300)
    detalle =models.CharField(max_length=300)
    usuarioanula = models.ForeignKey(User,blank=True,null=True, on_delete=models.CASCADE)
    fechatransaccion = models.DateTimeField(blank=True,null=True)
    fechaanula = models.DateTimeField(blank=True,null=True)
    lote =models.CharField(max_length=10,blank=True,null=True)
    disponible = models.BooleanField(default=True)  # Disponible para editar

    def __str__(self):
        return str(self.inscripcion.persona.nombre_completo())

    def en_fecha(self):
        if self.fecha.date() == datetime.now().date():
            return True
        return False

class ArchivoReporteCarrera(models.Model):
    fecharegistro = models.DateTimeField(blank=True,null=True)
    fechaactualiza = models.DateTimeField(blank=True,null=True)
    archivo_matriz= models.FileField(upload_to='gestion/', max_length=200,blank=True,null=True)
    archivo_pendientes= models.FileField(upload_to='gestion/', max_length=200,blank=True,null=True)
    carrera = models.ForeignKey(Carrera,blank=True,null=True, on_delete=models.CASCADE)
    nombhoja= models.CharField(max_length=20,blank=True,null=True)
    fila= models.IntegerField(blank=True,null=True)
    ta1 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    ta2 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    ta3 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tb1 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tb2 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tc1 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tc2 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    td = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    te = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tea1 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tea2 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tea3 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    teb1 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    teb2 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tec1 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tec2 = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    ted = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    tee = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)

    def __str__(self):
        return str(self.carrera)

class PromoGym(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    inicio = models.DateField()
    fin = models.DateField()
    registrada = models.DateField(blank=True,null=True)
    factura = models.ForeignKey(Factura,blank=True,null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcion)

class CalculoTest(models.Model):
    tipotest = models.ForeignKey(TipoTest, on_delete=models.CASCADE)
    valor = models.IntegerField()
    rango1= models.IntegerField()
    rango2= models.IntegerField()
    rango3= models.IntegerField()

class CalculoLocus(models.Model):
    tipotest = models.ForeignKey(TipoTest, on_delete=models.CASCADE)
    pregunta = models.IntegerField()
    interno= models.CharField(max_length=1)
    externo= models.CharField(max_length=1)

class CalculoRasgoEstado(models.Model):
    tipotest = models.ForeignKey(TipoTest, on_delete=models.CASCADE)
    pregunta = models.IntegerField()
    grupo= models.CharField(max_length=1)


class ResultadoRespuesta(models.Model):
    inscripciontipotest = models.ForeignKey(InscripcionTipoTest, on_delete=models.CASCADE)
    tipotest = models.ForeignKey(TipoTest, on_delete=models.CASCADE)
    puntaje = models.IntegerField()

    def persona_test(self):
        ins = Inscripcion.objects.get(id=self.inscripciontipotest.inscripcion_id)
        persona= Persona.objects.get(id=ins.persona_id)
        return persona.nombre_completo_inverso()

    def verificar_resultado_test(self):
        result = 'NO VULNERABLE'
        test=TipoTest.objects.get(id=self.tipotest_id)
        calculotest=CalculoTest.objects.get(tipotest=test)

        if calculotest.id==1:
            puntajetotal = int(self.puntaje)-(calculotest.valor)
            if puntajetotal<=calculotest.rango1 :
                result = 'El SUJETO NO ES VULNERABLE AL ESTRES'
            elif puntajetotal>calculotest.rango1 and puntajetotal<calculotest.rango2:
                result = 'SUJETO ES VULNERABLE AL ESTRES'
            elif puntajetotal>=calculotest.rango2 and puntajetotal<=calculotest.rango3:
                result = 'SERIAMENTE VULNERABLE AL ESTRES'
            else:
                result = 'EXTREMADAMENTE VULNERABLE AL ESTRES'

        elif calculotest.id==2:
            canlocusinterno=0
            canlocusexterno=0

            listaresultado= RespuestaTest.objects.filter(inscripciontipotest=self.inscripciontipotest,tipotest=test.id)
            for a in listaresultado:
                params = ParametroTest.objects.get(id=a.parametrotest_id,estado=True)
                registrolocus= CalculoLocus.objects.get(pregunta=a.preguntatest.orden)
                if params.descripcion==registrolocus.interno:
                    canlocusinterno=int(canlocusinterno)+int(params.puntaje)
                else:
                    canlocusexterno=int(canlocusexterno)+int(params.puntaje)

            if  int(canlocusinterno)>int(canlocusexterno):
                result=['LOCUS DE CONTROL INTERNO',canlocusinterno,canlocusexterno]
            else:
                result=['LOCUS DE CONTROL EXTERNO',canlocusinterno,canlocusexterno]

        elif calculotest.id==3:
            conta=0
            contb=0
            total=0
            listaresultado= RespuestaTest.objects.filter(inscripciontipotest=self.inscripciontipotest,tipotest=test.id)
            for a in listaresultado:
                params = ParametroTest.objects.get(id=a.parametrotest_id,estado=True)
                registrorasgoestado= CalculoRasgoEstado.objects.get(pregunta=a.preguntatest.orden,tipotest=test)
                if registrorasgoestado.grupo=='A':
                    conta=int(conta)+params.puntaje
                else:
                    contb=int(contb)+params.puntaje

            total=int(conta-contb)+calculotest.valor

            if total<=calculotest.rango1:
                result = ['BAJO',conta,contb]
            elif total>calculotest.rango1 and total<=calculotest.rango2:
                result = ['MEDIO',conta,contb]
            else:
                result = ['ALTO',conta,contb]

        elif calculotest.id==4:
            conta=0
            contb=0
            total=0
            listaresultado= RespuestaTest.objects.filter(inscripciontipotest=self.inscripciontipotest,tipotest=test.id)
            for a in listaresultado:
                try:
                    params = ParametroTest.objects.get(id=a.parametrotest_id,estado=True)
                    registrorasgoestado= CalculoRasgoEstado.objects.get(pregunta=a.preguntatest.orden,tipotest=test)
                    if registrorasgoestado.grupo=='A':
                        conta=int(conta)+params.puntaje
                    else:
                        contb=int(contb)+params.puntaje

                except Exception as ex:
                    pass

            total=int(conta-contb)+calculotest.valor

            if total<=calculotest.rango1:
                result = ['BAJO',conta,contb]
            elif total>calculotest.rango1 and total<=calculotest.rango2:
                result = ['MEDIO',conta,contb]
            else:
                result = ['ALTO',conta,contb]

        return result

    def calculo_test_respuesta(self):
        if CalculoTest.objects.filter(tipotest=self.tipotest).exists():
            calculotest=CalculoTest.objects.get(tipotest__id=self.tipotest_id)
            return calculotest.id
        else:
            return 0

class ArchivoTestConduccion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    usuario = models.ForeignKey(User,null=True, on_delete=models.CASCADE)
    informe = models.FileField(upload_to='informeTest/%Y/%m/%d', max_length=200,blank=True,null=True)
    fecharegistro = models.DateTimeField(blank=True,null=True)



#OCastillo 25-07-2019 nueva para proceso de alcance
class MotivoAlcance(models.Model):
    motivo = models.TextField(max_length=200)
    estado = models.BooleanField(default=True)
    fecha = models.DateField()
    usuario = models.ForeignKey(User,verbose_name="Usuario", on_delete=models.CASCADE)

    def __str__(self):
        return str(self.motivo)

    @staticmethod
    def flexbox_query(q):
        return MotivoAlcance.objects.filter(motivo__contains=q)

    def flexbox_repr(self):
        return str(self)


class EvaluacionAlcance(models.Model):
    materiaasignada = models.ForeignKey(MateriaAsignada, on_delete=models.CASCADE)
    n1 = models.IntegerField()
    n2 = models.IntegerField()
    n3 = models.IntegerField()
    n4 = models.IntegerField()
    examen = models.IntegerField()
    recuperacion = models.IntegerField()
    notafinal = models.IntegerField()
    observaciones = models.TextField(max_length=1000, blank=True, null=True)
    estado = models.ForeignKey(TipoEstado, blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateField(null=True, blank=True)
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)
    aprobado = models.BooleanField(default=False) #Coordinador
    usuarioaprueba = models.ForeignKey(User,related_name="Usuario Aprueba+",verbose_name="usuarioaprueba", blank=True, null=True, on_delete=models.CASCADE) #Coordinador
    fechaaprobacion = models.DateField(null=True, blank=True) #Coordinador
    motivo=models.ForeignKey(MotivoAlcance,null=True, blank=True, on_delete=models.CASCADE)
    motivoaprobacion=models.TextField(max_length=1000, blank=True, null=True) #Coordinador
    enviado = models.BooleanField(default=False) #Docente al cambiar las notas y guardar cambios se activa este check
    aprobadoex = models.BooleanField(default=False)
    motivoaprobacionex=models.TextField(max_length=1000, blank=True, null=True)
    usuarioapruebaex = models.ForeignKey(User,related_name="Aprueba Examen+",verbose_name="apruebaexamen", blank=True, null=True, on_delete=models.CASCADE)
    fechaaprobacionex = models.DateField(null=True, blank=True)
    aprobadorec = models.BooleanField(default=False)
    motivoaprobacionrec=models.TextField(max_length=1000, blank=True, null=True)
    usuarioapruebarec = models.ForeignKey(User,related_name="Aprueba Recuperacion+",verbose_name="apruebarecuperacion", blank=True, null=True, on_delete=models.CASCADE)
    fechaaprobacionrec = models.DateField(null=True, blank=True)
    nivelmalla = models.ForeignKey(NivelMalla, blank=True, null=True, on_delete=models.CASCADE)
    eliminado = models.BooleanField(default=False)
    usuarioelimina = models.ForeignKey(User, related_name="Usuario Elimina+", verbose_name="usuarioelimina",blank=True, null=True, on_delete=models.CASCADE)
    fechaelimina = models.DateTimeField(null=True, blank=True)
    # evidencia = models.TextField(max_length=200, blank=True, null=True)
    evidencia = models.FileField(upload_to='alcanceNotas/%Y/%m/%d', max_length=200,blank=True,null=True)
    rubroespecie = models.ForeignKey(RubroEspecieValorada, blank=True, null=True, on_delete=models.CASCADE)

    def actualiza_estado_alcance(self):
        if not self.examen and not self.recuperacion:
            if self.n1 and self.n2 and self.n3 and self.n4:
                if VALIDAR_ASISTENCIAS:
                    if self.nota_parcial_alcance()== 'examen':
                        self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)
                    elif self.nota_parcial_alcance()== 'reprobado':
                        self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
                    elif self.nota_parcial_alcance()== 'noexamen':
                        self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
                    elif self.nota_parcial_alcance()== 'apto':
                        self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)

        elif self.n1 and self.n2 and self.n3 and self.n4 and self.examen and not self.recuperacion:
            if VALIDAR_ASISTENCIAS:
                if self.nota_examen_alcance()== 'aprobado':
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                elif self.nota_examen_alcance()== 'recupera':
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)

        elif self.n1 and self.n2 and self.n3 and self.n4 and self.examen and self.recuperacion:
            if VALIDAR_ASISTENCIAS:
                if self.nota_total_alcance() >= NOTA_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                else:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
        else:
            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_EN_CURSO)
        self.save()

    def nota_total_alcance(self):
        if not self.examen and not self.recuperacion:
            if self.n1 or self.n2 or self.n3 or self.n4:
                self.notafinal= self.n1+self.n2+self.n3+self.n4
                if (self.n1+self.n2+self.n3+self.n4) >= MIN_RECUPERACION  and (self.n1+self.n2+self.n3+self.n4) <= MAX_RECUPERACION:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)
                elif (self.n1+self.n2+self.n3+self.n4) >= MIN_APROBACION :
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_DERECHOEXAMEN)

        elif self.examen and not self.recuperacion:
            self.notafinal= self.n1+self.n2+self.n3+self.n4+self.examen
            if self.examen>=MIN_EXAMEN and (self.n1+self.n2+self.n3+self.n4) >= MIN_APROBACION:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
            elif self.examen>=MIN_EXAMEN and (self.n1+self.n2+self.n3+self.n4) >= MIN_RECUPERACION:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_SUPLETORIO)

        elif self.examen and self.recuperacion:
            if (self.n1+self.n2+self.n3+self.n4+self.examen) >= NOTA_PARA_APROBAR  and self.recuperacion > (self.n1+self.n2+self.n3+self.n4+self.examen):
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                self.notafinal= self.recuperacion

            elif (self.n1+self.n2+self.n3+self.n4+self.examen) >= NOTA_PARA_APROBAR  and self.recuperacion < (self.n1+self.n2+self.n3+self.n4+self.examen):
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                self.notafinal= self.n1+self.n2+self.n3+self.n4+self.examen

            else:
                if self.recuperacion > (self.n1+self.n2+self.n3+self.n4+self.examen) and self.recuperacion>=NOTA_PARA_APROBAR:
                    self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
                    self.notafinal= self.recuperacion
                else:
                    self.notafinal= self.n1+self.n2+self.n3+self.n4+self.examen
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
        elif not self.examen and self.recuperacion:
            self.notafinal= self.recuperacion
            if self.recuperacion >=NOTA_PARA_APROBAR :
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
            else:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
        self.save()
        return self.notafinal

    def nota_parcial_alcance(self):
        if self.n1+self.n2+self.n3+self.n4>=MIN_APROBACION and self.n1+self.n2+self.n3+self.n4<=MAX_APROBACION:
            return 'examen'
        if self.n1+self.n2+self.n3+self.n4<MIN_RECUPERACION:
            return 'reprobado'
        if self.n1+self.n2+self.n3+self.n4<MIN_APROBACION:
            return 'noexamen'
        else:
            return 'apto'

    def nota_examen_alcance(self):
        if self.examen>=MIN_EXAMEN and self.examen<=MAX_EXAMEN:
            if self.n1+self.n2+self.n3+self.n4>=MIN_APROBACION and self.n1+self.n2+self.n3+self.n4<=MAX_APROBACION:
                return 'aprobado'
        else:
            return 'recupera'


    def estado_alcance_aprobacion(self):
        if self.n1 and self.n2 and self.n3 and self.n4 and self.examen and not self.recuperacion:
            if (self.n1+self.n2+self.n3+self.n4+self.examen) >= NOTA_PARA_APROBAR:
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
        elif self.n1 and self.n2 and self.n3 and self.n4 and self.examen and self.recuperacion:
            if (self.n1+self.n2+self.n3+self.n4+self.examen) >= NOTA_PARA_APROBAR and self.recuperacion >= MIN_EXAMENRECUPERACION :
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
            elif self.recuperacion >= NOTA_PARA_APROBAR and self.recuperacion > (self.n1+self.n2+self.n3+self.n4+self.examen):
                self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_APROBADO)
        else:
            self.estado = TipoEstado.objects.get(pk=NOTA_ESTADO_REPROBADO)
        self.save()
        return self.estado

    def email_notaalcance(self,profesor,correo):
        if TipoIncidencia.objects.filter(pk=61).exists():
            tipo = TipoIncidencia.objects.get(pk=61)
            hoy = datetime.now().today()
            correonotificacion=correo+','+tipo.correo
            contenido = 'SE HA INGRESADO NOTA'
            send_html_mail("NOTA DE ALCANCE",
                           "emails/email_notificacionalcance_secretaria.html", {'contenido': "SE HA INGRESADO NOTA DE ALCANCE", 'alcance': self, 'fecha': hoy,'docente':profesor},correonotificacion.split(","))

    def profesor_alcance(self):
        profesor=Persona.objects.filter(usuario=self.usuario,usuario__is_active=True)[:1].get()
        return profesor.nombre_completo_inverso()

    def notasparciales(self):
        if (self.n1+self.n2+self.n3+self.n4) > 0 and self.nivelmalla:
            return  True
        else:
            return False

    def notaexamen(self):
        if (self.examen) > 0 and self.nivelmalla:
            return  True
        else:
            return False

    def notarecuperacion(self):
        if (self.recuperacion) > 0 and self.nivelmalla:
            return  True
        else:
            return False


    def __str__(self):
        return str(self.materiaasignada)+" "+str(self.estado) + " [N1:"+str(self.n1)+", N2:"+str(self.n2)+", N3:"+str(self.n3)+", N4:"+str(self.n4)+", Ex:"+str(self.examen)+"]"

    class Meta:
        verbose_name = "Acta de Alcance"
        verbose_name_plural = "Actas de Alcance"

class ResumenCartera(models.Model):
    programado = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    gestionable = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    dificil =models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    fecha = models.DateField(blank=True,null=True)

    def __str__(self):
        return self.fecha

class EvaluacionAlcanceHistorial(models.Model):
    evaluacionalcance = models.ForeignKey(EvaluacionAlcance, on_delete=models.CASCADE)
    n1 = models.IntegerField(blank=True, null=True)
    n2 = models.IntegerField(blank=True ,null=True)
    n3 = models.IntegerField(blank=True, null=True)
    n4 = models.IntegerField(blank=True, null=True)
    examen = models.IntegerField(blank=True, null=True)
    recuperacion = models.IntegerField(blank=True, null=True)
    notafinal = models.IntegerField(blank=True, null=True)
    estado = models.BooleanField(default=True)
    fecha = models.DateField() #default=datetime.now().date()
    usuario_habilita = models.ForeignKey(User, verbose_name="Usuario Habilita Especie", related_name="Usuario Habilita Especie+", blank=True, null=True, on_delete=models.CASCADE)
    # profesor_actualiza = models.ForeignKey(Profesor, blank=True, null=True, on_delete=models.CASCADE)
    usuario_actualiza = models.ForeignKey(User, verbose_name="Usuario Actualiza Nota", related_name="Usuario Actualiza+", blank=True, null=True, on_delete=models.CASCADE)

    class Meta:
        verbose_name = "Acta de Alcance Historial"
        verbose_name_plural = "Actas de Alcance Historial"

    def __str__(self):
        return str(self.evaluacionalcance.materiaasignada)+" "+str(self.evaluacionalcance.estado) + " [N1:"+str(self.n1)+", N2:"+str(self.n2)+", N3:"+str(self.n3)+", N4:"+str(self.n4)+", Ex:"+str(self.examen)+"]"

class LogAceptacionProfesorMateria(models.Model):
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    fechaceptacion = models.DateTimeField(blank=True,null=True)
    aceptacion = models.BooleanField(default=False)
    tipolog =models.IntegerField()
    profesormateria = models.ForeignKey(ProfesorMateria, on_delete=models.CASCADE)
    oberservacion=models.TextField(max_length=1000,blank=True, null=True)
    motivo=models.TextField(max_length=1000,blank=True, null=True)
    # tipolog 1 .- indica que acepto 2 indica que rechazo

    def __str__(self):
        return str(self.materia) + " " +str(self.profesor)


class LogQuitarAsignacionProfesor(models.Model):
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True,null=True)
    profesormateria = models.ForeignKey(ProfesorMateria, on_delete=models.CASCADE)
    oberservacion=models.TextField(max_length=1000,blank=True, null=True)
    archivo = models.FileField(upload_to='archivo/%Y/%m/%d', max_length=200,blank=True,null=True)
    tipolog =models.IntegerField()
    user = models.ForeignKey(User,blank=True,null=True, on_delete=models.CASCADE)
    fechasuspension= models.DateTimeField(blank=True,null=True)
    # tipolog 3 .- indica suspendido 4 indica no suspendido

    def __str__(self):
        return str(self.materia) + " " +str(self.profesor)



class CoordinacionDepartamento(models.Model):
    departamento = models.ForeignKey(Departamento, on_delete=models.CASCADE)
    coordinacion = models.ForeignKey(Coordinacion, on_delete=models.CASCADE)

    def __str__(self):
        return  str(self.coordinacion)



class TipoMultaDocente(models.Model):
    nombre = models.CharField(max_length=100)
    valor = models.FloatField()
    estado = models.BooleanField(default=True)

    def __str__(self):
        return str(self.nombre)+" "+str(self.valor)+" "+str(self.estado)

    class Meta:
        verbose_name = "Tipo de Multa al Docente"
        verbose_name_plural = "Tipos de Multas a los Docentes"
        ordering = ['nombre']

class MultaDocenteMateria(models.Model):
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    tipomulta = models.ForeignKey(TipoMultaDocente, on_delete=models.CASCADE)
    fechadesde = models.DateTimeField(blank=True, null=True)
    fechahasta = models.DateTimeField(blank=True, null=True)
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)
    aprobado = models.BooleanField(default=True)
    usuarioaprobacion = models.ForeignKey(User,related_name="Aprueba Descuento+",verbose_name="apruebadescuento", blank=True, null=True, on_delete=models.CASCADE)
    fechaaprobacion = models.DateField(null=True, blank=True)
    activo = models.BooleanField(default=True)

    def __str__(self):
        if self.fechadesde and self.fechahasta:
            return str(self.materia)+" "+str(self.profesor)+" "+str(self.tipomulta)+" "+str(self.fechadesde)+" "+str(self.fechahasta)+" "+str(self.activo)
        else:
            return str(self.materia)+" "+str(self.profesor)+" "+str(self.tipomulta)+" "+str(self.activo)

    class Meta:
        verbose_name = "Multa Docente por Materia"
        verbose_name_plural = "Multas a Docentes por Materias"
        ordering = ['materia']

    def dentro_del_rol(self):
        rol = RolPago.objects.all().order_by('-id')[:1].get()
        print(rol)
        # if self.filter(fechahasta__lte=rol.fin, fechadesde__gte=rol.inicio).exists():
        if self.fechadesde.date() >= rol.inicio and self.fechahasta.date() <= rol.fin:
            return True
        else:
            return False

class SeguimientoEspecie(models.Model):
    rubroespecie = models.ForeignKey(RubroEspecieValorada, on_delete=models.CASCADE)
    fechaasig=models.DateTimeField(blank=True,null=True)
    observacion = models.CharField(max_length=500)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    asistente = models.ForeignKey(User,related_name ="asistente", verbose_name="asistente", on_delete=models.CASCADE)
    asistentedepartamento = models.ForeignKey(AsistenteDepartamento,blank=True,null=True, on_delete=models.CASCADE)
    fecha = models.DateField()
    hora = models.TimeField()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper()
        super(SeguimientoEspecie, self).save(force_insert, force_update, using, update_fields)

    def departamento(self):
        dep=''
        for a in AsistenteDepartamento.objects.filter(persona__usuario=self.usuario):
            dep = dep + a.departamento.descripcion + ' , '
        return  dep

class EntregaUniformeMunicipo(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=500)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateField()

    def __str__(self):
        return str(self.inscripcion) + ' -  ' + (self.observacion) + " Fecha: "+str(self.fecha)

class NotificacionError(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    mensaje = models.CharField(max_length=1500)
    contenido = models.CharField(max_length=1500)
    leido = models.BooleanField(default=False)
    fecha = models.DateTimeField()

    def __str__(self):
        return (self.mensaje)

# //////////////////////////////////////LLAMADAS A VIEW DE LA BASE DE DATO ////////////////////////////////////////////////
class ViewEstudiantEmpleo(models.Model):
    inscrpid = models.IntegerField(blank=True, null=True)
    nombres = models.CharField(max_length=500, null=True)
    apellido1 = models.CharField(max_length=500, null=True)
    apellido2 = models.CharField(max_length=500, null=True)
    cedula = models.CharField(max_length=500, null=True)
    pasaporte = models.CharField(max_length=500, null=True)
    emailinst = models.CharField(max_length=500, null=True)
    email = models.CharField(max_length=500, null=True)
    direccion = models.CharField(max_length=500, null=True)
    direccion2 = models.CharField(max_length=500, null=True)
    telefono = models.CharField(max_length=500, null=True)
    telefono_conv = models.CharField(max_length=500, null=True)
    sexo = models.CharField(max_length=500, null=True)
    cantonresid_id = models.IntegerField(blank=True, null=True)
    canton = models.CharField(max_length=500, null=True)
    parroquia = models.CharField(max_length=500, null=True)
    parroquia_id = models.IntegerField(blank=True, null=True)
    carrera_id = models.IntegerField(blank=True, null=True)
    carreranom = models.CharField(max_length=500, null=True)
    carrera = models.BooleanField(default=False)
    tienediscapacidad = models.BooleanField(default=False)
    colegio = models.CharField(max_length=500, null=True)
    estcolegio_id = models.IntegerField(blank=True, null=True)
    online = models.BooleanField(default=False)
    graduado = models.BooleanField(default=False)
    fechanacimiento = models.DateField(blank=True, null=True)
    fechaestudio = models.DateField(blank=True, null=True)
    estadocivil = models.CharField(max_length=500, null=True)
    idcarrera = models.IntegerField(blank=True, null=True)


    class Meta:
        managed = False
        db_table = 'view_estudiantempleo'

class ViewFacturaNotacredito(models.Model):
    facturaid = models.IntegerField(blank=True, null=True)
    numero = models.CharField(max_length=300, null=True)
    fecha = models.DateField(blank=True, null=True)
    clientinscr = models.IntegerField(blank=True, null=True)
    sesionid = models.IntegerField(blank=True, null=True)
    estado = models.CharField(max_length=500, null=True)
    dirdocumento = models.CharField(max_length=500, null=True)
    numautorizacion = models.CharField(max_length=500, null=True)
    fechaautorizacion = models.DateField(blank=True, null=True)
    claveacceso = models.CharField(max_length=500, null=True)
    notacredito = models.BooleanField(default=False)
    tipoid = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'view_facturanotacredito'
# //////////////////////////////////////FIN DE LLAMADA ////////////////////////////////////////////////

class ClasesOnline(models.Model):
    profesormateria = models.ForeignKey(ProfesorMateria, on_delete=models.CASCADE)
    fecha = models.DateField()
    url = models.CharField(max_length=500)
    activa = models.BooleanField(default=True)

    def __str__(self):
        return (str(self.profesormateria))

class Jornada(models.Model):
    nombre = models.CharField(max_length=100)

    def __str__(self):
        return (self.nombre)

    def total_pagos_fecha_jornada(self, fecha):
        ids =  SesionJornada.objects.filter(jornada=self).values('sesion')
        if Pago.objects.filter(fecha=fecha,  rubro__inscripcion__sesion__id__in=ids).exists():
            pago =  Pago.objects.filter(fecha=fecha, rubro__inscripcion__sesion__id__in=ids).aggregate(Sum('valor'))['valor__sum']
        else:
            pago = 0
        pagorecibo = self.total_pagosrecibo_fecha(fecha)
        pagonc = self.total_pagosncred_fecha(fecha)
        return  pago- pagorecibo -pagonc

    def total_pagosrecibo_fecha(self, fecha):
        ids =  SesionJornada.objects.filter(jornada=self).values('sesion')
        return PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha=fecha, recibocaja__inscripcion__sesion__id__in=ids).aggregate(Sum('valor'))['valor__sum'] if PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha=fecha, recibocaja__inscripcion__sesion__id__in=ids).exists() else 0

    def total_pagosncred_fecha(self, fecha):
        ids =  SesionJornada.objects.filter(jornada=self).values('sesion')
        return PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha=fecha, notacredito__inscripcion__sesion__id__in=ids).aggregate(Sum('valor'))['valor__sum'] if PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha=fecha, notacredito__inscripcion__sesion__id__in=ids).exists() else 0

    def total_ncpagos_fecha(self, fecha):
        ids =  SesionJornada.objects.filter(jornada=self).values('sesion')
        return NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha=fecha, inscripcion__sesion__id__in=ids).aggregate(Sum('valor'))['valor__sum'] if NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha=fecha, inscripcion__sesion__id__in=ids).exists() else 0

    def total_recibo_fecha(self, fecha):
        ids =  SesionJornada.objects.filter(jornada=self).values('sesion')
        return ReciboCajaInstitucion.objects.filter(sesioncaja__fecha=fecha, inscripcion__sesion__id__in=ids).aggregate(Sum('valorinicial'))['valorinicial__sum'] if ReciboCajaInstitucion.objects.filter(sesioncaja__fecha=fecha, inscripcion__sesion__id__in=ids).exists() else 0

    def total_pagos_rango_fechas_jornada(self, inicio,fin):
        ids =  SesionJornada.objects.filter(jornada=self).values('sesion')
        # return    Pago.objects.filter(fecha__gte=inicio, fecha__lte=fin, rubro__inscripcion__sesion__id__in=ids).aggregate(Sum('valor'))['valor__sum'] if Pago.objects.filter(fecha__gte=inicio, fecha__lte=fin, rubro__inscripcion__sesion__id__in=ids).exists() else 0
        if Pago.objects.filter(sesion__fecha__gte=inicio, sesion__fecha__lte=fin, rubro__inscripcion__sesion__id__in=ids).exists():
            pago =  Pago.objects.filter(fecha__gte=inicio, fecha__lte=fin, rubro__inscripcion__sesion__id__in=ids).aggregate(Sum('valor'))['valor__sum'] if Pago.objects.filter(fecha__gte=inicio, fecha__lte=fin, rubro__inscripcion__sesion__id__in=ids).exists() else 0
        else :
            pago = 0
        pagorecibo = self.total_pagosrecibo_rango_fechas(inicio, fin)
        pagonc = self.total_pagosncred_rango_fechas(inicio, fin)
        return  pago- pagorecibo -pagonc

    def total_pagosrecibo_rango_fechas(self, inicio, fin):
        ids =  SesionJornada.objects.filter(jornada=self).values('sesion')
        return PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin,recibocaja__inscripcion__sesion__id__in=ids).aggregate(Sum('valor'))['valor__sum'] if PagoReciboCajaInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin, recibocaja__inscripcion__sesion__id__in=ids).exists() else 0

    def total_pagosncred_rango_fechas(self, inicio, fin):
        ids =  SesionJornada.objects.filter(jornada=self).values('sesion')
        return PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin,notacredito__inscripcion__sesion__id__in=ids).aggregate(Sum('valor'))['valor__sum'] if PagoNotaCreditoInstitucion.objects.filter(pagos__sesion__fecha__gte=inicio, pagos__sesion__fecha__lte=fin, notacredito__inscripcion__sesion__id__in=ids).exists() else 0

    def total_recibo_rango_fechas(self, inicio, fin):
        ids =  SesionJornada.objects.filter(jornada=self).values('sesion')
        return ReciboCajaInstitucion.objects.filter(sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__sesion__id__in=ids).aggregate(Sum('valorinicial'))['valorinicial__sum'] if ReciboCajaInstitucion.objects.filter(sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__sesion__id__in=ids).exists() else 0

    def total_ncpagos_rango_fechas(self, inicio, fin):
        ids =  SesionJornada.objects.filter(jornada=self).values('sesion')
        return NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__sesion__id__in=ids).aggregate(Sum('valor'))['valor__sum'] if NotaCreditoInstitucion.objects.filter(tipo__id=TIPO_NC_ANULACION,sesioncaja__fecha__gte=inicio, sesioncaja__fecha__lte=fin, inscripcion__sesion__id__in=ids).exists() else 0

    def cantidad_sesiones(self):
        return SesionJornada.objects.filter(jornada=self).count()

    class Meta:
        verbose_name = "Jornada"
        verbose_name_plural = "Jornadas"

class SesionJornada(models.Model):
    jornada = models.ForeignKey(Jornada, on_delete=models.CASCADE)
    sesion = models.ForeignKey(Sesion, on_delete=models.CASCADE)

    def __str__(self):
        return (str(self.jornada) + " " + str(self.sesion))

    class Meta:
        verbose_name = "Sesion Jornada"
        verbose_name_plural = "Sesiones Jornadas"

class DirferidoRubro(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateField()
    rubrosactuales = models.CharField(max_length=300, blank=True, null=True)
    rubrosanteriores = models.CharField(max_length=300, blank=True, null=True)
    # Convenio de pago
    rubroespecie = models.ForeignKey(RubroEspecieValorada, blank=True, null=True, on_delete=models.CASCADE)
    seguimiento = models.ForeignKey(RegistroSeguimiento, blank=True, null=True, on_delete=models.CASCADE)
    aprobado = models.BooleanField(blank=True, null=True) #Aprueba el alumno si desea o no el diferido
    fechaaprobacion = models.DateField(blank=True,null=True)
    totaldiferido = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'))
    num_cuotas = models.IntegerField(blank=True,null=True)
    fechaprimerpago = models.DateField(blank=True,null=True)

    def __str__(self):
        return str(self.inscripcion)

    class Meta:
        verbose_name = "Rubro Diferido"
        verbose_name_plural = "Rubros Diferidos"

    def obtener_rubros_anteriores(self):
        if self.rubrosanteriores:
            return Rubro.objects.filter(id__in=self.rubrosanteriores.split(",")).order_by('fecha')

    def obtener_rubros_actuales(self):
        if self.rubrosactuales:
            return Rubro.objects.filter(id__in=self.rubrosactuales.split(",")).order_by('fecha')

    def simular_rubros_actuales(self):
        data = []
        fecha = self.fechaprimerpago
        for x in range(self.num_cuotas):
            data.append(
                {
                    'nombre': 'Diferido Convenio Pago #'+str(x+1),
                    'valor': self.totaldiferido/self.num_cuotas,
                    'fecha_vence': fecha
                }
            )
            fecha = sumar_mes(fecha)
        print(data)
        return data


class PreguntaAsignatura(models.Model):
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    pregunta = models.CharField(max_length=10000,blank=True,null=True)
    imagen = models.FileField(upload_to='examen', max_length=200,blank=True,null=True)
    numero = models.IntegerField(null=True, blank=True)
    puntos = models.DecimalField(max_digits=11, decimal_places=1, default=Decimal('0.0'), blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    activo = models.BooleanField(default=False)

    def __str__(self):
        return 'Asignatura - '+self.asignatura.nombre +' - Pregunta - '+str(self.numero)

    def respuestaexamen(self):
        return PreguntaAsigRespuesta.objects.filter(preguntaasignatura=self).order_by('?')

    def respuesta(self):
        return PreguntaAsigRespuesta.objects.filter(preguntaasignatura=self).order_by('id')

    def existexamenresp(self):
        return ExamenParRespuesta.objects.filter(preguntaasigrespuesta__preguntaasignatura=self)

class PreguntaAsigRespuesta(models.Model):
    preguntaasignatura = models.ForeignKey(PreguntaAsignatura, on_delete=models.CASCADE)
    respuesta = models.CharField(max_length=300,blank=True,null=True)
    valida = models.BooleanField(default=False)
    imagen = models.FileField(upload_to='examen', max_length=200,blank=True,null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return 'Pregunta - '+str(self.preguntaasignatura.numero)+  ' - R: '+self.respuesta +' - Correcta - '+ 'si' if self.valida else 'no'

    def exist_examparc(self):
        return ExamenParRespuesta.objects.filter(preguntaasigrespuesta__preguntaasignatura=self.preguntaasignatura)

class TituloExamenParcial(models.Model):
    profesormateria = models.ForeignKey(ProfesorMateria, on_delete=models.CASCADE)
    tituloexamen = models.CharField(max_length=200, blank=True, null=True)
    subtituloexamen = models.CharField(max_length=200, blank=True, null=True)
    descripcion = models.CharField(max_length=1000, blank=True, null=True)
    # observacion = models.CharField(max_length=1000, blank=True, null=True)
    # fechainicio = models.DateTimeField(blank=True, null=True)
    # fechatermina = models.DateTimeField(blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    tiempo = models.DateTimeField(blank=True, null=True)
    activo = models.BooleanField(default=False)
    supletorio = models.BooleanField(default=False)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.profesormateria.materia)+ ' - Titulo - '+ self.tituloexamen

    def existexamenparcial(self):
        return ExamenParcial.objects.filter(tituloexamenparcial=self)

    def titmateriaasign(self,idmatricula):
        materiaasignada = MateriaAsignada.objects.filter(materia=self.profesormateria.materia,matricula__id=idmatricula)[:1].get()
        return materiaasignada

    class Meta:
        verbose_name = "Titulo examen parcial"
        verbose_name_plural = "Titulo de examenes parciales"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.tituloexamen = self.tituloexamen.upper() if self.tituloexamen else ''
        self.subtituloexamen = self.subtituloexamen.upper() if self.subtituloexamen else ''
        self.descripcion = self.descripcion.upper() if self.descripcion else ''
        super(TituloExamenParcial, self).save(force_insert, force_update, using, update_fields)



class ExamenParcial(models.Model):
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    tituloexamenparcial = models.ForeignKey(TituloExamenParcial, on_delete=models.CASCADE)
    tiempo = models.DateTimeField(blank=True, null=True)
    puntaje = models.DecimalField(max_digits=11, decimal_places=1 , default=Decimal('0.0'), blank=True, null=True)
    Observacion = models.CharField(max_length=500, blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    valida = models.BooleanField(default=True)
    finalizado = models.BooleanField(default=False)
    ipmaquina = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return str(self.matricula.inscripcion) + " " + str(self.tituloexamenparcial.tituloexamen)

    def cantidadresp(self):
        return ExamenParRespuesta.objects.filter(examenparcial=self,preguntaasigrespuesta__valida=True).exclude(fecha=None).count()

    def cantidadrespincorr(self):
        return ExamenParRespuesta.objects.filter(examenparcial=self,preguntaasigrespuesta__valida=False).exclude(fecha=None).count()

    def cantidadrespsincont(self):
        return ExamenParRespuesta.objects.filter(examenparcial=self,fecha=None).count()

    def cantpregunta(self):
        return ExamenParRespuesta.objects.filter(examenparcial=self).count()

    def detactexaexist(self):
        return DetActivaExamenParc.objects.filter(examenparcial=self)

    class Meta:
        verbose_name = "Examen Parcial"
        verbose_name_plural = "Examenes Parciales"

class ExamenParRespuesta(models.Model):
    examenparcial = models.ForeignKey(ExamenParcial, on_delete=models.CASCADE)
    preguntaasigrespuesta = models.ForeignKey(PreguntaAsigRespuesta, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return str(self.examenparcial.matricula.inscripcion) + " -- Pregunta "+ str(self.preguntaasigrespuesta.preguntaasignatura.numero)+ " -- " + str(self.preguntaasigrespuesta.respuesta)+ " -- " + str(self.preguntaasigrespuesta.valida)

    def preguntarespuesta(self):
        if self.examenparcial.finalizado:
            return PreguntaAsigRespuesta.objects.filter(preguntaasignatura=self.preguntaasigrespuesta.preguntaasignatura)
        return PreguntaAsigRespuesta.objects.filter(preguntaasignatura=self.preguntaasigrespuesta.preguntaasignatura).order_by('?')

class DetActivaExamenParc(models.Model):
    examenparcial = models.ForeignKey(ExamenParcial, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=300,blank=True,null=True)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return self.observacion


class PagoConduccion(models.Model):
    usuario = models.CharField(max_length=50)
    usuarioid = models.CharField(max_length=50)
    nombres =  models.CharField(max_length=200)
    estado = models.CharField(max_length=50,blank=True, null=True)
    monto = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    codigo_aut = models.CharField(max_length=50, blank=True, null=True)
    referencia_dev =models.CharField(max_length=50, blank=True, null=True)
    idref =models.CharField(max_length=50, blank=True, null=True)
    mensaje = models.CharField(max_length=300, blank=True, null=True)
    fecha_pay = models.CharField(max_length=50, blank=True, null=True)
    detalle_estado = models.CharField(max_length=50, blank=True, null=True)
    referencia_tran =  models.CharField(max_length=50, blank=True, null=True)
    tipo =  models.CharField(max_length=5, blank=True, null=True)
    rubros =  models.CharField(max_length=50, blank=True, null=True)
    correo =  models.CharField(max_length=150, blank=True, null=True)
    nombre =  models.CharField(max_length=100, blank=True, null=True)
    direccion =  models.CharField(max_length=1500, blank=True, null=True)
    ruc =  models.CharField(max_length=20, blank=True, null=True)
    telefono = models.CharField(max_length=50, blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    anulado = models.BooleanField(default=False)
    motivo = models.CharField(max_length=300,blank=True, null=True)
    detalle =models.CharField(max_length=300,blank=True, null=True)
    usuarioanula = models.ForeignKey(User,blank=True,null=True, on_delete=models.CASCADE)
    fechatransaccion = models.DateTimeField(blank=True,null=True)
    fechaanula = models.DateTimeField(blank=True,null=True)
    facturado = models.BooleanField(default=False)

    def __str__(self):
        return self.usuario

    def notificacion_pago_online(self,correo,transaccion,autorizacion,valor):

        hoy = datetime.now().today()
        contenido = "SE HA REGISTRADO UN PAGO EN LINEA - CONDUCE "
        send_html_mail("NOTIFICACION DE PAGO ONLINE",
                       "emails/pago_online_conduce.html", {'f': self, 'fecha': hoy,'transaccion':transaccion,'autorizacion':autorizacion,'valor':valor },correo.split(","))

    def notificacion_pago_online_adm(self,transaccion,autorizacion,valor):
        if TipoIncidencia.objects.filter(pk=64).exists():
            tipo = TipoIncidencia.objects.get(pk=64)
            hoy = datetime.now().today()
            contenido = "SE HA REGISTRADO UN PAGO EN LINEA - CONDUCE"
            send_html_mail("NOTIFICACION DE PAGO ONLINE",
                           "emails/pago_online_conduadm.html", {'f': self, 'fecha': hoy,'transaccion':transaccion,'autorizacion':autorizacion,'valor':valor },tipo.correo.split(","))

class PerfilProfesorAsignatura(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True,null=True)
    estado = models.BooleanField(default=False)

    def __str__(self):
        return (str(self.profesor))

    @staticmethod
    def flexbox_query(q):
        return PerfilProfesorAsignatura.objects.filter(profesor__persona__apellido1__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

class ArchivoSoliciAyudaFinanciera(models.Model):
    solicitudbeca = models.ForeignKey(SolicitudBeca, on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='archibeca/%Y/%m', max_length=100,null = True,blank=True)
    fecha = models.DateTimeField(blank=True, null=True)

    class Meta:
        verbose_name = "Archivo Solicitud de Ayuda Financiera"
        verbose_name_plural = "Archivos de Solicitud de Ayuda Financiera"

class ArchivoSoliciAnalisisBeca(models.Model):
    solicitudbeca = models.ForeignKey(SolicitudBeca, on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='archibeca/%Y/%m', max_length=100,null = True,blank=True)
    fecha = models.DateTimeField(blank=True, null=True)

    class Meta:
        verbose_name = "Archivo Solicitud de Beca Analisis"
        verbose_name_plural = "Archivo Solicitud de Beca Analisis"


class TipoGestionBeca(models.Model):
    nombre = models.CharField(max_length= 100)
    estado = models.BooleanField(default = True)

    class Meta():
        verbose_name= "Tipo de Gestion Beca"
        verbose_name_plural = "Tipos de Gestiones Becas"

class HistorialGestionAyudaEconomica(models.Model):
    solicitudbeca = models.ForeignKey(SolicitudBeca, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)
    estado = models.ForeignKey(TipoGestionBeca, blank=True, null=True, on_delete=models.CASCADE)
    usuario = models.ForeignKey(User,blank=True, null=True, on_delete=models.CASCADE)
    aprobado = models.BooleanField(default=False)
    comentariocorreo=models.CharField(max_length=5000,blank=True, null=True)
    archivoanalisis = models.ForeignKey(ArchivoSoliciAyudaFinanciera,blank=True, null=True, on_delete=models.CASCADE)
    archivosubeestudiante = models.ForeignKey(ArchivoSoliciBeca,blank=True, null=True, on_delete=models.CASCADE)
    tipobeca= models.ForeignKey(TipoBeca,blank=True, null=True, on_delete=models.CASCADE)
    motivobeca= models.ForeignKey(MotivoBeca,blank=True, null=True, on_delete=models.CASCADE)
    porcentajebeca = models.FloatField()

    def __str__(self):
        return (str(self.solicitudbeca))


    def nombre_usuario(self):
        return Persona.objects.get(usuario=self.usuario)


class HistorialGestionBeca(models.Model):
    solicitudbeca = models.ForeignKey(SolicitudBeca, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)
    estado = models.ForeignKey(TipoGestionBeca,blank=True, null=True, on_delete=models.CASCADE)
    usuario = models.ForeignKey(User,blank=True, null=True, on_delete=models.CASCADE)
    aprobado = models.BooleanField(default=False)
    comentariocorreo=models.CharField(max_length=5000,blank=True, null=True)
    archivoanalisis = models.ForeignKey(ArchivoSoliciAnalisisBeca,blank=True, null=True, on_delete=models.CASCADE)
    archivosubeestudiante = models.ForeignKey(ArchivoSoliciBeca,blank=True, null=True, on_delete=models.CASCADE)
    tipobeca= models.ForeignKey(TipoBeca,blank=True, null=True, on_delete=models.CASCADE)
    motivobeca= models.ForeignKey(MotivoBeca,blank=True, null=True, on_delete=models.CASCADE)
    puntajerenovacion = models.FloatField()
    porcentajebeca = models.FloatField()


    def __str__(self):
        return (str(self.solicitudbeca))


    def nombre_usuario(self):
        return Persona.objects.get(usuario=self.usuario)


class PersonAutorizaBecaAyuda(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    estado = models.IntegerField(blank=True, null=True)
    personadiscapacidad=models.BooleanField(default=False)
    correo = models.CharField(max_length=300,null=True, blank=True)
    personasecretaria=models.BooleanField(default=False)

    def __str__(self):
        return (str(self.persona))

    class Meta:
        verbose_name = "Persona Autoriza Beca"
        verbose_name_plural = "Personas Autorizan Becas"


class DetalleEliminaMatricula(models.Model):
    eliminadamatriculada = models.ForeignKey(EliminacionMatricula, on_delete=models.CASCADE)
    asignatura = models.ForeignKey(Asignatura, on_delete=models.CASCADE)
    n1 = models.IntegerField()
    n2 = models.IntegerField()
    n3 = models.IntegerField()
    n4 = models.IntegerField()
    examen = models.IntegerField()
    recuperacion = models.IntegerField()
    notafinal = models.IntegerField()
    asistenciafinal = models.IntegerField()
    traspaso = models.BooleanField(default=False, verbose_name="Copia de Notas")
    fecha = models.DateField(null=True, blank=True)
    usuario = models.ForeignKey(User, verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)

    def _unicode_(self):
        return str(self.asignatura) + " " + str(self.traspaso) + " [N1:" + str(self.n1) + ", N2:" + str(self.n2) + ", N3:" + str(self.n3) + ", N4:" + str(self.n4) + ", Ex:" + str(self.examen) + "]"

class ArchivoVerificadoBecaAyuda(models.Model):
    solicitudbeca = models.ForeignKey(SolicitudBeca, on_delete=models.CASCADE)
    archivosubeestudiante = models.ForeignKey(ArchivoSoliciBeca,blank=True, null=True, on_delete=models.CASCADE)
    estado=models.BooleanField(default=False)
    usuario = models.ForeignKey(User,blank=True, null=True, on_delete=models.CASCADE)
    tipoarchivosolicitudbeca = models.ForeignKey(ArchivoSolicitudBeca,blank=True, null=True, on_delete=models.CASCADE)


class TablaDescuentoBeca(models.Model):
    solicitudbeca = models.ForeignKey(SolicitudBeca, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    rubro= models.ForeignKey(Rubro,blank=True,null=True, on_delete=models.CASCADE)
    valorubro=models.FloatField()
    descuento=models.FloatField()
    fecha = models.DateField(blank=True,null=True)
    estado = models.IntegerField(blank=True, null=True)
    usuario = models.ForeignKey(User,blank=True, null=True, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=300,blank=True, null=True, verbose_name="Descripcion Rubro")
    cuota= models.IntegerField(blank=True, null=True)

class AsistenteSoporte(models.Model):
    persona = models.ForeignKey(Persona,limit_choices_to={'usuario__groups__id__in':[SISTEMAS_GROUP_ID,TICS_GROUP_ID]}, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    correo = models.CharField(max_length=300,null=True, blank=True)
    telefono = models.CharField(max_length=300,null=True, blank=True)
    estado = models.BooleanField(default=True)
    programador = models.BooleanField(default=False)

    def __str__(self):
        return str(self.persona)

    def cantrqueri(self,fecha,general):
        if general == 'true':
            if self.programador:
                cant = RespProgramdor.objects.filter(soporte__soporte=self).distinct('requerimiento').values('requerimiento').count()
            else:
                cant = RequerimientoSoporte.objects.filter(soporte__soporte=self).count()
        else:
            if self.programador:
                cant = RespProgramdor.objects.filter(soporte__soporte=self,fecha__year=fecha.split('-')[0],fecha__month=fecha.split('-')[1],fecha__day=fecha.split('-')[2]).distinct('requerimiento').values('requerimiento').count()
            else:
                cant = RequerimientoSoporte.objects.filter(soporte__soporte=self,fecha__year=fecha.split('-')[0],fecha__month=fecha.split('-')[1],fecha__day=fecha.split('-')[2]).count()
        return cant

    def cantrquerisin(self,fecha,general):
        if general == 'true':
            if self.programador:
                idreqpr = RespProgramdor.objects.filter(soporte__soporte=self,finalizado=False).distinct('requerimiento').values('requerimiento')
                cant =  RequerimientoSoporte.objects.filter(finalizado=False,id__in=idreqpr).count()
            else:
                cant = RequerimientoSoporte.objects.filter(soporte__soporte=self,finalizado=False).count()
        else:
            if self.programador:
                idreqpr = RespProgramdor.objects.filter(soporte__soporte=self,finalizado=False,fecha__year=fecha.split('-')[0],fecha__month=fecha.split('-')[1],fecha__day=fecha.split('-')[2]).distinct('requerimiento').values('requerimiento')
                cant =  RequerimientoSoporte.objects.filter(finalizado=False,id__in=idreqpr).count()
            else:
                cant = RequerimientoSoporte.objects.filter(soporte__soporte=self,fecha__year=fecha.split('-')[0],fecha__month=fecha.split('-')[1],fecha__day=fecha.split('-')[2],finalizado=False).count()
        return cant

    def cantrquerifin(self,fecha,general):
        if general == 'true':
            if self.programador:
                idreqpr = RespProgramdor.objects.filter(soporte__soporte=self,finalizado=False).distinct('requerimiento').values('requerimiento')
                idreqprfin = RespProgramdor.objects.filter(soporte__soporte=self,finalizado=True).exclude(requerimiento__id__in=idreqpr).distinct('requerimiento').values('requerimiento')
                cant =  RequerimientoSoporte.objects.filter(Q(finalizado=True,id__in=idreqpr)| Q(id__in=idreqprfin)).count()
            else:
                cant = RequerimientoSoporte.objects.filter(soporte__soporte=self,finalizado=True).count()
        else:
            if self.programador:
                idreqpr = RespProgramdor.objects.filter(soporte__soporte=self,finalizado=False,fecha__year=fecha.split('-')[0],fecha__month=fecha.split('-')[1],fecha__day=fecha.split('-')[2]).distinct('requerimiento').values('requerimiento')
                idreqprfin = RespProgramdor.objects.filter(soporte__soporte=self,finalizado=True,fecha__year=fecha.split('-')[0],fecha__month=fecha.split('-')[1],fecha__day=fecha.split('-')[2]).exclude(requerimiento__id__in=idreqpr).distinct('requerimiento').values('requerimiento')
                cant =  RequerimientoSoporte.objects.filter(Q(finalizado=True,id__in=idreqpr)| Q(id__in=idreqprfin)).count()
            else:
                cant = RequerimientoSoporte.objects.filter(soporte__soporte=self,fecha__year=fecha.split('-')[0],fecha__month=fecha.split('-')[1],fecha__day=fecha.split('-')[2],finalizado=True).count()
        return cant

    def horarioactual(self):
        if HorarioAsistente.objects.filter(fecha=datetime.now().date(),soporte=self).exists():
            horarioasistente = HorarioAsistente.objects.filter(fecha=datetime.now().date(),soporte=self)[:1].get()
            if horarioasistente.nolabora:
                # return 'No Labora'
                return 'No Labora' +' '+str(horarioasistente.horainicio) +' - '+ str(horarioasistente.horafin)
            return str(horarioasistente.horainicio) +' - '+ str(horarioasistente.horafin)
        return 'No tiene Horario'
    def horarioingres(self):
        if HorarioAsistente.objects.filter(fecha=datetime.now().date(),soporte=self).exists():
            horarioasistente = HorarioAsistente.objects.filter(fecha=datetime.now().date(),soporte=self)[:1].get()
            if horarioasistente.nolabora:
                # return ''
                return str(horarioasistente.fechaingreso).split(':')[0]+':'+str(horarioasistente.fechaingreso).split(':')[1]
            return str(horarioasistente.fechaingreso).split(':')[0]+':'+str(horarioasistente.fechaingreso).split(':')[1]
        return ''

    class Meta:
        verbose_name = "Persona de Soporte"
        verbose_name_plural = "Personas de Soportes"

class CalificacionSoporte(models.Model):
    descripcion = models.CharField(max_length=200,blank=True, null=True)
    puntaje = models.IntegerField(default=0,blank=True, null=True)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = "Calificacion de Soporte"
        verbose_name_plural = "Calificacion de Soportes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(CalificacionSoporte, self).save(force_insert, force_update, using, update_fields)

class HorarioAsistente(models.Model):
    sede = models.ForeignKey(Sede, blank=True, null=True, limit_choices_to={'solobodega':False}, on_delete=models.CASCADE)
    soporte = models.ForeignKey(AsistenteSoporte, on_delete=models.CASCADE)
    horainicio = models.TimeField(blank=True, null=True)
    horafin = models.TimeField(blank=True, null=True)
    fecha = models.DateField()
    fechaingreso = models.TimeField(null=True,blank=True)
    user = models.ForeignKey(User,limit_choices_to={'groups__id__in':[SISTEMAS_GROUP_ID,TICS_GROUP_ID]}, on_delete=models.CASCADE)
    nolabora = models.BooleanField(default=False)
    sinatender = models.IntegerField(default=0,blank=True, null=True)
    fechaasigna = models.DateTimeField(null=True)
    programador = models.BooleanField(default=False)

    def __str__(self):
        return str(self.soporte) +' - '+str(self.fecha)

    def requeexiste(self):
        return RequerimientoSoporte.objects.filter(soporte=self)


    def mail_edit_reasg_horario(self):
        if TipoIncidencia.objects.filter(pk=67).exists():
            tipo = TipoIncidencia.objects.get(pk=67)
            hoy = datetime.now().today()
            send_html_mail("HORARIO SOPORTE EDITADO",
                           "emails/correosistema.html", {'contenido': 'Horario de soporte editado','d': self, 'fecha': hoy, 'opc': 1},tipo.correo.split(","))

    class Meta:
        verbose_name = "Horario Asistente"
        verbose_name_plural = "Horarios Asistentes"



class TipoProblema(models.Model):
    descripcion = models.CharField(max_length=200,blank=True, null=True)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = "Tipo de Problema"
        verbose_name_plural = "Tipos de Problemas"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(TipoProblema, self).save(force_insert, force_update, using, update_fields)

class RequerimientoSoporte(models.Model):
    tipoproblema = models.ForeignKey(TipoProblema, blank=True, null=True, on_delete=models.CASCADE)
    sede = models.ForeignKey(Sede, blank=True, null=True, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    soporte = models.ForeignKey(HorarioAsistente,blank=True, null=True, on_delete=models.CASCADE)
    requerimiento = models.CharField(max_length=5000,blank=True, null=True)
    archivo = models.FileField(upload_to='reqsoporte/%Y/%m/%d', max_length=200)
    fecha = models.DateTimeField()
    finalizado = models.BooleanField(default=False)
    calificacion = models.ForeignKey(CalificacionSoporte,blank=True, null=True, on_delete=models.CASCADE)
    desccalificacion = models.CharField(max_length=5000,blank=True, null=True)
    fecharesignacion = models.DateTimeField(blank=True, null=True)
    soporreasig = models.ForeignKey(HorarioAsistente, related_name ="soportreasig", verbose_name="soportreasig", blank=True, null=True, on_delete=models.CASCADE)
    leido=models.BooleanField(default=False)
    def __str__(self):
        return str(self.persona)

    def existereqsolu(self):
        return RequerimSolucion.objects.filter(requerimiento=self)

    def existerespprogr(self):
        return RespProgramdor.objects.filter(requerimiento=self)

    def mail_requerimiento(self):
        if self.soporte:
            tipo=self.soporte.soporte
            hoy = datetime.now().today()
            send_html_mail("Requerimiento de Soporte",
                           "emails/soportetecnico.html", {'contenido': 'Requerimiento de Soporte','d': self, 'fecha': hoy, 'opc': 1},tipo.correo.split(","))

    def mail_edit_reasg_horario(self):
        if TipoIncidencia.objects.filter(pk=67).exists():
            tipo = TipoIncidencia.objects.get(pk=67)
            hoy = datetime.now().today()
            send_html_mail("REASIGNANDO SOPORTE",
                           "emails/correosistema.html", {'contenido': 'Reasinando a soporte','d': self, 'fecha': hoy, 'opc': 2},tipo.correo.split(","))


    class Meta:
        verbose_name = "Requerimiento de Soporte"
        verbose_name_plural = "Requerimientos de Soportes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.requerimiento = self.requerimiento
        if self.desccalificacion:
            self.desccalificacion = self.desccalificacion
        super(RequerimientoSoporte, self).save(force_insert, force_update, using, update_fields)

class RequerimSolucion(models.Model):
    requerimiento = models.ForeignKey(RequerimientoSoporte, on_delete=models.CASCADE)
    solucion = models.CharField(max_length=5000,blank=True, null=True)
    archivo = models.FileField(upload_to='solusoporte/%Y/%m/%d', max_length=200)
    fecha = models.DateTimeField()
    respuesta = models.CharField(max_length=5000,blank=True, null=True)
    archivoresp = models.FileField(upload_to='respsoporte/%Y/%m/%d', max_length=200)
    fecharesp = models.DateTimeField(blank=True, null=True)
    finalizado = models.BooleanField(default=False)
    leido=models.BooleanField(default=False)

    def __str__(self):
        return str(self.requerimiento.soporte)

    def mail_requerimiento(self,mensa,opc):
        tipo = ""
        if opc == 2:
            if self.requerimiento.persona.email:
                tipo = self.requerimiento.persona.email
            if self.requerimiento.persona.email1:
                tipo = tipo +','+self.requerimiento.persona.email1
            if self.requerimiento.persona.email2:
                tipo = tipo +','+self.requerimiento.persona.email2
            if self.requerimiento.persona.emailinst:
                tipo = tipo +','+self.requerimiento.persona.emailinst
        else:
            tipo = tipo +','+self.requerimiento.soporte.soporte.correo
        tipo = tipo + ',ttapia@bolivariano.edu.ec'
        hoy = datetime.now().today()
        send_html_mail(mensa,
                       "emails/soportetecnico.html", {'contenido': mensa,'d': self, 'fecha': hoy, 'opc': opc},tipo.split(","))

    class Meta:
        verbose_name = "Solucion Requerimiento"
        verbose_name_plural = "Solucion a Requerimientos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.solucion = self.solucion
        super(RequerimSolucion, self).save(force_insert, force_update, using, update_fields)


class RespProgramdor(models.Model):
    requerimiento = models.ForeignKey(RequerimientoSoporte, on_delete=models.CASCADE)
    soporte = models.ForeignKey(HorarioAsistente,blank=True, null=True, on_delete=models.CASCADE)
    consulta = models.CharField(max_length=5000,blank=True, null=True)
    respuesta = models.CharField(max_length=5000,blank=True, null=True)
    archivo = models.FileField(upload_to='respprogra/%Y/%m/%d', max_length=200)
    fecha = models.DateTimeField()
    fecharesp = models.DateTimeField(blank=True, null=True)
    finalizado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.requerimiento.soporte)

    def mail_requerimiento(self,cabecera,opc):
        if self.soporte:
            if opc == 4:
                tipo=self.requerimiento.soporte.soporte
            else:
                tipo=self.soporte.soporte
            hoy = datetime.now().today()
            send_html_mail(cabecera,
                           "emails/soportetecnico.html", {'contenido': cabecera,'d': self, 'fecha': hoy, 'opc': opc},tipo.correo.split(","))

    class Meta:
        verbose_name = "Requerimiento Programador"
        verbose_name_plural = "Requerimientos a Programador"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):

        if self.consulta:
            self.consulta = self.consulta
        if self.respuesta:
            self.respuesta = self.respuesta
        super(RespProgramdor, self).save(force_insert, force_update, using, update_fields)


class ArchivoPichincha(models.Model):
    fecha = models.DateField()
    archivo = models.FileField(upload_to='archivopichincha/%Y/%m/%d', max_length=200,blank=True,null=True)
    fecharecaudacion = models.DateField(blank=True,null=True)
    archivorecaudacion = models.FileField(upload_to='archivopichincha/%Y/%m/%d', max_length=200,blank=True,null=True)
    gestionado =  models.BooleanField(default=False)
    fechainicioproceso = models.DateTimeField(blank=True,null=True)
    fechafinproceso = models.DateTimeField(blank=True,null=True)

    def __str__(self):
        return str(self.fecha)

    def tiene_factura(self):
        return RecaudacionPichincha.objects.filter(archivo=self).exclude(factura=None).exists()

    def nombre_archivo(self):
        return os.path.split(self.archivo.name)[1]

    def nombre_archivo_recaudacion(self):
        return os.path.split(self.archivorecaudacion.name)[1]

    def descargar(self):
        if os.path.exists(SITE_ROOT + '/media/archivopichincha/' + str(self.nombre_archivo())):
            return "https://sga.itb.edu.ec/media/archivopichincha/" + str(self.nombre_archivo())
        else:
            return  "https://tesoreria.itb.edu.ec/media/archivopichincha/" + str(self.nombre_archivo())

    def descargarreg(self):
        if os.path.exists(SITE_ROOT + '/media/' + str(self.archivorecaudacion)):
            return  self.archivorecaudacion.url
        else:
            return  "http://tesoreria.itb.edu.ec/media/"   + str(self.archivorecaudacion)

    def facturados(self):
        if  RecaudacionPichincha.objects.filter(archivo=self).exists():
            registrosdelarchivo=RecaudacionPichincha.objects.filter(archivo=self).count()
            registrosfacturados=RecaudacionPichincha.objects.filter(archivo=self).exclude(factura=None).count()
            if registrosdelarchivo!=registrosfacturados:
                return False
            else:
                return True

class RecaudacionPichincha(models.Model):
    archivo = models.ForeignKey(ArchivoPichincha, on_delete=models.CASCADE)
    cuenta = models.ForeignKey(Rubro,null=True,max_length=100, on_delete=models.CASCADE)
    factura = models.ForeignKey(Factura,blank=True,null=True, on_delete=models.CASCADE)
    nombre= models.CharField(blank=True,null=True,max_length=100)
    fecha = models.DateField()
    numeroidentificacion=models.CharField(blank=True,null=True,max_length=20)
    referencia = models.CharField(blank=True,null=True,max_length=300)
    tipopago = models.CharField(blank=True,null=True,max_length=5)
    estadoproceso = models.CharField(blank=True,null=True,max_length=20)
    id_contrato = models.CharField(blank=True,null=True,max_length=6)
    id_sobre = models.CharField(blank=True,null=True,max_length=20)
    id_item = models.CharField(blank=True,null=True,max_length=50)
    paisbancocuenta  = models.CharField(blank=True,null=True,max_length=60)
    eliminado = models.CharField(blank=True,null=True,max_length=2)
    canal = models.CharField(blank=True,null=True,max_length=6)
    medio = models.CharField(blank=True,null=True,max_length=20)
    numerodocumento= models.CharField(blank=True,null=True,max_length=20)
    horario = models.CharField(blank=True,null=True,max_length=2)
    mensaje = models.CharField(blank=True,null=True,max_length=120)
    oficina = models.CharField(blank=True,null=True,max_length=30)
    fechaproceso = models.CharField(blank=True,null=True,max_length=50)
    horaproceso = models.CharField(blank=True,null=True,max_length=50)
    valorprocesado = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    formapago = models.CharField(blank=True,null=True,max_length=5)
    banco  = models.CharField(blank=True,null=True,max_length=20)
    referenciaadicional  = models.CharField(blank=True,null=True,max_length=100)
    secuencialcobro = models.CharField(blank=True,null=True,max_length=20)
    numerocomprobante  = models.CharField(blank=True,null=True,max_length=20)
    numerocuenta  = models.CharField(blank=True,null=True,max_length=68)
    numdocumento  = models.CharField(blank=True,null=True,max_length=20)
    tipocuenta  = models.CharField(blank=True,null=True,max_length=6)
    # numerocuenta  = models.CharField(blank=True,null=True,max_length=68)
    condicionproceso  = models.CharField(blank=True,null=True,max_length=20)
    numerotransaccion = models.CharField(blank=True,null=True,max_length=20)
    numerosri  = models.CharField(blank=True,null=True,max_length=15)
    direccioncliente  = models.CharField(blank=True,null=True,max_length=40)
    numeroautorizacion = models.CharField(blank=True,null=True,max_length=20)
    rubroid = models.IntegerField(blank=True,null=True)

    def __str__(self):
        return str(self.archivo) + " " + str(self.cuenta) + " - " + str(self.valorprocesado)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre:
            self.nombre = self.nombre.upper()
        super(RecaudacionPichincha, self).save(force_insert, force_update, using, update_fields)

class Resolucionbeca(models.Model):
    solicitudbeca = models.ForeignKey(SolicitudBeca, on_delete=models.CASCADE)
    estado=models.BooleanField(default=False)
    fecha = models.DateField(blank=True,null=True)
    fechaprobacion = models.DateField(blank=True,null=True)
    numerosolucion = models.CharField(blank=True,null=True,max_length=2000)

class AbreviaturaTitulo(models.Model):
    abreviatura = models.CharField(max_length=200)
    titulo = models.CharField(max_length=200)

    def __str__(self):
        return str(self.abreviatura)
# //////////////////TUTOR CONGRESO///////////////////
class TutorCongreso(models.Model):
    nivel = models.ForeignKey(Nivel, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    cantidad = models.IntegerField(default=0)
    fecha = models.DateTimeField(blank=True,null=True)
    numasignado = models.IntegerField(default=0,blank=True,null=True)
    fechaasign = models.DateTimeField(blank=True,null=True)

    class Meta:
        verbose_name = "Tutor de Congreso"
        verbose_name_plural = "Tutores de Congresos"

    def __str__(self):
        return str(self.persona.nombre_completo())

class TutorMatricula(models.Model):
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    tutorcongreso = models.ForeignKey(TutorCongreso, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True,null=True)
    tutorcongresoreas = models.ForeignKey(TutorCongreso,related_name ="tutorcongrreas", verbose_name="tutorcongrreas", blank=True, null=True, on_delete=models.CASCADE)
    fechareasig = models.DateTimeField(blank=True,null=True)

    class Meta:
        verbose_name = "Tutor x Matricula"
        verbose_name_plural = "Tutor x Matriculas"

    def __str__(self):
        return str(self.matricula.inscripcion.persona.nombre_completo())

    def existetutorseg(self):
        return TutorCongSeguimiento.objects.filter(tutormatricula=self)

class TipoSeguimiento(models.Model):
    descripcion  = models.CharField(blank=True,null=True,max_length=20)
    activo =  models.BooleanField(default=False)

    class Meta:
        verbose_name = "Tipo de Seguimiento"
        verbose_name_plural = "Tipos de Seguimientos"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(TipoSeguimiento, self).save(force_insert, force_update, using, update_fields)

class TutorCongSeguimiento(models.Model):
    tutormatricula = models.ForeignKey(TutorMatricula, on_delete=models.CASCADE)
    tiposeguimiento = models.ForeignKey(TipoSeguimiento, on_delete=models.CASCADE)
    descripcion  = models.CharField(blank=True,null=True,max_length=1000)
    fecha = models.DateTimeField(blank=True,null=True)

    class Meta:
        verbose_name = "Tutor Seguimiento a Matriculado"
        verbose_name_plural = "Tutor Seguimientos a Matriculados"

class CuponInscripcion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    grupo = models.ForeignKey(Grupo, on_delete=models.CASCADE)
    cupon = models.CharField(max_length=300)
    descripcion = models.CharField(max_length=300)
    cuponalias = models.CharField(max_length=20)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)

    def _unicode_(self):
        return  str(self.inscripcion)

    class Meta:
        verbose_name = "Cupon de Inscripcion a Congreso"
        verbose_name_plural = "Cupones de Inscripciones a Congreso"

class RequerimientoAsistentes(models.Model):
    jefe = models.ForeignKey(Persona, on_delete=models.CASCADE)
    asistente = models.ForeignKey(Persona,related_name ="asistente", verbose_name="asistente", on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True,null=True)

    class Meta:
        verbose_name = "Requerimiento Asistente"
        verbose_name_plural = "Requerimientos Asistentes"


class HorarioAsistenteSolicitudes(models.Model):
    horainicio = models.TimeField(blank=True, null=True)
    horafin = models.TimeField(blank=True, null=True)
    fecha = models.DateField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    nolabora = models.BooleanField(default=False)
    sinatender = models.IntegerField(default=0,blank=True, null=True)
    fechaingreso = models.DateTimeField(null=True)


    def __str__(self):
        return str(self.usuario)


    class Meta:
        verbose_name = "Horario Asistente Solicitudes"
        verbose_name_plural = "Horarios Asistentes Solicitudes"

class DocumentosVinculacionEstudiantes(models.Model):
    archivo = models.FileField(upload_to='archivovinculacion/%Y/%m/%d', max_length=200)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateField()

    def __str__(self):
        return str(self.fecha)

    class Meta:
        verbose_name = "Documento Vinculacion Estudiante"
        verbose_name_plural = "Documentos de Vinculacion para Estudiantes"

    def descargar(self):
        if os.path.exists(SITE_ROOT + '/' + str(self.archivo)):
            return  self.archivo.url

class GestionTramite(models.Model):
    tramite = models.ForeignKey(RubroEspecieValorada, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Persona, on_delete=models.CASCADE)
    respuesta = models.CharField(max_length=1500,blank=True,null=True)
    fechaasignacion = models.DateTimeField(blank=True,null=True)
    fecharespuesta = models.DateTimeField(blank=True,null=True)
    finalizado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.tramite)


    class Meta:
        verbose_name = "Gestion de Tramite Docente"
        verbose_name_plural = "Gestion de Tramites Docentes"

class ViewCrmReferidos(models.Model):
    # prospectoid = models.IntegerField(blank=True, null=True)
    apellido1 = models.CharField(max_length=100, null=True)
    apellido2 = models.CharField(max_length=100, null=True)
    nombres = models.CharField(max_length=100, null=True)
    cedula = models.CharField(max_length=13, null=True)
    seinscribe = models.BooleanField(default=False)
    observacion = models.CharField(max_length=500, null=True)
    fecharegistro = models.DateField(blank=True, null=True)
    estado = models.CharField(max_length=100, null=True)

    class Meta:
        managed = False
        db_table = 'view_crmreferidos'



class TipoPersonaDataBooks(models.Model):
    descripcion=models.CharField(max_length=2000, null=True)
    estado=models.BooleanField(default=True)

class NacionalidadDataBooks(models.Model):
    codigonacinalidad= models.IntegerField(default=0,blank=True, null=True)
    descripcion=models.CharField(max_length=2000, null=True)

class EstadoCivilDataBooks(models.Model):
    codigo= models.IntegerField(default=0,blank=True, null=True)
    descripcion=models.CharField(max_length=2000, null=True)


class ProfesionDataBooks(models.Model):
    codigo= models.CharField(max_length=500,blank=True, null=True)
    descripcion=models.CharField(max_length=2000, null=True)

class DivisionDataBooks(models.Model):
    codigo= models.CharField(max_length=500,blank=True, null=True)
    descripcion=models.CharField(max_length=2000, null=True)
    tipodivsion=models.CharField(max_length=2000, null=True)
    codigotipodivision=models.CharField(max_length=50, null=True)

class ActividadDataBooks(models.Model):
    codigo= models.CharField(max_length=500,blank=True, null=True)
    descripcion=models.CharField(max_length=5000, null=True)
    utimonodo=models.CharField(max_length=2000, null=True)
    codigopadre=models.CharField(max_length=500, null=True)
    nivel=models.IntegerField(default=0,blank=True, null=True)

class DemograficoDataBooks(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    nut= models.CharField(max_length=13,blank=True, null=True)
    nombre=models.CharField(max_length=500, null=True)
    sexo=models.ForeignKey(Sexo, on_delete=models.CASCADE)
    fecha1= models.CharField(max_length=50,blank=True, null=True)
    fecha2= models.CharField(max_length=50,blank=True, null=True)
    fecha3= models.CharField(max_length=50,blank=True, null=True)
    profesion = models.ForeignKey(ProfesionDataBooks, on_delete=models.CASCADE)
    tipopersona=models.ForeignKey(TipoPersonaDataBooks, on_delete=models.CASCADE)
    estadocivil=models.ForeignKey(EstadoCivilDataBooks, on_delete=models.CASCADE)
    nacionaidad=models.ForeignKey(NacionalidadDataBooks, on_delete=models.CASCADE)




class RelacionDependenciaDataBooks(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    ruc= models.CharField(max_length=13,blank=True, null=True)
    nombre= models.CharField(max_length=2000,blank=True, null=True)
    direccion= models.CharField(max_length=2000,blank=True, null=True)
    descripcion= models.CharField(max_length=2000,blank=True, null=True)
    telefono= models.CharField(max_length=50,blank=True, null=True)
    actividad= models.CharField(max_length=2000,blank=True, null=True)
    provincia=models.ForeignKey(DivisionDataBooks,blank=True, null=True, on_delete=models.CASCADE)
    canton=models.ForeignKey(DivisionDataBooks,related_name='canton',blank=True, null=True, on_delete=models.CASCADE)
    parroquia=models.ForeignKey(DivisionDataBooks,related_name='parroquia',blank=True, null=True, on_delete=models.CASCADE)
    rango1=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True, null=True)
    rango2=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'))
    rango3=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'))
    rango4=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'))
    fecha4= models.CharField(max_length=50,blank=True, null=True)
    fecha5= models.CharField(max_length=50,blank=True, null=True)
    ocupacion=models.CharField(max_length=2000,blank=True, null=True)
    tipopersona=models.ForeignKey(TipoPersonaDataBooks, on_delete=models.CASCADE)

class RelacionInDependenciaDataBooks(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    ruc= models.CharField(max_length=13,blank=True, null=True)
    razon= models.CharField(max_length=2000,blank=True, null=True)
    fantasia= models.CharField(max_length=2000,blank=True, null=True)
    inicio= models.CharField(max_length=50,blank=True, null=True)
    cancelacion= models.CharField(max_length=2000,blank=True, null=True)
    suspencion= models.CharField(max_length=2000,blank=True, null=True)
    reinicio= models.CharField(max_length=2000,blank=True, null=True)
    direccion= models.CharField(max_length=2000,blank=True, null=True)
    referencia= models.CharField(max_length=2000,blank=True, null=True)
    actividad= models.ForeignKey(ActividadDataBooks,blank=True, null=True, on_delete=models.CASCADE)
    provincia=models.ForeignKey(DivisionDataBooks,related_name='provincia_indenpendencia',blank=True, null=True, on_delete=models.CASCADE)
    canton=models.ForeignKey(DivisionDataBooks,related_name='canton_indenpendencia',blank=True, null=True, on_delete=models.CASCADE)
    parroquia=models.ForeignKey(DivisionDataBooks,related_name='parroquia_indenpendencia',blank=True, null=True, on_delete=models.CASCADE)
    tipopersona=models.ForeignKey(TipoPersonaDataBooks, on_delete=models.CASCADE)


class MediosContactoDataBooks(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    medio1= models.CharField(max_length=50,blank=True, null=True)
    medio2= models.CharField(max_length=50,blank=True, null=True)
    medio3= models.CharField(max_length=50,blank=True, null=True)
    medio4= models.CharField(max_length=50,blank=True, null=True)
    medio5= models.CharField(max_length=50,blank=True, null=True)
    medio6= models.CharField(max_length=50,blank=True, null=True)
    direccion= models.CharField(max_length=2000,blank=True, null=True)
    telefono= models.CharField(max_length=50,blank=True, null=True)
    provincia=models.ForeignKey(DivisionDataBooks,related_name='provincia_medios',blank=True, null=True, on_delete=models.CASCADE)
    canton=models.ForeignKey(DivisionDataBooks,related_name='canton_medios',blank=True, null=True, on_delete=models.CASCADE)
    parroquia=models.ForeignKey(DivisionDataBooks,related_name='parroquia_medios',blank=True, null=True, on_delete=models.CASCADE)
    email1= models.CharField(max_length=100,blank=True, null=True)
    email2= models.CharField(max_length=100,blank=True, null=True)
    tipopersona=models.ForeignKey(TipoPersonaDataBooks, on_delete=models.CASCADE)

class EmpleadorDataBooks(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    ruc= models.CharField(max_length=13,blank=True, null=True)
    nombre= models.CharField(max_length=2000,blank=True, null=True)
    direccion= models.CharField(max_length=2000,blank=True, null=True)
    telefono= models.CharField(max_length=50,blank=True, null=True)
    actividad= models.CharField(max_length=2000,blank=True, null=True)
    cargo= models.CharField(max_length=2000,blank=True, null=True)
    salario=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'),blank=True, null=True)
    ingreso=models.CharField(max_length=100,blank=True, null=True)
    salida=models.CharField(max_length=100,blank=True, null=True)
    provincia=models.ForeignKey(DivisionDataBooks,related_name='provincia_empleador',blank=True, null=True, on_delete=models.CASCADE)
    canton=models.ForeignKey(DivisionDataBooks,related_name='canton_empleador',blank=True, null=True, on_delete=models.CASCADE)
    parroquia=models.ForeignKey(DivisionDataBooks,related_name='parroquia_empleador',blank=True, null=True, on_delete=models.CASCADE)
    tipopersona=models.ForeignKey(TipoPersonaDataBooks, on_delete=models.CASCADE)
    descripcion= models.CharField(max_length=2000,blank=True, null=True)
    tipoempleador=models.IntegerField(default=0)

class MediosDataBooks(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    direccion= models.CharField(max_length=2000,blank=True, null=True)
    telefono= models.CharField(max_length=50,blank=True, null=True)
    celular= models.CharField(max_length=50,blank=True, null=True)
    email= models.CharField(max_length=100,blank=True, null=True)
    provincia=models.CharField(max_length=100,blank=True, null=True)
    canton=models.CharField(max_length=100,blank=True, null=True)
    parroquia=models.CharField(max_length=100,blank=True, null=True)
    tipopersona=models.ForeignKey(TipoPersonaDataBooks, on_delete=models.CASCADE)

class NivelTutor(models.Model):
    nivel = models.ForeignKey(Nivel, blank=True, null=True, on_delete=models.CASCADE)
    tutor = models.ForeignKey(AsistenteDepartamento, blank=True, null=True, on_delete=models.CASCADE)
    activo =  models.BooleanField(default=True)

    def __str__(self):
        return str(self.nivel)

    class Meta:
        verbose_name = "Nivel Tutor"
        verbose_name_plural = "Nivel Tutores"

class TipoEntrega(models.Model):
    observacion = models.CharField(max_length=50, null=True)
    estado =  models.BooleanField(default=True)

    def __str__(self):
        return str(self.observacion)

class EntregaJugueteCanasta(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=500)
    tipoentrega=models.ForeignKey(TipoEntrega, on_delete=models.CASCADE)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateField()

    def __str__(self):
        return str(self.inscripcion) + ' -  ' + (self.observacion) + " Fecha: "+str(self.fecha)

class ExamenConvalidacionIngreso(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    aprobada = models.BooleanField(default=False)
    nota=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    observacion = models.CharField(max_length=1500,blank=True,null=True)

    def __str__(self):
        return str(self.inscripcion)

    class Meta:
        verbose_name = "Examen Convalidacion Ingreso"
        verbose_name_plural = "Examenes Convalidacion Ingreso"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper() if self.observacion is not None else ''
        super(ExamenConvalidacionIngreso, self).save(force_insert, force_update, using, update_fields)

class RubroLog(models.Model):
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=2500)
    autoriza = models.CharField(max_length=1000)
    fecha = models.DateTimeField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.rubro)

    class Meta:
        verbose_name = "Log de Rubro"
        verbose_name_plural = "Logs de Rubros"

class HorarioPersona(models.Model):
    persona=models.ForeignKey(Persona ,blank=True, null=True, on_delete=models.CASCADE)
    horaentrada = models.CharField(max_length=10, blank=True, null=True,verbose_name='Hora Entrada')
    horasalida = models.CharField(max_length=10, blank=True, null=True,verbose_name='Hora Salida')
    horalunesent = models.CharField(max_length=10, blank=True, null=True,verbose_name='Lunes Hora de Entrada')
    horalunessal = models.CharField(max_length=10, blank=True, null=True,verbose_name='Lunes Hora de Salida')
    horamartesent = models.CharField(max_length=10, blank=True, null=True,verbose_name='Martes Hora de Entrada')
    horamartessal = models.CharField(max_length=10, blank=True, null=True,verbose_name='Martes Hora de Salida')
    horamiercolesent = models.CharField(max_length=10, blank=True, null=True,verbose_name='Miercoles Hora de Entrada')
    horamiercolessal = models.CharField(max_length=10, blank=True, null=True,verbose_name='Miercoles Hora de Salida')
    horajuevesent = models.CharField(max_length=10, blank=True, null=True,verbose_name='Jueves Hora de Entrada')
    horajuevessal = models.CharField(max_length=10, blank=True, null=True,verbose_name='Jueves Hora de Salida')
    horaviernesent = models.CharField(max_length=10, blank=True, null=True,verbose_name='Viernes Hora de Entrada')
    horaviernessal = models.CharField(max_length=10, blank=True, null=True,verbose_name='Viernes Hora de Salida')
    horasabadoent = models.CharField(max_length=10, blank=True, null=True,verbose_name='Sabado Hora de Entrada')
    horasabadosal = models.CharField(max_length=10, blank=True, null=True,verbose_name='Sabado Hora de Salida')
    horadomingoent = models.CharField(max_length=10, blank=True, null=True,verbose_name='Domingo Hora de Entrada')
    horadomingosal = models.CharField(max_length=10, blank=True, null=True,verbose_name='Domingo Hora de Salida')

    def __str__(self):
        return str(self.persona)

    class Meta:
        verbose_name = "Horario Persona"
        verbose_name_plural = "Horarios de Personas"



class TipoMaterialDocente(models.Model):
    descripcion = models.CharField(max_length=200, null=True)
    estado =  models.BooleanField(default=True)


class MaterialDocente(models.Model):
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True,null=True)
    profesormateria = models.ForeignKey(ProfesorMateria, on_delete=models.CASCADE)
    tipomaterial=  models.ForeignKey(TipoMaterialDocente, on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='material/%Y/%m/%d', max_length=200,blank=True,null=True)
    aprobado=models.BooleanField(default=False)


    def tiene_logmateriadocentelog(self):
        return MaterialDocenteLog.objects.filter(materiadocente=self).order_by('-id')[:1].get()


class MaterialDocenteLog(models.Model):
    materiadocente = models.ForeignKey(MaterialDocente, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    comentario = models.CharField(max_length=1000)

class TipoWebinar(models.Model):
    nombre = models.CharField(max_length=300)
    activo = models.BooleanField(default=True)
    certificado =  models.FileField(upload_to='documentos/%Y/%m/%d', max_length=200,null = True, blank= True) #Imagen para usar en reporte de los certificados

    def __str__(self):
        return str(self.nombre)

    def puede_eliminar(self):
        if not ParticipanteWebinar.objects.filter(webinar__tipo=self).exists():
            return True

class Webinar(models.Model):
    nombre = models.CharField(max_length=300)
    tipo = models.ForeignKey(TipoWebinar, blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True, null=True) #fecha desde
    fecha_hasta = models.DateField(blank=True, null=True) #fecha hasta
    hora = models.TimeField(blank=True, null=True)
    activo = models.BooleanField(default=True)
    archivobase = models.FileField(upload_to='webinars/bases', max_length=200,null = True, blank= True)
    fechaarchivo = models.DateTimeField(blank=True, null=True)
    usuario = models.ForeignKey(User, blank=True, null=True, on_delete=models.CASCADE)
    certificado =  models.FileField(upload_to='webinars/fondos', max_length=200,null = True, blank= True)

    def __str__(self):
        return str(self.nombre)

    def cantidad_participantes(self):
        if ParticipanteWebinar.objects.filter(webinar=self).exists():
            return  ParticipanteWebinar.objects.filter(webinar=self).count()
        else:
            return 0

    def puede_eliminar(self):
        return not ParticipanteWebinar.objects.filter(webinar=self).exists()

    def certificados_generados_totalparticipantes(self):
        return ParticipanteWebinar.objects.filter(webinar=self).exclude(certificado='').exclude(certificado=None).count()

    def cantidad_certificados_generados(self):
        pws = ParticipanteWebinar.objects.filter(webinar=self)
        cont = 0
        for pw in pws:
            if os.path.exists(SITE_ROOT+"/media/"+str(pw.certificado)) and pw.certificado:
                cont = cont+1
        return cont

class Participante(models.Model):
    identificacion = models.CharField(max_length=15)
    nombres = models.CharField(max_length=100)
    apellidos = models.CharField(max_length=100)
    correo = models.CharField(max_length=100)
    telefono = models.CharField(max_length=20)

    def __str__(self):
        return str(self.nombres)


class ParticipanteWebinar(models.Model):
    participante = models.ForeignKey(Participante, on_delete=models.CASCADE)
    webinar = models.ForeignKey(Webinar, on_delete=models.CASCADE)
    certificado = models.FileField(upload_to='documentos/%Y/%m/%d', max_length=200,null = True, blank= True)

    def __str__(self):
        return str(self.participante)

    def tiene_certificado(self):
        if os.path.exists(SITE_ROOT+"/media/"+str(self.certificado)) and self.certificado:
            return True

class PagoNivelLog(models.Model):
    pagonivel= models.ForeignKey(PagoNivel, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel, on_delete=models.CASCADE)
    fecha = models.DateField()
    motivo = models.CharField(max_length=2500)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    valor = models.FloatField()



class DatosTransfereciaDeposito(models.Model):
    solicitud = models.ForeignKey(SolicitudSecretariaDocente, on_delete=models.CASCADE)
    referencia = models.CharField(max_length=50)
    fecha = models.DateField()
    cuentabanco = models.ForeignKey(CuentaBanco, on_delete=models.CASCADE)
    valor = models.FloatField()
    deposito = models.BooleanField(blank=True, null=True)
    disponible= models.BooleanField(default=True)
    fechadeposito = models.DateField()
    pago = models.ForeignKey(PagoTransferenciaDeposito,blank=True,null = True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.cuentabanco ) + "Ref. " + str(self.referencia) +  " (" + str(self.valor) + ")  "

class HistoriaArchivoPymentez(models.Model):
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    archivo = models.FileField(upload_to='pymentez/%Y/%m/%d', max_length=200)

    def __str__(self):
        return str(self.usuario) + " " +  str(self.fecha)

    class Meta:
        verbose_name = "Archivo Pymentez"
        verbose_name_plural = "Archivos Pymentez"


class MatriculaLiberada(models.Model):
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    liberada = models.BooleanField(default=True)
    fecha =  models.DateTimeField()
    observacion = models.CharField(max_length=1500)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.matricula )

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.observacion: self.observacion = self.observacion.upper()
        super(MatriculaLiberada, self).save(force_insert, force_update, using, update_fields)

class ParametrosPromocion(models.Model):
    iniciodiferir = models.DateField(blank=True,null=True)
    findiferir = models.DateField(blank=True,null=True)
    fechadiferir = models.DateField(blank=True,null=True)

    class Meta:
        verbose_name = "Parametros Promocion"
        verbose_name_plural = "Parametros Promociones"


class ViewCrmProspectos(models.Model):
    inscripcion_id = models.IntegerField()
    nombres = models.CharField(max_length=500, null=True)
    cedula = models.CharField(max_length=13, null=True)
    email = models.CharField(max_length=100, null=True)
    celular = models.CharField(max_length=100, null=True)
    celular2 = models.CharField(max_length=100, null=True)
    convencional = models.CharField(max_length=100, null=True)
    efectivo = models.CharField(max_length=100, null=True)
    razonestado = models.CharField(max_length=100, null=True)
    observacion = models.CharField(max_length=500, null=True)
    fechagestion = models.DateField(blank=True, null=True)
    fechaposibleinscripcion = models.DateField(blank=True, null=True)
    fechapollamada = models.DateField(blank=True, null=True)
    porqueno = models.CharField(max_length=100, null=True)
    fecharegistro = models.DateField(blank=True, null=True)
    efectivo_id = models.IntegerField(blank=True, null=True)
    usuario_persona = models.IntegerField(blank=True, null=True)
    prospecto = models.BooleanField(default=False)
    seinscribe = models.BooleanField(default=False)
    archivo = models.BooleanField(default=False)
    canton_id = models.IntegerField(blank=True, null=True)
    nombresegmento = models.CharField(max_length=500, null=True)
    referido = models.BooleanField(default=False)
    grupo_id = models.IntegerField(blank=True, null=True)
    seinscribira = models.CharField(max_length=100, null=True)
    tipopersona = models.CharField(max_length=100, null=True)
    via = models.CharField(max_length=100, null=True)
    segmentoadmin = models.CharField(max_length=500, null=True)

    class Meta:
        managed = False
        db_table = 'view_crmprospectos_mater'

class RegistroLlamadas(models.Model):
    inscripcion=models.ForeignKey(Inscripcion , blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        if self.inscripcion:
            return str(self.inscripcion.persona.apellido1) +" "+ str(self.inscripcion.persona.apellido2) +" "+ str(self.inscripcion.persona.nombres)
        return str(self.inscripcion.persona.apellido1)+" "+str(self.inscripcion.persona.apellido2)+" "+str(self.inscripcion.persona.nombres)

class DetalleRegistroLlamadas(models.Model):
    registro = models.ForeignKey(RegistroLlamadas, on_delete=models.CASCADE)
    respuesta = models.CharField(max_length=1500,blank=True, null=True)
    fecha=models.DateTimeField(null= True, blank =True)
    usuario = models.ForeignKey(User,blank=True,null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.registro) +self.fecha.strftime('%d-%m-%Y')

    class Meta:
        verbose_name = "Detalle de Registro de Llamadas"
        verbose_name_plural = "Detalles de Registros de Llamadas"


class InscripcionMotivoCambioPromocion(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    promocion = models.ForeignKey(Promocion, on_delete=models.CASCADE)
    motivo = models.TextField(max_length=300)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField()

#//////////////////////////////////////////////////////////////////////////////////////////////////////
#////////////////////////////////////practicas preprofesionales////////////////////////////////////////

class EscenarioPractica(models.Model):
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    solicitudestudiante = models.ForeignKey(SolicitudEstudiante,blank=True,null=True, on_delete=models.CASCADE)
    rubroespecievalorada = models.ForeignKey(RubroEspecieValorada,blank=True,null=True, on_delete=models.CASCADE)
    convenio = models.BooleanField(default=False)
    fecha = models.DateField(blank=True,null=True)
    fechaenvio = models.DateField(blank=True,null=True)
    aprobado = models.BooleanField(default=False)
    fechafinaliza = models.DateField(blank=True,null=True)
    fechaacepta = models.DateField(blank=True,null=True)
    horaspractica = models.IntegerField(default=0,blank=True,null=True)
    cartacompro = models.FileField(upload_to='practpreprof/%Y/%m/%d', max_length=200)


    def __str__(self):
        return str(self.matricula) +'- CONVENIO' if self.convenio else str(self.matricula) +'- SIN CONVENIO'

    def exis_solipracticas(self):
        if SolicitudPracticas.objects.filter(escenariopractica=self).exists():
            return SolicitudPracticas.objects.filter(escenariopractica=self).order_by('-id')[:1].get()
        return False

    def exis_solipracactiv(self):
        if SolicitudPracticas.objects.filter(Q(escenariopractica=self),Q(fecaprobada=None)|Q(aprobada=True)).exists():
            return SolicitudPracticas.objects.filter(Q(escenariopractica=self),Q(fecaprobada=None)|Q(aprobada=True)).order_by('-id')[:1].get()
        return False

    def exis_solipractnoaprob(self):
        if SolicitudPracticas.objects.filter(escenariopractica=self,aprobada=False).exclude(fecaprobada=None).exists():
            return SolicitudPracticas.objects.filter(escenariopractica=self,aprobada=False).exclude(fecaprobada=None).order_by('-id')
        return False

    def mail_envioescenarioconvenio(self, user):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_PRACPRE)
        hoy = datetime.now().today()
        send_html_mail("ENVIO DE ESCENARIO DE PRACTICA",
                       "emails/enviescenariopractica.html", {'contenido':"ENVIO DE ESCENARIO DE PRACTICA",'d': self, 'fecha': hoy, 'user':user, 'opc':3},tipo.correo.split(","))

    def mail_correosolpract(self, user,cuerpo):
        tipo = self.matricula.inscripcion.persona.email
        if self.matricula.inscripcion.persona.email1:
            tipo = tipo+','+self.matricula.inscripcion.persona.email1
        if self.matricula.inscripcion.persona.email2:
            tipo = tipo+','+self.matricula.inscripcion.persona.email2
        if self.matricula.inscripcion.persona.emailinst:
            tipo = tipo+','+self.matricula.inscripcion.persona.email2
        hoy = datetime.now().today()
        send_html_mail("RESPUESTA DE ESCENARIO DE PRACTICA",
                       "emails/enviescenariopractica.html", {'contenido':"RESPUESTA DE ESCENARIO DE PRACTICA",'d': self,'cuerpo': cuerpo, 'fecha': hoy, 'user':user, 'opc': 2},tipo.split(","))

    def numero_practica(self):
        c = 1
        nivorden = NIVELMALLA_INICIO_PRACTICA
        if not InscripcionPracticas.objects.filter(inscripcion=self.matricula.inscripcion).order_by('nivelmalla__orden').exists():
            return c
        cant = InscripcionPracticas.objects.filter(inscripcion=self.matricula.inscripcion).order_by('nivelmalla__orden').count()
        for n in InscripcionPracticas.objects.filter(inscripcion=self.matricula.inscripcion).order_by('nivelmalla__orden'):
            if NIVELMALLA_INICIO_PRACTICA < n.nivelmalla.orden:
                return c
            elif NIVELMALLA_INICIO_PRACTICA == n.nivelmalla.orden and c == cant:
                return c + 1
            else:
                if nivorden < n.nivelmalla.orden:
                    return c
                elif n.nivelmalla.orden == nivorden and cant == c:
                    return c + 1
                else:
                    c = c + 1
                    nivorden = nivorden + 1

    def tiene_solinoaceptada(self):
        if SolictudNoAceptada.objects.filter(escenario=self).exists():
            return SolictudNoAceptada.objects.filter(escenario=self)
        return False

    class Meta:
        verbose_name = "Escenario Practica"
        verbose_name_plural = "Escenarios de Practicas"

class EstadoEmpresa(models.Model):
    descripcion = models.CharField(max_length=300, blank=True, null=True)
    estado = models.BooleanField(default=True)

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = "Estado de Empresa"
        verbose_name_plural = "Estados de las Empresas"

class EmpresaSinConvenio(models.Model):
    nombre = models.CharField(max_length=300, blank=True, null=True)
    ruc = models.CharField(max_length=17, blank=True, null=True)
    activideconomica = models.CharField(max_length=300, blank=True, null=True)
    direccion = models.CharField(max_length=300, blank=True, null=True)
    estadoempresa = models.ForeignKey(EstadoEmpresa, blank=True, null=True, on_delete=models.CASCADE)
    ciudad = models.ForeignKey(Canton, blank=True, null=True, on_delete=models.CASCADE)
    estado = models.BooleanField(default=True)

    def __str__(self):
        return str(self.nombre) + ' '+str(self.ruc)

    @staticmethod
    def flexbox_query(q):
        return EmpresaSinConvenio.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        self.activideconomica = self.activideconomica.upper()
        self.direccion = self.direccion.upper()
        super(EmpresaSinConvenio, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Empresa sin Convenio"
        verbose_name_plural = "Empresas Sin convenios"

class SolicitudPracticas(models.Model):
    escenariopractica = models.ForeignKey(EscenarioPractica, blank=True, null=True, on_delete=models.CASCADE)
    rubroespecie = models.ForeignKey(RubroEspecieValorada, blank=True, null=True, on_delete=models.CASCADE)
    solicitudsecretaria = models.ForeignKey(SolicitudSecretariaDocente,related_name='secretariadocente',blank=True,null=True, on_delete=models.CASCADE)
    solicitudestudiante = models.ForeignKey(SolicitudEstudiante,blank=True,null=True, on_delete=models.CASCADE)
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    foto = models.FileField(upload_to='fotosolipract/%Y/%m/%d', max_length=200)
    promedionota = models.FloatField(blank=True, null=True)
    fecha = models.DateField(blank=True, null=True)
    aprobada = models.BooleanField(default=False)
    observacion = models.CharField(max_length=1300, blank=True, null=True)#observacion de aprobacion
    fecaprobada = models.DateField( blank=True, null=True)
    finalizada = models.BooleanField(default=False)
    fecfinaliza = models.DateField( blank=True, null=True)
    # fecha envio PARA APROBAR LA SOLICITUD DE PRACTICA EN CASO DE NO CONVENIO O SI ES CONVENIO CUANDO SE ENVIA PARA Q EL ESTUDIANTE ACEPTA LA PRACTICA
    fechaenvio = models.DateField( blank=True, null=True)
    enviada = models.BooleanField(default=False)

    promedioevasuper = models.FloatField(blank=True, null=True)#promedio de la evalucion del supervisor
    supervisado = models.BooleanField(default=False) #campo si la evaluacion fue supervisado o no por la institucion
    fechasupervis = models.DateField( blank=True, null=True) #fecha de ingreso si la evaluacion fue supervisado
    observacionevalaca = models.CharField(max_length=300, blank=True, null=True)#observacion  de la evalucion de parte de la institucion academica
    acepto = models.BooleanField(default=False)
    fechaacepta = models.DateField(blank=True,null=True)
    archsupervempresa = models.FileField(upload_to='archsupervempresa/%Y/%m/%d', max_length=200)
    #FECHA DE ENVIO PARA FINALIZAR PRACTICA D EPARTE DEL ESTUDIANTE
    fechestudfinal = models.DateTimeField( blank=True, null=True)
    solicitudsecretariaenvi = models.ForeignKey(SolicitudSecretariaDocente,related_name='enviasecretariadocente',blank=True,null=True, on_delete=models.CASCADE)
    #FINALIZACION DE SOLICITUD
    rechazado = models.BooleanField(default=False)
    observrechazado = models.CharField(max_length=1200, blank=True, null=True)

    def __str__(self):
        return str(self.matricula)

    def experienciaslabo(self):
        return ExperienciaLaboral.objects.filter(solicitudpracticas=self).order_by('id')

    def regactividad(self):
        return RegistroActividad.objects.filter(solicitudpracticas=self).order_by('fecha')

    def fichaentidadrec(self):
        if FichaReceptora.objects.filter(solicitudpracticas=self).exists():
            return FichaReceptora.objects.filter(solicitudpracticas=self).order_by('id')[:1].get()
        return False

    def evalsuperempre(self):
        if EvaluacionSupervisorEmp.objects.filter(solicitudpracticas=self).exists():
            return EvaluacionSupervisorEmp.objects.filter(solicitudpracticas=self).order_by('id')
        return False

    def evalsuperinstit(self):
        if EvaluacionAcademico.objects.filter(solicitudpracticas=self).exists():
            return EvaluacionAcademico.objects.filter(solicitudpracticas=self).order_by('id')
        return False

    def mail_enviosolpract(self, user):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_PRACPRE)
        hoy = datetime.now().today()
        send_html_mail("SOLICITUD DE PRACTICAS",
                       "emails/enviarsolpracticas.html", {'contenido':"SOLICITUD DE PRACTICAS",'d': self, 'fecha': hoy, 'user':user},tipo.correo.split(","))

    def mail_enviofinalpract(self, user):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_PRACPRE)
        hoy = datetime.now().today()
        send_html_mail("ENVIO DE PRACTICAS FINALIZADA",
                       "emails/enviarsolpracticas.html", {'contenido':"ENVIO DE PRACTICAS FINALIZADA",'d': self, 'fecha': hoy, 'user':user,'env':'1'},tipo.correo.split(","))

    def escenariohorario_exist(self):
        return SolicitudHorarioAsistente.objects.filter(solicitud__id=self.id,finaliza=False,fechahorar=None)[:1].get()

    def escenariohorario_final(self):
        return SolicitudHorarioAsistente.objects.filter(solicitud__id=self.id,finaliza=True)[:1].get()


    def mail_aprobsolpract(self, user,opc):
        tipo = self.matricula.inscripcion.persona.email
        if self.matricula.inscripcion.persona.email1:
            tipo = tipo+','+self.matricula.inscripcion.persona.email1
        if self.matricula.inscripcion.persona.email2:
            tipo = tipo+','+self.matricula.inscripcion.persona.email2
        if self.matricula.inscripcion.persona.emailinst:
            tipo = tipo+','+self.matricula.inscripcion.persona.email2
        hoy = datetime.now().today()
        if opc == 1:
            send_html_mail("CONTESTACION  DE SOLICITUD DE PRACTICAS",
                           "emails/enviarsolpracticas.html", {'contenido':U"Contestación de solicitud de practicas",'d': self, 'fecha': hoy, 'user':user, 'opc':1},tipo.split(","))
        elif opc == 2:

            send_html_mail("ACEPTAR SOLICITUD DE PRACTICAS",
                           "emails/enviarsolpracticas.html", {'contenido':"Debe Aceptar la solicitud de practicas",'d': self, 'fecha': hoy, 'user':user, 'opc':1},tipo.split(","))
        else:
            send_html_mail("SOLICITUDA PRACTICAS BORRADO",
                           "emails/enviarsolpracticas.html", {'contenido':u"La práctica ya fue eliminada el cupo ya esta lleno, debe esperar la proxima practica.",'d': self, 'fecha': hoy, 'user':user, 'opc':1},tipo.split(","))

    def mail_finalizapract(self, user,opc):
        tipo = self.matricula.inscripcion.persona.email
        if self.matricula.inscripcion.persona.email1:
            tipo = tipo+','+self.matricula.inscripcion.persona.email1
        if self.matricula.inscripcion.persona.email2:
            tipo = tipo+','+self.matricula.inscripcion.persona.email2
        if self.matricula.inscripcion.persona.emailinst:
            tipo = tipo+','+self.matricula.inscripcion.persona.email2
        hoy = datetime.now().today()
        send_html_mail("PRACTICA REVISADA Y FINALIZADA",
                       "emails/enviarsolpracticas.html", {'contenido':u"PRACTICA REVISADA Y FINALIZADA",'d': self, 'fecha': hoy, 'user':user, 'opc':7},tipo.split(","))

    def mail_correosolpract(self, user,cuerpo):
        tipo = self.matricula.inscripcion.persona.email
        if self.matricula.inscripcion.persona.email1:
            tipo = tipo+','+self.matricula.inscripcion.persona.email1
        if self.matricula.inscripcion.persona.email2:
            tipo = tipo+','+self.matricula.inscripcion.persona.email2
        if self.matricula.inscripcion.persona.emailinst:
            tipo = tipo+','+self.matricula.inscripcion.persona.email2
        hoy = datetime.now().today()
        send_html_mail("CORREO DE SOLICITUD DE PRACTICAS",
                       "emails/enviarsolpracticas.html", {'contenido':"CORREO DE SOLICITUD DE PRACTICAS",'d': self,'cuerpo': cuerpo, 'fecha': hoy, 'user':user, 'opc': 2},tipo.split(","))

    def mail_envioevalpract(self, user):
        tipo = self.fichaentidadrec().correo
        from sga.supervisarevalest import crear_contrasena
        contrasena = crear_contrasena(self.fichaentidadrec())
        hoy = datetime.now().today()
        send_html_mail("EVALUACION DE PRACTICAS PRE-PROFESIONALES DEL ITB",
                       "emails/enviarsolpracticas.html", {'contenido':"EVALUACION DE PRACTICAS PRE-PROFESIONALES DEL ITB",'contrasena': contrasena,'d': self, 'url':URL_DEL_SISTEMA, 'fecha': hoy, 'user':user, 'opc':3},tipo.split(","))


    def mail_evaluacrealizada(self, user):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_PRACPRE)
        hoy = datetime.now().today()
        send_html_mail("EVALUACION PREPROFESIONAL DE LA EMPRESA REALIZADA",
                       "emails/enviarsolpracticas.html", {'contenido':"EVALUACION PREPROFESIONAL DE LA EMPRESA REALIZADA",'d': self, 'fecha': hoy, 'user':user,  'opc': 4},tipo.correo.split(","))

    def mail_evaluainstrealizada(self, user):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_PRACPRE)
        hoy = datetime.now().today()
        persona = Persona.objects.filter(usuario=user)[:1].get()
        send_html_mail("EVALUACION PREPROFESIONAL DE LA INSTITUCION REALIZADA",
                       "emails/enviarsolpracticas.html", {'contenido':"EVALUACION PREPROFESIONAL DE LA INSTITUCION REALIZADA",'d': self, 'fecha': hoy, 'persona':persona,  'opc': 5},tipo.correo.split(","))

    def mail_aceptacionpractica(self, user):
        tipo = TipoIncidencia.objects.get(pk=TIPO_INCIDENCIA_PRACPRE)
        hoy = datetime.now().today()
        persona = Persona.objects.filter(usuario=user)[:1].get()
        send_html_mail("RESPUESTA DE ACEPTACION DE PRACTICA PRE-PROFESIONALES POR CONVENIO",
                       "emails/enviarsolpracticas.html", {'contenido':" RESPUESTA DE ACEPTACION DE PRACTICA PRE-PROFESIONALES POR CONVENIO",'d': self, 'fecha': hoy, 'persona':persona,  'opc': 6},tipo.correo.split(","))

    def detallfinali(self):
        return SolictudDetallFinal.objects.filter(solicitud=self).order_by('practica')

    def supervisorpracticas(self):
        if SupervisorPracticas.objects.filter(solicitudpracticas=self,activo=True).exists():
            return SupervisorPracticas.objects.filter(solicitudpracticas=self,activo=True)[:1].get()
        return False

    class Meta:
        verbose_name = "Solicitud Practica"
        verbose_name_plural = "Solicitud de Practicas"



class SolicitudHorarioAsistente(models.Model):
    solicitud = models.ForeignKey(SolicitudPracticas, on_delete=models.CASCADE)
    horario = models.ForeignKey(HorarioAsistenteSolicitudes,blank=True,null=True, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True,null=True)
    fechaasig = models.DateTimeField(blank=True,null=True)
    obsestud = models.CharField(max_length=300, blank=True, null=True)
    obshorario = models.CharField(max_length=300, blank=True, null=True)
    fechahorar = models.DateTimeField(blank=True,null=True)
    reasignhorar = models.ForeignKey(HorarioAsistenteSolicitudes,related_name='reasignarhorar',blank=True,null=True, on_delete=models.CASCADE)
    aprobado = models.BooleanField(default=False)
    finaliza = models.BooleanField(default=False)

    def __str__(self):
        return str(self.solicitud) +' ESCENARIO HORARIO'

    class Meta:
        verbose_name = "Escenario Practica"
        verbose_name_plural = "Escanarios de Practicas"


    def mail_escenariohorarioasis(self, user):
        persona = Persona.objects.filter(usuario=self.horario.usuario)[:1].get()
        tipo = persona.email
        if persona.email1:
            tipo = tipo+','+persona.email1
        if persona.email2:
            tipo = tipo+','+persona.email2
        if persona.emailinst:
            tipo = tipo+','+persona.email2
        hoy = datetime.now().today()
        send_html_mail("ENVIO DE SOLICITUD DE PRACTICA",
                       "emails/enviescenariopractica.html", {'contenido':"ENVIO DE SOLICITUD DE PRACTICA",'d': self, 'fecha': hoy, 'user':user, 'opc':1},tipo.split(","))


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.obsestud:
            self.obsestud = self.obsestud.upper()
        if self.obshorario:
            self.obshorario = self.obshorario.upper()
        super(SolicitudHorarioAsistente, self).save(force_insert, force_update, using, update_fields)


class ExperienciaLaboral(models.Model):
    solicitudpracticas = models.ForeignKey(SolicitudPracticas, blank=True, null=True, on_delete=models.CASCADE)
    convenio = models.ForeignKey(EmpresaConvenio, blank=True, null=True, on_delete=models.CASCADE)
    sinconvenio = models.ForeignKey(EmpresaSinConvenio, blank=True, null=True, on_delete=models.CASCADE)
    tiempo = models.IntegerField(blank=True, null=True)
    funcion = models.CharField(max_length=900, blank=True, null=True)
    inicio = models.DateField(blank=True, null=True)
    fin = models.DateField(blank=True, null=True)

    def __str__(self):
        return str(self.solicitudpracticas)

    class Meta:
        verbose_name = "Experiencia Laboral"
        verbose_name_plural = "Experiancias Laborales"

class RegistroActividad(models.Model):
    solicitudpracticas = models.ForeignKey(SolicitudPracticas, blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    actividad = models.CharField(max_length=900, blank=True, null=True)
    observacion = models.CharField(max_length=900, blank=True, null=True)
    inicio = models.TimeField(blank=True, null=True)
    fin = models.TimeField(blank=True, null=True)

    def __str__(self):
        return str(self.actividad) +" - "+str(self.fecha)


    class Meta:
        verbose_name = "Registro Actividad"
        verbose_name_plural = "Registros de Actividades"


class FichaReceptora(models.Model):
    solicitudpracticas = models.ForeignKey(SolicitudPracticas, blank=True, null=True, on_delete=models.CASCADE)
    convenio = models.ForeignKey(EmpresaConvenio, blank=True, null=True, on_delete=models.CASCADE)
    sinconvenio = models.ForeignKey(EmpresaSinConvenio, blank=True, null=True, on_delete=models.CASCADE)
    inicio = models.DateField(blank=True, null=True)
    fin = models.DateField(blank=True, null=True)
    horaspracticas = models.TimeField(blank=True, null=True)#menor a 6 horas por tiemo de pandemia
    horainicio = models.TimeField(blank=True, null=True)#menor a 6 horas por tiemo de pandemia
    horafin = models.TimeField(blank=True, null=True)#menor a 6 horas por tiemo de pandemia
    #jornadaLABORAL
    lunes = models.BooleanField(default=False)
    martes = models.BooleanField(default=False)
    miercoles = models.BooleanField(default=False)
    jueves = models.BooleanField(default=False)
    viernes = models.BooleanField(default=False)
    sabado = models.BooleanField(default=False)
    domingo = models.BooleanField(default=False)
    #empresa
    supervisor = models.CharField(max_length=300, blank=True, null=True)
    celular = models.CharField(max_length=100, blank=True, null=True)#delsupervisor
    telefono = models.CharField(max_length=100, blank=True, null=True)#delsupervisor
    extension = models.CharField(max_length=100, blank=True, null=True)#delsupervisor
    correo = models.CharField(max_length=100, blank=True, null=True)#delsupervisor
    cargo = models.CharField(max_length=300, blank=True, null=True)
    cantidad = models.CharField(max_length=10, blank=True, null=True)#numeros de practicas

    def __str__(self):
        return str(self.supervisor)

    class Meta:
        verbose_name = "Ficha Receptora"
        verbose_name_plural = "Fichas Receptora"

    def existe_procesoselec(self):
        if ProcesoSeleccion.objects.filter(activo=True,empresa=self.convenio).exists():
            procselec = ProcesoSeleccion.objects.filter(activo=True,empresa=self.convenio)[:1].get()
            cantacept =  ProcesoSelecDetalle.objects.filter(procesoseleccion=procselec,acepto=True).count()
            cantanocept =  ProcesoSelecDetalle.objects.filter(procesoseleccion=procselec).count()
            return [procselec, cantacept, cantanocept]
        return False

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.supervisor = self.supervisor.upper()
        self.cargo = self.cargo.upper()
        super(FichaReceptora, self).save(force_insert, force_update, using, update_fields)

class NombreReportePract(models.Model):
    nombre = models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Nombre Reporte Practica"
        verbose_name_plural = "Nombre Reportes de  Practicas"

class ReportePracticas(models.Model):
    reporte = models.CharField(max_length=200, blank=True, null=True)#delsupervisor
    nombre = models.ForeignKey(NombreReportePract, blank=True, null=True, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera,limit_choices_to={'practica':True}, blank=True, null=True, on_delete=models.CASCADE)
    nivel = models.ForeignKey(NivelMalla, blank=True, null=True, on_delete=models.CASCADE)
    orden = models.IntegerField(default=0, blank=True, null=True)
    convenio = models.BooleanField(default=False)
    sinconvenio = models.BooleanField(default=False)
    general = models.BooleanField(default=False)
    estudiante = models.BooleanField(default=False)


    def __str__(self):
        return str(self.reporte) +" "+str(self.carrera)

    def reportepractsolic_existe(self,solicitud):
        solicitudpractica = SolicitudPracticas.objects.get(id=solicitud)
        if ReportePractSolicitud.objects.filter(reportepractica=self,solicitudpractica=solicitudpractica).exists():
            return ReportePractSolicitud.objects.filter(reportepractica=self,solicitudpractica=solicitudpractica)[:1].get()
        return False

    class Meta:
        verbose_name = "Reporte Practicas"
        verbose_name_plural = "Reporte Practicas"

class ReportePractSolicitud(models.Model):
    reportepractica = models.ForeignKey(ReportePracticas, blank=True, null=True, on_delete=models.CASCADE)
    solicitudpractica = models.ForeignKey(SolicitudPracticas, blank=True, null=True, on_delete=models.CASCADE)
    archivo = models.FileField(upload_to='reppracsolic/%Y/%m/%d', max_length=200)
    fecha = models.DateField(blank=True, null=True)
    fecharev = models.DateField(blank=True, null=True)
    revisado = models.BooleanField(default=False)


    class Meta:
        verbose_name = "Reporte Practica Solicitud"
        verbose_name_plural = "Reportes Practicas Solicitudes"

class PuntajeIndicador(models.Model):
    descripcion = models.CharField(max_length=300, blank=True, null=True)
    puntos = models.IntegerField(blank=True, null=True)
    estado = models.BooleanField(default=True)

    def __str__(self):
        return str(self.descripcion) +" "+str(self.puntos)

    class Meta:
        verbose_name = "Indicador Practicas"
        verbose_name_plural = "Indicadores de Practicas"

    def existe_evalsuper(self):
        return EvaluacionSupervisorEmp.objects.filter(puntajeindicador=self)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper()
        super(PuntajeIndicador, self).save(force_insert, force_update, using, update_fields)

class SegmentoIndicadorEmp(models.Model):
    descripcion = models.CharField(max_length=300, blank=True, null=True)
    orden = models.IntegerField(blank=True, null=True)
    estado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.descripcion) +" "+str(self.estado)

    def existe_segdeta(self):
        return SegmentoDetalle.objects.filter(segmentoindicador=self).order_by('id')

    def segdetaindica(self):
        return SegmentoDetalle.objects.filter(segmentoindicador=self,estado=True).order_by('id')

    def numsegspan(self):
        return SegmentoDetalle.objects.filter(segmentoindicador=self,estado=True).order_by('id').count()+1


    class Meta:
        verbose_name = "Segmento Indicador"
        verbose_name_plural = "Segmentos Indicadores"

    #
    # def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
    #     self.descripcion = self.descripcion.upper()
    #     super(SegmentoIndicadorEmp, self).save(force_insert, force_update, using, update_fields)

class SegmentoDetalle(models.Model):
    segmentoindicador = models.ForeignKey(SegmentoIndicadorEmp, blank=True, null=True, on_delete=models.CASCADE)
    descripcion = models.CharField(max_length=300, blank=True, null=True)
    estado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.descripcion) +" "+str(self.estado)


    def existe_evalsuperemp(self,idsol):
        if EvaluacionSupervisorEmp.objects.filter(segmentodetalle=self,solicitudpracticas__id=idsol).exclude(fecha=None).exists():
            return EvaluacionSupervisorEmp.objects.filter(segmentodetalle=self,solicitudpracticas__id=idsol).exclude(fecha=None)[:1].get()

    class Meta:
        verbose_name = "Segmento Detalle"
        verbose_name_plural = "Segmentos Detalles"

class EvaluacionSupervisorEmp(models.Model):
    solicitudpracticas = models.ForeignKey(SolicitudPracticas, blank=True, null=True, on_delete=models.CASCADE)
    segmentodetalle = models.ForeignKey(SegmentoDetalle, blank=True, null=True, on_delete=models.CASCADE)
    puntajeindicador = models.ForeignKey(PuntajeIndicador, blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True, null=True)

    def __str__(self):
        return str(self.segmentodetalle) +" "+str(self.puntajeindicador)


    class Meta:
        verbose_name = "Evaluacion Supervisor Emp"
        verbose_name_plural = "Evaluaciones Supervisor Emp"

class IndicadorAcademico(models.Model):
    descripcion = models.CharField(max_length=300, blank=True, null=True)
    estado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.descripcion) +" "+str(self.estado)

    def existe_evalacade(self):
        return EvaluacionAcademico.objects.filter(indicadoracademico=self)

    class Meta:
        verbose_name = "Indicador Academico"
        verbose_name_plural = "Indicadores Academicos"

class EvaluacionAcademico(models.Model):
    solicitudpracticas = models.ForeignKey(SolicitudPracticas, blank=True, null=True, on_delete=models.CASCADE)
    indicadoracademico = models.ForeignKey(IndicadorAcademico, blank=True, null=True, on_delete=models.CASCADE)
    cumple = models.BooleanField(default=False)

    def __str__(self):
        return str(self.solicitudpracticas) +" "+str(self.indicadoracademico)

    class Meta:
        verbose_name = "Evaluacion Academico"
        verbose_name_plural = "Evaluaciones Academico"

class ProcesoSeleccion(models.Model):
    empresa = models.ForeignKey(EmpresaConvenio, blank=True, null=True, on_delete=models.CASCADE)
    cantidad = models.IntegerField(blank=True, null=True)
    fecha = models.DateField(blank=True, null=True)
    activo = models.BooleanField(default=False)

class ProcesoSelecDetalle(models.Model):
    procesoseleccion = models.ForeignKey(ProcesoSeleccion, blank=True, null=True, on_delete=models.CASCADE)
    fichareceptora = models.ForeignKey(FichaReceptora, blank=True, null=True, on_delete=models.CASCADE)
    acepto = models.BooleanField(default=False)

class TutorEntidadRecep(models.Model):
    convenio = models.ForeignKey(EmpresaConvenio, blank=True, null=True, on_delete=models.CASCADE)
    sinconvenio = models.ForeignKey(EmpresaSinConvenio, blank=True, null=True, on_delete=models.CASCADE)
    supervisor = models.CharField(max_length=300, blank=True, null=True)
    celular = models.CharField(max_length=100, blank=True, null=True)#delsupervisor
    telefono = models.CharField(max_length=100, blank=True, null=True)#delsupervisor
    extension = models.CharField(max_length=100, blank=True, null=True)#delsupervisor
    correo = models.CharField(max_length=100, blank=True, null=True)#delsupervisor
    cargo = models.CharField(max_length=300, blank=True, null=True)

    def __str__(self):
        return self.supervisor

    class Meta:
        verbose_name = "Tutor Entidad Receptora por Empresa"
        verbose_name_plural = "Tutores x Entidad Receptora por Empresas"

    @staticmethod
    def flexbox_query(q):
        return TutorEntidadRecep.objects.filter(correo__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.supervisor = self.supervisor.upper()
        self.cargo = self.cargo.upper()
        super(TutorEntidadRecep, self).save(force_insert, force_update, using, update_fields)

class SolictudNoAceptada(models.Model):
    escenario =  models.ForeignKey(EscenarioPractica, blank=True, null=True, on_delete=models.CASCADE)
    proceso =  models.ForeignKey(ProcesoSeleccion, blank=True, null=True, on_delete=models.CASCADE)
    empresa =  models.ForeignKey(EmpresaConvenio, blank=True, null=True, on_delete=models.CASCADE)
    observacion = models.CharField(max_length=500, blank=True, null=True)
    fecha =  models.DateTimeField(blank=True, null=True)
    fechasolict =  models.DateTimeField(blank=True, null=True)

class SolictudDetallFinal(models.Model):
    solicitud =  models.ForeignKey(SolicitudPracticas, blank=True, null=True, on_delete=models.CASCADE)
    practica =  models.IntegerField(default=0, blank=True, null=True)
    horas =  models.CharField(max_length=50, blank=True, null=True)
    fecha =  models.DateTimeField(blank=True, null=True)


# #tabla parametros de descuento de rubros
class ParametroDescuento(models.Model):
    porcentaje = models.IntegerField(default=0,blank=True,null=True)
    cuotas = models.IntegerField(default=0,blank=True,null=True)
    diaretras = models.IntegerField(default=0,blank=True,null=True)
    nivel = models.BooleanField(default=False)
    diactual = models.BooleanField(default=False)
    activo = models.BooleanField(default=False)
    seminario = models.BooleanField(default=False)
    matricula = models.BooleanField(default=False)
    incluyematricula = models.BooleanField(default=False)
    cab = models.BooleanField(default=False)

    def __str__(self):
        unico =  str (self.porcentaje)
        if self.cuotas:
            unico = unico +' ' + str(self.cuotas)
        if self.diaretras:
            unico = unico +' ' + str(self.diaretras)
        if self.nivel:
            unico = unico +' NIVEL'
        if self.diactual:
            unico = unico +' DIAACTUAL'
        if self.activo:
            unico = unico +' ACTIVO'
        else:
            unico = unico +' FALSE'
        if self.seminario:
            unico = unico + ' SEMINARIO'
        return unico

    class Meta:
        verbose_name = "Parametros Descuento"
        verbose_name_plural = "Parametros Descuento"


class TallaUniforme(models.Model):
    nombre = models.TextField(max_length=10)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Talla Uniforme"
        verbose_name_plural = "Tallas Uniformes"
        ordering = ['nombre']

    @staticmethod
    def flexbox_query(q):
        return TallaUniforme.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

    def puede_eliminarse(self):
        return EntregaUniforme.objects.filter(tallauniforme=self).exists()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(TallaUniforme, self).save(force_insert, force_update, using, update_fields)

class ColorUniforme(models.Model):
    nombre = models.TextField(max_length=150)

    def __str__(self):
        return self.nombre

    def puede_eliminarse(self):
        return EntregaUniforme.objects.filter(coloruniforme=self).exists()


    class Meta:
        verbose_name = "Color Uniforme"
        verbose_name_plural = "Colores Uniformes"
        ordering = ['nombre']

    @staticmethod
    def flexbox_query(q):
        return ColorUniforme.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()
        super(ColorUniforme, self).save(force_insert, force_update, using, update_fields)

class TallaZapato(models.Model):
    nombre = models.TextField(max_length=10)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Talla Zapato"
        verbose_name_plural = "Tallas Zapatos"
        ordering = ['nombre']

    @staticmethod
    def flexbox_query(q):
        return TallaZapato.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

class ColorZapato(models.Model):
    nombre = models.TextField(max_length=150)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Color Zapato"
        verbose_name_plural = "Colores Zapatos"
        ordering = ['nombre']

    @staticmethod
    def flexbox_query(q):
        return ColorZapato.objects.filter(nombre__contains=q)

    def flexbox_repr(self):
        return str(self)

    def flexbox_alias(self):
        return str(self)

    def puede_eliminarse(self):
        return EntregaUniforme.objects.filter(colorzapatos=self).exists()


class EntregaUniforme(models.Model):
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    uniforme = models.BooleanField(default=False)
    tallauniforme = models.ForeignKey(TallaUniforme,null= True,blank =True, on_delete=models.CASCADE)
    coloruniforme = models.ForeignKey(ColorUniforme,null= True,blank =True, on_delete=models.CASCADE)
    zapatos = models.BooleanField(default=False)
    tallazapatos = models.ForeignKey(TallaZapato,null= True,blank =True, on_delete=models.CASCADE)
    colorzapatos = models.ForeignKey(ColorZapato,null= True,blank =True, on_delete=models.CASCADE)
    mandil = models.BooleanField(default=False)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    fecharep = models.DateField()
    entregado = models.BooleanField(default=False)
    observacion = models.CharField(null=True, blank=True, max_length=1000)
    fechaentregado = models.DateField(null=True, blank=True)
    usuarioentrega = models.ForeignKey(User, related_name=u"Usuario_Entrega", verbose_name=u"Usuario Entrega",blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.matricula.inscripcion)

    class Meta:
        verbose_name = "Entrega Uniforme"
        verbose_name_plural = "Entrega de Uniformes"
        ordering = ['matricula__inscripcion__persona__apellido1','matricula__inscripcion__persona__apellido2','matricula__inscripcion__persona__nombres']

class PermisosSga(models.Model):
    modulo= models.ForeignKey(Modulo, on_delete=models.CASCADE)
    permiso= models.CharField(max_length=100, blank=True, null=True)
    observacion= models.CharField(max_length=100, blank=True, null=True)
    accion= models.CharField(max_length=100, blank=True, null=True)

    def __str__(self):
        return str(self.modulo)

    class Meta:
        verbose_name = "Permiso Sga"
        verbose_name_plural = "Permisos Sga"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacion = self.observacion.upper()
        self.accion = self.accion.upper()
        super(PermisosSga, self).save(force_insert, force_update, using, update_fields)

class PagoSustentacionesDocente(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    valorxestudiante = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'))
    valortotal = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'))
    numestudiantes = models.IntegerField()
    fecha = models.DateTimeField()
    aprobado = models.BooleanField(default=False)
    fechaaprobacion = models.DateField(blank=True,null=True)
    rol = models.BooleanField(default=False)
    fechaingreso = models.DateField(blank=True,null=True)

    def __str__(self):
        return str(self.profesor)+' - $'+str(self.valortotal)

    class Meta:
        verbose_name = "Pago Sustentaciones Docente"
        verbose_name_plural = "Pagos Sustentaciones Docentes"


class SubirArchivoNota(models.Model):
    archivo = models.FileField(upload_to='archivocalificacion/%Y/%m/%d', max_length=200, blank=True, null=True)
    fecharegistro = models.DateTimeField(blank=True, null=True)
    profesor = models.ForeignKey(Persona, on_delete=models.CASCADE)
# /////////////////VISTA DE ADMINISTARITOVOS ESTUDIANTES PROFESORES SGA Y ONLINE Y CONTABLE
class ViewPersonasAdmProAlu(models.Model):
    personid = models.IntegerField(blank=True, null=True)
    nombres = models.CharField(max_length=500, null=True)
    apellido1 = models.CharField(max_length=500, null=True)
    apellido2 = models.CharField(max_length=500, null=True)
    cedula = models.CharField(max_length=500, null=True)
    pasaporte = models.CharField(max_length=500, null=True)
    emailinst = models.CharField(max_length=500, null=True)
    email = models.CharField(max_length=500, null=True)
    direccion = models.CharField(max_length=500, null=True)
    direccion2 = models.CharField(max_length=500, null=True)
    telefono = models.CharField(max_length=500, null=True)
    telefono_conv = models.CharField(max_length=500, null=True)
    sexo = models.CharField(max_length=500, null=True)
    cantonresid_id = models.IntegerField(blank=True, null=True)
    canton = models.CharField(max_length=500, null=True)
    parroquia = models.CharField(max_length=500, null=True)
    parroquia_id = models.IntegerField(blank=True, null=True)
    online = models.BooleanField(default=False)
    conduccion = models.BooleanField(default=False)
    graduado = models.BooleanField(default=False)
    rol = models.CharField(max_length=500, null=True)
    fechanacimiento = models.DateField(blank=True, null=True)
    estadocivil = models.CharField(max_length=500, null=True)
    tipobase = models.CharField(max_length=500, null=True)
    usuario = models.CharField(max_length=100, null=True)
    nacionalidad = models.CharField(max_length=300, null=True)
    extranjero = models.BooleanField(default=False)


    class Meta:
        managed = False
        db_table = 'view_personas_adm_pro_alu'


class ResponsableBodegaConsultorio(models.Model):
    medico = models.ForeignKey(Persona, on_delete=models.CASCADE)
    bodega = models.ForeignKey(Sede, on_delete=models.CASCADE)
    fechaasignacion = models.DateTimeField()
    usuarioasignacion = models.ForeignKey(User, verbose_name=u"Usuario Asigna", on_delete=models.CASCADE)
    activa = models.BooleanField(default=True)
    fechainactivacion = models.DateTimeField(blank=True, null=True)
    usuarioinactivacion = models.ForeignKey(User, related_name=u"Usuario Inactiva+", verbose_name=u"Usuario Inactiva", blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.medico.apellido1)+' - '+str(self.medico.apellido2)+' - '+str(self.medico.nombres)+' - '+str(self.bodega.nombre)

    class Meta:
        verbose_name = "Responsable Bodega Consultorio"
        verbose_name_plural = "Responsables Bodegas Consultorios"

class SupervisorPracticas(models.Model):
    profesormateria = models.ForeignKey(ProfesorMateria, on_delete=models.CASCADE)
    solicitudpracticas = models.ForeignKey(SolicitudPracticas, on_delete=models.CASCADE)
    desde = models.DateTimeField(blank=True, null=True)
    hasta = models.DateTimeField(blank=True, null=True)
    activo = models.BooleanField(default=False)

    def __str__(self):
        return str(self.profesormateria.profesor)

    class Meta:
        verbose_name = "Supervisor Practicas Pre-Profesionales"
        verbose_name_plural = "Supervisores Practicas Pre-Profesionales"

class TipoSupervisionPracticas(models.Model):
    nombre = models.TextField(max_length=150)
    activo = models.BooleanField(blank=True, null=True)

    def __str__(self):
        return str(self.nombre)

    class Meta:
        verbose_name = "Tipo de Supervision Docente"
        verbose_name_plural = "Tipos de Supervisiones Docente"

class SupervisionPracticas(models.Model):
    supervisor = models.ForeignKey(SupervisorPracticas, on_delete=models.CASCADE)
    numsupervision = models.IntegerField(default=0)
    tipo = models.ForeignKey(TipoSupervisionPracticas, blank=True, null=True, on_delete=models.CASCADE)
    ejecucion = models.CharField(max_length=300, blank=True, null=True)
    observaciones = models.CharField(max_length=300, blank=True, null=True)

    def detalle(self):
        if SupervisionPracticasDet.objects.filter(supervision=self).exists:
            return SupervisionPracticasDet.objects.filter(supervision=self)
        return False

    def __str__(self):
        return (str(self.supervisor.solicitudpracticas) +" - "+ str(self.supervisor))

    class Meta:
        verbose_name = "Supervision Practicas Pre-Profesionales"
        verbose_name_plural = "Supervisiones Practicas Pre-Profesionales"

class SupervisionPracticasDet(models.Model):
    supervision = models.ForeignKey(SupervisionPracticas, on_delete=models.CASCADE)
    indicadoracademico = models.ForeignKey(IndicadorAcademico, on_delete=models.CASCADE)
    cumple =  models.BooleanField(default=False)

    def __str__(self):
        return (str(self.supervision) +" - "+ str(self.indicadoracademico))

    class Meta:
        verbose_name = "Supervision Practicas Pre-Profesionales Detalle"
        verbose_name_plural = "Supervisiones Practicas Pre-Profesionales Detalle"

class TutorEncuesta(models.Model):
    fechacreacion=models.DateField(max_length=30,blank=True,null=True)
    horacreacion=models.DateTimeField(max_length=30,blank=True,null=True)
    cabecera=models.CharField(max_length=200, blank=True, null=True)
    objetivos=models.CharField( max_length=500,blank=True, null=True,verbose_name =u'Objetivos')
    recomendaciones=models.CharField( max_length=500,blank=True, null=True,verbose_name =u'Recomendaciones')
    estado=models.BooleanField(default=False)
    usuario=models.ForeignKey(User, on_delete=models.CASCADE)


    class Meta:
        verbose_name = "Tutor Encuesta"
        verbose_name_plural = "Tutores Encuestas"

    def puedeeliminarse(self):
        return EncuestaAmbitoIndicador.objects.filter(encuestainscripcion__encuesta=self).exists()

    def sepuede_eliminar(self):
        return AmbitoEncuestaTutor.objects.filter(encuestatutor=self).exists()
    # def oculta_pregunta(self):
    #     return


class IndicadoresEvaluacionTutor(models.Model):
    nombre=models.CharField( max_length=100,blank=True, null=True,verbose_name =u'Indicadores')
    estado=models.BooleanField(default=True)

    def __str__(self):
        return str(self.nombre)

    def existe_en_encuesta(self):
        return EncuestaAmbitoIndicador.objects.filter(indicador=self).exists()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        if self.nombre: self.nombre = self.nombre.upper()
        super(IndicadoresEvaluacionTutor, self).save(force_insert, force_update, using, update_fields)



class AmbitosTutor(models.Model):
    pregunta=models.CharField( max_length=300,blank=True, null=True,verbose_name =u'pregunta')
    orden=models.IntegerField(blank=True, null=True)
    estado=models.BooleanField(default=True)

    def __str__(self):
        return str(self.pregunta)

    def ocultabotonencuesta(self,encuesta):
        return AmbitoEncuestaTutor.objects.filter(ambitotutor=self,encuestatutor=encuesta).exists()

    def existe_en_encuesta(self):
        return EncuestaAmbitoIndicador.objects.filter(ambito=self).exists()

class AmbitoEncuestaTutor(models.Model):
    ambitotutor=models.ForeignKey(AmbitosTutor, on_delete=models.CASCADE)
    encuestatutor=models.ForeignKey(TutorEncuesta, on_delete=models.CASCADE)



class EncuentasCarrera(models.Model):
    carrera=models.ForeignKey(Carrera, on_delete=models.CASCADE)
    encuestatutor=models.ForeignKey(TutorEncuesta, on_delete=models.CASCADE)
    estado= models.BooleanField(default=True)

class EncuestaInscripcion(models.Model):
    encuesta=models.ForeignKey(TutorEncuesta, on_delete=models.CASCADE)
    inscripcion=models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    tutor=models.ForeignKey(NivelTutor, on_delete=models.CASCADE)
    estado=models.BooleanField(default=True)
    fecha=models.DateTimeField()
    finalizado= models.BooleanField(default=False)

    def puede_finalizar_encuesta(self):
        return EncuestaAmbitoIndicador.objects.filter(encuestainscripcion=self,indicador=None).exists()

    def bloquea_encuesta(self):
        return EncuestaInscripcion.objects.filter(finalizado=True)


class EncuestaAmbitoIndicador(models.Model):
    encuestainscripcion=models.ForeignKey(EncuestaInscripcion, on_delete=models.CASCADE)
    ambito= models.ForeignKey(AmbitosTutor, on_delete=models.CASCADE)
    indicador=models.ForeignKey(IndicadoresEvaluacionTutor , blank=True, null=True, on_delete=models.CASCADE)

class CoordinadorPracticas(models.Model):
    coordinador = models.ForeignKey(Persona, on_delete=models.CASCADE)
    solicitudpracticas = models.ForeignKey(SolicitudPracticas, on_delete=models.CASCADE)
    activo = models.BooleanField(blank=True, null=True)


class RegistroValorporDocente(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    segmento = models.ForeignKey(TipoSegmento, on_delete=models.CASCADE)
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    valor = models.FloatField(blank=True, null=True)
    activo = models.BooleanField(default=True)
    fecha = models.DateTimeField()
    usuario = models.ForeignKey(User, verbose_name=u"Usuario Asigna", on_delete=models.CASCADE)

    def __str__(self):
        return str(self.profesor.persona.apellido1)+' - '+str(self.profesor.persona.apellido2)+' - '+str(self.profesor.persona.nombres)+' Segmento '+str(self.segmento.descripcion)+' - '+str(self.valor)

    class Meta:
        verbose_name = "Registro Valor por Docente"
        verbose_name_plural = "Registros Valores por Docentes"

class ParametroSeguimiento(models.Model):
    descripcion = models.CharField(max_length=500)
    ptomin = models.IntegerField()
    ptomax = models.IntegerField()
    activo = models.BooleanField(default=True)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = "Parametro Seguimiento"
        verbose_name_plural = "Parametros Seguimiento"

class SeguimientoTutor(models.Model):
    niveltutor = models.ForeignKey(NivelTutor, on_delete=models.CASCADE)
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.matricula)

    def cab_seguimiento(self):
        return CabSeguimiento.objects.filter(seguimiento=self)

    class Meta:
        verbose_name = "Seguimiento Tutor"
        verbose_name_plural = "Seguimiento Tutores"

class MatriculaTutor(models.Model):
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    niveltutor = models.ForeignKey(NivelTutor, on_delete=models.CASCADE)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return str(self.matricula.inscripcion)

    class Meta:
        verbose_name = "Matricul Tutor"
        verbose_name_plural = "Matriculas Tutor"

class CabSeguimiento(models.Model):
    seguimiento = models.ForeignKey(SeguimientoTutor, on_delete=models.CASCADE)
    fecha = models.DateField()
    observacion = models.CharField(max_length=2500)

    def __str__(self):
        return str(self.seguimiento)

    def detalle(self,parametro):
        if DetSeguimiento.objects.filter(cabseguimiento=self,parametro=parametro).exists():
            return DetSeguimiento.objects.filter(cabseguimiento=self,parametro=parametro)[:1].get()
        return None

    class Meta:
        verbose_name = "Cab Seguimiento"
        verbose_name_plural = "Cab Seguimientos"

class DetSeguimiento(models.Model):
    cabseguimiento = models.ForeignKey(CabSeguimiento, on_delete=models.CASCADE)
    parametro = models.ForeignKey(ParametroSeguimiento, on_delete=models.CASCADE)
    puntaje = models.IntegerField()

    def __str__(self):
        return str(self.cabseguimiento)

    class Meta:
        verbose_name = "Det Seguimiento"
        verbose_name_plural = "Det Seguimientos"

class PeriodoExamen(models.Model):
    nombre = models.CharField(max_length=100,blank=True,null=True)
    inicio = models.DateField(blank=True,null=True)
    fin = models.DateField(blank=True,null=True)
    activo = models.BooleanField(default=True)

    def __str__(self):
        return self.nombre

    @staticmethod
    def flexbox_query(q):
        return PeriodoExamen.objects.filter(Q(nombre__contains=q))

    def flexbox_repr(self):
        return self.nombre


    def puede_seleccionar(self):
        return  datetime.now().date() <= self.fin

    class Meta:
        verbose_name = "Periodo de Examen"
        verbose_name_plural = "Periodo de Examenes"

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.nombre = self.nombre.upper()  if self.nombre else ''
        super(PeriodoExamen, self).save(force_insert, force_update, using,update_fields)

class ProvinciaPeriodoEx(models.Model):
    periodo = models.ForeignKey(PeriodoExamen, on_delete=models.CASCADE)
    provincia = models.ForeignKey(Provincia, on_delete=models.CASCADE)
    ubicacion = models.CharField(max_length=500)

    def __str__(self):
        return str(self.provincia)

    def cronograma_examen(self):
        return CronogramaExamen.objects.filter(provincia=self).order_by('materia__nivel__paralelo','materia__asignatura','fechaexamen','horainicio','horafin','fecharecuperacion','horainiciorecup','horafinrecup')

    def detalle_materias_examen(self, fecha, matricula):
        materiasaprobadas = []
        for eitb in EvaluacionITB.objects.filter(materiaasignada__matricula=matricula):
            suma = (eitb.n1 + eitb.n2 + eitb.n3 + eitb.n4)
            if suma >= MIN_APROBACION:
                materiasaprobadas.append(eitb.materiaasignada.materia.id)

        return CronogramaExamen.objects.filter(provincia=self, materia__nivel=matricula.nivel, fechaexamen=fecha, materia__id__in=materiasaprobadas).order_by('materia__nivel__paralelo', 'materia__asignatura', 'fechaexamen', 'horainicio', 'horafin',  'fecharecuperacion', 'horainiciorecup','horafinrecup')

    def detalle_materias_recuperacion(self, fecha, matricula):
        materiasreporbadas = []
        for eitb in EvaluacionITB.objects.filter(materiaasignada__matricula=matricula):
            suma = (eitb.n1 + eitb.n2 + eitb.n3 + eitb.n4)
            if suma < MAX_RECUPERACION and suma >= MIN_RECUPERACION :
                materiasreporbadas.append(eitb.materiaasignada.materia.id)

        return CronogramaExamen.objects.filter(provincia=self, materia__nivel=matricula.nivel, fecharecuperacion=fecha,
                                               materia__id__in=materiasreporbadas).order_by('materia__nivel__paralelo',
                                                                                            'materia__asignatura',
                                                                                            'fechaexamen', 'horainicio',
                                                                                            'horafin',
                                                                                            'fecharecuperacion',
                                                                                            'horainiciorecup',
                                                                                            'horafinrecup')

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.ubicacion = self.ubicacion.upper()  if self.ubicacion else ''
        super(ProvinciaPeriodoEx, self).save(force_insert, force_update, using,update_fields)

    class Meta:
        verbose_name = "Provincia Periodo Ex"
        verbose_name_plural = "Provincias Periodos Ex"

class CronogramaExamen(models.Model):
    provincia =  models.ForeignKey(ProvinciaPeriodoEx, on_delete=models.CASCADE)
    materia = models.ForeignKey(Materia,blank=True,null=True, on_delete=models.CASCADE)
    fechaexamen = models.DateField(blank=True,null=True)
    horainicio = models.TimeField(blank=True,null=True)
    horafin = models.TimeField(blank=True,null=True)
    fecharecuperacion = models.DateField(blank=True,null=True)
    horainiciorecup = models.TimeField(blank=True, null=True)
    horafinrecup = models.TimeField(blank=True, null=True)
    capacidad = models.IntegerField(blank=True, null=True)

    def __str__(self):
        return str(self.provincia)

    def puede_eliminarse(self):
        if CronogramaExamen.objects.filter(materia=self.materia,provincia=self.provincia).exists():
            if CronogramaExamen.objects.filter(materia=self.materia, provincia = self.provincia).count() == 1 :
                return False
        return True

    def seleccionada(self,matricula):
        return CronogramaAlumno.objects.filter(cronogramaexamen=self, matricula=matricula).exists()

    def cantidadestudiante(self):
        cantidad = 0
        if CronogramaAlumno.objects.filter(cronogramaexamen=self).exists():
            cantidad =CronogramaAlumno.objects.filter(cronogramaexamen=self).count()
        return cantidad

    class Meta:
        verbose_name = "Cronograma Examen"
        verbose_name_plural = "Cronogramas de Examenes"

class CronogramaAlumno(models.Model):
    cronogramaexamen = models.ForeignKey(CronogramaExamen, on_delete=models.CASCADE)
    matricula = models.ForeignKey(Matricula, on_delete=models.CASCADE)
    fecha = models.DateField(blank=True,null=True)
    recuperacion = models.BooleanField(default=False)

    def __str__(self):
        return str(self.matricula)

    class Meta:
        verbose_name = "Cronograma Alumno"
        verbose_name_plural = "Cronogramas de Alumnos"

class NivelPeriodoEx(models.Model):
    periodoexamen = models.ForeignKey(PeriodoExamen, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel, on_delete=models.CASCADE)

    class Meta:
        verbose_name = "Nivel Periodo de Examen"
        verbose_name_plural = "Niveles Periodos de Examenes"

class PagoPracticasDocente(models.Model):
    descripcion = models.CharField(max_length=500)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    inicio = models.DateField(blank=True,null=True)
    fin = models.DateField(blank=True,null=True)
    # archivo = models.FileField(upload_to='informepracticas/%Y/%m/%d', max_length=200)
    archivo = models.FileField(upload_to='informepracticas/%Y/%m/%d', max_length=200,null = True, blank= True)
    pagoaprobado = models.BooleanField(default=False)
    fechaaprobacion = models.DateField(blank=True,null=True)
    valor = models.FloatField(default=0)
    rol = models.BooleanField(default=False)
    habilitar = models.BooleanField(default=True)

    def __str__(self):
        return str(self.descripcion)

    class Meta:
        verbose_name = "Pago Practica Docente"
        verbose_name_plural = "Pagos Practicas Docentes"

    def num_practicas(self):
        if NivelPagoPracticasDocente.objects.filter(pago=self).exists():
            nivel_pago = NivelPagoPracticasDocente.objects.filter(pago=self)
            if Matricula.objects.filter(nivel__grupo__id__in=nivel_pago.values('nivel__grupo__id')).exists():
                matriculas = Matricula.objects.filter(nivel__grupo__id__in=nivel_pago.values('nivel__grupo__id'))
                return InscripcionPracticas.objects.filter(profesor=self.profesor, inicio__gte=self.inicio, fin__lte=self.fin, inscripcion__id__in=matriculas.values('inscripcion__id')).count()
        return 0

    def num_inscripciones(self):
        numinscripciones = []
        num=0
        if NivelPagoPracticasDocente.objects.filter(pago=self).exists():
            nivel_pago = NivelPagoPracticasDocente.objects.filter(pago=self)
            if Matricula.objects.filter(nivel__grupo__id__in=nivel_pago.values('nivel__grupo__id')).exists():
                matriculas = Matricula.objects.filter(nivel__grupo__id__in=nivel_pago.values('nivel__grupo__id'))
                practicas = InscripcionPracticas.objects.filter(profesor=self.profesor, inicio__gte=self.inicio, fin__lte=self.fin, inscripcion__id__in=matriculas.values('inscripcion__id'))
                for i in practicas:
                    numinscripciones.append(i.inscripcion.id)
                return len(set(numinscripciones))
        return 0


    def download_link(self):
        return self.archivo.url

    def puede_eliminar(self):
        if not self.rol:
            return True

    def cantidad_aprobados(self):
        numinscripciones = []
        if NivelPagoPracticasDocente.objects.filter(pago=self).exists():
            nivel_pago = NivelPagoPracticasDocente.objects.filter(pago=self)
            if Matricula.objects.filter(nivel__grupo__id__in=nivel_pago.values('nivel__grupo__id')).exists():
                matriculas = Matricula.objects.filter(nivel__grupo__id__in=nivel_pago.values('nivel__grupo__id'))
                practicas = InscripcionPracticas.objects.filter(profesor=self.profesor, inicio__gte=self.inicio, fin__lte=self.fin, inscripcion__id__in=matriculas.values('inscripcion__id'), aprobado=True)
                for i in practicas:
                    numinscripciones.append(i.inscripcion.id)
                return len(set(numinscripciones))
        return 0

    def cantidad_noaprobados(self):
        if NivelPagoPracticasDocente.objects.filter(pago=self).exists():
            nivel_pago = NivelPagoPracticasDocente.objects.filter(pago=self)
            if Matricula.objects.filter(nivel__grupo__id__in=nivel_pago.values('nivel__grupo__id')).exists():
                matriculas = Matricula.objects.filter(nivel__grupo__id__in=nivel_pago.values('nivel__grupo__id'))
                practicas = InscripcionPracticas.objects.filter(profesor=self.profesor, inicio__gte=self.inicio, fin__lte=self.fin, inscripcion__id__in=matriculas.values('inscripcion__id'), aprobado=False)
            return practicas.count()
        return 0

class NivelPracticaInduccion(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel, on_delete=models.CASCADE)
    induccion = models.BooleanField(default=False)
    desde = models.DateField(blank=True,null=True)
    hasta = models.DateField(blank=True,null=True)

class NivelPagoPracticasDocente(models.Model):
    pago = models.ForeignKey(PagoPracticasDocente, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel, on_delete=models.CASCADE)

class CostoAsignatura(models.Model):
    asignaturamalla = models.ForeignKey(AsignaturaMalla, on_delete=models.CASCADE)
    activo = models.BooleanField(default=True, blank=True)
    valor = models.FloatField(default=0,blank=True, null=True)
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    usrinactiva = models.ForeignKey(User,related_name="UserInactiva",verbose_name="usuarioinactiva", blank=True, null=True, on_delete=models.CASCADE)
    fechainactiva = models.DateTimeField(blank=True, null=True)

    def __str__(self):
        return str(self.asignaturamalla.malla.carrera) + " " + str(self.asignaturamalla.asignatura) + " " +str(self.valor)

    class Meta:
        verbose_name = "Costo de Asignatura en Malla"
        verbose_name_plural = "Costos de Asignaturas en Mallas"


class RegistroPlagioTarjetas(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    plagioactivo = models.BooleanField(default=True, blank=True)
    observacionplagio = models.CharField(max_length=2000, blank=True, null=True)
    usuario = models.ForeignKey(User,verbose_name="Usuario", blank=True, null=True, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True, null=True)
    usrquitaplagio = models.ForeignKey(User,related_name="UserQuitaPlagio",verbose_name="usrquitaplagio", blank=True, null=True, on_delete=models.CASCADE)
    fechaquitaplagio = models.DateTimeField(blank=True, null=True)
    observacionquitaplagio = models.CharField(max_length=2000, blank=True, null=True)
    soporte = models.FileField(upload_to='soporteplagio/%Y/%m/%d', max_length=200,null = True, blank= True)
    rubro = models.ForeignKey(Rubro, blank=True, null=True, on_delete=models.CASCADE, related_name="rubro",verbose_name="rubro") #rubro creado como penmalizacion
    factura = models.ForeignKey(Factura, blank=True, null=True, on_delete=models.CASCADE, related_name="factura",verbose_name="factura") #Factura que se pago con fraude
    rubroespecie = models.ForeignKey(RubroEspecieValorada, on_delete=models.CASCADE, null = True, blank= True)

    def download_soporte(self):
        return self.soporte.url

    def __str__(self):
        return str(self.inscripcion.persona.nombre_completo_inverso()) + " " + str(self.usuario) + " " +str(self.fecha)+ " " +str(self.plagioactivo)

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.observacionplagio = self.observacionplagio.upper() if self.observacionplagio else ''
        self.observacionquitaplagio = self.observacionquitaplagio.upper() if self.observacionquitaplagio else ''
        super(RegistroPlagioTarjetas, self).save(force_insert, force_update, using, update_fields)


    class Meta:
        verbose_name = "Registro Plagio Tarjeta"
        verbose_name_plural = "Registros de  Plagios de Tarjetas"

class ViewGeneralwsdl(models.Model):
    inscripcion_id = models.IntegerField(blank=True, null=True)
    nombre = models.CharField(max_length=500, null=True) #nombres
    tipodocumentacion = models.CharField(max_length=20, null=True)
    pasaporte = models.BooleanField(default=False)
    documento = models.CharField(max_length=500, null=True)
    rubro_id = models.IntegerField(blank=True, null=True)
    rubroinscripcion = models.BooleanField(default=False)
    rubromatricula = models.BooleanField(default=False)
    rubrocuota = models.BooleanField(default=False)
    rubroextracurricular = models.BooleanField(default=False)
    rubromateria = models.BooleanField(default=False)
    rubroespecieevalor = models.BooleanField(default=False)
    rubronotadebito = models.BooleanField(default=False)
    rubroplanmaterias = models.BooleanField(default=False)
    rubrootro = models.BooleanField(default=False)
    nombrerubro = models.CharField(max_length=500, null=True)
    referencia01 = models.CharField(max_length=200, null=True)
    valor = models.FloatField(blank=True, null=True)
    valorinteres = models.FloatField(blank=True, null=True)
    valormora = models.FloatField(blank=True, null=True)
    valorcomi = models.FloatField(blank=True, null=True)
    valorimpuesto = models.FloatField(blank=True, null=True)
    referencia02 = models.CharField(max_length=100, null=True)
    fechavence = models.DateField(blank=True, null=True)
    valorrubro = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'view_generalwsdl'


class VacunasCovid(models.Model):
    nombre = models.CharField(max_length=200)

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = "Vacuna"
        verbose_name_plural = "Vacunas"
        ordering = ["nombre"]


class RegistroVacunas(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    estavacunado = models.BooleanField(default=False)
    tipovacuna = models.ForeignKey(VacunasCovid,blank=True, null=True, on_delete=models.CASCADE)
    primeradosis = models.BooleanField(default=False)
    segundadosis = models.BooleanField(default=False)
    terceradosis = models.BooleanField(default=False)
    hatenidocovid = models.BooleanField(default=False)
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    fecharegistro = models.DateTimeField()
    vacunaterceradosis = models.ForeignKey(VacunasCovid,related_name="TipoTerceraDosis",verbose_name="tipoterceradosis",blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return elimina_tildes(self.persona.nombre_completo_inverso())+' '+ self.persona.cedula+' Vacuna '+str(self.estavacunado)+' Ha tenido covid '+str(self.hatenidocovid)+' F.Registro '+str(self.fecharegistro)+' Usuario: '+str(self.usuario.username)

    class Meta:
        verbose_name = "Registro de Vacuna"
        verbose_name_plural = "Registros de Vacunas"
        ordering = ["persona"]

class ArchivoExcelBecadosMunicipio(models.Model):
    archivo = models.FileField(upload_to='xls_becasmunicipio', max_length=200)
    archichoprocesado = models.FileField(upload_to='xls_becasmunicipio', max_length=200)

    class Meta:
        verbose_name = "Archivo Beca Municipio"
        verbose_name_plural = "Archivos Becas Municipio"

class ViewCertificacionesIngles(models.Model):
    certificacion = models.CharField(max_length=100, null=True)
    tipo = models.CharField(max_length=100, null=True)
    cedula = models.CharField(max_length=100, null=True)
    pasaporte = models.CharField(max_length=100, null=True)

    class Meta:
        managed = False
        db_table = 'view_certificaciones_ingles'

class TipoIngresoDocente(models.Model):
    descripcion = models.CharField(max_length=200, null=True, blank=True)
    estado = models.BooleanField(default=False)

class IngresoDocente(models.Model):
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    tipo = models.ForeignKey(TipoIngresoDocente, on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'))
    fecha = models.DateTimeField()
    aprobado = models.BooleanField(default=False)
    fechaaprobacion = models.DateField(blank=True,null=True)
    rol = models.BooleanField(default=False)

class ViewInscripcionesOnline(models.Model):
    cedula = models.CharField(max_length=100, null=True)
    pasaporte = models.CharField(max_length=100, null=True)

    class Meta:
        managed = False
        db_table = 'view_inscripcionesonline'

class ViewCursosIngles(models.Model):
    cedula = models.CharField(max_length=100, null=True)
    pasaporte = models.CharField(max_length=100, null=True)
    asignatura = models.CharField(max_length=100, null=True)
    estado = models.CharField(max_length=100, null=True)
    asignatura_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'view_cursos_ingles'


class OrganizacionAprendizaje(models.Model):
    descripcion = models.CharField(max_length=500)
    iniciales   = models.CharField(max_length=20)

    def __str__(self):
        return elimina_tildes(self.descripcion) + " - " +  str(self.iniciales)


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper() if self.descripcion else ''
        self.iniciales = self.iniciales.upper() if self.iniciales else ''
        super(OrganizacionAprendizaje, self).save(force_insert, force_update, using, update_fields)

    class Meta:
        verbose_name = "Organizacion Aprendizaje"
        verbose_name_plural = "Organizacion Aprendizaje"

class OrganizacionAsignaturaMalla(models.Model):
    asignaturamalla = models.ForeignKey(AsignaturaMalla, on_delete=models.CASCADE)
    organizacion = models.ForeignKey(OrganizacionAprendizaje, on_delete=models.CASCADE)
    horas = models.IntegerField()

    class Meta:
        verbose_name = "Organizacion Aprendizaje Asignatura Malla"
        verbose_name_plural = "Organizacion Aprendizaje Asignaturas Malla"


class CitasCancelasBox(models.Model):
    cedula = models.CharField(max_length=10, verbose_name="Cedula")
    tipovisita = models.ForeignKey(TipoVisitasBox, on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    atendido = models.BooleanField(default=False)

    class Meta:
        verbose_name = "Cita Cancela Box"
        verbose_name_plural = "Citas Canceladas Box"

    def buscarpersona(self):
        if VisitaBox.objects.filter(cedula=self.cedula).exists():
            visitab=VisitaBox.objects.filter(cedula=self.cedula)[:1].get()
            return visitab.nombre
        else:
            if ClienteFactura.objects.filter(ruc=self.cedula).exists():
                cliente= ClienteFactura.objects.filter(ruc=self.cedula)[:1].get()
                return cliente.nombre

    def buscarpersonavisita(self):
        if VisitaBox.objects.filter(cedula=self.cedula).exists():
            visitabox=VisitaBox.objects.filter(cedula=self.cedula)[:1].get()
            return visitabox
        else:
            return False

    def buscarpersonafactura(self):
        if ClienteFactura.objects.filter(ruc=self.cedula).exists():
            cliente= ClienteFactura.objects.filter(ruc=self.cedula)[:1].get()
            return cliente

class InscripcionesCAB(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, null=True, blank=True, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, null=True, blank=True, on_delete=models.CASCADE)
    ciudad = models.ForeignKey(Canton, related_name=u"ciudad", null=True, blank=True, verbose_name=u"Ciudad", on_delete=models.CASCADE)
    fecha = models.DateField(null=True, blank=True)
    estado = models.BooleanField(default=True)
    estado_civil = models.CharField(max_length=100, null=True, blank=True)
    num_cargasfam = models.IntegerField(null=True, blank=True)
    apellidos_conyuge = models.CharField(max_length=100, null=True, blank=True)
    nombres_conyuge = models.CharField(max_length=100, null=True, blank=True)
    tipo_identificacion_conyuge = models.CharField(max_length=100, null=True, blank=True)
    num_identificacion_conyuge = models.CharField(max_length=100, null=True, blank=True)
    pais_conyuge = models.ForeignKey(Pais, related_name=u"pais_conyuge", null=True, blank=True, verbose_name=u"Pais de Residencia Conyuge", on_delete=models.CASCADE)
    pais_resid = models.ForeignKey(Pais, related_name=u"pais_resid", null=True, blank=True, verbose_name=u"Pais de Residencia", on_delete=models.CASCADE)
    provincia_resid = models.ForeignKey(Provincia, null=True, blank=True, on_delete=models.CASCADE)
    canton_resid = models.ForeignKey(Canton, related_name=u"canton_resid", null=True, blank=True, verbose_name=u"Canton de Residencia", on_delete=models.CASCADE)
    parroquia_resid = models.ForeignKey(Parroquia, null=True, blank=True, on_delete=models.CASCADE)
    email = models.CharField(max_length=100, null=True, blank=True)
    domicilio = models.CharField(max_length=150, null=True, blank=True)
    convencional = models.CharField(max_length=100, null=True, blank=True)
    celular = models.CharField(max_length=100, null=True, blank=True)
    actecon_tipo = models.CharField(max_length=100, null=True, blank=True)
    actecon_empresa = models.CharField(max_length=100, null=True, blank=True)
    actecon_empresaactividad = models.CharField(max_length=100, null=True, blank=True)
    actecon_direccion = models.CharField(max_length=100, null=True, blank=True)
    actecon_telefono = models.CharField(max_length=100, null=True, blank=True)
    actecon_cargopolitico = models.BooleanField(default=False)
    proposito = models.CharField(max_length=100, null=True, blank=True)
    origen = models.CharField(max_length=100, null=True, blank=True)
    monto = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    en_cab = models.BooleanField(default=False)

    def __str__(self):
        return str(self.inscripcion)+' - Monto: '+str(self.monto)

    class Meta():
        verbose_name = "Inscripcion CAB"
        verbose_name_plural = "Inscripciones CAB"

    def informacion_economica(self, tipo):
        if InfoEconInscripcionesCAB.objects.filter(inscripcioncab=self, tipo=tipo).exists():
            info = InfoEconInscripcionesCAB.objects.filter(inscripcioncab=self, tipo=tipo).order_by('tipo', 'descripcion')
            total =InfoEconInscripcionesCAB.objects.filter(inscripcioncab=self, tipo=tipo).aggregate(Sum('valor'))['valor__sum']
            return [info,total]

    def referencias(self):
        return ReferenciaInscripcionesCAB.objects.filter(inscripcioncab=self).order_by('nombre')

    def beneficiarios(self):
        return BeneficiarioInscripcionesCAB.objects.filter(inscripcioncab=self).order_by('apellidos')

    def disponible(self):
        ingresos = InfoEconInscripcionesCAB.objects.filter(inscripcioncab=self, tipo='ingresos').aggregate(Sum('valor'))['valor__sum']
        gastos = InfoEconInscripcionesCAB.objects.filter(inscripcioncab=self, tipo='gastos').aggregate(Sum('valor'))['valor__sum']
        return(ingresos-gastos)

    def patrimonio(self):
        activos = InfoEconInscripcionesCAB.objects.filter(inscripcioncab=self, tipo='activos').aggregate(Sum('valor'))['valor__sum']
        pasivos = InfoEconInscripcionesCAB.objects.filter(inscripcioncab=self, tipo='pasivos').aggregate(Sum('valor'))['valor__sum']
        return(activos-pasivos)

    def cuotas(self):
        if CuotaCAB.objects.filter(inscripcioncab=self).exists():
            return CuotaCAB.objects.filter(inscripcioncab=self).order_by('id')

    def solicitud_desafiliacion(self):
        if DesafiliacionCAB.objects.filter(inscripcioncab=self, solicitud_enviada=True).exists():
            return DesafiliacionCAB.objects.filter(inscripcioncab=self, solicitud_enviada=True).order_by('-id')[:1].get()

    def garante(self):
        if GaranteCAB.objects.filter(inscripcioncab=self).exists():
            print(GaranteCAB.objects.filter(inscripcioncab=self).order_by('-id')[:1].get().id)
            return GaranteCAB.objects.filter(inscripcioncab=self).order_by('-id')[:1].get()

class InfoEconInscripcionesCAB(models.Model):
    inscripcioncab = models.ForeignKey(InscripcionesCAB, on_delete=models.CASCADE)
    tipo = models.CharField(max_length=100, null=True, blank=True)
    descripcion = models.CharField(max_length=100, null=True, blank=True)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)

    def __str__(self):
        return str(self.inscripcioncab.inscripcion)+' - '+str(self.descripcion)+': '+str(self.valor)

    class Meta():
        verbose_name = "Informacion Economica CAB"
        verbose_name_plural = "Infomacion Economica CAB"

class ReferenciaInscripcionesCAB(models.Model):
    inscripcioncab = models.ForeignKey(InscripcionesCAB, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=100, null=True, blank=True)
    relacion = models.CharField(max_length=100, null=True, blank=True)
    telefono = models.CharField(max_length=100, null=True, blank=True)
    ciudad = models.ForeignKey(Canton, null=True, blank=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.inscripcioncab.inscripcion) + ' -  ' + " Referencia: "+str(self.nombre)

    class Meta():
        verbose_name = "Referencia CAB"
        verbose_name_plural = "Referencias CAB"

class BeneficiarioInscripcionesCAB(models.Model):
    inscripcioncab = models.ForeignKey(InscripcionesCAB, on_delete=models.CASCADE)
    apellidos = models.CharField(max_length=100, null=True, blank=True)
    nombres = models.CharField(max_length=100, null=True, blank=True)
    porcentaje = models.IntegerField(null=True, blank=True)
    telefono = models.CharField(max_length=100, null=True, blank=True)
    tipo_identificacion = models.CharField(max_length=100, null=True, blank=True)
    numero_identificacion = models.CharField(max_length=100, null=True, blank=True)
    parentesto = models.CharField(max_length=100, null=True, blank=True)

    def __str__(self):
        return str(self.inscripcioncab.inscripcion) + ' -  ' + " Beneficiario: "+str(self.apellidos) +" "+ str(self.nombres)

    class Meta():
        verbose_name = "Beneficiario CAB"
        verbose_name_plural = "Beneficiarios CAB"

class CuotaCAB(models.Model):
    descripcion = models.CharField(max_length=100, null=True, blank=True)
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    inscripcioncab = models.ForeignKey(InscripcionesCAB, on_delete=models.CASCADE)
    fechavence = models.DateField(null=True, blank=True)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    cancelado = models.BooleanField(default=False)
    fechapago = models.DateField(null=True, blank=True)
    valor_benef = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    fecha_benef = models.DateField(null=True, blank=True)
    # PARA EL RECIBO
    numero_recibo = models.IntegerField(verbose_name=u"Numero de Recibo", null=True, blank=True)
    fecha_recibo = models.DateField(blank=True,null=True)
    usuario = models.ForeignKey(User, blank=True,null=True, on_delete=models.CASCADE)
    formadepago = models.ForeignKey(FormaDePago,blank=True,null=True, on_delete=models.CASCADE)
    # Cheque
    numerocheq = models.CharField(max_length=50,blank=True,null=True)
    fechacobro = models.DateField(blank=True,null=True)
    emite = models.CharField(max_length=100)
    # Tarjeta
    referencia = models.CharField(max_length=50,blank=True,null=True)
    tipotarje = models.ForeignKey(TipoTarjetaBanco,blank=True,null=True, on_delete=models.CASCADE)
    poseedor = models.CharField(max_length=100,blank=True,null=True)
    procesadorpago = models.ForeignKey(ProcesadorPagoTarjeta,blank=True,null=True, on_delete=models.CASCADE)
    # Cheque o tarjeta
    banco = models.ForeignKey(Banco,blank=True,null=True, on_delete=models.CASCADE)
    # Transferencia/Deposito
    referenciatransferencia = models.CharField(max_length=50,blank=True,null=True)
    cuentabanco = models.ForeignKey(CuentaBanco,blank=True,null=True, on_delete=models.CASCADE)
    nivel = models.ForeignKey(Nivel,blank=True,null=True, on_delete=models.CASCADE)
    # FINANCIERO
    benef_cab = models.BooleanField(default=False)
    # encab = models.BooleanField(default=False)
    # fechaencab = models.DateField(blank=True,null=True)

    def __str__(self):
        return str(self.inscripcioncab.inscripcion) + ' -  ' + " Fecha: "+str(self.fecha_recibo) +" Valor: "+ str(self.valor)

    class Meta():
        verbose_name = "Couta CAB"
        verbose_name_plural = "Coutas CAB"

class DesafiliacionCAB(models.Model):
    inscripcioncab = models.ForeignKey(InscripcionesCAB, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=1500,blank=True,null=True)
    fecha = models.DateField(null=True, blank=True)
    solicitud = models.FileField(upload_to='gestion/', max_length=200,blank=True,null=True)
    solicitud_enviada = models.BooleanField(default=False)
    solicitud_aceptada = models.BooleanField(default=False)
    solicitud_rechazada = models.BooleanField(default=False)
    motivo_rechazo = models.CharField(max_length=200,blank=True,null=True)
    fecha_aceptacionrechazo = models.DateField(null=True, blank=True)

    def __str__(self):
        return str(self.inscripcioncab.inscripcion) + ' -  ' + " Fecha: "+str(self.fecha)

    class Meta():
        verbose_name = "Desafiliacion CAB"
        verbose_name_plural = "Desafiliaciones CAB"

class GaranteCAB(models.Model):
    inscripcioncab = models.ForeignKey(InscripcionesCAB, on_delete=models.CASCADE)
    fecha = models.DateField(null=True, blank=True)
    apellidos = models.CharField(max_length=100, null=True, blank=True)
    nombre = models.CharField(max_length=100, null=True, blank=True)
    tipo_identificacion = models.CharField(max_length=100, null=True, blank=True)
    num_identificacion = models.CharField(max_length=100, null=True, blank=True)
    pais = models.ForeignKey(Pais, null=True, blank=True, related_name=u"pais_nacimiento_garante", verbose_name=u"Pais de Nacimiento", on_delete=models.CASCADE)
    canton = models.ForeignKey(Canton, null=True, blank=True, related_name=u"canton_nacimiento_garante", verbose_name=u"Ciudad de Nacimiento", on_delete=models.CASCADE)
    fecha_nacimiento = models.DateField(null=True, blank=True)
    estado_civil = models.CharField(max_length=100, null=True, blank=True)
    num_cargasfam = models.IntegerField(null=True, blank=True)
    pais_resid = models.ForeignKey(Pais, related_name=u"pais_resid_garante", null=True, blank=True, verbose_name=u"Pais de Residencia", on_delete=models.CASCADE)
    provincia_resid = models.ForeignKey(Provincia, null=True, blank=True, on_delete=models.CASCADE)
    canton_resid = models.ForeignKey(Canton, related_name=u"canton_resid_garante", null=True, blank=True, verbose_name=u"Canton de Residencia", on_delete=models.CASCADE)
    parroquia_resid = models.ForeignKey(Parroquia, null=True, blank=True, on_delete=models.CASCADE)
    email = models.CharField(max_length=100, null=True, blank=True)
    domicilio = models.CharField(max_length=150, null=True, blank=True)
    convencional = models.CharField(max_length=100, null=True, blank=True)
    celular = models.CharField(max_length=100, null=True, blank=True)
    actecon_tipo = models.CharField(max_length=100, null=True, blank=True)
    actecon_empresa = models.CharField(max_length=100, null=True, blank=True)
    actecon_empresaactividad = models.CharField(max_length=100, null=True, blank=True)
    actecon_direccion = models.CharField(max_length=100, null=True, blank=True)
    actecon_telefono = models.CharField(max_length=100, null=True, blank=True)
    actecon_cargopolitico = models.BooleanField(default=False)

    def informacion_economica(self, tipo):
        if InfoEconGaranteCAB.objects.filter(garante=self, tipo=tipo).exists():
            info = InfoEconGaranteCAB.objects.filter(garante=self, tipo=tipo).order_by('tipo', 'descripcion')
            total =InfoEconGaranteCAB.objects.filter(garante=self, tipo=tipo).aggregate(Sum('valor'))['valor__sum']
            return [info,total]

    def disponible(self):
        ingresos = InfoEconGaranteCAB.objects.filter(garante=self, tipo='ingresos').aggregate(Sum('valor'))['valor__sum']
        gastos = InfoEconGaranteCAB.objects.filter(garante=self, tipo='gastos').aggregate(Sum('valor'))['valor__sum']
        return(ingresos-gastos)

    def patrimonio(self):
        activos = InfoEconGaranteCAB.objects.filter(garante=self, tipo='activos').aggregate(Sum('valor'))['valor__sum']
        pasivos = InfoEconGaranteCAB.objects.filter(garante=self, tipo='pasivos').aggregate(Sum('valor'))['valor__sum']
        return(activos-pasivos)

class InfoEconGaranteCAB(models.Model):
    garante = models.ForeignKey(GaranteCAB, on_delete=models.CASCADE)
    tipo = models.CharField(max_length=100, null=True, blank=True)
    descripcion = models.CharField(max_length=100, null=True, blank=True)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)

class ViewInscripcionParaIngles(models.Model):
    cedula = models.CharField(max_length=100, null=True)
    pasaporte = models.CharField(max_length=100, null=True)
    nombres = models.CharField(max_length=100, null=True)
    apellido1 = models.CharField(max_length=100, null=True)
    apellido2 = models.CharField(max_length=100, null=True)
    nomcarrera = models.CharField(max_length=100, null=True)
    carrera_id = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'view_inscripcion_para_ingles'


class ArchivoRubroOtroMasivos(models.Model):
    archivo = models.FileField(upload_to='archivorubros/%Y/%m/%d', max_length=200)
    tipotrorubro = models.ForeignKey(TipoOtroRubro, on_delete=models.CASCADE)
    valor = models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'))
    descripcion = models.CharField(max_length=150)
    fecha = models.DateField()
    fechavencimiento = models.DateField()
    fecharegistro = models.DateTimeField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)

    def __str__(self):
        return '%s - [%s]'%(elimina_tildes(self.tipotrorubro.nombre),self.valor)

    class Meta():
        verbose_name = "Archivo Rubro Otro Masivo"
        verbose_name_plural = "Archivo Rubros Otros Masivos"


class InscripcionProfesionalizacion (models.Model):
    inscripcion = models.ForeignKey(Inscripcion, blank=True, null=True, on_delete=models.CASCADE)
    comentario_inscrito= models.CharField(max_length=1000, blank=True, null=True)
    link_enlace = models.FileField(upload_to='enlaces/%Y/%m/%d', max_length=200, blank=True, null=True)
    observacion= models.CharField(max_length=3000, blank=True, null=True)
    aprobacion=models.BooleanField(default=False)
    resolucion=models.CharField(max_length=1500, blank=True, null=True)
    fecha= models.DateTimeField(blank=True, null=True)
    usuario = models.ForeignKey(User,blank=True, null=True, on_delete=models.CASCADE)

    def __str__(self):
        return elimina_tildes(self.inscripcion.persona.nombre_completo_inverso())

    class Meta:
        verbose_name = "Inscripcion Profesionalizacion"
        verbose_name_plural = "Inscripciones Profesionalizantes"

class DescuentoDOBE(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    rubro = models.ForeignKey(Rubro, on_delete=models.CASCADE)
    valorrubro = models.FloatField()
    porcentaje = models.FloatField()
    descuento = models.FloatField()
    fecha = models.DateTimeField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)


    def __str__(self):
        return str(self.inscripcion) + "  " +str(self.rubro.nombre)

    def puede_eliminarse(self):
        if self.rubro:
            return self.rubro.puede_eliminarse()
        return True

    class Meta:
        verbose_name = "Descuento Dobe"
        verbose_name_plural = "Descuentos Dobe"

class RegistroAceptacionPagoenLinea(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    acepta=models.BooleanField(default=False)
    usuario = models.ForeignKey(User,verbose_name="Usuario", on_delete=models.CASCADE)
    fecha = models.DateField()

    def __str__(self):
        return str(self.inscripcion.persona.nombre_completo_inverso()) + " " + str(self.usuario) + " " +str(self.fecha)+ " " +str(self.acepta)

    class Meta:
        verbose_name = "Registro de Aceptacion Pago en Linea"
        verbose_name_plural = "Registros de  Aceptacion de Pagos en Linea"


class RegistroAceptacionPagoenLineaConduccion(models.Model):
    usuario = models.CharField(max_length=50)
    usuarioid = models.CharField(max_length=50)
    acepta=models.BooleanField(default=False)
    fecha = models.DateField()


    def __str__(self):
        return str(self.usuario) + " " +str(self.fecha)+ " " +str(self.acepta)

    class Meta:
        verbose_name = "Registro de Aceptacion Pago en Linea Conduccion"
        verbose_name_plural = "Registros de  Aceptacion de Pagos en Linea Conduccion"

class ViewHorarioDocente(models.Model):
    lugar = models.CharField(max_length=500)
    cedula = models.CharField(max_length=500)
    pasaporte = models.CharField(max_length=500)
    desde = models.DateField()
    hasta = models.DateField()
    asignatura = models.CharField(max_length=500)
    dia = models.IntegerField()
    turno_comienza = models.TimeField()
    turno_termina = models.TimeField()
    grupo = models.CharField(max_length=500)

    class Meta:
        managed = False
        db_table = 'view_horarios_docente'


#OCastillo 06-06-2023 proteccion de datos
class RegistroAceptacionProtecciondeDatos(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    aceptapublicidad=models.BooleanField(default=False)
    aceptaactualizardatos=models.BooleanField(default=False)
    ip = models.CharField(max_length=16, blank=True, null=True)
    usuario = models.ForeignKey(User,verbose_name="Usuario", on_delete=models.CASCADE)
    fecha = models.DateTimeField()

    def __str__(self):
        return str(self.persona.nombre_completo_inverso()) + " " + str(self.usuario) + " " +str(self.fecha)

    class Meta:
        verbose_name = "Registro de Aceptacion Proteccion de Datos"
        verbose_name_plural = "Registros de Aceptacion de Proteccion de Datos"

class MotivoJustificarAperturaTardiaClases(models.Model):
    lecciongrupo = models.ForeignKey(LeccionGrupo, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=1000)
    usuario = models.ForeignKey(User,verbose_name="Usuario", on_delete=models.CASCADE)
    fecha = models.DateTimeField()

    class Meta:
        verbose_name = "Motivo Justificar Apertura Tardia"
        verbose_name_plural = "Motivos Justificacion Apertura Tardia"

# class RegistrosDepositos(models.Model):
#     cuentabancaria = models.ForeignKey(CuentaBanco, on_delete=models.CASCADE)
#     fecha =models.DateField()
#     fechasubida = models.DateField()
#     archivo = models.FileField(upload_to='registro/%Y/%m/%d', max_length=200,blank=True,null=True)
#
#     # def registrosverficados(self):
#     #     return DetalleRegistroDeposito.objects.filter(registro=self,validado=True).count()
#     # def cajasregistro(self):
#     #     idses = Pago.objects.filter(Q(formapago__id=FORMA_PAGO_DEPOSITO) | Q(formapago__id=FORMA_PAGO_TRANSFERENCIA), sesion__fecha=self.fecha).distinct('sesion').values('sesion')
#     #     return SesionCaja.objects.filter(id__in=idses).order_by('caja').count()
#     #
#     # def cajasverificadas(self):
#     #     idses = Pago.objects.filter(Q(formapago__id=FORMA_PAGO_DEPOSITO) | Q(formapago__id=FORMA_PAGO_TRANSFERENCIA), sesion__fecha=self.fecha).distinct('sesion').values('sesion')
#     #     idsesver = Pago.objects.filter(Q(formapago__id=FORMA_PAGO_DEPOSITO) | Q(formapago__id=FORMA_PAGO_TRANSFERENCIA), sesion__fecha=self.fecha,verificado=False).distinct('sesion').values('sesion')
#     #
#     #     return len(idses) - len(idsesver)
#
# def detalles(self):
#     if DetalleRegistroDeposito.objects.filter(registro=self).exists():
#         return DetalleRegistroDeposito.objects.filter(registro=self)
#     return False
#
#     def validados(self):
#         return  DetalleRegistroDeposito.objects.filter(registro=self,validado=True).exists()
#
#     def __str__(self):
#         return str(self.cuentabancaria) + " - " +str(self.fecha)
#
# class DetalleRegistroDeposito(models.Model):
#     registro = models.ForeignKey(RegistrosDepositos, on_delete=models.CASCADE)
#     fecha = models.DateField()
#     hora = models.TimeField(blank=True,null=True)
#     valor = models.FloatField()
#     tipo = models.CharField(max_length=10)
#     horasimple = models.CharField(max_length=10,blank=True,null=True)
#     concepto = models.CharField(max_length=1500,blank=True,null=True)
#     nut = models.CharField(max_length=50,blank=True,null=True)
#     referencia = models.CharField(max_length=50)
#     fechareal = models.CharField(max_length=50,blank=True,null=True)
#     validado = models.BooleanField(default=False)
#     pago = models.ForeignKey(Pago, blank=True, null=True, on_delete=models.CASCADE)
#     sesion_id = models.IntegerField(blank=True,null=True)
#
#     def __str__(self):
#         return str(self.registro) + " - " +str(self.referencia)
#
# class DatosTransfereciaDeposito(models.Model):
#     solicitud = models.ForeignKey(SolicitudSecretariaDocente, on_delete=models.CASCADE)
#     referencia = models.CharField(max_length=50)
#     fecha = models.DateField()
#     cuentabanco = models.ForeignKey(CuentaBanco, on_delete=models.CASCADE)
#     valor = models.FloatField()
#     deposito = models.BooleanField(blank=True, null=True)
#     disponible = models.BooleanField(default=True)
#     pago = models.ForeignKey(Pago, blank=True, null=True, on_delete=models.CASCADE)
#     verificado = models.BooleanField(default=False)
#     aprobado = models.BooleanField(default=False)
#     registrodep = models.ForeignKey(DetalleRegistroDeposito, blank=True, null=True, on_delete=models.CASCADE)
#     fechadeposito = models.DateField(blank=True, null=True)
#
#     def __str__(self):
#         return str(self.cuentabanco) + "Ref. " + str(self.referencia) + " (" + str(self.valor) + ")  "



class ActividadesHorasExtra(models.Model):
    usuario = models.ForeignKey(User, related_name=u"Usuario Ingresa+",blank=True, null=True, on_delete=models.CASCADE)
    usuario_modifica = models.ForeignKey(User,related_name=u"Usuario Modifica+",blank=True, null=True, on_delete=models.CASCADE)

    descripcion = models.CharField(max_length=3000)
    fecha_inicio = models.DateTimeField(blank=True, null=True)
    fecha_fin = models.DateTimeField(blank=True, null=True)

    finalizado = models.BooleanField(default=False)

    aprobado_supervisor = models.BooleanField(default=True)
    enviar_supervisor = models.BooleanField(default=False)

    aprobado_director = models.BooleanField(default=True)
    enviar_director = models.BooleanField(default=False)

    aprobado_talento = models.BooleanField(default=True)
    enviar_talento = models.BooleanField(default=False)

    aprobado_auditoria = models.BooleanField(default=True)
    enviar_auditoria = models.BooleanField(default=False)

    rechazado = models.BooleanField(default=False)
    observacion = models.CharField(max_length=2000)
    departamento_rechaza = models.CharField(max_length=2000)
    usuario_rechaza =  models.ForeignKey(User, related_name=u"Usuario Rechaza+",blank=True, null=True, on_delete=models.CASCADE)
    horas_extras = models.CharField(max_length=2000)
    fecha_aprobado_auditoria = models.DateTimeField(blank=True, null=True)


    def __str__(self):
        return str(self.usuario) + " | Fecha Inicio: " +str(self.fecha_inicio)+ " / Fecha Fin: " +str(self.fecha_fin)

    class Meta:
        verbose_name = "Registro de Actividad Horas Extras"
        verbose_name_plural = "Registros de Actividades Horas Extras"


class SupervisorGrupos(models.Model):
    supervisor = models.ForeignKey(Persona, related_name=u"jefe_add",blank=True, null=True, on_delete=models.CASCADE)
    director = models.ForeignKey(Persona, related_name=u"director_add",blank=True, null=True, on_delete=models.CASCADE)
    grupo = models.ManyToManyField(Group,related_name=u"grupo_user", blank=True)

    usuario = models.ForeignKey(User, related_name=u"usuario_add",blank=True, null=True, on_delete=models.CASCADE)
    usuario_modifica = models.ForeignKey(User,related_name=u"usuario_mod",blank=True, null=True, on_delete=models.CASCADE)
    activo = models.BooleanField(default=False)

    def __str__(self):
        return str(self.usuario) + " | Perfil: " +str(self.grupo)

    class Meta:
        verbose_name = "Registro de Supervisor por Departamentos"
        verbose_name_plural = "Registros de Supervisor por Departamentos"

class EjesEvaluacion(models.Model):
    descripcion=models.CharField(blank=True,null=True,max_length=1500)
    estado=models.BooleanField(default=False)
    orden=models.IntegerField(blank=True, null=True)
    docente=models.BooleanField(default=False)
    directivo=models.BooleanField(default=False)
    percepcion = models.BooleanField(default=False)#este campo es para cuando el docent aparte es directivo
    estudiante = models.BooleanField(default=False)
    directivocargo = models.BooleanField(default=False)


    def __str__(self):
        return str(self.descripcion)

    def respuestas(self):
        return RespuestasEjesEvaluacion.objects.filter(eje=self).order_by('respuesta__puntaje')

    def respuestaseje(self,de):
        return RespuestasEjesEvaluacion.objects.filter(eje=self,respuesta__respuestadirectivo=de).order_by('respuesta__puntaje')



    def total_eje(self,evaluacion,profesor):
        respuestasid = RespuestasEjesEvaluacion.objects.filter(eje=self).values('id')
        return  DetalleEvaluacionAlumno.objects.filter(evaluacion__evaluaciondocente=evaluacion,respuesta_id__in=respuestasid,evaluacion__profesormateria__profesor=profesor).count()

    def preguntasarea(self,a):
        return PreguntasEvaluacion.objects.filter(eje=self,estado=True,area=a).order_by('orden')
    def preguntas(self):
        return PreguntasEvaluacion.objects.filter(eje=self,estado=True).order_by('orden')

    def preguntas_alumno(self):
        return PreguntasEvaluacion.objects.filter(pk__in=DetalleEvaluacionAlumno.objects.filter(pregunta__eje=self).values('pregunta')).order_by('orden')

    def preguntas_docente(self):
        return PreguntasEvaluacion.objects.filter(pk__in=DetalleEvaluacionDocente.objects.filter(pregunta__eje=self).values('pregunta')).order_by('orden')

    def preguntas_docentearea(self,a):
        print(a)
        return PreguntasEvaluacion.objects.filter(pk__in=DetalleEvaluacionDocente.objects.filter(pregunta__eje=self).values('pregunta'),area=a).order_by('orden')

    def preguntas_directivoarea(self,a):

        return PreguntasEvaluacion.objects.filter(pk__in=DetalleEvaluacionDirectivo.objects.filter(pregunta__eje=self).values('pregunta'),area=a).order_by('orden')

    def preguntas_decano(self):
        return PreguntasEvaluacion.objects.filter(pk__in=DetalleEvaluacionCargo.objects.filter(pregunta__eje=self).values('pregunta')).order_by('orden')
    def preguntas_directivo(self):
        return PreguntasEvaluacion.objects.filter(pk__in=DetalleEvaluacionDirectivo.objects.filter(pregunta__eje=self).values('pregunta')).order_by('orden')

    def areas(self):
        return AreasElementosEvaluacion.objects.filter(pk__in=PreguntasEvaluacion.objects.filter(eje=self).values('area')).order_by('id')


    def preguntas_evaluacion(self):
        return PreguntasEvaluacion.objects.filter(pk__in=DetalleEvaluacionPregunta.objects.filter(eje=self).values('pregunta')).order_by('orden')

    def preguntas_evaluacionarea(self,area):
        return PreguntasEvaluacion.objects.filter(pk__in=DetalleEvaluacionPregunta.objects.filter(eje=self,pregunta__area=area).values('pregunta')).order_by('orden')


class AreasElementosEvaluacion(models.Model):
    descripcion=models.CharField(max_length=1000, null=True, blank=True)
    color=models.CharField(max_length=1000, null=True, blank=True)
    activo=models.BooleanField(default=False)
    directivo=models.BooleanField(default=False)
    docente=models.BooleanField(default=False)
    puntaje=models.IntegerField(blank=True, null=True)

    def __str__(self):
        return str(self.descripcion)


class PreguntasEvaluacion(models.Model):
    eje=models.ForeignKey(EjesEvaluacion,blank=True,null=True, on_delete=models.CASCADE)
    nombre=models.CharField(blank=True,null=True,max_length=1500)
    estado = models.BooleanField(default=False)
    orden=models.IntegerField(blank=True, null=True)
    area = models.ForeignKey(AreasElementosEvaluacion, blank=True, null=True, on_delete=models.CASCADE)

    def tiene_respuesta(self,evaluacion):
        if DetalleEvaluacionAlumno.objects.filter(pregunta=self,evaluacion=evaluacion).exclude(respuesta=None).exists():
            return  DetalleEvaluacionAlumno.objects.filter(pregunta=self,evaluacion=evaluacion).exclude(respuesta=None)[:1].get()
        return False


    def tiene_respuesta_docente(self,evaluacion):
        if DetalleEvaluacionDocente.objects.filter(pregunta=self,evaluacion=evaluacion).exclude(respuesta=None).exists():
            return  DetalleEvaluacionDocente.objects.filter(pregunta=self,evaluacion=evaluacion).exclude(respuesta=None)[:1].get()
        return False

    def tiene_respuesta_directivo(self,evaluacion):
        if DetalleEvaluacionDirectivo.objects.filter(pregunta=self,evaluacion=evaluacion).exclude(respuesta=None).exists():
            return  DetalleEvaluacionDirectivo.objects.filter(pregunta=self,evaluacion=evaluacion).exclude(respuesta=None)[:1].get()
        return False

    def tiene_respuesta_decano(self,evaluacion):
        if DetalleEvaluacionCargo.objects.filter(pregunta=self,evaluacion=evaluacion).exclude(respuesta=None).exists():
            return  DetalleEvaluacionCargo.objects.filter(pregunta=self,evaluacion=evaluacion).exclude(respuesta=None)[:1].get()
        return False

    def total_respuesta(self,evaluacion,profesor):
        respuestasid=RespuestasEjesEvaluacion.objects.filter(eje=self.eje).values('id')
        return DetalleEvaluacionAlumno.objects.filter(evaluacion__evaluaciondocente=evaluacion, pregunta=self,
                                                      evaluacion__profesormateria__profesor=profesor,respuesta__id__in=respuestasid).count()

    def __str__(self):
        return str(self.nombre)

class RespuestasEvaluacion(models.Model):
    nombre=models.CharField( blank=True,null=True,max_length=1500)
    alias=models.CharField( blank=True,null=True,max_length=1500)
    puntaje=models.FloatField(blank=True,null=True,max_length=10)
    estado=models.BooleanField(default=False)
    # respuestadirectivo=models.ForeignKey(RespuestaEjeEvaluacionDirectivo,blank=True,null=True, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.nombre)

    class Meta():
        verbose_name = "Respuesta Evaluacion"
        verbose_name_plural = "Respuestas Evaluacion"

class RespuestasEjesEvaluacion(models.Model):
    respuesta=models.ForeignKey(RespuestasEvaluacion,blank=True,null=True, on_delete=models.CASCADE)
    eje=models.ForeignKey(EjesEvaluacion,blank=True,null=True,max_length=1500, on_delete=models.CASCADE)
    estado = models.BooleanField(default=True)

    def __str__(self):
        return (self.eje.descripcion) + str(self.respuesta)

    def cantidad_respuesta(self,evaluacion,pregunta,profesor,carrera, periodo):
        if carrera and periodo:
            return DetalleEvaluacionAlumno.objects.filter(evaluacion__evaluaciondocente=evaluacion, pregunta=pregunta,
                                                          respuesta=self,
                                                          evaluacion__profesormateria__profesor=profesor,
                                                          evaluacion__materia__nivel__carrera=carrera,
                                                          evaluacion__materia__nivel__periodo=periodo).count()
        elif carrera:
            return DetalleEvaluacionAlumno.objects.filter(evaluacion__evaluaciondocente=evaluacion, pregunta=pregunta,
                                                          respuesta=self,
                                                          evaluacion__profesormateria__profesor=profesor,
                                                          evaluacion__materia__nivel__carrera=carrera).count()
        elif periodo:
            return  DetalleEvaluacionAlumno.objects.filter(evaluacion__evaluaciondocente=evaluacion,pregunta=pregunta,respuesta=self,evaluacion__profesormateria__profesor=profesor, evaluacion__materia__nivel__periodo=periodo).count()

        else:
            return  DetalleEvaluacionAlumno.objects.filter(evaluacion__evaluaciondocente=evaluacion,pregunta=pregunta,respuesta=self,evaluacion__profesormateria__profesor=profesor).count()

    def cantidad_respuestaperiodo_resulatado(self,pregunta,profesor,periodo):
        return  DetalleEvaluacionAlumno.objects.filter(pregunta=pregunta,respuesta=self,evaluacion__profesormateria__profesor=profesor, evaluacion__materia__nivel__periodo=periodo).count()

    def cantidad_respuestaperiododatos(self,evaluacion,pregunta,profesor,periodo):
        return  DetalleEvaluacionAlumno.objects.filter(evaluacion__evaluaciondocente=evaluacion,pregunta=pregunta,respuesta=self,evaluacion__profesormateria__profesor=profesor, evaluacion__materia__nivel__periodo=periodo).count()

    def cantidad_respuestaperiododatos_total(self, evaluacion , coordinadores, pregunta, carrera, periodo):
        return DetalleEvaluacionAlumno.objects.filter(evaluacion__evaluaciondocente=evaluacion, pregunta=pregunta,
                                                      respuesta=self, evaluacion__materia__nivel__periodo=periodo, evaluacion__materia__nivel__carrera_id=carrera).exclude(evaluacion__profesormateria__profesor__persona__in =coordinadores).count()
    def cantidad_respuesta_autoeva(self,evaluacion,pregunta,periodo):
        return  DetalleEvaluacionDocente.objects.filter(evaluacion__evaluaciondocente=evaluacion,evaluacion__periodo=periodo,pregunta=pregunta,respuesta=self).count()

class EvaluacionDocente(models.Model):
    estado=models.BooleanField(default=False)
    fechacreacion=models.DateTimeField(blank=True,null=True)
    usauriocrea=models.ForeignKey(User,blank=True,null=True, on_delete=models.CASCADE)
    descripcion=models.CharField(blank=True,null=True,max_length=1500)
    docente=models.BooleanField(default=False)
    directivo=models.BooleanField(default=False)
    directivocargo=models.BooleanField(default=False)
    desde = models.DateField(verbose_name='Fecha Inicial', blank=True, null=True)
    hasta = models.DateField(verbose_name='Fecha Final', blank=True, null=True)


    def persona_crea(self):
        return  Persona.objects.get(usuario=self.usauriocrea).nombre_completo()

    def periodos(self):
        if PeriodoEvaluacion.objects.filter(evaluaciondoc=self).exists():
            return PeriodoEvaluacion.objects.filter(evaluaciondoc=self)

    def docentespendientes(self,periodo):
        if EvaluacionDocentePeriodo.objects.filter(periodo__in=periodo).exists():
            evalperiodo = EvaluacionDocentePeriodo.objects.filter(periodo__in=periodo).values('profesor')
            return ProfesorMateria.objects.filter(materia__nivel__periodo__in=periodo, materia__cerrado=True).exclude(profesor__id__in=evalperiodo).order_by('profesor__persona__apellido1','profesor__persona__apellido2','profesor__persona__nombres')
        else:
            return ProfesorMateria.objects.filter(materia__nivel__periodo__in=periodo, materia__cerrado=True).order_by('profesor__persona__apellido1', 'profesor__persona__apellido2', 'profesor__persona__nombres')
    def docentespendientes_total(self,periodo):
        if EvaluacionDocentePeriodo.objects.filter(periodo__in=periodo).exists():
            evalperiodo = EvaluacionDocentePeriodo.objects.filter(periodo__in=periodo).values('profesor')
            return len(ProfesorMateria.objects.filter(materia__nivel__periodo__in=periodo, materia__cerrado=True).exclude(profesor__id__in=evalperiodo).distinct('profesor').values('profesor'))
        else:
            return len(ProfesorMateria.objects.filter(materia__nivel__periodo__in=periodo, materia__cerrado=True).distinct('profesor').values('profesor'))


    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.descripcion = self.descripcion.upper().strip() if self.descripcion else ''
        super(EvaluacionDocente, self).save(force_insert, force_update, using, update_fields)

    def __str__(self):
        return str(self.descripcion)

    class Meta():
        verbose_name = "Evaluacion Docente"
        verbose_name_plural = "Evaluaciones Docente"

    @staticmethod
    def flexbox_query(q):
        return EvaluacionDocente.objects.filter(descripcion__icontains=q)

    def flexbox_repr(self):
        return self.descripcion

    def flexbox_alias(self):
        return self.descripcion

    def materias(self):
        return EvaluacionMateria.objects.filter(evaluaciondocente=self)

    def eliminar_eva(self):
        return EvaluacionDocentePeriodo.objects.filter(evaluaciondocente=self).exists()

class PeriodoEvaluacion(models.Model):
    periodo=models.ForeignKey(Periodo,blank=True,null=True, on_delete=models.CASCADE)
    evaluaciondoc=models.ForeignKey(EvaluacionDocente,blank=True,null=True, on_delete=models.CASCADE)
    activo=models.BooleanField(default=True)

    def __str__(self):
        return str(self.periodo.nombre)

    class Meta:
        verbose_name = "Periodo Evaluacion"
        verbose_name_plural = "Periodos Evaluacion"



class DetalleEvaluacionPregunta(models.Model):
    evaluacion=models.ForeignKey(EvaluacionDocente,blank=True,null=True, on_delete=models.CASCADE)
    pregunta=models.ForeignKey(PreguntasEvaluacion,blank=True,null=True, on_delete=models.CASCADE)
    eje=models.ForeignKey(EjesEvaluacion,blank=True,null=True, on_delete=models.CASCADE)
    estado=models.BooleanField(default=False)


    def __str__(self):
        return str(self.evaluacion) + "- " + str(self.pregunta) + " - " + str(self.eje)

    class Meta():
        verbose_name = "Detalle Evaluacion Docente Pregunta"
        verbose_name_plural = "Detalles Evaluacion Docente Pregunta"


class EvaluacionMateria(models.Model):
    evaluaciondocente = models.ForeignKey(EvaluacionDocente, on_delete=models.CASCADE)
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)

    def __str__(self):
        return str(self.evaluaciondocente) + " - " + str(self.materia)

    class Meta():
        verbose_name = "Evaluacion Materia"
        verbose_name_plural = "Evaluaciones Materia"


class EvaluacionAlumno(models.Model):
    evaluaciondocente = models.ForeignKey(EvaluacionDocente, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE)
    profesormateria = models.ForeignKey(ProfesorMateria,blank=True,null=True, on_delete=models.CASCADE)
    finalizado=models.BooleanField(default=False)
    fecha = models.DateTimeField(blank=True,null=True)

    def __str__(self):
        return str(self.inscripcion) + " - " + str(self.evaluaciondocente) + " - " + str(self.materia)

    class Meta():
        verbose_name = "Evaluacion Alumno"
        verbose_name_plural = "Evaluaciones Alumnos"

class DetalleEvaluacionAlumno(models.Model):
    evaluacion = models.ForeignKey(EvaluacionAlumno,blank=True,null=True, on_delete=models.CASCADE)
    pregunta = models.ForeignKey(PreguntasEvaluacion,blank=True,null=True, on_delete=models.CASCADE)
    respuesta = models.ForeignKey(RespuestasEjesEvaluacion,blank=True,null=True, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True,null=True)

    def __str__(self):
        return str(self.evaluacion) + " - " + str(self.pregunta) + " - " + str(self.respuesta)

    class Meta():
        verbose_name = "Detalle Evaluacion Doc Peridodo"
        verbose_name_plural = "Detalles Evaluacion Doc Peridodo"

class ResultadosAutoevaluacionDocenteDatos(models.Model):
    minimo=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    maximo=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    nombre=models.CharField(blank=True, null=True, max_length=200)

    def __str__(self):
        return str(self.nombre)

    # def puede_eliminarse(self):
    #     if EvaluacionDocentePeriodo.objects.filter(resultado=self).exists() or AutoevaluacionDatosPuntajes.objects.filter(resultado=self) or ResultadosEvaluacionEstudianteDatosFinales.objects.filter(resultadodoc=self) or EvaluacionDirectivoPeriodo.objects.filter(autoevaluacionresultado=self):
    #         return False
    #     else:
    #         return True

class EvaluacionDocentePeriodo(models.Model):
    evaluaciondocente = models.ForeignKey(EvaluacionDocente, on_delete=models.CASCADE)
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE)
    finalizado=models.BooleanField(default=False)
    fecha = models.DateTimeField(blank=True,null=True)
    resultado=models.ForeignKey(ResultadosAutoevaluacionDocenteDatos ,blank=True,null=True, on_delete=models.CASCADE)
    porcentajetotal=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    procentajeestudiante=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    califacacionplanificacion=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)
    fechafinaliza = models.DateTimeField(blank=True,null=True)
    porcentajedirectivo=models.DecimalField(max_digits=11, decimal_places=2, default=Decimal('0.0'), blank=True, null=True)



    def __str__(self):
        return str(self.profesor) + " - " + str(self.evaluaciondocente) + " - " + str(self.periodo)

    class Meta():
        verbose_name = "Evaluacion Docente Periodo"
        verbose_name_plural = "Evaluaciones Docentes Periodos"

    def eva_finalizado(self):
        return EvaluacionDirectivoPeriodo.objects.filter(evaluaciondocenteperiodo=self, finalizado=True).exists()
    #
    # def evaluacion_directivo_periodo(self):
    #     if EvaluacionDirectivoPeriodo.objects.filter(evaluaciondocenteperiodo=self).exists():
    #         return EvaluacionDirectivoPeriodo.objects.filter(evaluaciondocenteperiodo=self).order_by('-id')[:1].get()
    # def solicitud(self):
    #     return ReplicaEvaluacionDirectivoPeriodo.objects.filter(evaluaciondirectivo__evaluaciondocenteperiodo=self, activo=True).exists()

    # # def puntaje(self):
    #     return AutoevaluacionDatosPuntajes.objects.filter(evaluacion=self).exists()

class DetalleEvaluacionDocente(models.Model):
    evaluacion = models.ForeignKey(EvaluacionDocentePeriodo, on_delete=models.CASCADE)
    pregunta = models.ForeignKey(PreguntasEvaluacion, on_delete=models.CASCADE)
    respuesta = models.ForeignKey(RespuestasEjesEvaluacion,blank=True,null=True, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True,null=True)

    def __str__(self):
        return str(self.evaluacion) + " - " + str(self.pregunta) + " - " + str(self.respuesta)
    class Meta():
        verbose_name = "Detalle Evaluacion Docente"
        verbose_name_plural = "Detalles Evaluacion Docentes"

class EvaluacionDirectivoPeriodo(models.Model):
    evaluaciondocenteperiodo = models.ForeignKey(EvaluacionDocentePeriodo,blank=True,null=True, on_delete=models.CASCADE)
    evaluaciondocente = models.ForeignKey(EvaluacionDocente,blank=True,null=True, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona,blank=True,null=True, on_delete=models.CASCADE)
    finalizado = models.BooleanField(default=False)
    fecha = models.DateTimeField(blank=True, null=True)
    activo=models.BooleanField(default=True)
    fechafinaliza = models.DateTimeField(blank=True,null=True)


    def __str__(self):
        return str(self.evaluaciondocenteperiodo.profesor.persona.nombre_completo_inverso()) + " - " + str(self.evaluaciondocente) + " Evaluador " + str(self.persona.nombre_completo_inverso())


class viewHorasClase(models.Model):
    profeid= models.IntegerField(default=False)
    carrera = models.IntegerField( null=True)
    periodo= models.IntegerField( null=True)
    total = models.IntegerField(default=0)

    class Meta:
        managed = False
        db_table = 'view_horasclase'

class CoordinadorCarreraPeriodo(models.Model):
    persona = models.ForeignKey(Persona,blank=True,null=True, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera,blank=True,null=True, on_delete=models.CASCADE)
    periodo = models.ForeignKey(Periodo, blank=True, null=True, on_delete=models.CASCADE)
    estado = models.BooleanField(default=True)

    def __str__(self):
        return str(self.persona)+ ' - ' + str(self.persona.usuario.username)

class EvaluacionCoordinadorDocente(models.Model):
    coordinador = models.ForeignKey(CoordinadorCarreraPeriodo, blank=True, null=True, on_delete=models.CASCADE)
    profesor = models.ForeignKey(Profesor, blank=True, null=True, on_delete=models.CASCADE)
    evaluacion = models.ForeignKey(PeriodoEvaluacion, blank=True, null=True, on_delete=models.CASCADE)

class DetalleEvaluacionDirectivo(models.Model):
    evaluacion = models.ForeignKey(EvaluacionDirectivoPeriodo, on_delete=models.CASCADE)
    pregunta = models.ForeignKey(PreguntasEvaluacion, on_delete=models.CASCADE)
    respuesta = models.ForeignKey(RespuestasEjesEvaluacion,blank=True,null=True, on_delete=models.CASCADE)
    fecha = models.DateTimeField(blank=True,null=True)



    def __str__(self):
        return str(self.evaluacion) + " - " + str(self.pregunta) + " - " + str(self.respuesta)
    class Meta():
        verbose_name = "Detalle Evaluacion Directivoe"
        verbose_name_plural = "Detalles Evaluacion Directivos"


class TipoIdentificacion(models.Model):
    nombre = models.CharField(max_length=1000, null=True)
    estado = models.BooleanField(default=True)

class TipoServicioCarrera(models.Model):
    nombre = models.CharField(max_length=1000, null=True)
    fecha = models.DateField(blank=True, null=True)
    estado = models.BooleanField(default=True)
    carrera= models.ForeignKey(Carrera,blank=True, null=True, on_delete=models.CASCADE)


class SolicitudAntencion(models.Model):

    fecha = models.DateTimeField()
    hora = models.CharField(max_length=500, null=True, blank=True)
    horafinaliza = models.CharField(max_length=500, null=True, blank=True)
    tipoidentificacion = models.ForeignKey(TipoIdentificacion, null=True, blank=True, on_delete=models.CASCADE)
    identificacion = models.CharField(max_length=13, verbose_name="Cedula", blank=True, null=True)
    nombres = models.CharField(max_length=1000, null=True, blank=True)
    apellidos = models.CharField(max_length=1000, null=True, blank=True)
    celular =models.CharField(max_length=100, null=True, blank=True)
    email = models.CharField(max_length=100, null=False)
    usuarioatiende = models.ForeignKey(User, blank=True, null=True, on_delete=models.CASCADE)
    finalizado=models.BooleanField(default=False)
    tiposervicio = models.ForeignKey(TipoServicioCarrera, null=True, blank=True, on_delete=models.CASCADE)
    motivo = models.CharField(max_length=2000, null=True, blank=True)
    serie = models.IntegerField(default=0)
    fechafinalizacion = models.DateTimeField(null=True, blank=True)
    idevidencia= models.IntegerField(default=0)
    pais = models.ForeignKey(Pais, null=True, blank=True, on_delete=models.CASCADE)
    provincia = models.ForeignKey(Provincia, null=True, blank=True, on_delete=models.CASCADE)
    ciudad = models.ForeignKey(Canton, null=True, blank=True, on_delete=models.CASCADE)

    def nombre_completo(self):
        return "%s %s" % (self.apellidos,  self.nombres)

    def tienevidencia(self):
        if EvidenciaSolicitudAntencion.objects.filter(solicitud=self).exists():
            return True
        else:
            return False




class viewTodaPersona(models.Model):
    cedula = models.CharField(max_length=1000, null=True)
    pasaporte = models.CharField(max_length=1000, null=True)
    apellido1 = models.CharField(max_length=1000, null=True)
    apellido2 = models.CharField(max_length=1000, null=True)
    nombres = models.CharField(max_length=1000, null=True)
    extranjero=models.BooleanField(null=False)
    sexo_id = models.IntegerField(null=True, blank=True)
    telefono = models.CharField(max_length=1000, null=True)
    telefono_conv = models.CharField(max_length=1000, null=True)
    email = models.CharField(max_length=1000, null=True)
    emailinst = models.CharField(max_length=1000, null=True)
    tipo = models.CharField(max_length=1000, null=True)
    via = models.CharField(max_length=1000, null=True)
    direccion = models.CharField(max_length=1000, null=True)
    foto = models.CharField(max_length=2000, null=True)

    class Meta:
        managed = False
        db_table = 'view_toda_persona'


class EvidenciaSolicitudAntencion(models.Model):
    solicitud = models.ForeignKey(SolicitudAntencion, on_delete=models.CASCADE)
    nombre = models.CharField(max_length=500,null=True, blank=True)
    observacion = models.CharField(max_length=2000,null=True, blank=True)
    fecha = models.DateTimeField(null=True, blank=True)
    foto = models.FileField(upload_to='evidenciaingreso/%Y/%m/%d', max_length=200)
    usuario = models.ForeignKey(User, blank=True, null=True, on_delete=models.CASCADE)

    def descripcion(self):
        return str(self.observacion)

    def archivo(self):
        return self.foto

class Notificacion(models.Model):
    nombre = models.CharField(max_length=300)
    descripcion = models.CharField(max_length=1000, blank=True, null=True)
    funcion = models.CharField(max_length=300)
    estado = models.BooleanField(default=True)
    grupos = models.CharField(max_length=1000, blank=True, null=True) #Grupos que requieran notificaciones (separados por coma ,)
    query = models.TextField(blank=True, null=True)

    def __str__(self):
        return str(self.nombre)

    class Meta():
        verbose_name = "Notificacion"
        verbose_name_plural = "Notificaciones"

    def obtener_grupos(self):
        if self.grupos:
            return Group.objects.filter(id__in=self.grupos.split(',')).order_by('name')

    def numero_usuarios(self):
        return NotificacionPersona.objects.filter(notificacion=self).count()

class NotificacionPersona(models.Model):
    notificacion = models.ForeignKey(Notificacion, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    estado = models.BooleanField(default=True)

    def __str__(self):
        return str(self.notificacion.nombre)+' - '+str(self.persona)

    class Meta():
        verbose_name = "Notificacion Persona"
        verbose_name_plural = "Notificacioneses Persona"


class Test(models.Model):
    titulo = models.CharField(max_length=500,blank=True,null=True)
    descripcioncorta = models.CharField(max_length=1000, blank=True,null=True)
    minutofin = models.IntegerField(blank=True, null=True)
    observacion = models.CharField(blank=True,null=True,max_length=3000)
    fecha = models.DateTimeField(blank=True, null=True)
    termino=models.FileField(upload_to='terminocondioiones/%Y/%m/%d', max_length=200, blank=True, null=True)
    estado = models.BooleanField(default=False)
    encuesta=models.BooleanField(default=False)

    def __str__(self):
        return str(self.titulo)

    def existe_test_inscripcion(self,persona):

        # buscar la inscripcion test
        if InscripcionTestIngreso.objects.filter(test=self,persona__id=persona).exists():
            inscriptest=InscripcionTestIngreso.objects.filter(test=self,persona__id=persona)[:1].get()
            if inscriptest.horafincronometro:
                return True
            else:
                return False
        else:
            return False

    def acepto_termino(self,persona):
        if self.termino:
            if AceptaTerminoTest.objects.filter(test=self,persona__id=persona).exists():
                return True
            else:
                return False
        else:
            return True

class AreaDominioAcademico(models.Model):
    nombre = models.CharField(max_length=100, null=True)

    class Meta():
        verbose_name = "Area Dominio Academico"
        verbose_name_plural = "Areas Dominios Academicos"
    def __str__(self):
        return self.nombre

class DominiosAcademicos(models.Model):
    nombre= models.CharField(max_length=100, null=True)
    area = models.ForeignKey(AreaDominioAcademico, null=True, blank=True, on_delete=models.CASCADE)
    class Meta():
        verbose_name = "Dominio Academico"
        verbose_name_plural = "Dominios Academicos"

    def __str__(self):
        return self.nombre

class PreguntaTestIngreso(models.Model):
    testingreso = models.ForeignKey(Test,null=True,blank=True, on_delete=models.CASCADE)
    pregunta = models.CharField(max_length=3000,null=True)
    descripcion = models.CharField(max_length=3000, null=True)
    orden = models.IntegerField(blank=True,null=True)
    estado = models.BooleanField(default=False)
    cajatexto = models.BooleanField(default=False)
    cajatextoleyenda = models.BooleanField(default=False)
    combobox = models.BooleanField(default=False)
    marquesina = models.BooleanField(default=False)
    fecha = models.BooleanField(default=False)
    checkbox= models.BooleanField(default=False)
    radiobox= models.BooleanField(default=False)
    arrastarsoltar= models.BooleanField(default=False)
    cantidadrespuesta = models.IntegerField(blank=True, null=True)
    puntaje = models.FloatField(blank=True, null=True)
    imagen=  models.FileField(upload_to='preguntaimagen/%Y/%m/%d', max_length=200, blank=True, null=True)
    dominioacademico= models.ForeignKey(DominiosAcademicos,null=True,blank=True, on_delete=models.CASCADE)


    def __str__(self):
        return str(self.pregunta)

    class Meta:
        verbose_name = 'Pregunta'
        verbose_name_plural = "Preguntas"


    def respuestapregunta(self):

        return RespuestaTestIngreso.objects.filter(pregunta=self).order_by('orden')

    def tienecolumna(self):

        return ColumnaTestArrastrar.objects.filter(pregunta=self).order_by('orden')

    def tienecolumna2(self):

        return ColumnaTestArrastrar.objects.filter(pregunta=self,lado=2).order_by('-orden')

    def validar_respuesta(self,idinscripciontest,orden):
        datainscrip=InscripcionTestIngreso.objects.filter(id=idinscripciontest)[:1].get()
        if RespuestaInscripcionTest.objects.filter(inscripciontest=datainscrip,pregunta=self,orden=orden).exists():
            respuesta=RespuestaInscripcionTest.objects.filter(inscripciontest=datainscrip,pregunta=self,orden=orden)[:1].get()
            return respuesta
        else:
            return 0

    def validar_respuestadrag(self,idinscripciontest):
        datainscrip=InscripcionTestIngreso.objects.filter(id=idinscripciontest)[:1].get()
        if RespuestaInscripcionTest.objects.filter(inscripciontest=datainscrip,pregunta=self).exists():
            respuesta=RespuestaInscripcionTest.objects.filter(inscripciontest=datainscrip,pregunta=self).order_by('id')
            return respuesta
        else:
            return 0


class RespuestaTestIngreso(models.Model):
    test = models.ForeignKey(Test,null=True,blank=True, on_delete=models.CASCADE)
    pregunta = models.ForeignKey(PreguntaTestIngreso,null=True,blank=True, on_delete=models.CASCADE)
    respuesta = models.CharField(max_length=3000,null=True)
    puntaje = models.FloatField(blank=True, null=True)
    orden = models.IntegerField(blank=True,null=True)
    respuestacorrecta=models.BooleanField(default=False)
    estado = models.BooleanField(default=False)
    atualizacion= models.BooleanField(default=False)
    imagen = models.FileField(upload_to='respuestaimagen/%Y/%m/%d', max_length=200, blank=True, null=True)

    def __str__(self):
        return str(self.respuesta)

    class Meta:
        verbose_name = 'Repuesta'
        verbose_name_plural = "Repuestas"

    def cantidad(self):
        return RespuestaInscripcionTest.objects.filter(pregunta=self.pregunta,orden=self.orden).count()

class InscripcionTestIngreso(models.Model):
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    fechainicio = models.DateTimeField(blank=True, null=True)
    horafin = models.DateTimeField(blank=True, null=True)
    fecha = models.DateTimeField(blank=True, null=True)
    estado = models.BooleanField(default=False)
    test= models.ForeignKey(Test, on_delete=models.CASCADE)
    puntaje=models.FloatField(default=0)
    horafincronometro=models.CharField(max_length=500,blank=True,null=True)
    grupo=models.IntegerField(default=0)
    rubroespecie=models.IntegerField(default=0)
    aplicada= models.BooleanField(default=False)
    tiempo = models.DateTimeField(blank=True, null=True)
    finalizado = models.BooleanField(default= False)

    def __str__(self):
        return str(self.persona)

    class Meta:
        verbose_name = 'Alumno Test'
        verbose_name_plural = "Alumnos Test"

    def tiemporeali(self):

        now = datetime.now()
        if self.horafincronometro:
            if self.test.minutofin==60:
                minutos = str(self.test.minutofin - 1)
            else:
                minutos = str(self.test.minutofin)

            date_time1_str = now.strftime("%Y-%m-%d")+" 00:"+minutos+":00"
            date_time1_obj = datetime.strptime(date_time1_str, '%Y-%m-%d %H:%M:%S')
            date_time2_str = now.strftime("%Y-%m-%d") + " 00:" + str(self.horafincronometro).strip()
            date_time3_obj = datetime.strptime(date_time2_str, '%Y-%m-%d %H:%M:%S')

            minu=date_time1_obj.minute-date_time3_obj.minute
            segun=date_time3_obj.second-date_time1_obj.second

            return str(minu)+":"+str(segun)
        else:

            return str('--------')


class AceptaTerminoTest(models.Model):
    test = models.ForeignKey(Test,null=True,blank=True, on_delete=models.CASCADE)
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)


class RespuestaInscripcionTest(models.Model):
    inscripciontest=models.ForeignKey(InscripcionTestIngreso, on_delete=models.CASCADE)
    respuesta=models.CharField(max_length=100,null=True)
    pregunta = models.ForeignKey(PreguntaTestIngreso, null=True, blank=True, on_delete=models.CASCADE)
    puntaje = models.FloatField(default=0)
    orden = models.IntegerField(blank=True, null=True)
    validada = models.BooleanField(default=False)

class ConclusionesTest(models.Model):
    test = models.ForeignKey(Test,null=True,blank=True, on_delete=models.CASCADE)
    desde = models.IntegerField()
    hasta = models.IntegerField()
    descripcion = models.CharField(max_length=2000)
    estado = models.BooleanField(default=True)


class ColumnaTestArrastrar(models.Model):
    descripcion = models.CharField(max_length=500)
    test = models.ForeignKey(Test, null=True, blank=True, on_delete=models.CASCADE)
    pregunta = models.ForeignKey(PreguntaTestIngreso, null=True, blank=True, on_delete=models.CASCADE)
    orden = models.IntegerField(blank=True, null=True)
    lado = models.IntegerField(blank=True, null=True)
    estado = models.BooleanField(default=False)


class ConclusionesFinalesTest(models.Model):
    desde = models.IntegerField()
    hasta = models.IntegerField()
    descripcion = models.CharField(max_length=2000)
    estado = models.BooleanField(default=True)
class Genero(models.Model):
    # Autodefinicion
    nombre = models.CharField(max_length=100, blank=True, null=True)
    estado = models.BooleanField(default=True)
    def __str__(self):
        return str(self.nombre)

class NucleoFamiliar(models.Model):
    nombre = models.CharField(max_length=100, blank=True, null=True)
    nuclear = models.CharField(max_length=100, blank=True, null=True)
    def __str__(self):
        return str(self.nombre)

class ZonaResidencia(models.Model):
    nombre = models.CharField(max_length=100, blank=True, null=True)
    def __str__(self):
        return str(self.nombre)

class Afiliacion(models.Model):
     nombre = models.CharField(max_length=100, blank=True, null=True)
     def __str__(self):
         return str(self.nombre)

class MaterialCasa(models.Model):
    nombre = models.CharField(max_length=100)
    codigo = models.CharField(max_length=4, blank=True, null=True)
    def __str__(self):
        return str(self.nombre)

class TipoServicio(models.Model):
    nombre = models.CharField(max_length=100)
    codigo = models.CharField(max_length=4, blank=True, null=True)
    def __str__(self):
        return str(self.nombre)

class CondicionesHogar(models.Model):
    nombre = models.CharField(max_length=100)
    codigo = models.CharField(max_length=4, blank=True, null=True)
    def __str__(self):
        return str(self.nombre)

class TipoIngresoHogar(models.Model):
    nombre = models.CharField(max_length=100)
    def __str__(self):
        return str(self.nombre)

class TipoIngresoPropio(models.Model):
    nombre = models.CharField(max_length=100)
    def __str__(self):
        return str(self.nombre)

class TipoEmpleo(models.Model):
    nombre = models.CharField(max_length=100)
    def __str__(self):
        return str(self.nombre)

class UsoTransporte(models.Model):
    nombre = models.CharField(max_length=100)
    def __str__(self):
        return str(self.nombre)

class TipoTransporte(models.Model):
    nombre = models.CharField(max_length=100)
    def __str__(self):
        return str(self.nombre)

class Deporte(models.Model):
    nombre = models.CharField(max_length=100)
    def __str__(self):
        return str(self.nombre)
    class Meta():
        verbose_name = "Deporte"
        verbose_name_plural = "Deportes"
class ManifestacionArtistica(models.Model):
    nombre = models.CharField(max_length=100)
    def __str__(self):
        return str(self.nombre)

class MotivoSeleccion(models.Model):
    nombre = models.CharField(max_length=100)
    def __str__(self):
        return str(self.nombre)

class DeseosFuturos(models.Model):
    nombre = models.CharField(max_length=100)

class EncuestaItb(models.Model):
    from med.models import PersonaEstadoCivil
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE)
    nombres = models.CharField(max_length=3000,null=True)
    apellidos = models.CharField(max_length=3000,null=True)
    correo = models.CharField(max_length=200,null=True)
    fechanacimiento = models.DateField(blank=True, null=True)
    edad = models.IntegerField(blank=True, null=True)
    carrera = models.ForeignKey(Carrera,blank=True, null=True, on_delete=models.CASCADE)
    grupo = models.ForeignKey(Grupo,blank=True, null=True, on_delete=models.CASCADE)
    etnia = models.ForeignKey(Raza,blank=True, null=True, on_delete=models.CASCADE)
    provincianacimiento = models.ForeignKey(Provincia,related_name=u"provincia_nacimiento",null=True, blank=True, on_delete=models.CASCADE)
    ciudadnacimiento = models.ForeignKey(Canton,related_name=u"ciudad_nacimiento",null=True, blank=True, on_delete=models.CASCADE)
    provinciavivienda = models.ForeignKey(Provincia,related_name=u"provincia_vivienda",null=True, blank=True, on_delete=models.CASCADE)
    ciudadvivienda = models.ForeignKey(Canton, null=True,related_name=u"ciudad_vivienda",blank=True, on_delete=models.CASCADE)
    direccion = models.CharField(max_length=3000,null=True)
    telefono = models.CharField(max_length=200,null=True)
    estadorealizado=models.BooleanField(default=False)
    sexo = models.ForeignKey(Sexo, blank=True, null=True, on_delete=models.CASCADE)
    genero = models.ForeignKey(Genero, blank=True, null=True, on_delete=models.CASCADE)
    estadocivil = models.ForeignKey(PersonaEstadoCivil, blank=True, null=True, on_delete=models.CASCADE)
    nucleofamiliar = models.ForeignKey(NucleoFamiliar, blank=True, null=True, on_delete=models.CASCADE)
    zona = models.ForeignKey(ZonaResidencia, blank=True, null=True, on_delete=models.CASCADE)
    condicion = models.ForeignKey(CondicionesHogar, blank=True, null=True, on_delete=models.CASCADE)
    materialcasa = models.ForeignKey(MaterialCasa, blank=True, null=True, on_delete=models.CASCADE)
    servicio = models.ForeignKey(TipoServicio, blank=True, null=True, on_delete=models.CASCADE)
    afiliacion = models.ForeignKey(Afiliacion, blank=True, null=True, on_delete=models.CASCADE)
    ingresohogar = models.ForeignKey(TipoIngresoHogar, blank=True, null=True, on_delete=models.CASCADE)
    ingresopropio = models.ForeignKey(TipoIngresoPropio, blank=True, null=True, on_delete=models.CASCADE)
    empleo =models.ForeignKey(TipoEmpleo, blank=True, null=True, on_delete=models.CASCADE)
    usotransporte =models.ForeignKey(UsoTransporte, blank=True, null=True, on_delete=models.CASCADE)
    transporte =models.ForeignKey(TipoTransporte, blank=True, null=True, on_delete=models.CASCADE)
    manifestacion =models.ForeignKey(ManifestacionArtistica, blank=True, null=True, on_delete=models.CASCADE)
    numhijo =models.IntegerField(default=0, null=True, blank=True)
    deporte = models.CharField(max_length=255,null=True, blank=True)
    otrodeporte = models.CharField(max_length=255, null=True, blank=True)
    motivo =models.CharField(max_length=255,null=True, blank=True)
    deseo =models.CharField(max_length=255,null=True, blank=True)
    familia = models.BooleanField(default = False)
    amistad = models.BooleanField(default = False)
    disponibilidadempleo = models.BooleanField(default = False)
    duracioncarrera = models.BooleanField(default = False)
    fecharealizado = models.DateField(blank=True, null=True)
    inscripcion = models.ForeignKey(Inscripcion, blank=True, null=True, on_delete=models.CASCADE)

    def guardatest(self):
        fechahoy=datetime.now()
        for t in Test.objects.filter(id__in=[1,2,3]):
            if not InscripcionTestIngreso.objects.filter(persona=self.persona, test=t).exists():
                inscriptest = InscripcionTestIngreso(persona=self.persona, fecha=fechahoy.date(), estado=True, test=t)
                inscriptest.save()

    def save(self, force_insert=False, force_update=False, using=None, update_fields=None):
        self.guardatest()
        super(EncuestaItb, self).save(force_insert, force_update, using, update_fields)

    def __str__(self):
        return str(self.persona.nombre_completo_inverso())

    def tiene_testingreso(self):
        lista_test =[]
        for t in Test.objects.filter(id__in=[1,2,3]):
            if InscripcionTestIngreso.objects.filter(persona=self.persona, test=t).exists():
                inscripcion = InscripcionTestIngreso.objects.get(persona=self.persona, test=t)
                if inscripcion.horafincronometro:
                    lista_test.append(inscripcion)
        return lista_test

    class Meta:
        verbose_name = "Encuesta ITB"
        verbose_name_plural = "Encuestas ITB"

class EvaluacionCargoPeriodo(models.Model):
    personaevalua = models.ForeignKey(Persona, related_name="PersonaEvalua", verbose_name="Persona Evalua", blank=True,
                                      null=True, on_delete=models.CASCADE)
    personaevaluada = models.ForeignKey(Persona, blank=True, related_name="PersonaEvaluada",
                                        verbose_name="Persona Evaluada", null=True, on_delete=models.CASCADE)
    evaluaciondocente = models.ForeignKey(PeriodoEvaluacion, blank=True, null=True, on_delete=models.CASCADE)
    finalizado = models.BooleanField(default=False)
    fecha = models.DateTimeField(blank=True, null=True)
    calificacion=models.FloatField(null=True, blank= True)


    def __str__(self):
        return str(self.personaevaluada.nombre_completo_inverso())

    # def resultadocargo(self):
    #     # persona = Persona.objects.filter(pk=request.POST['id'])[:1].get()
    #     evaluacioncargo = self
    #     list = []
    #     listresul = []
    #
    #     detaeva = DetalleEvaluacionCargo.objects.filter(evaluacion=evaluacioncargo).values('respuesta__eje')
    #     eje = EjesEvaluacion.objects.filter(id__in=detaeva)
    #     listfinal = []
    #     for de in RespuestaEjeEvaluacionDirectivo.objects.filter().order_by('id'):
    #         val = 0
    #         list = []
    #         puntos = 0
    #         resul = 0
    #         for e in eje:
    #             acupuntaje = 0
    #             # fila=fila+1
    #             pregunta = PreguntasEvaluacion.objects.filter(eje=e).count()
    #             for det in PreguntasEvaluacion.objects.filter(eje=e).order_by('orden'):
    #                 for r in RespuestasEjesEvaluacion.objects.filter(eje=det.eje, respuesta__respuestadirectivo=de):
    #                     respuesta = RespuestasEjesEvaluacion.objects.filter(eje=det.eje,
    #                                                                         respuesta__respuestadirectivo=de).count()
    #                     puntos = respuesta * pregunta
    #                     if DetalleEvaluacionCargo.objects.filter(evaluacion=evaluacioncargo, ejecargo=de, pregunta=det,
    #                                                              respuesta=r).exclude(respuesta=None).exists():
    #                         detalleevaluacion = DetalleEvaluacionCargo.objects.filter(evaluacion=evaluacioncargo,
    #                                                                                   ejecargo=de, pregunta=det,
    #                                                                                   respuesta=r)[:1].get()
    #                         puntajes = detalleevaluacion.respuesta.respuesta.puntaje
    #                         acupuntaje = acupuntaje + puntajes
    #
    #             resul = 1 - ((puntos - acupuntaje) / 100)
    #             list.append(resul)
    #
    #         puntajetotal = 0
    #         for l in list:
    #             puntajetotal = puntajetotal + l
    #         resultadototal = puntajetotal / 3
    #         listfinal.append(resultadototal)
    #     grado = Decimal(listfinal[0]).quantize(Decimal(10) ** -2)
    #     nivel = Decimal(listfinal[1]).quantize(Decimal(10) ** -2)
    #     if ResultadosDirectivosaCargo.objects.filter(minimo__lte=grado, maximo__gte=grado).exists():
    #         resultado = ResultadosDirectivosaCargo.objects.filter(minimo__lte=grado, maximo__gte=grado)[:1].get()
    #         if evaluacioncargo:
    #             evaluacioncargo.resultado = resultado
    #             evaluacioncargo.save()
    #     if ResultadosDirectivosaCargo.objects.filter(minimo__lte=nivel, maximo__gte=nivel).exists():
    #         resultadonivel = ResultadosDirectivosaCargo.objects.filter(minimo__lte=nivel, maximo__gte=nivel)[:1].get()
    #         if evaluacioncargo:
    #             evaluacioncargo.resultadonivel = resultadonivel
    #             # evaluacioncargo.save()


class DetalleEvaluacionCargo(models.Model):
    evaluacion = models.ForeignKey(EvaluacionCargoPeriodo, blank=True, null=True, on_delete=models.CASCADE)
    pregunta = models.ForeignKey(PreguntasEvaluacion, on_delete=models.PROTECT)
    respuesta = models.ForeignKey(RespuestasEjesEvaluacion, blank=True, null=True, on_delete=models.PROTECT)
    fecha = models.DateTimeField(blank=True, null=True)


    def __str__(self):
        return str(self.evaluacion.personaevaluada.nombre_completo_inverso())

class SolicitudMateriaOnline(models.Model):
    asignatura = models.ForeignKey(AsignaturaMalla, on_delete=models.CASCADE)
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    grupo = models.CharField(max_length=300)
    observacion = models.CharField(max_length=300)
    archivo = models.FileField(upload_to='solicitudmateria/%Y/%m/%d', max_length=200)
    nota1= models.FloatField(null=True, blank= True)
    nota2= models.FloatField(null=True, blank= True)
    nota3=  models.FloatField(null=True, blank= True)
    nota4=  models.FloatField(null=True, blank= True)
    examen=  models.FloatField(null=True, blank= True)
    asistencia = models.FloatField(null= True, blank= True)
    notafinal=  models.FloatField(null=True, blank= True)
    coordinador = models.ForeignKey(Persona,related_name="coordinador", verbose_name="coordinador", on_delete=models.CASCADE)
    usuarioapruba= models.ForeignKey(Persona, related_name="usuarioaprob", verbose_name="usuarioaprob", null=True, blank=True, on_delete=models.CASCADE)
    fecha = models.DateField()
    fechaaprobacion= models.DateField(null=True, blank=True)
    aprobado = models.BooleanField(default=False)
    observacionaprob= models.CharField(max_length=3000,null=True)
    enviado = models.BooleanField(default=False)

    def __str__(self):
        return str(self.asignatura)

    class Meta():
        verbose_name = "Solicitud Materia Online"
        verbose_name_plural = "Solicitudes Materias Online"



class SolicitudPostulacionBeca(models.Model):
    from med.models import PersonaEstadoCivil
    fecha = models.DateTimeField()
    tipoidentificacion = models.ForeignKey(TipoIdentificacion, null=True, blank=True, on_delete=models.CASCADE)
    identificacion = models.CharField(max_length=13, verbose_name="Cedula", blank=True, null=True)
    sexo = models.ForeignKey(Sexo, null=True, blank=True, on_delete=models.CASCADE)
    estadocivil = models.ForeignKey(PersonaEstadoCivil, null=True, blank=True, on_delete=models.CASCADE)
    nombres = models.CharField(max_length=1000, null=True, blank=True)
    apellidos = models.CharField(max_length=1000, null=True, blank=True)
    titulobachiller=models.BooleanField(default=False)
    titulotercernivel=models.BooleanField(default=False)
    pais = models.ForeignKey(Pais, null=True, blank=True, on_delete=models.CASCADE)
    provincia = models.ForeignKey(Provincia, null=True, blank=True, on_delete=models.CASCADE)
    ciudad = models.ForeignKey(Canton, null=True, blank=True, on_delete=models.CASCADE)
    parroquia = models.ForeignKey(Parroquia, null=True, blank=True, on_delete=models.CASCADE)
    telefono =models.CharField(max_length=100, null=True, blank=True)
    celular =models.CharField(max_length=100, null=True, blank=True)
    email = models.CharField(max_length=100, null=False)
    carrera= models.ForeignKey(Carrera,blank=True, null=True,on_delete=models.CASCADE)
    numtramitepusk = models.CharField(max_length=500, null=True, blank=True)
    numerocasa = models.CharField(max_length=200, null=True, blank=True)
    actualizado = models.BooleanField(default=False)
    grupo = models.IntegerField(default=0, null=True, blank=True)
    jornada = models.IntegerField(default=0, null=True, blank=True)
    referencia = models.CharField(max_length=1000, null=True, blank=True)
    calleprincipal = models.CharField(max_length=1000, null=True, blank=True)
    callesecundaria = models.CharField(max_length=1000, null=True, blank=True)
    aprobado=models.BooleanField(default=False)
    motivoaprobacion = models.CharField(max_length=500, null=True, blank=True)
    inscrito=models.BooleanField(default=False)
    empresaconvenio = models.ForeignKey(EmpresaConvenio, null=True, blank=True, on_delete=models.CASCADE)
    fechanacimiento = models.DateField( null=True, blank=True)
    modalidad = models.ForeignKey(Modalidad, blank=True, null=True, on_delete=models.CASCADE)
    enviocorrecertificacion=models.BooleanField(default=False)
    anuncio = models.ForeignKey(TipoAnuncio, blank=True, null=True, on_delete=models.CASCADE)


    def nombre_completo_inverso(self):
        return "%s %s " % (self.apellidos, self.nombres)

    def mail_postulacion(self):
        hoy = datetime.now().today()
        contenido="INGRESO DE LA SOLICITUD"
        if self.actualizado:
            contenido = "ACTUALIZACION DE LA SOLICITUD"
        send_html_mail(self.empresaconvenio.nombre,
                       "emails/postulantesolictud.html",
                       {'a': self, 'fecha': hoy,
                        'contenido': str(contenido),
                        'solicitud': self},
                       self.email.split(","))

    def correo(self):
        return str(self.email).strip()

    def nombregrupo(self):
        if self.grupo>0:
            return Grupo.objects.get(pk=self.grupo)
        else:
            return 'Sin Grupo'

    def nombrejornada(self):
        if self.jornada>0:
            return HorariosCarreraPostulacion.objects.get(pk=self.jornada)
        else:
            return 'Sin Jornada'


class DatosAdicionalPostulacionBeca(models.Model):
    from med.models import PersonaEstadoCivil
    fecha = models.DateTimeField()
    solicitudpostulacion=models.ForeignKey(SolicitudPostulacionBeca, null=True, blank=True, on_delete=models.CASCADE)
    tipoadicion=models.IntegerField(default=0, null=True, blank=True)
    tipoidentificacion = models.ForeignKey(TipoIdentificacion, null=True, blank=True, on_delete=models.CASCADE)
    identificacion = models.CharField(max_length=13, verbose_name="Cedula", blank=True, null=True)
    sexo = models.ForeignKey(Sexo, null=True, blank=True, on_delete=models.CASCADE)
    estadocivil=models.ForeignKey(PersonaEstadoCivil, null=True, blank=True, on_delete=models.CASCADE)
    nombres = models.CharField(max_length=1000, null=True, blank=True)
    apellidos = models.CharField(max_length=1000, null=True, blank=True)
    pais = models.ForeignKey(Pais, null=True, blank=True, on_delete=models.CASCADE)
    provincia = models.ForeignKey(Provincia, null=True, blank=True, on_delete=models.CASCADE)
    ciudad = models.ForeignKey(Canton, null=True, blank=True, on_delete=models.CASCADE)
    parroquia = models.ForeignKey(Parroquia, null=True, blank=True, on_delete=models.CASCADE)
    telefono =models.CharField(max_length=100, null=True, blank=True)
    celular =models.CharField(max_length=100, null=True, blank=True)
    email = models.CharField(max_length=100, null=False)
    referencia = models.CharField(max_length=1000, null=True, blank=True)
    calleprincipal = models.CharField(max_length=1000, null=True, blank=True)
    callesecundaria = models.CharField(max_length=1000, null=True, blank=True)
    numerocasa = models.CharField(max_length=200, null=True, blank=True)
    pertenece=models.IntegerField(null=True, blank=True)
    def nombre_completo_inverso(self):
        return "%s %s " % (self.apellidos, self.nombres)


class DocumentosPostulacionBeca(models.Model):
    fecha = models.DateTimeField()
    solicitudpostulacion=models.ForeignKey(SolicitudPostulacionBeca, null=True, blank=True, on_delete=models.CASCADE)
    pertenece=models.IntegerField(default=0)
    archivo = models.FileField(upload_to='docpostulacion/%Y/%m/%d', max_length=200, blank=True, null=True)
    def download_link(self):
        return self.archivo.url

class HorariosCarreraPostulacion(models.Model):
    carrera=models.IntegerField(default=0)
    jornada=models.CharField(max_length=200, null=True, blank=True)
    dias=models.CharField(max_length=200, null=True, blank=True)
    horainica = models.CharField(max_length=200, null=True, blank=True)
    horafinal = models.CharField(max_length=200, null=True, blank=True)

    def __str__(self):
        return self.jornada + " - " + self.horainica + " a " + self.horafinal + " los " + self.dias







class ViewTramites(models.Model):
    tipo = models.CharField(max_length=100, null=True, blank=True)
    tipo_especie = models.CharField(max_length=200, null=True, blank=True)
    inscripcion_id = models.IntegerField(null=True, blank=True)
    serie = models.IntegerField(null=True, blank=True)
    fecha = models.DateField(null=True, blank=True)
    rubroespecie_id = models.IntegerField(null=True, blank=True)
    codigo = models.IntegerField(null=True, blank=True)
    departamento = models.CharField(max_length=100, null=True, blank=True)
    departamento_id = models.IntegerField(null=True, blank=True)
    usuario_asignado = models.CharField(max_length=500, null=True, blank=True)
    persona_asignada = models.CharField(max_length=500, null=True, blank=True)
    observacion = models.CharField(max_length=500, null=True, blank=True)
    usuario_resolucion = models.CharField(max_length=500, null=True, blank=True)
    persona_resolucion = models.CharField(max_length=500, null=True, blank=True)
    resolucion = models.CharField(max_length=500, null=True, blank=True)
    fecha_asignacion = models.DateField(null=True, blank=True)
    fecha_finaliza = models.DateField(null=True, blank=True)
    tiempo = models.FloatField(null=True, blank=True)
    observacion_alumno = models.CharField(max_length=500, null=True, blank=True)
    class Meta:
        managed = False
        db_table = 'view_tramites'

class ViewSolicitudes(models.Model):
    solicitud_id = models.IntegerField(null=True, blank=True)
    codigo = models.IntegerField(null=True, blank=True)
    nombre_inscripcion = models.CharField(max_length=100, null=True, blank=True)
    identificacion_inscripcion = models.CharField(max_length=100, null=True, blank=True)
    celular = models.CharField(max_length=100, null=True, blank=True)
    convencional = models.CharField(max_length=100, null=True, blank=True)
    email = models.CharField(max_length=100, null=True, blank=True)
    emailinst = models.CharField(max_length=100, null=True, blank=True)
    grupo = models.CharField(max_length=100, null=True, blank=True)
    carrera = models.CharField(max_length=200, null=True, blank=True)
    facultad = models.CharField(max_length=200, null=True, blank=True)
    fecha = models.DateField(null=True, blank=True)
    tipo = models.CharField(max_length=100, null=True)
    solicitud = models.CharField(max_length=500, null=True, blank=True)
    tipo_solicitud = models.CharField(max_length=200, null=True, blank=True)
    fecha_asignacion = models.DateTimeField(null=True, blank=True)
    persona_asignada = models.CharField(max_length=200, null=True, blank=True)
    departamento = models.CharField(max_length=100, null=True, blank=True)
    departamento_id = models.IntegerField(null=True, blank=True)
    fecha_finaliza = models.DateTimeField(null=True, blank=True)
    tiempo = models.FloatField(null=True, blank=True)
    observacion = models.CharField(max_length=500, null=True, blank=True)
    resolucion = models.CharField(max_length=500, null=True, blank=True)
    finalizada = models.BooleanField(null=True, blank=True)
    class Meta:
        managed = False
        db_table = 'view_solicitudes'

class ViewCrmProspectosMat(models.Model):
    inscripcion_id = models.IntegerField()
    nombres = models.CharField(max_length=500, null=True)
    cedula = models.CharField(max_length=13, null=True)
    email = models.CharField(max_length=100, null=True)
    celular = models.CharField(max_length=100, null=True)
    celular2 = models.CharField(max_length=100, null=True)
    convencional = models.CharField(max_length=100, null=True)
    efectivo = models.CharField(max_length=100, null=True)
    razonestado = models.CharField(max_length=100, null=True)
    observacion = models.CharField(max_length=500, null=True)
    fechagestion = models.DateField(blank=True, null=True)
    fechaposibleinscripcion = models.DateField(blank=True, null=True)
    fechapollamada = models.DateField(blank=True, null=True)
    porqueno = models.CharField(max_length=100, null=True)
    fecharegistro = models.DateField(blank=True, null=True)
    efectivo_id = models.IntegerField(blank=True, null=True)
    usuario_persona = models.IntegerField(blank=True, null=True)
    prospecto = models.BooleanField(default=False)
    seinscribe = models.BooleanField(default=False)
    archivo = models.BooleanField(default=False)
    canton_id = models.IntegerField(blank=True, null=True)
    nombresegmento = models.CharField(max_length=500, null=True)
    referido = models.BooleanField(default=False)
    grupo_id = models.IntegerField(blank=True, null=True)
    seinscribira = models.CharField(max_length=100, null=True)
    tipopersona = models.CharField(max_length=100, null=True)
    via = models.CharField(max_length=100, null=True)
    segmentoadmin = models.CharField(max_length=500, null=True)

    class Meta:
        managed = False
        db_table = 'view_crmprospectos_mat'

class EntregaUniformeAdmisiones(models.Model):
    inscripcion = models.ForeignKey(Inscripcion, on_delete=models.CASCADE)
    talla = models.ForeignKey(TallaUniforme, on_delete=models.CASCADE)
    fecha = models.DateTimeField()
    usuario = models.ForeignKey(User, on_delete=models.CASCADE)
    foto = models.FileField(upload_to='fotos/%Y/%m/%d', max_length=200)
    entregado = models.BooleanField(default=False)
    fechaentrega = models.DateTimeField(null=True, blank=True)
    usuarioentrega = models.ForeignKey(User, related_name='usuario_entrega', on_delete=models.CASCADE, null=True, blank=True)

    def __str__(self):
        return self.inscripcion.persona + " (talla: " + self.talla.nombre + ")"

class EstudiantesFamiliar(models.Model):
    inscripcion_id =models.IntegerField(null=True, blank=True)
    fechainscripcion = models.DateField()
    persona_id = models.IntegerField(null=True, blank=True)
    pasaporte = models.CharField(max_length=255, null=True, blank=True)
    cedula = models.CharField(max_length=255, null=True, blank=True)
    nombresinscri = models.CharField(max_length=255)
    apellido1 = models.CharField(max_length=255)
    apellido2 = models.CharField(max_length=255, null=True, blank=True)
    nombre_completo= models.CharField(max_length=255, null=True, blank=True)
    nombresex = models.CharField(max_length=255, null=True, blank=True)
    carrera_id = models.IntegerField(null=True, blank=True)
    carrera = models.CharField(max_length=255, null=True, blank=True)
    grupo_id = models.IntegerField(null=True, blank=True)
    gruponombre = models.CharField(max_length=255, null=True, blank=True)
    carrerabol = models.BooleanField()
    class Meta:
        managed = False
        db_table = 'estudiantesfamiliar'

class RubrosGestionMora(models.Model):
    rubro_id = models.IntegerField()
    inscripcion_id = models.IntegerField()
    persona_id = models.IntegerField()
    nombreestudiante = models.CharField(max_length=255, null=True, blank=True)
    telefono_con = models.CharField(max_length=255, null=True, blank=True)
    telefono = models.CharField(max_length=255, null=True, blank=True)
    asistente_id = models.IntegerField(null=True, blank=True)
    nombreasistente = models.CharField(max_length=255, null=True, blank=True)
    grupo_id = models.IntegerField()
    nombregrupo = models.CharField(max_length=255, null=True, blank=True)
    nombrecarrera = models.CharField(max_length=255, null=True, blank=True)
    carrera_id = models.IntegerField()
    inscripciongrupo_id = models.IntegerField()
    rinscripcion = models.IntegerField(null=True, blank=True)
    tipootnombre = models.CharField(max_length=255, null=True, blank=True)
    cuota = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    actividadnombre = models.CharField(max_length=255, null=True, blank=True)
    asignaturanombre = models.CharField(max_length=255, null=True, blank=True)
    descripcion = models.TextField(null=True, blank=True)
    rubroespecie = models.CharField(max_length=255, null=True, blank=True)
    motivo = models.TextField(null=True, blank=True)
    rubroplancuota = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)
    valor = models.DecimalField(max_digits=10, decimal_places=2)
    fechavence = models.DateField()
    matricula_id = models.IntegerField()
    porcentaje = models.FloatField()
    tipobeca = models.CharField(max_length=255, null=True, blank=True)
    class Meta:
        managed = False
        db_table = 'rubrosgestionmora'

class TutoriaPedagogica(models.Model):
    materia=models.ForeignKey(Materia,on_delete=models.CASCADE,null=True, blank=True)
    profesor=models.ForeignKey(Profesor,on_delete=models.CASCADE,null=True, blank=True)
    numero_tutoria=models.IntegerField(null=True, blank=True)
    grupal=models.BooleanField(default=False)
    finalizado=models.BooleanField(default=False)
    aceptada=models.BooleanField(blank=True, null=True)

    class Meta():
        verbose_name = "Tutoria Pedagogica"
        verbose_name_plural = "Tutorias Pedagogicas"
    def numdetalle(self):
        return DetalleTutoriaPedagogica.objects.filter(tutoria=self).count()
    def numdetalletutoria(self):
        if DetalleTutoriaPedagogica.objects.filter(tutoria=self, finalizado=True).count() == self.numero_tutoria:

            return True
    def numestrategia(self):
        if DetalleEstrategiasPedagogicas.objects.filter(detallepedagogica__tutoria=self).count() == DetalleTutoriaPedagogica.objects.filter(tutoria=self, finalizado=True).count():
            return True
    def estudiante_tut(self):
        if EstudianteTutoriaPedagogica.objects.filter(tutoria=self).exists:
            estudiante=EstudianteTutoriaPedagogica.objects.filter(tutoria=self)
            return estudiante
    def datos_detalle(self):
        return DetalleTutoriaPedagogica.objects.filter(tutoria=self).first()
class DetalleTutoriaPedagogica(models.Model):
    tutoria = models.ForeignKey(TutoriaPedagogica,on_delete=models.CASCADE,null=True, blank=True)
    fecha_tutoria = models.DateField(blank=True, null=True)
    hora_inicio_tutoria = models.TimeField(blank=True, null=True)
    hora_fin_tutoria = models.TimeField(blank=True, null=True)
    via_tutoria=models.BooleanField(default=False)
    necesidad = models.CharField(max_length=1000, null=True, blank=True)
    tema_tratado =models.CharField(max_length=1000, null=True, blank=True)
    finalizado = models.BooleanField(default=False)
    aprobado_inscrip = models.BooleanField(default=False)

    class Meta():
        verbose_name = "Detalle Tutoria Pedagogica"
        verbose_name_plural = "Detalles Tutorias Pedagogicas"
class EstudianteTutoriaPedagogica(models.Model):
    tutoria = models.ForeignKey(TutoriaPedagogica,on_delete=models.CASCADE,null=True, blank=True)
    estudiante = models.ForeignKey(Inscripcion,on_delete=models.CASCADE,null=True, blank=True)

    class Meta():
        verbose_name = "Estudiante Tutoria Pedagogica"
        verbose_name_plural = "Estudiantes Tutorias Pedagogicas"

class EstrategiasPedagogicas(models.Model):
    nombre=models.CharField(max_length=1000, null=True, blank=True)
    estado=models.BooleanField(default=True)

    class Meta():
        verbose_name = "Estrategia Pedagogica"
        verbose_name_plural = "Estrategias Pedagogicas"

class InstrumentosTutoriaPedagogicas(models.Model):
    nombre = models.CharField(max_length=1000, null=True, blank=True)
    estado = models.BooleanField(default=True)

    class Meta():
        verbose_name = "Instrumentos Tutoria Pedagogica"
        verbose_name_plural = "Instrumentos Tutorias Pedagogicas"

class DetalleEstrategiasPedagogicas(models.Model):
    detallepedagogica=models.ForeignKey(DetalleTutoriaPedagogica,on_delete=models.CASCADE,null=True, blank=True)
    estrategia=models.ForeignKey(EstrategiasPedagogicas,on_delete=models.CASCADE,null=True, blank=True)
    fecha=models.DateField(blank=True, null=True)
    usercrea=models.ForeignKey(User,on_delete=models.CASCADE,null=True, blank=True)


    class Meta():
        verbose_name = "Detalle Estrategia Pedagogica"
        verbose_name_plural = "Detalle Estrategias Pedagogicas"

class DetalleInstrumentosTutoriaPedagogicas(models.Model):
    detallepedagogica=models.ForeignKey(DetalleTutoriaPedagogica,on_delete=models.CASCADE,null=True, blank=True)
    instrumento=models.ForeignKey(InstrumentosTutoriaPedagogicas,on_delete=models.CASCADE,null=True, blank=True)
    fecha = models.DateField(blank=True, null=True)
    usercrea=models.ForeignKey(User,on_delete=models.CASCADE,null=True, blank=True)

    class Meta():
        verbose_name = "Detalle Instrumentos Tutoria Pedagogica"
        verbose_name_plural = "Detalle Instrumentos Tutorias Pedagogicas "

class ConvenioCarrera(models.Model):
    empresaconvenio = models.ForeignKey(EmpresaConvenio, null=True, blank=True, on_delete=models.CASCADE)
    carrera = models.ForeignKey(Carrera, null=True, blank=True, on_delete=models.CASCADE)
    usercrea = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    activo = models.BooleanField(default=False)
    modalidad = models.ForeignKey(Modalidad, null=True, blank=True, on_delete=models.CASCADE)

class ViewVacaciones(models.Model):
    fechasalida = models.DateField()
    fecharegreso = models.DateField()
    cedula = models.CharField(max_length=100, null=True)

    class Meta:
        managed = False
        db_table = 'view_vacaciones'



class PlanAnalitico(models.Model):
    asignaturamalla = models.ForeignKey(AsignaturaMalla, on_delete=models.CASCADE, null=True, blank=True, verbose_name=u'Asignatura Malla')
    formacionprofesional = models.TextField(blank=True, null=True, default="", verbose_name=u'FUNCIONES ESPECÍFICAS DE LA ASIGNATURA EN LA FORMACIÓN DEL PROFESIONAL')
    metodologia = models.TextField(blank=True, null=True, default="", verbose_name=u'METODOLOGÍA DE ENSEÑANZA')
    evidencialogro = models.TextField(blank=True, null=True, default="", verbose_name=u'EVIDENCIAS DEL LOGRO DE LOS OBJETIVOS (SISTEMA DE EVALUACIÓN)')
    # bibliografia = models.TextField(blank=True, null=True, default="", verbose_name=u'BIBLIOGRAFÍA')
    # perfildocente = models.TextField(blank=True, null=True, default="", verbose_name=u'PERFIL DEL DOCENTE')
    sumilla = models.TextField(blank=True, null=True, default="", verbose_name=u'Sumilla')
    compromiso = models.TextField(blank=True, null=True, default="", verbose_name=u'Compromiso')
    caracterinvestigacion = models.TextField(blank=True, null=True, default="", verbose_name=u'Caracter de investigación')
    fecha_creacion = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha creación')
    fecha_ultimamodificacion = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha modificación')
    activo = models.BooleanField(default=True, verbose_name=u'Estado')

    def __str__(self):
        return u'%s' % self.asignaturamalla

    class Meta:
        verbose_name = u"Plan Analítico"
        verbose_name_plural = u"Plan Analíticos"

    def mis_resultados(self):
        return self.plananaliticoresulaprend_set.values_list("id", "descripcion", "orden").filter(activo=True).order_by("orden")

    def mis_unidades(self,resultado_id):
        return PlanAnaliticoUnidad.objects.values_list("id", "descripcion", "orden").filter(activo=True, resultadoaprend__plananalitico=self, resultadoaprend_id=resultado_id).order_by("orden")

    def mis_temas(self, unidad_id):
        return PlanAnaliticoTema.objects.values_list("id", "descripcion", "orden").filter(activo=True, unidad_id=unidad_id, unidad__resultadoaprend__plananalitico=self).order_by("orden")

    def mis_subtemas(self, tema_id):
        return PlanAnaliticoSubTema.objects.values_list("id", "descripcion", "orden").filter(activo=True, tema__unidad__resultadoaprend__plananalitico=self, tema_id=tema_id).order_by("orden")

    def num_unidades(self):
        return PlanAnaliticoUnidad.objects.values_list("id").filter(activo=True, resultadoaprend__plananalitico=self).count()

    def num_temas(self):
        return PlanAnaliticoTema.objects.values_list("id").filter(activo=True, unidad__resultadoaprend__plananalitico=self).count()

    def tiene_silabo(self):
        return self.silabo_set.values("id").exists()

    def save(self, *args, **kwargs):
        self.sumilla = self.sumilla.strip()
        self.compromiso = self.compromiso.strip()
        self.caracterinvestigacion = self.caracterinvestigacion.strip()
        self.fecha_ultimamodificacion = datetime.now()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(PlanAnalitico, self).save(*args, **kwargs)

class PlanAnaliticoRAI(models.Model):
    plananalitico = models.ForeignKey(PlanAnalitico, on_delete=models.CASCADE, verbose_name=u'Plan analítico')
    descripcion = models.TextField(default="", verbose_name=u'descripción')
    activo = models.BooleanField(default=True, verbose_name=u'Estado')

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = u"Resultado de Aprendizajes Institucional"
        verbose_name_plural = u"Resultados de Aprendizajes Institucionales"

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip()
        super(PlanAnaliticoRAI, self).save(*args, **kwargs)

class PlanAnaliticoRAC(models.Model):
    plananalitico = models.ForeignKey(PlanAnalitico, on_delete=models.CASCADE, verbose_name=u'Plan analítico')
    descripcion = models.TextField(default="", verbose_name=u'descripción')
    activo = models.BooleanField(default=True, verbose_name=u'Estado')

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = u"Resultado de Aprendizajes de Carrera"
        verbose_name_plural = u"Resultados de Aprendizajes de Carreras"

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip()
        super(PlanAnaliticoRAC, self).save(*args, **kwargs)


class PlanAnaliticoObjetivo(models.Model):
    plananalitico = models.ForeignKey(PlanAnalitico, on_delete=models.CASCADE, verbose_name=u'Plan analítico')
    descripcion = models.TextField(default="", verbose_name=u'descripción')
    activo = models.BooleanField(default=True, verbose_name=u'Estado')

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = u"Objetivo de la asignatura"
        verbose_name_plural = u"Objetivos de la asignaturas"

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip()
        super(PlanAnaliticoObjetivo, self).save(*args, **kwargs)


# class PlanAnaliticoMetodologia(models.Model):
#     plananalitico = models.ForeignKey(PlanAnalitico, on_delete=models.CASCADE, verbose_name=u'Plan analítico')
#     descripcion = models.TextField(default="", verbose_name=u'descripción')
#     activo = models.BooleanField(default=True, verbose_name=u'Estado')
#
#     def __str__(self):
#         return self.descripcion
#
#     class Meta:
#         verbose_name = u"Metodología de la Asignatura"
#         verbose_name_plural = u"Metodología de la Asignaturas"
#
#     def save(self, *args, **kwargs):
#         self.descripcion = self.descripcion.strip()
#         super(PlanAnaliticoMetodologia, self).save(*args, **kwargs)


class PlanAnaliticoResulAprend(models.Model):
    plananalitico = models.ForeignKey(PlanAnalitico, on_delete=models.CASCADE, verbose_name=u'Plan analítico')
    descripcion = models.TextField(default="", verbose_name=u'descripción')
    orden = models.IntegerField(blank=True, null=True)
    activo = models.BooleanField(default=True, verbose_name=u'Activo')

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = u"Resultado de Aprendizaje"
        verbose_name_plural = u"Resultados de Aprendizajes"
        ordering = ['plananalitico', 'descripcion']
        unique_together = ('plananalitico', 'descripcion')

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip()
        super(PlanAnaliticoResulAprend, self).save(*args, **kwargs)


class PlanAnaliticoUnidad(models.Model):
    resultadoaprend = models.ForeignKey(PlanAnaliticoResulAprend, on_delete=models.CASCADE, verbose_name=u'Resultado  de aprendizaje')
    descripcion = models.TextField(default="", verbose_name=u'descripción')
    orden = models.IntegerField(blank=True, null=True)
    activo = models.BooleanField(default=True, verbose_name=u'Estado')

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = u"Unidad de Resultado de Aprendizaje"
        verbose_name_plural = u"Unidades Resultados de Aprendizajes"
        ordering = ['resultadoaprend', 'descripcion']
        unique_together = ('resultadoaprend', 'descripcion')

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip()
        super(PlanAnaliticoUnidad, self).save(*args, **kwargs)


class PlanAnaliticoTema(models.Model):
    unidad = models.ForeignKey(PlanAnaliticoUnidad, on_delete=models.CASCADE, verbose_name=u'Unidad de aprendizaje')
    descripcion = models.TextField(default="", verbose_name=u'descripción')
    orden = models.IntegerField(blank=True, null=True)
    activo = models.BooleanField(default=True, verbose_name=u'Estado')

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = u"Tema de Unidad de Resultado de Aprendizaje"
        verbose_name_plural = u"Tema de Unidades Resultados de Aprendizajes"
        ordering = ['unidad', 'descripcion']
        unique_together = ('unidad', 'descripcion')

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip()
        super(PlanAnaliticoTema, self).save(*args, **kwargs)

class PlanAnaliticoSubTema(models.Model):
    tema = models.ForeignKey(PlanAnaliticoTema, on_delete=models.CASCADE,  verbose_name=u'Tema de aprendizaje')
    descripcion = models.TextField(default="", verbose_name=u'descripción')
    orden = models.IntegerField(blank=True, null=True)
    activo = models.BooleanField(default=True, verbose_name=u'Estado')

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = u"SubTema de Unidad de Resultado de Aprendizaje"
        verbose_name_plural = u"SubTema de Unidades Resultados de Aprendizajes"
        ordering = ['tema', 'descripcion']
        unique_together = ('tema', 'descripcion')

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip()
        super(PlanAnaliticoSubTema, self).save(*args, **kwargs)


class PlanAnaliticoElaborado(models.Model):
    plananalitico = models.ForeignKey(PlanAnalitico, on_delete=models.CASCADE,  verbose_name=u'Plan analítico')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, verbose_name=u'Elaborador')
    activo = models.BooleanField(default=True, verbose_name=u'Activo')

    def __str__(self):
        return self.persona

    class Meta:
        verbose_name = u"Elaborador de Plan Analítico"
        verbose_name_plural = u"Elaboradores de Plan Analíticos"
        ordering = ['persona']
        unique_together = ('plananalitico', 'persona')

    def save(self, *args, **kwargs):
        super(PlanAnaliticoElaborado, self).save(*args, **kwargs)


class PlanAnaliticoApa(models.Model):
    plananalitico = models.ForeignKey(PlanAnalitico, on_delete=models.CASCADE, blank=True, null=True, verbose_name=u'Plan analítico')
    descripcion = models.TextField(default="", verbose_name=u'descripción')
    fecha_creacion = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha creación')
    fecha_ultimamodificacion = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha modificación')
    activo = models.BooleanField(default=True, verbose_name=u'Estado')

    def __str__(self):
        return self.descripcion

    class Meta:
        verbose_name = u"Bibliografia Apa"
        verbose_name_plural = u"Bibliografias Apas"
        ordering = ['descripcion']
        unique_together = ('plananalitico', 'descripcion')

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip()
        super(PlanAnaliticoApa, self).save(*args, **kwargs)


class CronograAcademico(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE, verbose_name=u'Periodo')
    nombre = models.CharField(max_length=250, verbose_name=u'Nombre')
    fecha_creacion = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha creación')
    fecha_ultimamodificacion = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha modificación')
    activo = models.BooleanField(default=True, verbose_name=u'Activo')

    def __str__(self):
        return self.nombre

    class Meta:
        verbose_name = u"Cronograma académico"
        verbose_name_plural = u"Cronograma académicos"
        ordering = ['nombre']
        unique_together = ('periodo', 'nombre')

    def en_uso(self):
        return self.cronograacademicodetalle_set.all().exists()

    def semanas(self):
        return self.cronograacademicodetalle_set.all().order_by('numsemana')

    def inicio_fin_crononograma(self):
        return {'inicio': self.cronograacademicodetalle_set.all().order_by("numsemana")[0].inicio, 'fin': self.cronograacademicodetalle_set.all().order_by("-numsemana")[0].fin }

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip()
        super(CronograAcademico, self).save(*args, **kwargs)

PARCIAL = (
    (1, u'PARCIAL 1'),
    (2, u'PARCIAL 2'),
    (3, u'PARCIAL 3'),
    (4, u'PARCIAL 4')
)

class CronograAcademicoDetalle(models.Model):
    cronogramaacademico = models.ForeignKey(CronograAcademico, on_delete=models.CASCADE, verbose_name=u'Cronograma académico')
    descripcion = models.TextField(default='', verbose_name=u'Descripción de la semana')
    inicio = models.DateField(verbose_name=u'Fecha incio semana')
    fin = models.DateField(verbose_name=u'Fecha fin semana')
    parcial = models.IntegerField(default=1, choices=PARCIAL, verbose_name=u'Número de parcial')
    numsemana = models.IntegerField(verbose_name=u'Número de semana')
    examen = models.BooleanField(default=False, verbose_name=u'Es examen?')

    class Meta:
        verbose_name = u"Planificación de Clase"
        verbose_name_plural = u"Planificaciones de clases"

    def __str__(self):
        return u'%s' % self.descripcion

    def en_uso(self):
        return CronograAcademicoMateria.objects.values("id").filter(cronogramaacademico_id=self.cronogramaacademico_id).exists()

    def save(self, *args, **kwargs):
        self.descripcion = self.descripcion.strip()
        super(CronograAcademicoDetalle, self).save(*args, **kwargs)


class CronograAcademicoMateria(models.Model):
    cronogramaacademico = models.ForeignKey(CronograAcademico, on_delete=models.CASCADE, verbose_name=u'Cronograma académico')
    materia = models.ForeignKey(Materia, on_delete=models.CASCADE, verbose_name=u'Materia')

    class Meta:
        verbose_name = u"Cronograma materia"
        verbose_name_plural = u"Cronograma materias"
        unique_together = ('cronogramaacademico', 'materia')

    def __str__(self):
        return u'%s' % self.materia

    def save(self, *args, **kwargs):
        super(CronograAcademicoMateria, self).save(*args, **kwargs)


ESTADO_APROBACION_SILABO = (
    (1, u"PENDIENTE"),
    (2, u"APROBADO"),
    (3, u"RECHAZADO")
)


ESTADO_APROBACION_VIRTUAL = (
    (1, u"APROBADO"),
    (2, u"RECHAZADO"),
    (3, u"PENDIENTE"),
)


ESTADO_REVISION_PLANIFICACION = (
    (1, u"SI"),
    (2, u"NO"),
)


TIPO_EVALUACION = (
    (1, u'ACD'),
    (2, u'APE'),
    (3, u'AA')
)


class EvaluacionComponente(models.Model):
    alias = models.CharField(default='', max_length=10, blank=True, verbose_name=u'Alias')
    descripcion = models.CharField(max_length=150, blank=True, null=True, verbose_name=u"Descripcion")
    practica = models.BooleanField(default=False, verbose_name=u"Valida en materias prácticas")

    def __str__(self):
        return u'%s' % self.descripcion

    class Meta:
        verbose_name = u"Evaluación de Componente"
        verbose_name_plural = u"Evaluación de Componentes"
        unique_together = ('alias', 'descripcion')

    def save(self, *args, **kwargs):
        super(EvaluacionComponente, self).save(*args, **kwargs)


class EvaluacionComponentePeriodo(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE, blank=True, null=True,  verbose_name=u'Componente de evaluacion')
    componente = models.ForeignKey(EvaluacionComponente, on_delete=models.CASCADE, blank=True, null=True,  verbose_name=u'Componente de evaluacion')
    parcial = models.IntegerField(choices=PARCIAL, blank=True, null=True, verbose_name=u'Parcial')
    cantidad = models.IntegerField(default=0, verbose_name=u'Cattegoria moodle')
    nivelacion = models.BooleanField(default=False, verbose_name=u"Compnenete aplica solo para nivelación")

    def __str__(self):
        return u'%s - %s' % (self.componente.descripcion, self.periodo)

    class Meta:
        verbose_name = u"Componente de Evaluación"
        verbose_name_plural = u"Componentes de Evaluación"
        unique_together = ('periodo', 'componente')

    def save(self, *args, **kwargs):
        super(EvaluacionComponentePeriodo, self).save(*args, **kwargs)


class EvaluacionAprendizajeComponente(models.Model):
    tipoevaluacion = models.IntegerField(choices=TIPO_EVALUACION, default=1, verbose_name=u'Tipo evaluacion')
    descripcion = models.CharField(max_length=150, blank=True, null=True, verbose_name=u"Descripcion")
    componente = models.ForeignKey(EvaluacionComponente, on_delete=models.CASCADE, blank=True, null=True, verbose_name=u'Componente de evaluacion')
    alias = models.CharField(default='', max_length=10, blank=True, verbose_name=u'Alias')
    color = models.CharField(max_length=20, blank=True, null=True, verbose_name=u'Color')
    categoriamoodle = models.IntegerField(default=0, verbose_name=u'Cattegoria moodle')

    def __str__(self):
        return u'%s' % self.descripcion

    class Meta:
        verbose_name = u"Evaluación de aprendizaje componente"
        verbose_name_plural = u"valuación de aprendizaje componentes"
        unique_together = ('tipoevaluacion', 'componente')

    def save(self, *args, **kwargs):
        super(EvaluacionAprendizajeComponente, self).save(*args, **kwargs)


class Silabo(models.Model):
    profesor = models.ForeignKey(Profesor, verbose_name=u'Profesor', on_delete=models.CASCADE)
    materia = models.ForeignKey(Materia, verbose_name=u'Materia', on_delete=models.CASCADE)
    plananalitico = models.ForeignKey(PlanAnalitico, verbose_name=u'Plan Analitico', on_delete=models.CASCADE)
    silabofirmado = models.FileField(upload_to='SilaboFirmado/%Y/%m/%d', blank=True, null=True, verbose_name=u'Silabo Firmado')
    aprobado = models.BooleanField(default=False, verbose_name=u"Aprobado")
    videomagistral = models.BooleanField(default=False, verbose_name=u"Si tiene que subir o no video magistral")
    versionsilabo = models.IntegerField(default=1, blank=True, null=True, verbose_name=u'Versión de silabo')
    versionrecurso = models.IntegerField(default=1, blank=True, null=True, verbose_name=u'Versión de recurso silabo')
    codigoqr = models.BooleanField(default=False, verbose_name=u"Silabo generado con código QR")
    estado = models.IntegerField(choices=ESTADO_APROBACION_SILABO, default=1, blank=True, null=True, verbose_name=u"Estado sílabo")
    fecha_creacion = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha creación')

    def __str__(self):
        return u'%s-%s' % (self.materia.profesor_principal(), self.materia)

    class Meta:
        unique_together = ('profesor', 'materia')

    def get_estado(self):
        bg = 'warning'
        if self.estado == 2:
            bg = 'success'
        elif self.estado == 3:
            bg = 'danger'
        return {'bg': bg, 'estado': self.get_estado_display()}

    def semana(self, inicio, fin):
        silabosemanal = SilaboSemanal.objects.filter(silabo=self, fechainiciosemana=inicio, fechafinsemana=fin).distinct()
        if silabosemanal:
            return silabosemanal[0]
        return None

    def porcentaje_planificacion_silabo(self):
        plananalitico_id = self.plananalitico_id
        temas = PlanAnaliticoTema.objects.values("id").filter(unidad__resultadoaprend__plananalitico_id=plananalitico_id)
        subtemas = PlanAnaliticoSubTema.objects.values("id").filter(tema__unidad__resultadoaprend__plananalitico_id=plananalitico_id)
        cstemas = DetalleSilaboSemanalTema.objects.values("id").filter(silabosemanal__silabo=self, plananaliticotema_id__in=temas).count()
        cssubtemas = DetalleSilaboSemanalSubTema.objects.values("id").filter(silabosemanal__silabo=self, plananaliticosubtema_id__in=subtemas).distinct().count()
        cnttotal = cstemas + cssubtemas
        cantt = temas.count() + subtemas.count()
        if cantt > 0:
            return round(((100*cnttotal)/cantt), 2)
        return 0

    def puede_editar_recursos(self):
        if self.materia.cerrado:
            return False
        return self.estado == 2

    def puede_editar_platematico(self):
        if self.materia.cerrado:
            return False
        return not self.estado == 2



class AprobarSilabo(models.Model):
    silabo = models.ForeignKey(Silabo, on_delete=models.CASCADE, verbose_name=u'Silabo')
    observacion = models.TextField(default='', verbose_name=u"Observación")
    fecha = models.DateTimeField(verbose_name=u'Fecha de aprobación', blank=True, null=True)
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, blank=True, null=True, verbose_name=u'Persona')
    estadoaprobacion = models.IntegerField(choices=ESTADO_APROBACION_SILABO, blank=True, null=True, verbose_name=u"Aprobar sílabo")

    def __str__(self):
        self.observacion = self.observacion.upper()
        return u'%s' % self.silabo

    def get_estado(self):
        bg = 'warning'
        if self.estadoaprobacion == 2:
            bg = 'success'
        elif self.estadoaprobacion == 3:
            bg = 'danger'
        return {'bg': bg, 'estado': self.get_estadoaprobacion_display()}

    def save(self, *args, **kwargs):
        super(AprobarSilabo, self).save(*args, **kwargs)


class SilaboSemanal(models.Model):
    silabo = models.ForeignKey(Silabo, on_delete=models.CASCADE, verbose_name=u'Sílabo')
    numsemana = models.IntegerField(default=0, verbose_name=u'Orden de semana')
    semana = models.IntegerField(default=0, verbose_name=u'Numero de semana')
    fechainiciosemana = models.DateField(verbose_name=u'Fecha incio semana')
    fechafinsemana = models.DateField(verbose_name=u'Fecha fin semana')
    objetivoaprendizaje = models.TextField(verbose_name=u"Objetivo Aprendizaje")
    enfoque = models.TextField(verbose_name=u"Enfoque")
    recursos = models.TextField(verbose_name=u"Recursos")
    evaluacion = models.TextField(verbose_name=u"Evaluacion")
    horaspresencial = models.DecimalField(default=0, max_digits=30, null=True, blank=True, decimal_places=2, verbose_name=u'Horas presenciales')
    horaautonoma = models.DecimalField(default=0, max_digits=30, null=True, blank=True, decimal_places=2, verbose_name=u'Horas autónomas')
    estado = models.IntegerField(choices=ESTADO_APROBACION_VIRTUAL, default=3, verbose_name=u'Tipo Recurso')
    observaciontecnica = models.TextField(verbose_name=u"Observacion Tecnica", null=True, blank=True, default="")
    observacionacademica = models.TextField(verbose_name=u"Observacion Academica", null=True, blank=True, default="")
    estadocumplimiento = models.IntegerField(choices=ESTADO_REVISION_PLANIFICACION, default=2, verbose_name=u'Estado de cumplimiento')
    personaobservacion = models.ForeignKey("sga.Persona", on_delete=models.CASCADE, null=True, blank=True,  verbose_name=u'Persona que ingreso la observacion')
    fechaobservacion = models.DateField(null=True, blank=True, verbose_name=u'Fecha ingreso la observación')
    clasevirtualtutor = models.TextField(verbose_name=u"clase virtual", null=True, blank=True, default="")
    zoomurltutor = models.TextField(verbose_name=u"zoom url", null=True, blank=True, default="")
    recursotutor = models.FileField(upload_to='recursotutor/%Y/%m/%d', blank=True, null=True,  verbose_name=u'Archivo recurso tutor')
    fecharecursotutor = models.DateField(null=True, blank=True, verbose_name=u'Fecha ingreso el recurso tutor')
    enfoquedos = models.TextField(null=True, blank=True, verbose_name=u"Enfoque")
    enfoquetres = models.TextField(null=True, blank=True, verbose_name=u"Enfoque")
    examen = models.BooleanField(default=False, verbose_name=u"¿Si es semana de examen?")
    parcial = models.IntegerField(choices=PARCIAL, blank=True, null=True, verbose_name=u'Parcial')
    fecha_creacion = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha creación')

    def __str__(self):
        return u'%s-Semana[%s] [%s-%s]' % (self.silabo.materia.nombre_completo(), self.numsemana, self.fechainiciosemana, self.fechafinsemana)
        # return f"Silabo object ({self.id})-Semana[{self.fechainiciosemana}]"

    class Meta:
        unique_together = ('silabo', 'fechainiciosemana', 'fechafinsemana',)

    def nombre_silabo_semana(self):
        return u"%s desde: %s hasta: %s [%s]" % (self.numsemana, self.fechainiciosemana, self.fechafinsemana, self.id)

    def mis_unidades(self):
        return PlanAnaliticoUnidad.objects.values_list("id", "descripcion", "orden", flat=False).filter(resultadoaprend__plananalitico_id=self.silabo.plananalitico_id, id__in=self.detallesilabosemanaltema_set.values_list("plananaliticotema__unidad_id", flat=True).all()).distinct().order_by("orden")

    def mis_temas_planificados(self, idunidad):
        return DetalleSilaboSemanalTema.objects.filter(silabosemanal=self, plananaliticotema__unidad__id=idunidad).distinct()

    def mis_subtemas_planificados(self, idtema):
        return DetalleSilaboSemanalSubTema.objects.filter(silabosemanal=self, plananaliticosubtema__tema__id=idtema).distinct()

    def mis_recursos_didacticos_link(self):
        return self.recursosdidacticossemanal_set.all()

    def tiene_diapositiva(self):
        return self.diapositivasilabosemanal_set.values("id").exists()

    def tiene_vidmagistral(self):
        return self.videomagistralsilabosemanal_set.values("id").exists()

    def mi_video_magistral(self):
        return self.videomagistralsilabosemanal_set.all().first() if self.tiene_vidmagistral() else None

    def mi_presentacion(self):
        return self.diapositivasilabosemanal_set.all().first() if self.tiene_diapositiva() else None

    def tiene_compendio(self):
        return self.compendiosilabosemanal_set.values("id").exists()

    def tiene_guia_estudio(self):
        return  self.guiaestudiantesilabosemanal_set.values("id").exists()

    def mi_compendio(self):
        return self.compendiosilabosemanal_set.all().first() if self.tiene_diapositiva() else None

    def mi_guia_estudio(self):
        return self.guiaestudiantesilabosemanal_set.all().first() if self.tiene_guia_estudio() else None

    def tieneactividadplanificada(self):
        return True

    def mis_test_semana(self):
        return self.testsilabosemanal_set.all().order_by("id")

    def mis_foro_semana(self):
        return self.forosilabosemanal_set.all().order_by("id")

    def mis_tarea_semana(self):
        return self.tareasilabosemanal_set.filter(tiporecurso=1).order_by('id')

    def mis_taller_semana(self):
        return self.tareasilabosemanal_set.filter(tiporecurso=2).order_by('id')

    def mis_proyectoinvestigacion_semana(self):
        return self.tareasilabosemanal_set.filter(tiporecurso=3).order_by('id')

    def evaluaciones_planificadas(self):
        return self.evaluacionaprendizajesilabosemanal_set.all().order_by('id')

    def save(self, *args, **kwargs):
        self.objetivoaprendizaje = self.objetivoaprendizaje.strip()
        self.enfoque = self.enfoque.strip()
        self.enfoquedos = self.enfoquedos.strip()
        self.enfoquetres = self.enfoquetres.strip()
        self.recursos = self.recursos.strip()
        self.evaluacion = self.evaluacion.strip()
        super(SilaboSemanal, self).save(*args, **kwargs)


class DetalleSilaboSemanalTema(models.Model):
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name=u'silabo semana')
    plananaliticotema = models.ForeignKey(PlanAnaliticoTema, on_delete=models.CASCADE, blank=True, null=True, verbose_name=u"Tema")
    objetivoaprendizaje = models.TextField(default="",verbose_name=u"Observacion Tecnica")

    def __str__(self):
        return u'%s' % self.plananaliticotema.descripcion

    class Meta:
        unique_together = ('silabosemanal', 'plananaliticotema',)
#
#
class DetalleSilaboSemanalSubTema(models.Model):
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name=u'silabo semana')
    plananaliticosubtema = models.ForeignKey(PlanAnaliticoSubTema, on_delete=models.CASCADE, blank=True, null=True, verbose_name=u"SubTema")

    def __str__(self):
        return u'%s' % self.plananaliticosubtema.descripcion

    class Meta:
        unique_together = ('silabosemanal', 'plananaliticosubtema',)

#
class RecursosDidacticosSemanal(models.Model):
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, blank=True, null=True, verbose_name=u'Sílabo semanal')
    descripcion = models.CharField(max_length=250, verbose_name=u"Descripcion Corta")
    link = models.TextField(verbose_name=u"Link")

    def __str__(self):
        return u'%s' % self.descripcion

    class Meta:
        unique_together = ('silabosemanal', 'descripcion',)


TIPO_ACTIVIDADSEMANAL = (
    (1, u'CREACION POR SILABO'),
    (2, u'CREACION POR RECURSO SILABO')
)

TIPO_RECURSO = (
    (1, u'TAREA'),
    (2, u'TALLER'),
    (3, u'PROYECTO DE INVESTIGACIÓN'),
    (4, u'ANÁLISIS DE CASOS'),
)


class EvaluacionAprendizajeSilaboSemanal(models.Model):
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name=u'silabo semana')
    tiporecurso = models.IntegerField(choices=TIPO_RECURSO, default=1, verbose_name=u'Tipo de recurso')
    numactividad = models.IntegerField(default=0, verbose_name=u'Numero actividad por semana')

    def __str__(self):
        return u'%s' % self.silabosemanal


TIPO_MATERIALADICIONAL = (
    (1, u"FICHERO"),
    (2, u"URL"),
)

TIPO_RECURSO_VIDEO = (
    (0, u"--SELECCIONE--"),
    (1, u"CLASE MAGISTRAL"),
    (2, u"CLASE NORMAL"),
)


TIPO_GRABACION = (
    (0, u"--SELECCIONE--"),
    (1, u"GRABACIÓN PROPIA"),
    (2, u"GRABACIÓN EN ESTUDIO"),
)


ESTADO_RECURSO = (
    (0, u"--SELECCIONE--"),
    (1, u"GRABACIÓN PROPIA"),
    (2, u"GRABACIÓN EN ESTUDIO"),
)

class EstadoModel(models.Model):
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Nombre de la table que se usa para los estados')

    class Meta:
        verbose_name = u"Estado Model"
        verbose_name_plural = u"Estados Models"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre=self.nombre.strip()
        super(EstadoModel, self).save(*args, **kwargs)

class Estado(models.Model):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    colorestado = models.CharField(default='', max_length=30, verbose_name=u'Color estado')
    estadomodel = models.ForeignKey(EstadoModel, on_delete=models.CASCADE, blank=True, null=True, verbose_name='Estado')
    order = models.IntegerField(default=0, verbose_name=u'Order')
    editan = models.BooleanField(default=False, verbose_name=u'Solo editan o eliminan si este valor esta True')
    migramoodle = models.BooleanField(default=False, verbose_name=u'LOs estados con true podran migrar a moodle')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Estado"
        verbose_name_plural = u"Estados"
        ordering = ['nombre']
        unique_together = ('nombre', 'estadomodel')

    def save(self, *args, **kwargs):
        self.nombre=self.nombre.strip()
        super(Estado, self).save(*args, **kwargs)


class TipoRecurso(models.Model):
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    activo = models.BooleanField(default=False, verbose_name=u'Activo')

    class Meta:
        verbose_name = u"Tipo de recurso"
        verbose_name_plural = u"Tipos de recursos"
        ordering = ['nombre']
        unique_together = ('nombre',)

    def save(self, *args, **kwargs):
        self.nombre=self.nombre.strip()
        super(TipoRecurso, self).save(*args, **kwargs)


class DiapositivaSilaboSemanal(models.Model):
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name='silabo semanal')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, default=1, verbose_name='Estado')
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    descripcion = models.TextField(default='', verbose_name=u'Descripción')
    archivodiapositiva = models.FileField(upload_to='archivodiapositivasilabo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo Tarea')
    url = models.CharField(default='', blank=True, null=True, max_length=300, verbose_name=u"Link")
    tipomaterial = models.IntegerField(choices=TIPO_MATERIALADICIONAL, verbose_name=u'Tipo de material')
    id_recurso_moodle = models.IntegerField(default=0, verbose_name=u'id de presentacion en moodle')
    migrado = models.BooleanField(default=False, verbose_name=u'Recurso migrado')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')
    fecha_modificacion = models.DateTimeField(verbose_name=u'Fecha modificación')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Recursos de presentación"
        verbose_name_plural = u"Recursos de presentaciones"
        ordering = ['nombre',]
        unique_together = ('silabosemanal', 'nombre')

    def historial_aprobacion_save(self, idpersona, observacion=u'Ingreso una nueva presentación'):
        historial = HistorialaprobacionDiapositiva(
            diapositiva_id=self.id,
            estado_id=self.estado_id,
            persona_id=idpersona,
            observacion=observacion
        )
        historial.save()

    def save(self, *args, **kwargs):
        self.nombre=self.nombre.strip()
        self.descripcion=self.descripcion.strip()
        if self.url:
            self.url=self.url.strip()
        self.fecha_modificacion = datetime.now()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(DiapositivaSilaboSemanal, self).save(*args, **kwargs)


class HistorialaprobacionDiapositiva(models.Model):
    diapositiva = models.ForeignKey(DiapositivaSilaboSemanal, on_delete=models.CASCADE, verbose_name='Diapositiva')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, verbose_name='Estado')
    observacion = models.TextField(default='', verbose_name=u'Observación')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, verbose_name='Persona')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')

    def __str__(self):
        return u'%s - %s' % (self.diapositiva, self.estado)

    class Meta:
        verbose_name = u"Historial de aprobación de diapositiva"
        verbose_name_plural = u"Historial de aprobación de diapositiva"
        ordering = ['diapositiva', 'estado']

    def save(self, *args, **kwargs):
        self.observacion=self.observacion.strip()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(HistorialaprobacionDiapositiva, self).save(*args, **kwargs)


class VideoMagistralSilaboSemanal(models.Model):
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name='silabo semanal')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, default=1, verbose_name='Estado')
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    descripcion = models.TextField(default='', verbose_name=u'Descripción')
    archivovideo = models.FileField(upload_to='archivovideomagistral/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo Video Magistra')
    url = models.CharField(default='', blank=True, null=True, max_length=300, verbose_name=u"Link")
    tipomaterial = models.IntegerField(choices=TIPO_MATERIALADICIONAL, verbose_name=u'Tipo de material')
    tipograbacion = models.IntegerField(choices=TIPO_GRABACION, default=0, verbose_name=u'Tipo de grabación')
    tipovideo = models.IntegerField(choices=TIPO_RECURSO_VIDEO, default=0,verbose_name=u'Tipo de video')
    id_recurso_moodle = models.IntegerField(default=0, verbose_name=u'id de video magistral en moodle')
    migrado = models.BooleanField(default=False, verbose_name=u'Recurso migrado')
    validado = models.BooleanField(default=True, verbose_name=u'Presentación ha sido validada por director carrera')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')
    fecha_modificacion = models.DateTimeField(verbose_name=u'Fecha modificación')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Recurso de Videos magistral"
        verbose_name_plural = u"Recurso de Videos magistrales"
        ordering = ['silabosemanal', 'nombre']
        unique_together = ('silabosemanal', 'nombre')

    def historial_aprobacion_save(self, idpersona, observacion=u'Nuevo recurso de video magistral'):
        historial = HistorialaprobacionVideoMagistral(
            material_id=self.id,
            estado_id=self.estado_id,
            persona_id=idpersona,
            observacion=observacion
        )
        historial.save()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip()
        self.descripcion = self.descripcion.strip()
        if self.url:
            self.url = self.url.strip()
        self.fecha_modificacion = datetime.now()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(VideoMagistralSilaboSemanal, self).save(*args, **kwargs)


class HistorialaprobacionVideoMagistral(models.Model):
    material = models.ForeignKey(VideoMagistralSilaboSemanal, on_delete=models.CASCADE, verbose_name='Material')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, verbose_name='Estado')
    observacion = models.TextField(default='', verbose_name=u'Observación')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, verbose_name='Persona')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')

    def __str__(self):
        return u'%s - %s' % (self.material, self.estado)

    class Meta:
        verbose_name = u"Historial de aprobación de videos magistral"
        verbose_name_plural = u"Historial de aprobación de videos magistrales"
        ordering = ['material', 'estado']

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.strip()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(HistorialaprobacionVideoMagistral, self).save(*args, **kwargs)


class CompendioSilaboSemanal(models.Model):
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name='silabo semanal')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, default=1, verbose_name='Estado')
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    descripcion = models.TextField(default='', verbose_name=u'Descripción')
    archivocompendio = models.FileField(upload_to='archivocompendio/%Y/%m/%d', verbose_name=u'Archivo Compendio')
    archivoplagio = models.FileField(upload_to='archivoplagio/%Y/%m/%d', verbose_name=u'Archivo Plagio')
    porcentaje = models.FloatField(default=0.00)
    id_recurso_moodle = models.IntegerField(default=0, verbose_name=u'id_moodle')
    migrado = models.BooleanField(default=False, verbose_name=u'Recurso migrado')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')
    fecha_modificacion = models.DateTimeField(verbose_name=u'Fecha modificación')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Compendio semanal"
        verbose_name_plural = u"Compendio semanales"
        ordering = ['nombre', 'estado']
        unique_together = ('silabosemanal', 'nombre')

    def historial_aprobacion_save(self, idpersona, observacion=u'Nuevo recurso de compendio'):
        historial = HistorialaprobacionCompendio(
            compendio_id=self.id,
            estado_id=self.estado_id,
            persona_id=idpersona,
            observacion=observacion
        )
        historial.save()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip()
        self.descripcion = self.descripcion.strip()
        self.fecha_modificacion = datetime.now()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(CompendioSilaboSemanal, self).save(*args, **kwargs)


class HistorialaprobacionCompendio(models.Model):
    compendio = models.ForeignKey(CompendioSilaboSemanal, on_delete=models.CASCADE, verbose_name='Compendio')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, verbose_name='Estado')
    observacion = models.TextField(default='', verbose_name=u'Observación')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, verbose_name='Persona')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')

    def __str__(self):
        return u'%s - %s' % (self.compendio, self.estado)

    class Meta:
        verbose_name = u"Historial de aprobación de compendio"
        verbose_name_plural = u"Historial de aprobación de compendios"
        ordering = ['compendio', 'estado']

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.strip()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(HistorialaprobacionCompendio, self).save(*args, **kwargs)


class GuiaEstudianteSilaboSemanal(models.Model):
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name='silabo semanal')
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, default=1, verbose_name='Estado')
    objetivo = models.TextField(default='', verbose_name=u'Objetivo')
    archivoguiaestudiante = models.FileField(upload_to='archivoguiaestudiosemanal/%Y/%m/%d', verbose_name=u'Archivo')
    id_recurso_moodle = models.IntegerField(default=0, verbose_name=u'id moodle guia del estudiante')
    migrado = models.BooleanField(default=False, verbose_name=u'Recurso migrado')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')
    fecha_modificacion = models.DateTimeField(verbose_name=u'Fecha modificación')

    def __str__(self):
        return u'%s - %s' % (self.nombre, self.estado)

    class Meta:
        verbose_name = u"Guía de estudio"
        verbose_name_plural = u"Guias de estudios"
        ordering = ['nombre', 'estado']
        unique_together = ('silabosemanal', 'nombre')

    def historial_aprobacion_save(self, idpersona, observacion=u'Nuevo guía de estudio'):
        historial = HistorialaprobacionGuiaEstudiante(
            guiaestudiante_id=self.id,
            estado_id=self.estado_id,
            persona_id=idpersona,
            observacion=observacion
        )
        historial.save()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip()
        self.objetivo = self.objetivo.strip()
        self.fecha_modificacion = datetime.now()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(GuiaEstudianteSilaboSemanal, self).save(*args, **kwargs)


class HistorialaprobacionGuiaEstudiante(models.Model):
    guiaestudiante = models.ForeignKey(GuiaEstudianteSilaboSemanal, on_delete=models.CASCADE, verbose_name='Guia estudiante')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, verbose_name='Estado')
    observacion = models.TextField(default='', verbose_name=u'Observación')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, verbose_name='Persona')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')

    def __str__(self):
        return u'%s - %s' % (self.guiaestudiante, self.estado)

    class Meta:
        verbose_name = u"Historial de aprobación de guia del estudiante"
        verbose_name_plural = u"Historial de aprobación de guias del estudiante"
        ordering = ['guiaestudiante', 'estado']

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.strip()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(HistorialaprobacionGuiaEstudiante, self).save(*args, **kwargs)


TIPO_MATERIALCOMPLEMENTARIO = (
    (0, u"--SELECCIONE--"),
    (1, u"LIBRO DIGITAL/ELECTRÓNICO"),
    (2, u"AUDIOLIBRO"),
    (3, u"VIDEO"),
    (4, u"CURSO"),
    (5, u"PODCAST"),
    (6, u"RESUMEN"),
    (7, u"REVISTA/ARTÍCULO"),
    (8, u"PERÍODICO"),
    (9, u"OTRO"),
)


class MaterialAdicionalSilaboSemanal(models.Model):
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name='silabo semanal')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, default=1, verbose_name='Estado')
    tipomaterial = models.IntegerField(choices=TIPO_MATERIALADICIONAL,  verbose_name=u'Tipo de foro')
    tipomaterialcomplementario = models.IntegerField(choices=TIPO_MATERIALCOMPLEMENTARIO, verbose_name=u'Tipo de foro')
    nombre = models.CharField(default='', max_length=300, verbose_name=u'Nombre')
    descripcion = models.TextField(default='', verbose_name=u'Descripción')
    testourl = models.TextField(default='', verbose_name=u'Texto url')
    archivomaterial = models.FileField(upload_to='archivomateria/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo')
    idmaterialesmoodle = models.IntegerField(default=0, blank=True, null=True, verbose_name=u'id_moodle')
    migrado = models.BooleanField(default=False, verbose_name=u'Recurso migrado')

    fecha_creacion = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha creación')
    fecha_modificacion = models.DateTimeField(blank=True, null=True, verbose_name=u'Fecha modificación')

    def __str__(self):
        return u'%s' % self.descripcion


class HistorialaprobacionMaterial(models.Model):
    material = models.ForeignKey(MaterialAdicionalSilaboSemanal, on_delete=models.CASCADE, verbose_name='Material')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, verbose_name='Estado')
    observacion = models.TextField(default='', verbose_name=u'Observación')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, verbose_name='Persona')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')

    def __str__(self):
        return u'%s - %s' % (self.material, self.estado)

    class Meta:
        verbose_name = u"Historial de aprobación de material"
        verbose_name_plural = u"Historial de aprobación de materialaes"
        ordering = ['material', 'estado']

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.strip()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(HistorialaprobacionMaterial, self).save(*args, **kwargs)


TIPO_FORO = (
    (1, u"PREGUNTA Y RESPUESTA"),
    (2, u"DEBATE SENCILLO"),
    (3, u"CADA PERSONA PLANTEA UN TEMA"),
)


TIPO_CONSOLIDACIONFORO = (
    (1, u"PROMEDIO DE CALIFICACIONES"),
    (2, u"CALIFICACIÓN MÁXIMA"),
    (3, u"NO HAY CALIFICACIÓN"),
)


class ForoSilaboSemanal(models.Model):
    detallemodelo = models.ForeignKey(DetalleModeloEvaluativo, on_delete=models.CASCADE, verbose_name='silabo semanal')
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name='silabo semanal')
    # tiporecurso = models.ForeignKey('sga.TipoRecurso', on_delete=models.CASCADE, blank=True, null=True, verbose_name=u'Tipo de recurso')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, verbose_name='Estado')
    tipoforo = models.IntegerField(choices=TIPO_FORO, default=0, verbose_name=u'Tipo de foro')
    tipoconsolidacion = models.IntegerField(choices=TIPO_CONSOLIDACIONFORO, default=0, verbose_name=u'Tipo de consolidación')
    nombre = models.CharField(default='', max_length=500, verbose_name=u'Nombre')
    objetivo = models.TextField(default='', verbose_name=u'Objetivo')
    instruccion = models.TextField(default='', verbose_name=u'Instrucción')
    recomendacion = models.TextField(default='', verbose_name=u'Recomendación')
    rubrica = models.TextField(default='', verbose_name=u'Rúbrica')
    archivorubrica = models.FileField(upload_to='archivorubricaforosilabo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo rubrica foro')
    archivoforo = models.FileField(upload_to='archivoforosilabo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo foro')
    desde = models.DateTimeField(verbose_name=u'fecha desde')
    hasta = models.DateTimeField(verbose_name=u'fecha hasta')
    calificar = models.BooleanField(default=False, verbose_name=u'foro calificado')
    id_foro_moodle = models.IntegerField(default=0, verbose_name=u'id_moodle')
    migrado = models.BooleanField(default=False, verbose_name=u'Recurso migrado')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')
    fecha_modificacion = models.DateTimeField(verbose_name=u'Fecha modificación')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Foro"
        verbose_name_plural = u"Foros"
        ordering = ['nombre']
        unique_together = ('detallemodelo', 'silabosemanal','nombre')

    def historial_aprobacion_save(self, idpersona, observacion=u'Nuevo foro'):
        historial = HistorialaprobacionForo(
            foro_id=self.id,
            estado_id=self.estado_id,
            persona_id=idpersona,
            observacion=observacion
        )
        historial.save()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip()
        self.objetivo = self.objetivo.strip()
        self.instruccion = self.instruccion.strip()
        self.recomendacion = self.recomendacion.strip()
        self.fecha_modificacion = datetime.now()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(ForoSilaboSemanal, self).save(*args, **kwargs)


class HistorialaprobacionForo(models.Model):
    foro = models.ForeignKey(ForoSilaboSemanal, on_delete=models.CASCADE, verbose_name='Foro')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, verbose_name='Estado')
    observacion = models.TextField(default='', verbose_name=u'Observación')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, verbose_name='Persona')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')

    def __str__(self):
        return u'%s - %s' % (self.foro, self.estado)

    class Meta:
        verbose_name = u"Historial de aprobación de foro"
        verbose_name_plural = u"Historial de aprobación de foros"
        ordering = ['foro', 'estado']

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.strip()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(HistorialaprobacionForo, self).save(*args, **kwargs)



METODO_NAVEGACION = (
    (1, u'LIBRE'),
    (2, u'SECUENCIAL')
)


class TestSilaboSemanal(models.Model):
    detallemodelo = models.ForeignKey(DetalleModeloEvaluativo, on_delete=models.CASCADE, verbose_name='silabo semanal')
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name='silabo semanal')
    # tiporecurso = models.ForeignKey('sga.TipoRecurso', on_delete=models.CASCADE, blank=True, null=True, verbose_name=u'Tipo de recurso')
    nombre = models.CharField(default='', max_length=100, verbose_name=u'Nombre')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, verbose_name='Estado')
    instruccion = models.TextField(default='', verbose_name=u'Instrucción')
    recomendacion = models.TextField(default='', verbose_name=u'Recomendación')
    desde = models.DateTimeField(verbose_name=u'fecha desde')
    # horadesde = models.TimeField(verbose_name=u'Hora Desde', blank=True, null=True)
    hasta = models.DateTimeField(verbose_name=u'fecha hasta')
    # horahasta = models.TimeField(verbose_name=u'Hora Hasta', blank=True, null=True)
    vecesintento = models.IntegerField(default=1, verbose_name=u'Veces intento del test')
    tiempoduracion = models.IntegerField(default=60, verbose_name=u'Tiempo de duración del test')
    calificar = models.BooleanField(default=False, verbose_name=u'test calificado')
    # archivorubrica = models.FileField(upload_to='archivorubricatestsilabo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo rubrica test')
    # url = models.CharField(default='', max_length=400, verbose_name=u"Link temporal")
    id_test_moodle = models.IntegerField(default=0, verbose_name=u'id_moodle')
    navegacion = models.IntegerField(choices=METODO_NAVEGACION, default=1, verbose_name=u'metodo navegacion')
    migrado = models.BooleanField(default=False, verbose_name=u'Recurso migrado')
    # reportetestsilabo = models.FileField(upload_to='reportetestsilabo', max_length=8000, blank=True, null=True, verbose_name=u'Reporte test silabo')
    password = models.CharField(default='',max_length=50, blank=True, null=True, verbose_name=u'Clave de acceso')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')
    fecha_modificacion = models.DateTimeField(verbose_name=u'Fecha modificación')

    def __str__(self):
        return u'%s - %s' % (self.nombre, self.estado)

    class Meta:
        verbose_name = u"Test"
        verbose_name_plural = u"Tests"
        ordering = ['nombre']
        unique_together = ('detallemodelo', 'silabosemanal', 'nombre')


    def historial_aprobacion_save(self, idpersona, observacion=u'Nuevo test'):
        historial = HistorialaprobacionTest(test_id=self.id,
                                            estado_id=self.estado_id,
                                            persona_id=idpersona,
                                            observacion=observacion
                                            )
        historial.save()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip()
        self.instruccion = self.instruccion.strip()
        self.recomendacion = self.recomendacion.strip()
        self.fecha_modificacion = datetime.now()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(TestSilaboSemanal, self).save(*args, **kwargs)


class HistorialaprobacionTest(models.Model):
    test = models.ForeignKey(TestSilaboSemanal, on_delete=models.CASCADE, verbose_name='Test')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, verbose_name='Estado')
    observacion = models.TextField(default='', verbose_name=u'Observación')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, verbose_name='Persona')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')

    def __str__(self):
        return u'%s - %s' % (self.test, self.estado)

    class Meta:
        verbose_name = u"Historial de aprobación de test"
        verbose_name_plural = u"Historial de aprobación de tests"
        ordering = ['test', 'estado']

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.strip()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(HistorialaprobacionTest, self).save(*args, **kwargs)


class TareaSilaboSemanal(models.Model):
    detallemodelo = models.ForeignKey(DetalleModeloEvaluativo, on_delete=models.CASCADE, verbose_name='silabo semanal')
    silabosemanal = models.ForeignKey(SilaboSemanal, on_delete=models.CASCADE, verbose_name='silabo semanal')
    tiporecurso =  models.IntegerField(choices=TIPO_RECURSO, default=1, verbose_name=u'Tipo de recurso')
    estado = models.ForeignKey(Estado, on_delete=models.CASCADE, verbose_name='Estado')
    nombre = models.CharField(default='', max_length=500, verbose_name=u'Nombre')
    objetivo = models.TextField(default='', verbose_name=u'Objetivo')
    instruccion = models.TextField(default='', verbose_name=u'Instrucción')
    recomendacion = models.TextField(default='', verbose_name=u'Recomendación')
    rubrica = models.TextField(default='', verbose_name=u'Rúbrica')
    # rubricamoodle = models.ForeignKey(RubricaMoodle, on_delete=models.CASCADE, blank=True, null=True, verbose_name='Rubrica Moodle')
    archivorubrica = models.FileField(upload_to='archivorubricatareasilabo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo Tarea')
    archivotareasilabo = models.FileField(upload_to='archivotareasilabo/%Y/%m/%d', blank=True, null=True, verbose_name=u'Archivo Tarea')
    desde = models.DateTimeField(verbose_name=u'Desde')
    hasta = models.DateTimeField(verbose_name=u'Hasta')
    word = models.BooleanField(default=False, verbose_name=u'word')
    pdf = models.BooleanField(default=False, verbose_name=u'pdf')
    excel = models.BooleanField(default=False, verbose_name=u'excel')
    powerpoint = models.BooleanField(default=False, verbose_name=u'powerpoint')
    todos = models.BooleanField(default=False, verbose_name=u'todos')
    calificar = models.BooleanField(default=False, verbose_name=u'tarea calificada')
    id_tarea_moodle = models.IntegerField(default=0, verbose_name=u'id_moodle')
    migrado = models.BooleanField(default=False, verbose_name=u'Recurso migrado')
    actividad = models.ForeignKey(EvaluacionAprendizajeComponente, on_delete=models.CASCADE, blank=True, null=True, verbose_name='Actividad')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')
    fecha_modificacion = models.DateTimeField(verbose_name=u'Fecha modificación')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Tarea"
        verbose_name_plural = u"Tareass"
        ordering = ['nombre']
        unique_together = ('detallemodelo', 'silabosemanal', 'nombre')

    def historial_aprobacion_save(self, idpersona, observacion=u'Nuevo guía de estudio'):
        historial = HistorialaprobacionTarea(
            tarea_id=self.id,
            estado_id=self.estado_id,
            persona_id=idpersona,
            observacion=observacion
        )
        historial.save()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip()
        self.objetivo = self.objetivo.strip()
        self.instruccion = self.instruccion.strip()
        self.recomendacion = self.recomendacion.strip()
        self.fecha_modificacion = datetime.now()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(TareaSilaboSemanal, self).save(*args, **kwargs)


class HistorialaprobacionTarea(models.Model):
    tarea = models.ForeignKey(TareaSilaboSemanal, on_delete=models.CASCADE, verbose_name='Tarea')
    estado = models.ForeignKey(Estado, verbose_name='Estado', on_delete=models.CASCADE)
    observacion = models.TextField(default='', verbose_name=u'Observación')
    persona = models.ForeignKey(Persona, on_delete=models.CASCADE, verbose_name='Persona')
    fecha_creacion = models.DateTimeField(verbose_name=u'Fecha creación')

    def __str__(self):
        return u'%s - %s' % (self.tarea, self.estado)

    class Meta:
        verbose_name = u"Historial de aprobación de tarea"
        verbose_name_plural = u"Historial de aprobación de tareas"
        ordering = ['tarea', 'estado']

    def save(self, *args, **kwargs):
        self.observacion = self.observacion.strip()
        if not self.id:
            self.fecha_creacion = datetime.now()
        super(HistorialaprobacionTarea, self).save(*args, **kwargs)


TIPO_CRITERIO_ACTIVIDAD = (
    (1, u'ADMINISTRATIVAS'),
    (2, u'CLASES'),
    (3, u'TUTORIAS'),
    (4, u'VINCULACION'),
    (5, u'INVESTIGACION')
)

# Creacion de criterios de actividaacademicas

TIPO_CRITERIO = (
    (1, u'ADMINISTRATIVAS'),
    (2, u'CLASES'),
    (3, u'TUTORIAS'),
    (4, u'VINCULACION'),
    (5, u'INVESTIGACION')
)

class Criterio(models.Model):
    nombre = models.CharField(default='', max_length=500, verbose_name=u"Nombre")
    dedicacion = models.ForeignKey(TiempoDedicacionDocente, on_delete=models.CASCADE, verbose_name=u"Dedicación docente")
    tipocriterio= models.IntegerField(choices=TIPO_CRITERIO, default=1, verbose_name=u'Tipo Criterio')

    def __str__(self):
        return u'%s' % self.nombre

    class Meta:
        verbose_name = u"Criterio de docencia"
        verbose_name_plural = u"Criterios de docencia"
        ordering = ['nombre']
        unique_together = ('nombre', 'dedicacion',)

    def en_uso(self):
        return self.criterioperiodo_set.values("id").exists()

    def save(self, *args, **kwargs):
        self.nombre = self.nombre.strip()
        super(Criterio, self).save(*args, **kwargs)
#
#
class CriterioPeriodo(models.Model):
    criterio = models.ForeignKey(Criterio, on_delete=models.CASCADE, verbose_name=u'Criterio')
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE, verbose_name=u'Periodo')
    tipocriterio = models.IntegerField(choices=TIPO_CRITERIO, default=1, verbose_name=u'Tipo Criterio')
    minimo = models.FloatField(default=0)
    maximo = models.FloatField(default=0)

    def __str__(self):
        return u'%s' % self.criterio

    class Meta:
        verbose_name = u"Criterio del periodo"
        verbose_name_plural = u"Criterios del de periodo "
        ordering = ['criterio']
        unique_together = ('criterio', 'periodo',)

    def save(self, *args, **kwargs):
        super(CriterioPeriodo, self).save(*args, **kwargs)


class ProfesorDistributivoHoras(models.Model):
    periodo = models.ForeignKey(Periodo, on_delete=models.CASCADE, verbose_name=u"Período")
    profesor = models.ForeignKey(Profesor, on_delete=models.CASCADE, verbose_name=u'Profesor')
    dedicacion = models.ForeignKey(TiempoDedicacionDocente, on_delete=models.CASCADE, blank=True, null=True, verbose_name=u"Dedicación")
    horasdocencia = models.FloatField(default=0, verbose_name=u'Horas docencia')
    horasvinculacion = models.FloatField(default=0, verbose_name=u'Horas vinculación')
    horasinvestigacion = models.FloatField(default=0, verbose_name=u'Horas investigación')
    horasgestion = models.FloatField(default=0, verbose_name=u'Horas gestion')
    categoria = models.ForeignKey(CategorizacionDocente, on_delete=models.CASCADE, null=True, blank=True, verbose_name=u"Categoria")
    coordinacion = models.ForeignKey(Coordinacion, on_delete=models.CASCADE, null=True, blank=True, verbose_name=u"Coordinación")
    carrera = models.ForeignKey(Carrera, on_delete=models.CASCADE, null=True, blank=True, verbose_name=u"Carrera")
    observacion = models.TextField(default='', verbose_name=u'Observación')
    activo = models.BooleanField(default=True, verbose_name=u'Activo')
    fechainiciocontrato = models.DateField(blank=True, null=True, verbose_name=u'Fecha inicio de contrato')
    fechafincontrato = models.DateField(blank=True, null=True, verbose_name=u'Fecha fin de contrato')

    def __str__(self):
        return u'%s' % self.profesor

    class Meta:
        ordering = ['periodo', 'profesor']
        unique_together = ('periodo', 'profesor')
